{"version":3,"sources":["webpack:///./node_modules/angular/index.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/url/urlService.js","webpack:///./node_modules/angular-ui-router/lib/directives/stateDirectives.js","webpack:///./node_modules/angular-ui-router/lib/statebuilders/onEnterExitRetain.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/interface.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/vanilla/hashLocationService.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/vanilla/baseLocationService.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/transition/interface.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/transition/transitionHook.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/hooks/updateGlobals.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/url/index.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/router.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/resolve/index.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/state/stateMatcher.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/common/strings.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/common/glob.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/vanilla/browserLocationConfig.js","webpack:///./node_modules/angular/angular.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/transition/hookBuilder.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/common/queue.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/common/hof.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/resolve/resolvable.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/url/urlRule.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/vanilla/utils.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/state/stateRegistry.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/url/urlRouter.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/vanilla.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/common/trace.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/common/coreservices.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/state/stateService.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/vanilla/injector.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/params/stateParams.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/vanilla/pushStateLocationService.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/hooks/ignoredTransition.js","webpack:///./node_modules/angular-ui-router/lib/index.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/transition/transition.js","webpack:///./node_modules/angular-ui-router/lib/services.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/globals.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/url/urlMatcher.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/hooks/coreResolvables.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/resolve/interface.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/index.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/transition/transitionService.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/state/stateQueueManager.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/hooks/redirectTo.js","webpack:///./node_modules/angular-ui-router/lib/angular.js","webpack:///./node_modules/angular-ui-router/lib/injectables.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/params/param.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/url/urlMatcherFactory.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/common/index.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/hooks/onEnterExitRetain.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/path/pathFactory.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/params/index.js","webpack:///./node_modules/angular-ui-router/lib/urlRouterProvider.js","webpack:///./node_modules/angular-ui-router/lib/viewScroll.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/common/predicates.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/vanilla/memoryLocationService.js","webpack:///./node_modules/angular-ui-router/lib/templateFactory.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/transition/hookRegistry.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/hooks/resolve.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/vanilla/memoryLocationConfig.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/hooks/url.js","webpack:///./node_modules/angular-ui-router/lib/locationServices.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/vanilla/index.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/view/view.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/state/targetState.js","webpack:///./node_modules/angular-ui-router/lib/stateFilters.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/state/index.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/view/index.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/transition/rejectFactory.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/resolve/resolveContext.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/transition/transitionEventType.js","webpack:///./node_modules/angular-ui-router/lib/statebuilders/views.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/params/paramType.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/state/stateBuilder.js","webpack:///./node_modules/angular-ui-router/lib/stateProvider.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/hooks/invalidTransition.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/vanilla/q.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/path/pathNode.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/transition/index.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/vanilla/plugins.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/path/index.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/common/common.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/params/paramTypes.js","webpack:///./node_modules/angular-ui-router/lib/directives/viewDirective.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/hooks/views.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/hooks/lazyLoad.js","webpack:///./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/state/stateObject.js"],"names":["__webpack_require__","module","exports","angular","Object","defineProperty","value","coreservices_1","common_1","makeStub","keys","reduce","acc","key","notImplemented","dispose","noop","locationServicesFns","locationConfigFns","umfFns","rulesFns","syncFns","UrlService","router","lateBind","this","rules","config","locationServices","locationService","createProxyFunctions","locationConfig","umf","urlMatcherFactory","urlRouter","prototype","url","newurl","replace","state","path","search","hash","onChange","callback","parts","sync","evt","listen","enabled","deferIntercept","defer","match","urlParts","locationServiceStub","locationConfigStub","uiSref","uiState","uiSrefActive","angular_1","core_1","parseStateRef","ref","parsed","paramsOnly","length","Error","paramExpr","stateContext","el","$uiView","parent","inheritedData","parse","tail","name","undefined","processedDef","$state","$element","def","current","uiStateOpts","extend","relative","$current","inherit","source","href","uiStateParams","getTypeInfo","isSvg","toString","call","prop","isForm","nodeName","attr","isAnchor","toUpperCase","clickable","clickHook","$timeout","type","getDef","e","button","which","target","ctrlKey","metaKey","shiftKey","transition","go","preventDefault","ignorePreventDefaultCount","cancel","bindEvents","element","scope","hookFn","events","isArray","on","_i","events_1","event_1","$on","off","events_2","event_2","$uiRouter","stateService","restrict","require","link","attrs","active","unlinkInfoFn","rawDef","update","$$addStateInfo","$set","uiSrefOpts","$eval","$watch","val","stateRegistry","onStatesChanged","transitionService","onSuccess","inputAttrs","watchDeregFns","forEach","field","$observe","expr","newval","$stateParams","$interpolate","controller","$scope","$attrs","activeEqClass","states","uiSrefActiveEq","updateAfterTransition","trans","promise","then","addState","stateName","stateParams","activeClass","stateInfo","get","params","push","removeFrom","splitClasses","str","split","filter","identity","getClasses","stateList","map","x","unnestR","allClasses","concat","uniqR","fuzzyClasses","includes","exactClasses","is","addClasses","removeClasses","cls","inArray","$evalAsync","className","addClass","removeClass","isObject","stateOrName","isString","newState","newParams","deregister","onStart","globals","ng","directive","services_1","getStateHookBuilder","hookName","parentFn","hook","pathname","resolveContext","ResolveContext","treeChanges","locals","getLocals","$state$","$transition$","services","$injector","invoke","UIRouterPluginBase","extendStatics","__extends","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__","constructor","create","utils_1","HashLocationService","_super","_this","window","addEventListener","_listener","_get","trimHashVal","_location","_set","title","removeEventListener","BaseLocationServices","predicates_1","fireAfterUpdate","_listeners","cb","parseUrl","getParams","location","_history","history","isDefined","evt_1","Event","buildUrl","deregAll","TransitionHookPhase","TransitionHookScope","interface_1","strings_1","hof_1","trace_1","rejectFactory_1","targetState_1","defaultOptions","traceData","bind","TransitionHook","registeredHook","options","isSuperseded","hookPhase","RUN","isActive","defaults","eventType","logError","err","defaultErrorHandler","invokeHook","_deregistered","notCurrent","getNotCurrentRejection","trace","traceHookInvocation","handleError","getErrorHandler","handleResult","result","getResultHandler","synchronous","isPromise","catch","Rejection","normalize","toPromise","handleHookResult","traceHookResult","aborted","TargetState","isTargetState","redirected","_disposed","$id","_aborted","superseded","event","context","fnToString","maxLength","chain","hooks","waitFor","prev","nextHook","$q","when","invokeHooks","doneCallback","idx","hookResult","remainingHooks","slice","runAllHooks","HANDLE_RESULT","LOG_REJECTED_RESULT","LOG_ERROR","error","REJECT_ERROR","silentRejection","THROW_ERROR","updateGlobalState","clearCurrentTransition","successfulTransitions","enqueue","$to","self","copy","priority","registerUpdateGlobalState","onCreate","__export","m","urlMatcherFactory_1","urlRouter_1","transitionService_1","view_1","stateRegistry_1","stateService_1","globals_1","urlService_1","_routerInstance","UIRouter","_disposables","viewService","ViewService","TransitionService","UIRouterGlobals","UrlMatcherFactory","UrlRouter","StateRegistry","StateService","urlService","_plugins","_pluginapi","_rootViewContext","root","disposable","isFunction","ignored","plugin","pluginInstance","getPlugin","pluginName","values","StateMatcher","_states","isRelative","indexOf","find","base","matchGlob","isStr","resolvePath","matches","__stateObjectCache","nameGlob","console","log","baseState","splitName","i","pathLength","relName","join","transition_1","resolvable_1","functionToString","fn","fnStr","namedFunctionMatch","toStr","fnName","substr","_fn","max","padString","kebobString","camelCase","$1","toLowerCase","stringifyPatternFn","stringifyPattern","isRejection","isRejectionPromise","pattern","not","isNull","_transitionRejection","Transition","Resolvable","isInjectable","stringify","o","seen","JSON","format","beforeAfterSubstr","char","splitOnDelim","delim","re","RegExp","joinNeighborsR","pushR","Glob","text","glob","regexpString","seg","regexp","test","exec","fromString","BrowserLocationConfig","_isHtml5","_baseHref","_hashPrefix","port","Number","protocol","host","html5Mode","hashPrefix","newprefix","baseHref","applyDocumentBaseHref","baseTags","document","getElementsByTagName","origin","minErrConfig","objectMaxDepth","errorHandlingConfig","isValidObjectMaxDepth","NaN","maxDepth","isNumber","minErr","ErrorConstructor","paramPrefix","code","arguments","template","message","templateArgs","sliceArgs","arg","toDebugString","index","encodeURIComponent","REGEX_STRING_REGEXP","VALIDITY_STATE_PROPERTY","lowercase","string","uppercase","s","ch","String","fromCharCode","charCodeAt","msie","jqLite","jQuery","angularModule","splice","getPrototypeOf","ngMinErr","uid","isArrayLike","obj","isWindow","item","iterator","isPrimitive","isBlankObject","forEachSorted","sort","reverseParams","iteratorFn","nextUid","setHashKey","h","$$hashKey","baseExtend","dst","objs","deep","ii","j","jj","src","isDate","Date","valueOf","isRegExp","cloneNode","isElement","clone","merge","toInt","parseInt","documentMode","isNumberNaN","isNaN","num","extra","$","valueFn","hasCustomToString","isUndefined","$inject","isError","isScope","isBoolean","isPromiseLike","TYPED_ARRAY_REGEXP","trim","escapeForRegexp","node","nodeName_","array","arrayRemove","destination","stackSource","stackDest","copyRecurse","copyElement","needsRecurse","buffer","byteOffset","copied","ArrayBuffer","byteLength","Uint8Array","set","lastIndex","copyType","simpleCompare","a","equals","o1","o2","keySet","t1","getTime","createMap","charAt","csp","ngCspElement","querySelector","ngCspAttribute","getAttribute","noUnsafeEval","noInlineStyle","Function","jq","name_","prefix","ngAttrPrefixes","array1","array2","args","startIndex","curryArgs","apply","toJsonReplacer","toJson","pretty","fromJson","json","ALL_COLONS","timezoneToOffset","timezone","fallback","requestedTimezoneOffset","convertTimezoneToLocal","date","reverse","minutes","dateTimezoneOffset","getTimezoneOffset","timezoneOffset","setMinutes","getMinutes","startingTag","empty","elemHtml","append","html","nodeType","NODE_TYPE_TEXT","tryDecodeURIComponent","decodeURIComponent","parseKeyValue","keyValue","splitPoint","substring","toKeyValue","arrayValue","encodeUriQuery","encodeUriSegment","pctEncodeSpaces","isAutoBootstrapAllowed","script","currentScript","HTMLScriptElement","SVGScriptElement","attributes","getNamedItem","every","createElement","allowAutoBootstrap","angularInit","bootstrap","appElement","hasAttribute","candidate","strictDi","ngAttr","getNgAttribute","modules","doBootstrap","injector","tag","unshift","$provide","debugInfoEnabled","$compileProvider","createInjector","compile","$apply","data","NG_ENABLE_DEBUG_INFO","NG_DEFER_BOOTSTRAP","resumeBootstrap","extraModules","resumeDeferredBootstrap","reloadWithDebugInfo","reload","getTestability","rootElement","SNAKE_CASE_REGEXP","snake_case","separator","letter","pos","bindJQueryFired","assertArg","reason","assertArgFn","acceptArrayAnnotation","assertNotHasOwnProperty","getter","bindFnToScope","lastInstance","len","getBlockNodes","nodes","blockNodes","endNode","nextSibling","NODE_TYPE_ELEMENT","NODE_TYPE_COMMENT","NODE_TYPE_DOCUMENT","NODE_TYPE_DOCUMENT_FRAGMENT","shallowCopy","version","full","major","minor","dot","codeName","JQLite","expando","jqCache","cache","jqId","_data","DASH_LOWERCASE_REGEXP","MS_HACK_REGEXP","MOUSE_EVENT_MAP","mouseleave","mouseenter","jqLiteMinErr","fnCamelCaseReplace","all","kebabToCamel","SINGLE_TAG_REGEXP","HTML_REGEXP","TAG_NAME_REGEXP","XHTML_TAG_REGEXP","wrapMap","option","thead","col","tr","td","_default","jqLiteIsTextNode","jqLiteAcceptsData","jqLiteBuildFragment","tmp","wrap","fragment","createDocumentFragment","createTextNode","appendChild","innerHTML","lastChild","childNodes","firstChild","textContent","optgroup","tbody","tfoot","colgroup","caption","th","jqLiteContains","Node","contains","compareDocumentPosition","argIsString","jqLiteAddNodes","jqLiteReady","jqLiteClone","jqLiteDealoc","onlyDescendants","cleanData","querySelectorAll","jqLiteOff","unsupported","expandoStore","jqLiteExpandoStore","handle","removeHandler","listenerFns","jqLiteRemoveData","expandoId","ng339","$destroy","createIfNecessary","jqLiteData","isSimpleSetter","isSimpleGetter","massGetter","jqLiteHasClass","selector","jqLiteRemoveClass","cssClasses","setAttribute","existingClasses","newClasses","cssClass","jqLiteAddClass","elements","jqLiteController","jqLiteInheritedData","documentElement","names","parentNode","jqLiteEmpty","removeChild","jqLiteRemove","keepData","trigger","readyState","setTimeout","JQLitePrototype","ready","eq","BOOLEAN_ATTR","BOOLEAN_ELEMENTS","ALIASED_ATTR","ngMinlength","ngMaxlength","ngMin","ngMax","ngPattern","ngStep","getBooleanAttrName","booleanAttr","defaultHandlerWrapper","handler","specialMouseHandlerWrapper","related","relatedTarget","$$jqLiteProvider","$get","hasClass","classes","hashKey","nextUidFn","objType","removeData","hasData","isolateScope","removeAttr","removeAttribute","css","style","ret","lowercasedName","isBooleanAttr","getText","$dv","multiple","selected","arg1","arg2","nodeCount","Math","min","nodeValue","eventHandler","isDefaultPrevented","defaultPrevented","eventFns","eventFnsLength","immediatePropagationStopped","originalStopImmediatePropagation","stopImmediatePropagation","stopPropagation","isImmediatePropagationStopped","handlerWrapper","specialHandlerWrapper","elem","types","addHandler","noEventListener","one","onFn","replaceWith","replaceNode","insertBefore","replaceChild","children","contents","contentDocument","child","prepend","wrapNode","wrapper","remove","detach","after","newElement","toggleClass","condition","classCondition","next","nextElementSibling","triggerHandler","extraParameters","dummyEvent","eventFnsCopy","handlerArgs","eventName","arg3","unbind","nanKey","NgMapShim","_keys","_values","_lastKey","_lastIndex","_idx","_transformKey","delete","NgMap","$$MapProvider","ARROW_ARG","FN_ARGS","FN_ARG_SPLIT","FN_ARG","STRIP_COMMENTS","$injectorMinErr","stringifyFn","extractArgs","fnText","modulesToLoad","INSTANTIATING","providerSuffix","loadedModules","providerCache","provider","supportObject","factory","service","instantiate","constant","instanceCache","decorator","serviceName","decorFn","origProvider","providerInjector","orig$get","origInstance","instanceInjector","$delegate","createInternalInjector","caller","protoInstanceInjector","runBlocks","loadModules","loadNewModules","mods","delegate","provider_","factoryFn","enforce","moduleFn","requires","_runBlocks","runInvokeQueue","_invokeQueue","_configBlocks","stack","queue","invokeArgs","getService","shift","injectionArgs","$$annotate","func","$$ngIsClass","isClass","Type","ctor","annotate","has","$AnchorScrollProvider","autoScrollingEnabled","disableAutoScrolling","$window","$location","$rootScope","scrollTo","scrollIntoView","offset","scroll","yOffset","getComputedStyle","position","getBoundingClientRect","bottom","getYOffset","elemTop","top","scrollBy","elm","list","getElementById","getElementsByName","some","newVal","oldVal","action","win","last","underscore","$animateMinErr","ELEMENT_NODE","mergeClasses","prepareAnimateOptions","$$CoreAnimateJsProvider","$$CoreAnimateQueueProvider","postDigestQueue","postDigestElements","$$AnimateRunner","pin","domOperation","add","classesAdded","classesRemoved","from","to","updateData","$$postDigest","handleCSSClassChanges","runner","complete","changed","existing","klass","toAdd","toRemove","status","$AnimateProvider","classNameFilter","customFilter","$$registeredAnimations","register","filterFn","expression","$$animateQueue","domInsert","parentElement","afterElement","afterNode","extractElementNode","previousElementSibling","end","enter","move","leave","addclass","setClass","animate","tempClasses","$$AnimateAsyncRunFactoryProvider","$$rAF","waitQueue","waitForTick","passed","$$AnimateRunnerFactoryProvider","$sniffer","$$animateAsyncRun","$$isDocumentHidden","AnimateRunner","setHost","rafTick","_doneCallbacks","_tick","_state","response","runners","count","onProgress","done","progress","getPromise","resolve","reject","resolveHandler","rejectHandler","finally","pause","resume","_resolve","$CoreAnimateCssProvider","initialOptions","$$prepared","cleanupStyles","closed","start","run","applyAnimationContents","$BrowserProvider","$log","$document","clearTimeout","pendingDeferIds","isMock","outstandingRequestCount","outstandingRequestCallbacks","completeOutstandingRequest","pop","$$completeOutstandingRequest","$$incOutstandingRequestCount","notifyWhenNoOutstandingRequests","cachedState","lastHistoryState","lastBrowserUrl","baseElement","pendingLocation","getCurrentState","cacheState","sameState","sameBase","stripHash","urlChangeListeners","urlChangeInit","cacheStateAndFireUrlChange","fireStateOrUrlChange","lastCachedState","prevLastHistoryState","listener","onUrlChange","$$applicationDestroyed","$$checkUrlChange","delay","timeoutId","deferId","$CacheFactoryProvider","caches","cacheFactory","cacheId","size","stats","id","capacity","MAX_VALUE","lruHash","freshEnd","staleEnd","put","refresh","lruEntry","n","removeAll","destroy","info","entry","nextEntry","prevEntry","$TemplateCacheProvider","$cacheFactory","$compileMinErr","_UNINITIALIZED_VALUE","$CompileProvider","$$sanitizeUriProvider","hasDirectives","Suffix","COMMENT_DIRECTIVE_REGEXP","CLASS_DIRECTIVE_REGEXP","ALL_OR_NOTHING_ATTRS","items","makeMap","REQUIRE_PREFIX_REGEXP","EVENT_HANDLER_ATTR_REGEXP","bindingCache","parseIsolateBindings","directiveName","isController","LOCAL_REGEXP","bindings","definition","scopeName","mode","collection","optional","attrName","parseDirectiveBindings","bindToController","registerDirective","directiveFactory","assertValidDirectiveName","$exceptionHandler","directives","getDirectiveRestrict","$$moduleName","component","registerComponent","makeInjectable","tElement","tAttrs","templateUrl","ddo","controllerAs","ident","CNTRL_REG","identifierForController","transclude","aHrefSanitizationWhitelist","imgSrcSanitizationWhitelist","preAssignBindingsEnabled","strictComponentBindingsEnabled","TTL","onChangesTtl","commentDirectivesEnabledConfig","commentDirectivesEnabled","cssClassDirectivesEnabledConfig","cssClassDirectivesEnabled","$templateRequest","$parse","$controller","$sce","$animate","$$sanitizeUri","onChangesQueue","SIMPLE_ATTR_NAME","specialAttrHolder","flushOnChangesQueue","errors","Attributes","attributesToCopy","l","$attr","$$element","safeAddClass","$normalize","directiveNormalize","$addClass","classVal","$removeClass","$updateClass","oldClasses","tokenDifference","writeAttr","booleanKey","aliasedKey","observer","trimmedSrcset","rawUris","nbrUrisWith2parts","floor","innerIdx","lastTuple","attribute","removeNamedItem","setNamedItem","setSpecialAttr","$$observers","listeners","$$inter","startSymbol","endSymbol","denormalizeTemplate","NG_ATTR_BINDING","MULTI_ELEMENT_DIR_RE","$$addBindingInfo","binding","$$addBindingClass","$$addScopeInfo","isolated","noTemplate","dataName","$$addScopeClass","$$createComment","comment","content","createComment","$compileNodes","transcludeFn","maxPriority","ignoreDirective","previousCompileContext","compositeLinkFn","compileNodes","namespace","cloneConnectFn","needsNewScope","$parent","$new","$linkNode","parentBoundTranscludeFn","transcludeControllers","futureParentElement","$$boundTransclude","wrapTemplate","controllerName","instance","nodeList","$rootElement","nodeLinkFn","childLinkFn","linkFnFound","nodeLinkFnFound","linkFns","notLiveList","mergeConsecutiveTextNodes","collectDirectives","applyDirectivesToNode","terminal","transcludeOnThisElement","templateOnThisElement","childScope","childBoundTranscludeFn","stableNodeList","nodeListLength","createBoundTranscludeFn","sibling","previousBoundTranscludeFn","boundTranscludeFn","transcludedScope","cloneFn","controllers","containingScope","$$transcluded","boundSlots","$$slots","slotName","interpolateFn","attrsMap","addDirective","nName","ngAttrName","isNgAttr","nAttrs","attrStartName","attrEndName","PREFIX_REGEXP","multiElementMatch","directiveIsMultiElement","addAttrInterpolateDirective","animVal","templateNode","templateNodeParent","hasCompileParent","expressions","collectCommentDirectives","byPriority","groupScan","attrStart","attrEnd","depth","groupElementsLinkFnWrapper","linkFn","compilationGenerator","eager","compiled","compileNode","templateAttrs","jqCollection","originalReplaceDirective","preLinkFns","postLinkFns","$template","directiveValue","terminalPriority","newScopeDirective","controllerDirectives","newIsolateScopeDirective","templateDirective","nonTlbTranscludeDirective","hasTranscludeDirective","hasTemplate","hasElementTranscludeDirective","$compileNode","replaceDirective","childTranscludeFn","didScanForMultipleTransclusion","mightHaveMultipleTransclusionError","$$start","$$end","assertNoDuplicate","$$tlb","candidateDirective","scanningIndex","$$parentNode","slots","slotMap","filledSlots","elementSelector","filled","$$isolateScope","$$newScope","removeComments","templateNamespace","newTemplateAttrs","templateDirectives","unprocessedDirectives","markDirectiveScope","mergeTemplateAttributes","compileTemplateUrl","$$originalDirective","addLinkFns","pre","post","cloneAndAnnotateFn","linkNode","controllerScope","elementControllers","scopeBindingInfo","cloneAttachFn","scopeToChild","slotTranscludeFn","isSlotFilled","controllerKey","$transclude","controllerInstance","setupControllers","$$isolateBindings","initializeDirectiveBindings","removeWatches","controllerDirective","$$bindings","bindingInfo","controllerResult","getControllers","$onChanges","initialChanges","$onInit","$doCheck","$onDestroy","invokeLinkFn","$postLink","inheritType","property","newScope","tDirectives","startAttrName","endAttrName","multiElement","srcAttr","dstAttr","afterTemplateNodeLinkFn","afterTemplateChildLinkFn","linkQueue","beforeTemplateCompileNode","origAsyncDirective","derivedSyncDirective","tempTemplateAttrs","beforeTemplateLinkNode","linkRootElement","$$destroyed","ignoreChildLinkFn","diff","what","previousDirective","wrapModuleNameIfDefined","moduleName","trustedContext","attrNormalizedName","HTML","RESOURCE_URL","getTrustedContext","mustHaveExpression","allOrNothing","newValue","$$scope","oldValue","elementsToRemove","newNode","firstElementToRemove","removeCount","j2","annotation","strictBindingsCheck","changes","removeWatchCollection","recordChanges","currentValue","previousValue","triggerOnChangesHook","SimpleChange","lastValue","parentGet","parentSet","compare","removeWatch","literal","assign","parentValueWatch","parentValue","$stateful","$watchCollection","deepWatch","initialValue","previous","isFirstChange","SPECIAL_CHARS_REGEXP","_","str1","str2","tokens1","tokens2","outer","token","jqNodes","$controllerMinErr","$ControllerProvider","allowGlobals","later","identifier","controllerPrototype","addIdentifier","$DocumentProvider","$$IsDocumentHiddenProvider","doc","hidden","changeListener","$ExceptionHandlerProvider","exception","cause","$$ForceReflowProvider","domNode","body","offsetWidth","APPLICATION_JSON","CONTENT_TYPE_APPLICATION_JSON","Content-Type","JSON_START","JSON_ENDS","[","{","JSON_PROTECTION_PREFIX","$httpMinErr","serializeValue","v","toISOString","$HttpParamSerializerProvider","$HttpParamSerializerJQLikeProvider","serialize","toSerialize","topLevel","defaultHttpResponseTransform","headers","tempData","contentType","hasJsonContentType","jsonStart","parseHeaders","fillInParsed","line","headerVal","headerKey","headersGetter","headersObj","transformData","fns","isSuccess","$HttpProvider","transformResponse","transformRequest","common","Accept","patch","xsrfCookieName","xsrfHeaderName","paramSerializer","jsonpCallbackParam","useApplyAsync","interceptorFactories","interceptors","$browser","$httpBackend","$$cookieReader","defaultCache","reversedInterceptors","$http","requestConfig","method","defHeaderName","lowercaseDefHeaderName","reqHeaderName","defHeaders","reqHeaders","defaultHeadersIteration","processedHeaders","headerFn","header","headerContent","mergeHeaders","requestInterceptors","responseInterceptors","interceptor","request","requestError","responseError","chainInterceptors","reqData","withCredentials","cachedResp","deferred","isJsonp","getTrustedResourceUrl","serializedParams","cbKey","sanitizeJsonpCallbackParam","pendingRequests","removePendingReq","resolvePromiseWithResult","resolvePromise","xsrfValue","urlIsSameOrigin","headersString","statusText","xhrStatus","resolveHttpPromise","$applyAsync","$$phase","timeout","responseType","createApplyHandlers","eventHandlers","uploadEventHandlers","applyHandlers","callEventHandler","sendReq","thenFn","rejectFn","resp","interceptorFactory","createShortMethods","createShortMethodsWithData","$xhrFactoryProvider","XMLHttpRequest","$HttpBackendProvider","$jsonpCallbacks","$xhrFactory","createXhr","$browserDefer","callbacks","rawDocument","callbackPath","createCallback","jsonpDone","async","wasCalled","jsonpReq","getResponse","completeRequest","removeCallback","xhr","open","setRequestHeader","onload","responseText","urlResolve","getAllResponseHeaders","onerror","onabort","ontimeout","upload","send","timeoutRequest","abort","createHttpBackend","$interpolateMinErr","$InterpolateProvider","startSymbolLength","endSymbolLength","escapedStartRegexp","escape","escapedEndRegexp","unescapeText","constantWatchDelegate","objectEquality","constantInterp","unwatch","exp","$$watchDelegate","endIndex","parseFns","textLength","expressionPositions","parseStringifyInterceptor","throwNoconcat","compute","getValue","getTrusted","interr","$watchGroup","oldValues","currValue","$IntervalProvider","$$q","intervals","interval","invokeApply","hasParams","setInterval","clearInterval","iteration","skipApply","$$intervalId","notify","markQExceptionHandled","$jsonpCallbacksProvider","callbackMap","callbackId","$$counter","called","PATH_MATCH","DEFAULT_PORTS","http","https","ftp","$locationMinErr","encodePath","segments","parseAbsoluteUrl","absoluteUrl","locationObj","parsedUrl","$$protocol","$$host","hostname","$$port","DOUBLE_SLASH_REGEX","parseAppUrl","prefixed","$$path","decodePath","$$search","$$hash","startsWith","stripBaseUrl","trimEmptyHash","LocationHtml5Url","appBase","appBaseNoFile","basePrefix","$$html5","$$parse","pathUrl","$$compose","$$url","$$absUrl","$$urlUpdatedByLocation","$$parseLinkUrl","relHref","appUrl","prevAppUrl","rewrittenUrl","LocationHashbangUrl","withoutHashUrl","withoutBaseUrl","firstPathSegmentMatch","windowsFilePathExp","removeWindowsDriveName","LocationHashbangInHtml5Url","locationPrototype","$$replace","absUrl","locationGetter","locationGetterSetter","paramValue","preprocess","$LocationProvider","requireBase","rewriteLinks","LocationMode","initialUrl","lastIndexOf","$$state","IGNORE_URI_REGEXP","setBrowserUrlWithFallback","oldUrl","oldState","absHref","initializing","newUrl","$broadcast","afterLocationChange","$digest","currentReplace","urlOrStateChanged","$LogProvider","debug","debugEnabled","flag","formatStackTrace","navigator","userAgent","consoleLog","warn","logFn","sourceURL","Location","$parseMinErr","objectValueOf","getStringValue","OPERATORS","operator","ESCAPE","f","r","t","'","\"","Lexer","lex","tokens","readString","peek","readNumber","isIdentifierStart","peekMultichar","readIdent","isWhitespace","ch2","ch3","op1","op2","op3","throwError","chars","codePointAt","isValidIdentifierStart","isIdentifierContinue","isValidIdentifierContinue","cp","cp1","cp2","isExpOperator","colStr","number","peekCh","quote","rawString","hex","AST","lexer","ifDefined","plusFn","Program","ExpressionStatement","AssignmentExpression","ConditionalExpression","LogicalExpression","BinaryExpression","UnaryExpression","CallExpression","MemberExpression","Identifier","Literal","ArrayExpression","Property","ObjectExpression","ThisExpression","LocalsExpression","NGValueParameter","ast","program","expressionStatement","expect","filterChain","left","assignment","ternary","isAssignable","right","alternate","consequent","logicalOR","consume","logicalAND","equality","relational","additive","multiplicative","unary","argument","primary","arrayDeclaration","object","selfReferential","literals","callee","parseArguments","computed","baseExpression","peekToken","properties","kind","msg","e1","e2","e3","e4","peekAhead","$locals","PURITY_ABSOLUTE","PURITY_RELATIVE","findConstantAndWatchExpressions","$filter","parentIsPure","allConstants","argsToWatch","isStatelessFilter","filterName","astIsPure","isPure","toWatch","getInputs","lastExpression","assignableAST","ASTCompiler","ASTInterpreter","Parser","astCompiler","getValueOf","$ParseProvider","identStart","identContinue","true","false","null","addLiteral","literalName","literalValue","setIdentifierFns","identifierStart","identifierContinue","$parseOptions","$$getAst","getAst","interceptorFn","parsedExpression","cacheKey","oneTime","oneTimeLiteralWatchDelegate","oneTimeWatchDelegate","inputs","inputsWatchDelegate","addInterceptor","expressionInputDirtyCheck","oldValueOfValue","compareObjectIdentity","prettyPrintExpression","lastResult","inputExpressions","oldInputValueOf","newInputValue","oldInputValueOfValues","oldInputValues","oneTimeListener","old","isAllDefined","allDefined","watchDelegate","useInputs","$QProvider","errorOnUnhandledRejections","qFactory","$$QProvider","nextTick","exceptionHandler","$qMinErr","TypeError","queueSize","checkQueue","Promise","rejectPromise","notifyPromise","processChecks","toCheck","isStateExceptionHandled","markQStateExceptionHandled","errorMessage","scheduleProcessQueue","pending","processScheduled","$$passToExceptionHandler","processQueue","$$reject","$$resolve","doResolve","doReject","handleCallback","resolver","callbackOutput","errback","progressBack","onFulfilled","onRejected","$Q","promises","counter","results","race","pur","q","$$RAFProvider","requestAnimationFrame","webkitRequestAnimationFrame","cancelAnimationFrame","webkitCancelAnimationFrame","webkitCancelRequestAnimationFrame","rafSupported","raf","timer","supported","$RootScopeProvider","$rootScopeMinErr","lastDirtyWatch","applyAsyncId","digestTtl","destroyChildScope","$event","currentScope","Scope","$$watchers","$$nextSibling","$$prevSibling","$$childHead","$$childTail","$root","$$listeners","$$listenerCount","$$watchersCount","isolate","$$ChildScope","ChildScope","createChildScopeClass","watchExp","watcher","initWatchVal","$$digestWatchIndex","incrementWatchersCount","watchExpressions","newValues","deregisterFns","changeReactionScheduled","firstRun","shouldCall","watchGroupAction","unwatchFn","$watchCollectionInterceptor","veryOldValue","trackVeryOldValue","changeDetected","changeDetector","internalArray","internalObject","initRun","oldLength","_value","newLength","newItem","oldItem","watch","watchers","dirty","logIdx","asyncTask","ttl","watchLog","beginPhase","flushApplyAsync","asyncQueuePosition","asyncQueue","traverseScopesLoop","clearPhase","postDigestQueuePosition","decrementListenerCount","cleanUpScope","applyAsyncQueue","namedListeners","indexOfListener","$emit","targetScope","listenerArgs","$$asyncQueue","$$postDigestQueue","$$applyAsyncQueue","phase","$$SanitizeUriProvider","uri","isImage","normalizedVal","regex","nextId","filters","vars","own","assignable","stage","computing","recurse","return_","generateFunction","fnKey","intoId","watchId","fnString","USE","STRICT","filterPrefix","watchFns","input","varsPrefix","section","nameId","recursionFn","skipWatchIdCheck","if_","lazyAssign","computedMember","lazyRecurse","plus","getHasOwnProperty","nonComputedMember","notNull","member","defaultValue","stringEscapeFn","stringEscapeRegex","c","skip","init","rhs","lhs","unary+","unary-","unary!","binary+","binary-","binary*","binary/","binary%","binary===","binary!==","binary==","binary!=","binary<","binary>","binary<=","binary>=","binary&&","binary||","ternary?:","$sceMinErr","SCE_CONTEXTS","CSS","URL","JS","UNDERSCORE_LOWERCASE_REGEXP","snakeToCamel","adjustMatchers","matchers","adjustedMatchers","matcher","adjustMatcher","$SceDelegateProvider","resourceUrlWhitelist","resourceUrlBlacklist","htmlSanitizer","matchUrl","generateHolderType","Base","holderType","trustedValue","$$unwrapTrustedValue","trustedValueHolderBase","byType","trustAs","Constructor","maybeTrusted","allowed","isResourceUrlAllowedByPolicy","$SceProvider","$sceDelegate","sce","isEnabled","parseAs","enumValue","lName","$SnifferProvider","eventSupport","hasHistoryPushState","nw","process","chrome","app","runtime","pushState","android","boxee","bodyStyle","transitions","animations","hasEvent","divElm","$templateRequestMinErr","$TemplateRequestProvider","httpOptions","$templateCache","handleRequestFn","tpl","ignoreRequestError","totalPendingRequests","transformer","$$TestabilityProvider","testability","findBindings","opt_exactMatch","getElementsByClassName","dataBinding","bindingName","findModels","prefixes","getLocation","setLocation","whenStable","$TimeoutProvider","deferreds","$$timeoutId","urlParsingNode","originUrl","requestUrl","$WindowProvider","$$CookieReader","lastCookies","lastCookieString","safeDecodeURIComponent","cookieArray","cookie","currentCookieString","safeGetCookie","$$CookieReaderProvider","$FilterProvider","suffix","currencyFilter","dateFilter","filterFilter","jsonFilter","limitToFilter","lowercaseFilter","numberFilter","orderByFilter","uppercaseFilter","comparator","anyPropertyKey","predicateFn","matchAgainstAnyProp","getTypeForFilter","shouldMatchPrimitives","actual","expected","deepCompare","createPredicateFn","dontMatchWholeObject","actualType","expectedType","expectedVal","matchAnyProperty","MAX_DIGITS","DECIMAL_SEP","ZERO_CHAR","$locale","formats","NUMBER_FORMATS","amount","currencySymbol","fractionSize","CURRENCY_SYM","PATTERNS","maxFrac","formatNumber","GROUP_SEP","groupSep","decimalSep","parsedNumber","isInfinity","isFinite","isZero","numStr","abs","formattedText","minFrac","digits","fractionLen","roundAt","digit","k","carry","reduceRight","roundNumber","numberOfIntegerDigits","zeros","exponent","integerLen","decimals","groups","lgSize","gSize","negPre","negSuf","posPre","posSuf","padNumber","negWrap","neg","dateGetter","dateStrGetter","shortForm","standAlone","getFirstThursdayOfYear","year","dayOfWeekOnFirst","getDay","weekGetter","datetime","firstThurs","getFullYear","getMonth","getDate","round","eraGetter","ERAS","DATE_FORMATS","yyyy","yy","y","MMMM","MMM","MM","M","LLLL","dd","HH","H","hh","mm","ss","sss","EEEE","EEE","getHours","AMPMS","Z","zone","paddedZone","ww","w","G","GG","GGG","GGGG","ERANAMES","DATE_FORMATS_SPLIT","NUMBER_STRING","R_ISO8601_STR","DATETIME_FORMATS","tzHour","tzMin","dateSetter","setUTCFullYear","setFullYear","timeSetter","setUTCHours","setHours","ms","parseFloat","jsonStringToDate","spacing","limit","begin","Infinity","sliceFn","sortPredicate","reverseOrder","compareFn","predicates","predicate","descending","defaultCompare","compareValues","tieBreaker","predicateValues","objectValue","getPredicateValue","v1","v2","type1","type2","value1","value2","ngDirective","htmlAnchorDirective","xlinkHref","ngAttributeAliasDirectives","propName","normalized","defaultLinkFn","ngModel","htmlAttr","nullFormCtrl","$addControl","$$renameControl","control","$name","$removeControl","$setValidity","$setDirty","$setPristine","$setSubmitted","PENDING_CLASS","FormController","$$controls","$error","$$success","$pending","ngForm","$dirty","$pristine","$valid","$invalid","$submitted","$$parentForm","$$animate","setupValidity","$rollbackViewValue","$commitViewValue","newName","oldName","PRISTINE_CLASS","DIRTY_CLASS","$setUntouched","addSetValidityMethod","clazz","unset","formDirectiveFactory","isNgForm","formElement","VALID_CLASS","nameAttr","ctrls","handleFormSubmission","setter","getSetter","formDirective","ngFormDirective","$$classCache","INVALID_CLASS","cachedToggleClass","ctrl","switchValue","toggleValidationCss","validationErrorKey","isValid","combinedState","createAndSet","isObjectEmpty","unsetAndCleanup","ISO_DATE_REGEXP","URL_REGEXP","EMAIL_REGEXP","NUMBER_REGEXP","DATE_REGEXP","DATETIMELOCAL_REGEXP","WEEK_REGEXP","MONTH_REGEXP","TIME_REGEXP","PARTIAL_VALIDATION_EVENTS","PARTIAL_VALIDATION_TYPES","inputType","baseInputType","stringBasedInputType","createDateInputType","createDateParser","datetime-local","time","week","isoWeek","existingDate","hours","seconds","milliseconds","addDays","getSeconds","getMilliseconds","month","minVal","maxVal","badInputChecker","numberFormatterParser","$validators","$isEmpty","parseNumberAttrVal","$validate","step","stepVal","modelValue","viewValue","isValidForStep","$$parserName","email","radio","doTrim","ngTrim","ev","checked","$setViewValue","$render","$viewValue","range","supportsRange","$$hasNativeValidators","validity","hasMinAttr","hasMaxAttr","hasStepAttr","originalRender","rangeUnderflow","rangeOverflow","setInitialValueAndObserver","$modelValue","elVal","stepMismatch","htmlAttrName","changeFn","checkbox","trueValue","parseConstantExpr","ngTrueValue","falseValue","ngFalseValue","$formatters","$parsers","submit","reset","file","composing","deferListener","origValue","keyCode","origBadInput","badInput","origTypeMismatch","typeMismatch","mapping","iso","part","parseDate","previousDate","$options","getOption","parsedDate","ngModelMinErr","isValidDate","parseObservedDateValue","isNumberInteger","countDecimals","numString","decimalSymbolIndex","stepBase","isNonIntegerValue","isNonIntegerStepBase","isNonIntegerStep","valueDecimals","stepBaseDecimals","stepDecimals","decimalCount","multiplier","pow","parseFn","inputDirective","CONSTANT_VALUE_REGEXP","ngValueDirective","updateElementValue","propValue","tplAttr","ngValue","ngBindDirective","$compile","templateElement","ngBind","ngBindTemplateDirective","ngBindTemplate","ngBindHtmlDirective","ngBindHtmlGetter","ngBindHtml","ngBindHtmlWatch","getTrustedHtml","ngChangeDirective","$viewChangeListeners","ngChange","classDirective","indexWatchExpression","oldClassString","isOneTime","watchExpression","toFlatValue","toClassString","watchAction","newClassValue","newClassString","ngClassWatchAction","classCounts","oldModulo","digestClassCounts","classArray","classesToUpdate","oldClassArray","newClassArray","toRemoveArray","toAddArray","toRemoveString","toAddString","arrayDifference","$index","newModulo","classString","classValue","flatValue","hasUndefined","ngClassDirective","ngClassOddDirective","ngClassEvenDirective","ngCloakDirective","ngControllerDirective","ngEventDirectives","forceAsyncEvents","blur","focus","ngIfDirective","block","previousElements","ngIf","ngIncludeDirective","$anchorScroll","srcExp","ngInclude","onloadExp","autoScrollExp","autoscroll","previousElement","currentElement","changeCounter","cleanupLastIncludeContent","afterAnimation","thisChangeId","ngIncludeFillContentDirective","ngInitDirective","ngInit","ngListDirective","ngList","trimValues","UNTOUCHED_CLASS","NgModelController","$$rawModelValue","$asyncValidators","$untouched","$touched","defaultModelOptions","$$updateEvents","$$updateEventHandler","$$parsedNgModel","$$parsedNgModelAssign","$$ngModelGet","$$ngModelSet","$$pendingDebounce","$$parserValid","$$currentValidationRunId","$$attr","$$timeout","$$exceptionHandler","$$setModelValue","$$initGetterSetters","invokeModelGetter","invokeModelSetter","$$$p","$$updateEmptyClasses","$setTouched","$$lastCommittedViewValue","prevValid","prevModelValue","allowInvalid","that","$$runValidators","allValid","$$writeModelToScope","validatorPromises","localValidationRunId","errorKey","setValidity","processParseErrors","syncValidatorsValid","validator","Boolean","processSyncValidators","validationDone","$$parseAndValidate","writeToModelIfNeeded","$$debounceViewValueCommit","debounceDelay","$overrideModelOptions","createChild","$$setUpdateOnEvents","$processModelValue","$$format","formatters","ngModelDirective","modelCtrl","formCtrl","optionsCtrl","setTouched","DEFAULT_REGEXP","ModelOptions","$$options","inheritAll","updateOnDefault","updateOn","debounce","getterSetter","ngModelOptionsDirective","NgModelOptionsController","$$attrs","parentOptions","parentCtrl","modelOptionsDefinition","ngModelOptions","ngNonBindableDirective","ngOptionsMinErr","NG_OPTIONS_REGEXP","ngOptionsDirective","optionTemplate","optGroupTemplate","selectElement","registerOption","selectCtrl","ngModelCtrl","hasEmptyOption","emptyOption","providedEmptyOption","ngOptions","optionsExp","valueName","keyName","selectAs","trackBy","viewValueFn","trackByFn","getTrackByValueFn","getTrackByValue","displayFn","groupByFn","disableWhenFn","valuesFn","Option","selectValue","label","group","disabled","getOptionValuesKeys","optionValues","optionValuesKeys","itemKey","getWatchables","watchedArray","optionValuesLength","disableWhen","getOptions","optionItems","selectValueMap","optionItem","getOptionFromViewValue","getViewValueFromOption","parseOptionsExpression","listFragment","addOptionElement","optionElement","getAndUpdateSelectedOption","generateUnknownOptionValue","writeValue","selectedOptions","readValue","selections","selectedOption","selectedIndex","removeUnknownOption","selectUnknownOrEmptyOption","unselectEmptyOption","optionScope","optionEl","needsRerender","$isEmptyOptionSelected","groupElementMap","groupElement","nextValue","isNotPrimitive","ngPluralizeDirective","BRACE","IS_WHEN","lastCount","numberExp","whenExp","whens","whensExpFns","braceReplacement","watchRemover","updateElementText","newText","attributeName","tmpMatch","whenKey","countIsNaN","pluralCat","whenExpFn","ngRepeatDirective","ngRepeatMinErr","updateScope","valueIdentifier","keyIdentifier","arrayLength","$first","$last","$middle","$odd","$even","ngRepeat","ngRepeatEndComment","aliasAs","trackByExp","trackByExpGetter","trackByIdExpFn","trackByIdArrayFn","trackByIdObjFn","hashFnLocals","lastBlockMap","nextNode","collectionLength","trackById","trackByIdFn","collectionKeys","nextBlockOrder","previousNode","nextBlockMap","blockKey","ngShowDirective","ngShow","ngHideDirective","ngHide","ngStyleDirective","ngStyle","newStyles","oldStyles","ngSwitchDirective","cases","ngSwitchController","watchExpr","ngSwitch","selectedTranscludes","selectedElements","previousLeaveAnimations","selectedScopes","spliceFactory","selectedTransclude","caseElement","selectedScope","anchor","ngSwitchWhenDirective","ngSwitchWhen","ngSwitchWhenSeparator","whenCase","ngSwitchDefaultDirective","ngTranscludeMinErr","ngTranscludeDirective","fallbackLinkFn","ngTransclude","ngTranscludeSlot","useFallbackContent","notWhitespace","scriptDirective","noopNgModelController","setOptionSelectedStatus","SelectController","optionsMap","unknownOption","renderUnknownOption","unknownVal","updateUnknownOption","selectEmptyOption","realVal","hasOption","currentlySelectedOption","hashedVal","addOption","scheduleRender","removeOption","$hasEmptyOption","$isUnknownOptionSelected","renderScheduled","updateScheduled","scheduleViewValueUpdate","renderAfter","optionAttrs","interpolateValueFn","interpolateTextFn","removal","previouslySelected","removeValue","selectDirective","shouldBeSelected","currentlySelected","lastView","lastViewRef","optionDirective","selectCtrlName","requiredDirective","required","patternDirective","patternExp","maxlengthDirective","maxlength","intVal","minlengthDirective","minlength","originalCleanData","jqName","elems","bindJQuery","$$minErr","$$csp","$$encodeUriSegment","$$encodeUriQuery","$$stringify","ensure","configFn","invokeQueue","configBlocks","invokeLater","moduleInstance","invokeLaterAndSetModuleName","animation","insertMethod","recipeName","factoryFunction","setupModuleLoader","textarea","form","select","ngClass","ngClassEven","ngClassOdd","ngCloak","ngController","ngNonBindable","ngPluralize","ngSwitchDefault","ngRequired","$animateCss","$$animateJs","$$forceReflow","$interval","$httpParamSerializer","$httpParamSerializerJQLike","$$testability","$$jqLite","$$Map","angularVersion","PLURAL_CATEGORY","DAY","FIRSTDAYOFWEEK","MONTH","SHORTDAY","SHORTMONTH","STANDALONEMONTH","WEEKENDRANGE","fullDate","longDate","medium","mediumDate","mediumTime","short","shortDate","shortTime","minInt","localeID","opt_precision","vf","getVF","head","transitionHook_1","HookBuilder","buildHooksForPhase","_getEvents","buildHooks","hookType","matchingHooks","getMatchingHooks","baseHookOptions","criteriaMatchPath","_options","STATE","transitionHook","reverseDepthSort","factor","depthDelta","tupleSort","reverseSort","tuple","isCreate","CREATE","$transitions","reg","getHooks","assertPredicate","Queue","_items","_limit","dequeue","clear","peekTail","peekHead","curry","initial_args","func_args_length","curried","compose","pipe","funcs","propEq","and","fn1","fn2","or","arr","any","other","struct","defaultResolvePolicy","resolveFn","deps","policy","resolved","getPolicy","thisPolicy","statePolicy","resolvePolicy","findNode","maybeWaitForRx","observable$","cached","take","getDependencies","resolvable","resolvedDeps","resolvedValue","traceResolvableResolved","fromData","urlMatcher_1","UrlRuleFactory","makeRule","_what","UrlMatcher","fromUrlMatcher","isState","fromState","fromRegExp","BaseUrlRule","rule","urlMatcher","_handler","details","matchPriority","parameters","param","isOptional","validates","transitionTo","global","sticky","isUrlRule","index_1","splitHash","splitQuery","splitEqual","keyValsToObjectR","accum","_a","queryString","orEmptyString","beforehash","_b","loc","searchObject","locationPluginFactory","isHtml5","serviceClass","configurationClass","configuration","stateMatcher_1","stateBuilder_1","stateQueueManager_1","_router","builder","StateBuilder","stateQueue","StateQueueManager","_registerRoot","_root","views","#","dynamic","abstract","navigable","stateDefinition","_deregisterTree","getChildren","deregistered","$ur","removeRule","deregisteredStates","found","urlRule_1","defaultRuleSortFn","getMatcher","composeSort","sortBy","URLMATCHER","REGEXP","RAW","OTHER","_sortFn","_rules","interceptDeferred","_id","_sorted","urlRuleFactory","_otherwiseFn","ensureSorted","best","weight","$url","isDef","applyResult","_stopFn","read","absolute","cfg","slash","otherwise","handlerFn","getHandlerFn","initial","transitionHistory","uiViewString","viewData","creationContext","fqn","Category","normalizedCat","_tid","_rid","transLbl","Trace","_enabled","approximateDigests","categories","category","enable","disable","traceTransitionStart","TRANSITION","traceTransitionIgnored","HOOK","transitionOptions","traceResolvePath","RESOLVE","traceError","traceSuccess","finalState","traceUIViewEvent","UIVIEW","traceUIViewConfigUpdated","traceUIViewFill","traceViewServiceEvent","viewConfig","VIEWCONFIG","viewDecl","$context","$uiViewName","$uiViewContextAnchor","traceViewServiceUIViewEvent","fnname","queue_1","pathFactory_1","pathNode_1","param_1","glob_1","resolveContext_1","lazyLoad_1","invalidCallbacks","_defaultErrorHandler","$error$","detail","boundFns","enumerable","configurable","_handleInvalidTargetState","fromPath","toState","PathUtils","makeTargetState","latestThing","latest","callbackQueue","checkForRedirect","valid","invalid","invokeNextCallback","nextCallback","onInvalid","reloadState","defautGoOpts","transOpts","defaultTransOpts","getCurrentPath","latestSuccess","PathNode","toParams","currentPath","exists","rejectedTransitionHandler","isLatest","lastStartedTransitionId","RejectType","IGNORED","SUPERSEDED","redirect","ABORTED","errorHandler","transitionToPromise","silenceUncaughtInPromise","schema","matchingKeys","Param","include","defaultHrefOpts","lossy","$inherit","nav","lazyLoad","lazyLoadState","ARGUMENT_NAMES","ensureExist","StateParams","parentParams","parents","ancestors","inherited","inheritList","PushStateLocationService","_config","fullUrl","replaceState","ignoredHook","ignoredReason","_ignoredReason","registerIgnoredTransitionHook","onBefore","core","default","hookRegistry_1","hookBuilder_1","stateSelf","targetState","_deferred","_registeredHooks","_hookBuilder","_targetState","_transitionCount","toPath","buildToPath","_treeChanges","createTransitionHookRegFns","onCreateHooks","applyViewConfigs","criteria","onExit","onRetain","onEnter","onFinish","onError","makeEvent","enteringStates","entering","$view","$from","matchState","freeze","mergeR","pathName","subPath","getResolveTokens","getTokens","addResolvable","topath","targetNode","addResolvables","redirectedFrom","originalTransition","rf","exiting","retained","redirects","redirectOpts","newOptions","newTransition","originalEnteringNodes","redirectEnteringNodes","matching","nonDynamicParams","resolvables","_changedParams","tc","arrayTuples","anyTrueR","nodeSchemas","paramSchema","paramValues","toValues","fromValues","toVals","fromVals","same","pathA","pathB","newTC","pendTC","getHooksFor","allBeforeHooks","BEFORE","allRunHooks","success","SUCCESS","_error","ERROR","fromStateOrName","toStateOrName","avoidEmptyHash","omit","diToken","views_1","templateFactory_1","stateProvider_1","onEnterExitRetain_1","locationServices_1","urlRouterProvider_1","mod_init","mod_util","mod_rtr","mod_state","mod_main","$locationProvider","stateProvider","StateProvider","ng1ViewsBuilder","_viewConfigFactory","getNg1ViewConfigFactory","ng1LocationService","Ng1LocationServices","_runtimeServices","monkeyPatchPathParameterType","getProviderFor","$urp","runBlock","watchDigests","uiRouter","urlRouterProvider","UrlRouterProvider","TemplateFactory","$urlMatcherFactory","$urlRouter","ctx","getResolvable","applyPairs","stateParams_1","quoteRegExp","surroundPattern","squash","splitOnSlash","paramTypes","paramFactory","_cache","_children","_params","_segments","_compiled","strict","caseInsensitive","paramMap","segment","placeholder","searchPlaceholder","patterns","checkParamErrors","nameValidator","matchDetails","isSearch","fromSearch","isRoot","unnest","reverseString","allReversed","allParams","pathParams","searchParams","nPathSegments","urlm","decode","opts","parameter","findParam","paramDef","allTrueR","urlMatchers","pathSegmentsAndParams","getDetails","queryParams","isDefaultValue","encoded","encode","pathString","encodeDashes","raw","paramDetails","staticSegments","DefType","PATH","SEARCH","cmp","weights","pairs","router_1","addCoreResolvables","registerAddCoreResolvables","resolvePolicies","LAZY","EAGER","WAIT","NOWAIT","RXWAIT","coreResolvables_1","redirectTo_1","resolve_1","updateGlobals_1","url_1","transitionEventType_1","ignoredTransition_1","invalidTransition_1","custom","_eventTypes","_criteriaPaths","_deregisterHookFns","_defineCorePaths","_defineCoreEvents","_registerCoreTransitionHooks","hooksArray","Phase","TH","paths","_defineEvent","_definePathType","hookOrder","TransitionEventType","cmpByPhase","hookScope","_getPathTypes","addCoreResolves","registerInvalidTransitionHook","redirectTo","registerRedirectToHook","registerOnExitHook","registerOnRetainHook","registerOnEnterHook","eagerResolve","registerEagerResolvePath","lazyResolve","registerLazyResolveState","loadViews","registerLoadEnteringViews","activateViews","registerActivateViews","updateGlobals","updateUrl","registerUpdateUrl","registerLazyLoadHook","stateObject_1","$registry","stateDecl","StateObject","flush","registered","orphans","previousQueueLength","getState","name_1","build","orphanIdx","existingState","existingFutureState","attachRoute","redirectToHook","ng_from_import","ng_from_global","paramType_1","hasOwn","isShorthand","urlType","CONFIG","ParamType","getType","getStaticDefaultValue","$$fn","unwrapShorthand","arrayDefaults","arrayParamNomenclature","arrayMode","$asArray","configuredKeys","defaultPolicy","getSquashPolicy","defaultSquashPolicy","replaceSpecialValues","_defaultValueCache","getDefaultValue","params_1","values1","values2","paramTypes_1","ParamTypes","_isCaseInsensitive","_isStrictMode","_defaultSquashPolicy","_getConfig","fromConfig","strictMode","isMatcher","definitionFn","_flushTypeQueue","makeEnterExitRetainHook","onExitHook","onRetainHook","onEnterHook","buildPath","applyRawParams","inheritParams","viewDecls","viewConfigs","view","createViewConfig","toKeys","noInherit","toNode","toParamVals","incomingParamVals","pick","fromParamVals","ownParamVals","node1","node2","keep","retainedWithToParams","retainedNode","cloned","paramsFn","nodeA","nodeB","elementIdx","core_2","_urlRouter","ruleFn","injectableHandler","$match","useAnchorScroll","tis","isNullOrUndefined","MemoryLocationService","_url","_useHttp","useHttpService","asTemplate","asComponent","fromUrl","templateProvider","fromProvider","componentProvider","fromComponentProvider","providerFn","makeComponentTemplate","uiView","kebob","kebobed","cmpDefs","getBindings","getComponentBindings","resolveName","res","kebobName","scopeBindings","bindingsObj","criterion","toMatch","globStrings","RegisteredHook","tranSvc","matchCriteria","_matchingNodes","_getDefaultMatchCriteria","_getMatchingNodes","mn","pathtype","isStateHook","registry","hookRegistrationFn","matchObject","eagerResolvePath","lazyResolveState","subContext","MemoryLocationConfig","_port","_protocol","_host","urlOptions","_urlListeners","_lp","_loc","_browser","pathType","~","/","~~","~2F","_uiViews","_viewConfigs","_viewConfigFactories","_registeredUIViews","_activeViewConfigs","_rootContext","viewType","decl","cfgFactory","$type","cfgs","deactivateViewConfig","activateViewConfig","uiViewsByFqn","uiv","viewConfigDepth","depthCompare","depthFn","posNeg","stateDepth","matchingConfigs","configUpdated","registerUIView","uiViews","available","normalizeUIViewTarget","rawViewName","viewAtContext","uiViewName","uiViewContextAnchor","relativeViewNameSugar","vc","vcSegments","uivSegments","negOffset","fqnToFirstSegment","uiViewContext","_identifier","_definition","$IsStateFilter","isFilter","$IncludedByStateFilter","includesFilter","rejection","INVALID","errored","ALL_WHENS","EAGER_WHENS","NATIVE_INJECTOR_TOKEN","_path","newResolvables","matchedWhens","matchesPolicy","acceptedVals","whenOrAsync","nodeResolvables","nowait","wait","getResult","_injector","UIInjectorImpl","availableResolvables","fromInjector","getNative","native","getAsync","templateFactory","Ng1ViewConfig","hasAnyKey","compKeys","nonCompKeys","allViewKeys","viewsObject","$default","resolveAs","loaded","getTemplate","load","getController","controllerProvider","$subPattern","sub","arrayWrap","arrayHandler","allTruthyMode","arrayUnwrap","arrayEqualsHandler","val1","val2","paramTypeFn","wrapperFn","$arrayMode","nameBuilder","selfBuilder","dataBuilder","getUrlBuilder","$urlMatcherFactoryProvider","stateDec","paramConfig","reloadOnSearch","getNavigableBuilder","getParamsBuilder","urlParams","nonUrlParams","mapObj","pathBuilder","includesBuilder","resolvablesBuilder","resolveObj","provide","literal2Resolvable","useFactory","dependencies","useClass","useValue","useExisting","tuple2Resolvable","item2Resolvable","builders","parentName","invalidTransitionHook","stateOrNode","memo","pDef","browserLocationConfig_1","hashLocationService_1","pushStateLocationService_1","memoryLocationService_1","memoryLocationConfig_1","injector_1","q_1","servicesPlugin","hashLocationPlugin","pushStateLocationPlugin","memoryLocationPlugin","dest","_extend","_equals","fnNames","latebind","bindFunction","_inArray","_removeFrom","_pushTo","propNames","objCopy","prop_1","assertFn","predicateOrMap","errMsg","maxArrayLen","toObj","a1","a2","tup","pushTo","functions","defaultsList","_defaultsList","defaultVals","first","second","pluck","accept","flattenR","flatten","assertMap","keyValTuple","propFn","checkFn","sortFns","makeDefaultType","typeQueue","defaultTypes","valToString","defaultTypeBase","query","int","bool","capture","angular_2","$ViewDirectiveFill","getControllerAs","getResolveAs","$cfg","resolveCtx","registerControllerCallbacks","cmp_1","tagRegexp_1","deregisterWatch_1","directiveEl","tagName","ctrlInstance","$uiViewScroll","rootData","previousEl","currentEl","unregister","renderer","activeUIView","config1","config2","updateView","fromParentTagConfig","fromParentTag","animEnter","animLeave","$uiViewData","$uiViewAnim","$animEnter","$animLeave","$$animLeave","_viewData_1","cleanupLastView","hasComponentImpl","_uiCanExitId","viewState","hookOptions","uiOnParamsChanged","viewCreationTrans_1","fromParams","toSchema","fromSchema","changedToParams","changedKeys_1","uiCanExit","id_1","cacheProp_1","prevTruthyAnswer_1","ids","loadEnteringViews","enteringViews","exitingViews","lazyLoadHook","orig","lazyLoadFn","isStateClass"],"mappings":"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yC,WAAAzC,GACAQ,UAAAD,GACAljE,YAAAkjE,GACAF,UAAAD,GACA9iE,YAAA8iE,GACArV,QAAAJ,GACAyJ,eAAAN,KAEAx8E,WACAq3E,UAAAU,KAEA/3E,UAAAmoE,IACAnoE,UAAA02E,IACAh6D,EAAAoQ,UACAqqD,cAAAtnD,GACA6O,SAAApL,GACA83D,YAAA10D,GACA20D,YAAAt5D,GACA8B,eAAA7B,GACAG,gBAAA8C,GACAE,kBAAAP,GACA0f,SAAApd,GACA2D,cAAAvB,GACAkF,YAAA8R,GACAlZ,UAAAwZ,GACAxb,mBAAAyb,GACAjU,kBAAAqU,GACAiY,QAAAgV,GACAotB,cAAAl6C,GACA10C,aAAA29C,GACAkxC,UAAAxvC,GACApH,MAAAlB,GACA+3C,qBAAAp5C,GACAq5C,2BAAAp5C,GACAkC,aAAA8D,GACAE,YAAAJ,GACAG,gBAAAsE,GACA3sB,UAAAwwB,GACAtpB,KAAAyqB,GACArjB,OAAA4rB,GACAj6B,WAAA4/B,GACAzoD,GAAAslD,GACA3Q,IAAA8Q,GACAruB,KAAA67B,GACAC,aAAAlB,GACAnkC,SAAA2lC,GACAmB,eAAAphC,GACA0D,iBAAAw9B,GACA4vB,cAAApvB,GACArjE,SAAAikE,GACAltC,QAAAwtC,GACA3oC,MAAAu6B,GACAu8B,SAAA/kE,GACAglE,MAAA7/D,GACAyoB,eAAAypB,QAIAzjC,MAASqxD,eAAA,UA278BT/4F,EAAAF,OAAA,mCAAA8pB,GACA,IAAAovE,EAAuB,MAAvBA,EAAuB,QAmBvBpvE,EAAAzpB,MAAA,WACA4yE,kBACAd,OACA,KACA,MAEAgnB,KACA,SACA,SACA,UACA,YACA,WACA,SACA,YAEAtmB,UACA,gBACA,eAEA9B,MACA,KACA,MAEAqoB,eAAA,EACAC,OACA,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAEAC,UACA,MACA,MACA,MACA,MACA,MACA,MACA,OAEAC,YACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OAEAC,iBACA,UACA,WACA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","file":"../static/js/vendor.js","sourcesContent":["require('./angular');\nmodule.exports = angular;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular/index.js\n// module id = /jXN\n// module chunks = 0","\"use strict\";\n/**\n * @coreapi\n * @module url\n */ /** */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar coreservices_1 = require(\"../common/coreservices\");\nvar common_1 = require(\"../common/common\");\n/** @hidden */\nvar makeStub = function (keys) {\n    return keys.reduce(function (acc, key) { return (acc[key] = coreservices_1.notImplemented(key), acc); }, { dispose: common_1.noop });\n};\n/** @hidden */ var locationServicesFns = [\"url\", \"path\", \"search\", \"hash\", \"onChange\"];\n/** @hidden */ var locationConfigFns = [\"port\", \"protocol\", \"host\", \"baseHref\", \"html5Mode\", \"hashPrefix\"];\n/** @hidden */ var umfFns = [\"type\", \"caseInsensitive\", \"strictMode\", \"defaultSquashPolicy\"];\n/** @hidden */ var rulesFns = [\"sort\", \"when\", \"initial\", \"otherwise\", \"rules\", \"rule\", \"removeRule\"];\n/** @hidden */ var syncFns = [\"deferIntercept\", \"listen\", \"sync\", \"match\"];\n/**\n * API for URL management\n */\nvar UrlService = (function () {\n    /** @hidden */\n    function UrlService(router, lateBind) {\n        if (lateBind === void 0) { lateBind = true; }\n        this.router = router;\n        this.rules = {};\n        this.config = {};\n        // proxy function calls from UrlService to the LocationService/LocationConfig\n        var locationServices = function () { return router.locationService; };\n        common_1.createProxyFunctions(locationServices, this, locationServices, locationServicesFns, lateBind);\n        var locationConfig = function () { return router.locationConfig; };\n        common_1.createProxyFunctions(locationConfig, this.config, locationConfig, locationConfigFns, lateBind);\n        var umf = function () { return router.urlMatcherFactory; };\n        common_1.createProxyFunctions(umf, this.config, umf, umfFns);\n        var urlRouter = function () { return router.urlRouter; };\n        common_1.createProxyFunctions(urlRouter, this.rules, urlRouter, rulesFns);\n        common_1.createProxyFunctions(urlRouter, this, urlRouter, syncFns);\n    }\n    UrlService.prototype.url = function (newurl, replace, state) { return; };\n    ;\n    /** @inheritdoc */\n    UrlService.prototype.path = function () { return; };\n    ;\n    /** @inheritdoc */\n    UrlService.prototype.search = function () { return; };\n    ;\n    /** @inheritdoc */\n    UrlService.prototype.hash = function () { return; };\n    ;\n    /** @inheritdoc */\n    UrlService.prototype.onChange = function (callback) { return; };\n    ;\n    /**\n     * Returns the current URL parts\n     *\n     * This method returns the current URL components as a [[UrlParts]] object.\n     *\n     * @returns the current url parts\n     */\n    UrlService.prototype.parts = function () {\n        return { path: this.path(), search: this.search(), hash: this.hash() };\n    };\n    UrlService.prototype.dispose = function () { };\n    /** @inheritdoc */\n    UrlService.prototype.sync = function (evt) { return; };\n    /** @inheritdoc */\n    UrlService.prototype.listen = function (enabled) { return; };\n    ;\n    /** @inheritdoc */\n    UrlService.prototype.deferIntercept = function (defer) { return; };\n    /** @inheritdoc */\n    UrlService.prototype.match = function (urlParts) { return; };\n    return UrlService;\n}());\n/** @hidden */\nUrlService.locationServiceStub = makeStub(locationServicesFns);\n/** @hidden */\nUrlService.locationConfigStub = makeStub(locationConfigFns);\nexports.UrlService = UrlService;\n//# sourceMappingURL=urlService.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/url/urlService.js\n// module id = /jjs\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * # Angular 1 Directives\n *\n * These are the directives included in UI-Router for Angular 1.\n * These directives are used in templates to create viewports and link/navigate to states.\n *\n * @ng1api\n * @preferred\n * @module directives\n */ /** for typedoc */\nvar angular_1 = require(\"../angular\");\nvar core_1 = require(\"@uirouter/core\");\n/** @hidden */\nfunction parseStateRef(ref) {\n    var paramsOnly = ref.match(/^\\s*({[^}]*})\\s*$/), parsed;\n    if (paramsOnly)\n        ref = '(' + paramsOnly[1] + ')';\n    parsed = ref.replace(/\\n/g, \" \").match(/^\\s*([^(]*?)\\s*(\\((.*)\\))?\\s*$/);\n    if (!parsed || parsed.length !== 4)\n        throw new Error(\"Invalid state ref '\" + ref + \"'\");\n    return { state: parsed[1] || null, paramExpr: parsed[3] || null };\n}\n/** @hidden */\nfunction stateContext(el) {\n    var $uiView = el.parent().inheritedData('$uiView');\n    var path = core_1.parse('$cfg.path')($uiView);\n    return path ? core_1.tail(path).state.name : undefined;\n}\n/** @hidden */\nfunction processedDef($state, $element, def) {\n    var uiState = def.uiState || $state.current.name;\n    var uiStateOpts = core_1.extend(defaultOpts($element, $state), def.uiStateOpts || {});\n    var href = $state.href(uiState, def.uiStateParams, uiStateOpts);\n    return { uiState: uiState, uiStateParams: def.uiStateParams, uiStateOpts: uiStateOpts, href: href };\n}\n/** @hidden */\nfunction getTypeInfo(el) {\n    // SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.\n    var isSvg = Object.prototype.toString.call(el.prop('href')) === '[object SVGAnimatedString]';\n    var isForm = el[0].nodeName === \"FORM\";\n    return {\n        attr: isForm ? \"action\" : (isSvg ? 'xlink:href' : 'href'),\n        isAnchor: el.prop(\"tagName\").toUpperCase() === \"A\",\n        clickable: !isForm\n    };\n}\n/** @hidden */\nfunction clickHook(el, $state, $timeout, type, getDef) {\n    return function (e) {\n        var button = e.which || e.button, target = getDef();\n        if (!(button > 1 || e.ctrlKey || e.metaKey || e.shiftKey || el.attr('target'))) {\n            // HACK: This is to allow ng-clicks to be processed before the transition is initiated:\n            var transition = $timeout(function () {\n                $state.go(target.uiState, target.uiStateParams, target.uiStateOpts);\n            });\n            e.preventDefault();\n            // if the state has no URL, ignore one preventDefault from the <a> directive.\n            var ignorePreventDefaultCount = type.isAnchor && !target.href ? 1 : 0;\n            e.preventDefault = function () {\n                if (ignorePreventDefaultCount-- <= 0)\n                    $timeout.cancel(transition);\n            };\n        }\n    };\n}\n/** @hidden */\nfunction defaultOpts(el, $state) {\n    return {\n        relative: stateContext(el) || $state.$current,\n        inherit: true,\n        source: \"sref\"\n    };\n}\n/** @hidden */\nfunction bindEvents(element, scope, hookFn, uiStateOpts) {\n    var events;\n    if (uiStateOpts) {\n        events = uiStateOpts.events;\n    }\n    if (!core_1.isArray(events)) {\n        events = ['click'];\n    }\n    var on = element.on ? 'on' : 'bind';\n    for (var _i = 0, events_1 = events; _i < events_1.length; _i++) {\n        var event_1 = events_1[_i];\n        element[on](event_1, hookFn);\n    }\n    scope.$on('$destroy', function () {\n        var off = element.off ? 'off' : 'unbind';\n        for (var _i = 0, events_2 = events; _i < events_2.length; _i++) {\n            var event_2 = events_2[_i];\n            element[off](event_2, hookFn);\n        }\n    });\n}\n/**\n * `ui-sref`: A directive for linking to a state\n *\n * A directive which links to a state (and optionally, parameters).\n * When clicked, this directive activates the linked state with the supplied parameter values.\n *\n * ### Linked State\n * The attribute value of the `ui-sref` is the name of the state to link to.\n *\n * #### Example:\n * This will activate the `home` state when the link is clicked.\n * ```html\n * <a ui-sref=\"home\">Home</a>\n * ```\n *\n * ### Relative Links\n * You can also use relative state paths within `ui-sref`, just like a relative path passed to `$state.go()` ([[StateService.go]]).\n * You just need to be aware that the path is relative to the state that *created* the link.\n * This allows a state to create a relative `ui-sref` which always targets the same destination.\n *\n * #### Example:\n * Both these links are relative to the parent state, even when a child state is currently active.\n * ```html\n * <a ui-sref=\".child1\">child 1 state</a>\n * <a ui-sref=\".child2\">child 2 state</a>\n * ```\n *\n * This link activates the parent state.\n * ```html\n * <a ui-sref=\"^\">Return</a>\n * ```\n *\n * ### hrefs\n * If the linked state has a URL, the directive will automatically generate and\n * update the `href` attribute (using the [[StateService.href]]  method).\n *\n * #### Example:\n * Assuming the `users` state has a url of `/users/`\n * ```html\n * <a ui-sref=\"users\" href=\"/users/\">Users</a>\n * ```\n *\n * ### Parameter Values\n * In addition to the state name, a `ui-sref` can include parameter values which are applied when activating the state.\n * Param values can be provided in the `ui-sref` value after the state name, enclosed by parentheses.\n * The content inside the parentheses is an expression, evaluated to the parameter values.\n *\n * #### Example:\n * This example renders a list of links to users.\n * The state's `userId` parameter value comes from each user's `user.id` property.\n * ```html\n * <li ng-repeat=\"user in users\">\n *   <a ui-sref=\"users.detail({ userId: user.id })\">{{ user.displayName }}</a>\n * </li>\n * ```\n *\n * Note:\n * The parameter values expression is `$watch`ed for updates.\n *\n * ### Transition Options\n * You can specify [[TransitionOptions]] to pass to [[StateService.go]] by using the `ui-sref-opts` attribute.\n * Options are restricted to `location`, `inherit`, and `reload`.\n *\n * #### Example:\n * ```html\n * <a ui-sref=\"home\" ui-sref-opts=\"{ reload: true }\">Home</a>\n * ```\n *\n * ### Other DOM Events\n *\n * You can also customize which DOM events to respond to (instead of `click`) by\n * providing an `events` array in the `ui-sref-opts` attribute.\n *\n * #### Example:\n * ```html\n * <input type=\"text\" ui-sref=\"contacts\" ui-sref-opts=\"{ events: ['change', 'blur'] }\">\n * ```\n *\n * ### Highlighting the active link\n * This directive can be used in conjunction with [[uiSrefActive]] to highlight the active link.\n *\n * ### Examples\n * If you have the following template:\n *\n * ```html\n * <a ui-sref=\"home\">Home</a>\n * <a ui-sref=\"about\">About</a>\n * <a ui-sref=\"{page: 2}\">Next page</a>\n *\n * <ul>\n *     <li ng-repeat=\"contact in contacts\">\n *         <a ui-sref=\"contacts.detail({ id: contact.id })\">{{ contact.name }}</a>\n *     </li>\n * </ul>\n * ```\n *\n * Then (assuming the current state is `contacts`) the rendered html including hrefs would be:\n *\n * ```html\n * <a href=\"#/home\" ui-sref=\"home\">Home</a>\n * <a href=\"#/about\" ui-sref=\"about\">About</a>\n * <a href=\"#/contacts?page=2\" ui-sref=\"{page: 2}\">Next page</a>\n *\n * <ul>\n *     <li ng-repeat=\"contact in contacts\">\n *         <a href=\"#/contacts/1\" ui-sref=\"contacts.detail({ id: contact.id })\">Joe</a>\n *     </li>\n *     <li ng-repeat=\"contact in contacts\">\n *         <a href=\"#/contacts/2\" ui-sref=\"contacts.detail({ id: contact.id })\">Alice</a>\n *     </li>\n *     <li ng-repeat=\"contact in contacts\">\n *         <a href=\"#/contacts/3\" ui-sref=\"contacts.detail({ id: contact.id })\">Bob</a>\n *     </li>\n * </ul>\n *\n * <a href=\"#/home\" ui-sref=\"home\" ui-sref-opts=\"{reload: true}\">Home</a>\n * ```\n *\n * ### Notes\n *\n * - You can use `ui-sref` to change **only the parameter values** by omitting the state name and parentheses.\n * #### Example:\n * Sets the `lang` parameter to `en` and remains on the same state.\n *\n * ```html\n * <a ui-sref=\"{ lang: 'en' }\">English</a>\n * ```\n *\n * - A middle-click, right-click, or ctrl-click is handled (natively) by the browser to open the href in a new window, for example.\n *\n * - Unlike the parameter values expression, the state name is not `$watch`ed (for performance reasons).\n * If you need to dynamically update the state being linked to, use the fully dynamic [[uiState]] directive.\n */\nvar uiSref;\nuiSref = ['$uiRouter', '$timeout',\n    function $StateRefDirective($uiRouter, $timeout) {\n        var $state = $uiRouter.stateService;\n        return {\n            restrict: 'A',\n            require: ['?^uiSrefActive', '?^uiSrefActiveEq'],\n            link: function (scope, element, attrs, uiSrefActive) {\n                var type = getTypeInfo(element);\n                var active = uiSrefActive[1] || uiSrefActive[0];\n                var unlinkInfoFn = null;\n                var hookFn;\n                var rawDef = {};\n                var getDef = function () { return processedDef($state, element, rawDef); };\n                var ref = parseStateRef(attrs.uiSref);\n                rawDef.uiState = ref.state;\n                rawDef.uiStateOpts = attrs.uiSrefOpts ? scope.$eval(attrs.uiSrefOpts) : {};\n                function update() {\n                    var def = getDef();\n                    if (unlinkInfoFn)\n                        unlinkInfoFn();\n                    if (active)\n                        unlinkInfoFn = active.$$addStateInfo(def.uiState, def.uiStateParams);\n                    if (def.href != null)\n                        attrs.$set(type.attr, def.href);\n                }\n                if (ref.paramExpr) {\n                    scope.$watch(ref.paramExpr, function (val) {\n                        rawDef.uiStateParams = core_1.extend({}, val);\n                        update();\n                    }, true);\n                    rawDef.uiStateParams = core_1.extend({}, scope.$eval(ref.paramExpr));\n                }\n                update();\n                scope.$on('$destroy', $uiRouter.stateRegistry.onStatesChanged(update));\n                scope.$on('$destroy', $uiRouter.transitionService.onSuccess({}, update));\n                if (!type.clickable)\n                    return;\n                hookFn = clickHook(element, $state, $timeout, type, getDef);\n                bindEvents(element, scope, hookFn, rawDef.uiStateOpts);\n            }\n        };\n    }];\n/**\n * `ui-state`: A fully dynamic directive for linking to a state\n *\n * A directive which links to a state (and optionally, parameters).\n * When clicked, this directive activates the linked state with the supplied parameter values.\n *\n * **This directive is very similar to [[uiSref]], but it `$observe`s and `$watch`es/evaluates all its inputs.**\n *\n * A directive which links to a state (and optionally, parameters).\n * When clicked, this directive activates the linked state with the supplied parameter values.\n *\n * ### Linked State\n * The attribute value of `ui-state` is an expression which is `$watch`ed and evaluated as the state to link to.\n * **This is in contrast with `ui-sref`, which takes a state name as a string literal.**\n *\n * #### Example:\n * Create a list of links.\n * ```html\n * <li ng-repeat=\"link in navlinks\">\n *   <a ui-state=\"link.state\">{{ link.displayName }}</a>\n * </li>\n * ```\n *\n * ### Relative Links\n * If the expression evaluates to a relative path, it is processed like [[uiSref]].\n * You just need to be aware that the path is relative to the state that *created* the link.\n * This allows a state to create relative `ui-state` which always targets the same destination.\n *\n * ### hrefs\n * If the linked state has a URL, the directive will automatically generate and\n * update the `href` attribute (using the [[StateService.href]]  method).\n *\n * ### Parameter Values\n * In addition to the state name expression, a `ui-state` can include parameter values which are applied when activating the state.\n * Param values should be provided using the `ui-state-params` attribute.\n * The `ui-state-params` attribute value is `$watch`ed and evaluated as an expression.\n *\n * #### Example:\n * This example renders a list of links with param values.\n * The state's `userId` parameter value comes from each user's `user.id` property.\n * ```html\n * <li ng-repeat=\"link in navlinks\">\n *   <a ui-state=\"link.state\" ui-state-params=\"link.params\">{{ link.displayName }}</a>\n * </li>\n * ```\n *\n * ### Transition Options\n * You can specify [[TransitionOptions]] to pass to [[StateService.go]] by using the `ui-state-opts` attribute.\n * Options are restricted to `location`, `inherit`, and `reload`.\n * The value of the `ui-state-opts` is `$watch`ed and evaluated as an expression.\n *\n * #### Example:\n * ```html\n * <a ui-state=\"returnto.state\" ui-state-opts=\"{ reload: true }\">Home</a>\n * ```\n *\n * ### Other DOM Events\n *\n * You can also customize which DOM events to respond to (instead of `click`) by\n * providing an `events` array in the `ui-state-opts` attribute.\n *\n * #### Example:\n * ```html\n * <input type=\"text\" ui-state=\"contacts\" ui-state-opts=\"{ events: ['change', 'blur'] }\">\n * ```\n *\n * ### Highlighting the active link\n * This directive can be used in conjunction with [[uiSrefActive]] to highlight the active link.\n *\n * ### Notes\n *\n * - You can use `ui-params` to change **only the parameter values** by omitting the state name and supplying only `ui-state-params`.\n *   However, it might be simpler to use [[uiSref]] parameter-only links.\n *\n * #### Example:\n * Sets the `lang` parameter to `en` and remains on the same state.\n *\n * ```html\n * <a ui-state=\"\" ui-state-params=\"{ lang: 'en' }\">English</a>\n * ```\n *\n * - A middle-click, right-click, or ctrl-click is handled (natively) by the browser to open the href in a new window, for example.\n * ```\n */\nvar uiState;\nuiState = ['$uiRouter', '$timeout',\n    function $StateRefDynamicDirective($uiRouter, $timeout) {\n        var $state = $uiRouter.stateService;\n        return {\n            restrict: 'A',\n            require: ['?^uiSrefActive', '?^uiSrefActiveEq'],\n            link: function (scope, element, attrs, uiSrefActive) {\n                var type = getTypeInfo(element);\n                var active = uiSrefActive[1] || uiSrefActive[0];\n                var unlinkInfoFn = null;\n                var hookFn;\n                var rawDef = {};\n                var getDef = function () { return processedDef($state, element, rawDef); };\n                var inputAttrs = ['uiState', 'uiStateParams', 'uiStateOpts'];\n                var watchDeregFns = inputAttrs.reduce(function (acc, attr) { return (acc[attr] = core_1.noop, acc); }, {});\n                function update() {\n                    var def = getDef();\n                    if (unlinkInfoFn)\n                        unlinkInfoFn();\n                    if (active)\n                        unlinkInfoFn = active.$$addStateInfo(def.uiState, def.uiStateParams);\n                    if (def.href != null)\n                        attrs.$set(type.attr, def.href);\n                }\n                inputAttrs.forEach(function (field) {\n                    rawDef[field] = attrs[field] ? scope.$eval(attrs[field]) : null;\n                    attrs.$observe(field, function (expr) {\n                        watchDeregFns[field]();\n                        watchDeregFns[field] = scope.$watch(expr, function (newval) {\n                            rawDef[field] = newval;\n                            update();\n                        }, true);\n                    });\n                });\n                update();\n                scope.$on('$destroy', $uiRouter.stateRegistry.onStatesChanged(update));\n                scope.$on('$destroy', $uiRouter.transitionService.onSuccess({}, update));\n                if (!type.clickable)\n                    return;\n                hookFn = clickHook(element, $state, $timeout, type, getDef);\n                bindEvents(element, scope, hookFn, rawDef.uiStateOpts);\n            }\n        };\n    }];\n/**\n * `ui-sref-active` and `ui-sref-active-eq`: A directive that adds a CSS class when a `ui-sref` is active\n *\n * A directive working alongside [[uiSref]] and [[uiState]] to add classes to an element when the\n * related directive's state is active (and remove them when it is inactive).\n *\n * The primary use-case is to highlight the active link in navigation menus,\n * distinguishing it from the inactive menu items.\n *\n * ### Linking to a `ui-sref` or `ui-state`\n * `ui-sref-active` can live on the same element as `ui-sref`/`ui-state`, or it can be on a parent element.\n * If a `ui-sref-active` is a parent to more than one `ui-sref`/`ui-state`, it will apply the CSS class when **any of the links are active**.\n *\n * ### Matching\n *\n * The `ui-sref-active` directive applies the CSS class when the `ui-sref`/`ui-state`'s target state **or any child state is active**.\n * This is a \"fuzzy match\" which uses [[StateService.includes]].\n *\n * The `ui-sref-active-eq` directive applies the CSS class when the `ui-sref`/`ui-state`'s target state is directly active (not when child states are active).\n * This is an \"exact match\" which uses [[StateService.is]].\n *\n * ### Parameter values\n * If the `ui-sref`/`ui-state` includes parameter values, the current parameter values must match the link's values for the link to be highlighted.\n * This allows a list of links to the same state with different parameters to be rendered, and the correct one highlighted.\n *\n * #### Example:\n * ```html\n * <li ng-repeat=\"user in users\" ui-sref-active=\"active\">\n *   <a ui-sref=\"user.details({ userId: user.id })\">{{ user.lastName }}</a>\n * </li>\n * ```\n *\n * ### Examples\n *\n * Given the following template:\n * #### Example:\n * ```html\n * <ul>\n *   <li ui-sref-active=\"active\" class=\"item\">\n *     <a href ui-sref=\"app.user({user: 'bilbobaggins'})\">@bilbobaggins</a>\n *   </li>\n * </ul>\n * ```\n *\n * When the app state is `app.user` (or any child state),\n * and contains the state parameter \"user\" with value \"bilbobaggins\",\n * the resulting HTML will appear as (note the 'active' class):\n *\n * ```html\n * <ul>\n *   <li ui-sref-active=\"active\" class=\"item active\">\n *     <a ui-sref=\"app.user({user: 'bilbobaggins'})\" href=\"/users/bilbobaggins\">@bilbobaggins</a>\n *   </li>\n * </ul>\n * ```\n *\n * ### Glob mode\n *\n * It is possible to pass `ui-sref-active` an expression that evaluates to an object.\n * The objects keys represent active class names and values represent the respective state names/globs.\n * `ui-sref-active` will match if the current active state **includes** any of\n * the specified state names/globs, even the abstract ones.\n *\n * #### Example:\n * Given the following template, with \"admin\" being an abstract state:\n * ```html\n * <div ui-sref-active=\"{'active': 'admin.**'}\">\n *   <a ui-sref-active=\"active\" ui-sref=\"admin.roles\">Roles</a>\n * </div>\n * ```\n *\n * When the current state is \"admin.roles\" the \"active\" class will be applied to both the <div> and <a> elements.\n * It is important to note that the state names/globs passed to `ui-sref-active` override any state provided by a linked `ui-sref`.\n *\n * ### Notes:\n *\n * - The class name is interpolated **once** during the directives link time (any further changes to the\n * interpolated value are ignored).\n *\n * - Multiple classes may be specified in a space-separated format: `ui-sref-active='class1 class2 class3'`\n */\nvar uiSrefActive;\nuiSrefActive = ['$state', '$stateParams', '$interpolate', '$uiRouter',\n    function $StateRefActiveDirective($state, $stateParams, $interpolate, $uiRouter) {\n        return {\n            restrict: \"A\",\n            controller: ['$scope', '$element', '$attrs',\n                function ($scope, $element, $attrs) {\n                    var states = [], activeEqClass, uiSrefActive;\n                    // There probably isn't much point in $observing this\n                    // uiSrefActive and uiSrefActiveEq share the same directive object with some\n                    // slight difference in logic routing\n                    activeEqClass = $interpolate($attrs.uiSrefActiveEq || '', false)($scope);\n                    try {\n                        uiSrefActive = $scope.$eval($attrs.uiSrefActive);\n                    }\n                    catch (e) {\n                        // Do nothing. uiSrefActive is not a valid expression.\n                        // Fall back to using $interpolate below\n                    }\n                    uiSrefActive = uiSrefActive || $interpolate($attrs.uiSrefActive || '', false)($scope);\n                    if (core_1.isObject(uiSrefActive)) {\n                        core_1.forEach(uiSrefActive, function (stateOrName, activeClass) {\n                            if (core_1.isString(stateOrName)) {\n                                var ref = parseStateRef(stateOrName);\n                                addState(ref.state, $scope.$eval(ref.paramExpr), activeClass);\n                            }\n                        });\n                    }\n                    // Allow uiSref to communicate with uiSrefActive[Equals]\n                    this.$$addStateInfo = function (newState, newParams) {\n                        // we already got an explicit state provided by ui-sref-active, so we\n                        // shadow the one that comes from ui-sref\n                        if (core_1.isObject(uiSrefActive) && states.length > 0) {\n                            return;\n                        }\n                        var deregister = addState(newState, newParams, uiSrefActive);\n                        update();\n                        return deregister;\n                    };\n                    function updateAfterTransition(trans) {\n                        trans.promise.then(update);\n                    }\n                    $scope.$on('$stateChangeSuccess', update);\n                    $scope.$on('$destroy', $uiRouter.transitionService.onStart({}, updateAfterTransition));\n                    if ($uiRouter.globals.transition) {\n                        updateAfterTransition($uiRouter.globals.transition);\n                    }\n                    function addState(stateName, stateParams, activeClass) {\n                        var state = $state.get(stateName, stateContext($element));\n                        var stateInfo = {\n                            state: state || { name: stateName },\n                            params: stateParams,\n                            activeClass: activeClass\n                        };\n                        states.push(stateInfo);\n                        return function removeState() {\n                            core_1.removeFrom(states)(stateInfo);\n                        };\n                    }\n                    // Update route state\n                    function update() {\n                        var splitClasses = function (str) {\n                            return str.split(/\\s/).filter(core_1.identity);\n                        };\n                        var getClasses = function (stateList) {\n                            return stateList.map(function (x) { return x.activeClass; }).map(splitClasses).reduce(core_1.unnestR, []);\n                        };\n                        var allClasses = getClasses(states).concat(splitClasses(activeEqClass)).reduce(core_1.uniqR, []);\n                        var fuzzyClasses = getClasses(states.filter(function (x) { return $state.includes(x.state.name, x.params); }));\n                        var exactlyMatchesAny = !!states.filter(function (x) { return $state.is(x.state.name, x.params); }).length;\n                        var exactClasses = exactlyMatchesAny ? splitClasses(activeEqClass) : [];\n                        var addClasses = fuzzyClasses.concat(exactClasses).reduce(core_1.uniqR, []);\n                        var removeClasses = allClasses.filter(function (cls) { return !core_1.inArray(addClasses, cls); });\n                        $scope.$evalAsync(function () {\n                            addClasses.forEach(function (className) { return $element.addClass(className); });\n                            removeClasses.forEach(function (className) { return $element.removeClass(className); });\n                        });\n                    }\n                    update();\n                }]\n        };\n    }];\nangular_1.ng.module('ui.router.state')\n    .directive('uiSref', uiSref)\n    .directive('uiSrefActive', uiSrefActive)\n    .directive('uiSrefActiveEq', uiSrefActive)\n    .directive('uiState', uiState);\n//# sourceMappingURL=stateDirectives.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/lib/directives/stateDirectives.js\n// module id = /r/q\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/** @module ng1 */ /** */\nvar core_1 = require(\"@uirouter/core\");\nvar services_1 = require(\"../services\");\n/**\n * This is a [[StateBuilder.builder]] function for angular1 `onEnter`, `onExit`,\n * `onRetain` callback hooks on a [[Ng1StateDeclaration]].\n *\n * When the [[StateBuilder]] builds a [[StateObject]] object from a raw [[StateDeclaration]], this builder\n * ensures that those hooks are injectable for @uirouter/angularjs (ng1).\n */\nexports.getStateHookBuilder = function (hookName) {\n    return function stateHookBuilder(state, parentFn) {\n        var hook = state[hookName];\n        var pathname = hookName === 'onExit' ? 'from' : 'to';\n        function decoratedNg1Hook(trans, state) {\n            var resolveContext = new core_1.ResolveContext(trans.treeChanges(pathname));\n            var locals = core_1.extend(services_1.getLocals(resolveContext), { $state$: state, $transition$: trans });\n            return core_1.services.$injector.invoke(hook, this, locals);\n        }\n        return hook ? decoratedNg1Hook : undefined;\n    };\n};\n//# sourceMappingURL=onEnterExitRetain.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/lib/statebuilders/onEnterExitRetain.js\n// module id = 0uWo\n// module chunks = 0","\"use strict\";\n/**\n * # Core classes and interfaces\n *\n * The classes and interfaces that are core to ui-router and do not belong\n * to a more specific subsystem (such as resolve).\n *\n * @coreapi\n * @preferred\n * @module core\n */ /** for typedoc */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/** @internalapi */\nvar UIRouterPluginBase = (function () {\n    function UIRouterPluginBase() {\n    }\n    UIRouterPluginBase.prototype.dispose = function (router) { };\n    return UIRouterPluginBase;\n}());\nexports.UIRouterPluginBase = UIRouterPluginBase;\n//# sourceMappingURL=interface.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/interface.js\n// module id = 1DX9\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @internalapi\n * @module vanilla\n */\n/** */\nvar utils_1 = require(\"./utils\");\nvar baseLocationService_1 = require(\"./baseLocationService\");\n/** A `LocationServices` that uses the browser hash \"#\" to get/set the current location */\nvar HashLocationService = (function (_super) {\n    __extends(HashLocationService, _super);\n    function HashLocationService(router) {\n        var _this = _super.call(this, router, false) || this;\n        window.addEventListener('hashchange', _this._listener, false);\n        return _this;\n    }\n    HashLocationService.prototype._get = function () {\n        return utils_1.trimHashVal(this._location.hash);\n    };\n    HashLocationService.prototype._set = function (state, title, url, replace) {\n        this._location.hash = url;\n    };\n    HashLocationService.prototype.dispose = function (router) {\n        _super.prototype.dispose.call(this, router);\n        window.removeEventListener('hashchange', this._listener);\n    };\n    return HashLocationService;\n}(baseLocationService_1.BaseLocationServices));\nexports.HashLocationService = HashLocationService;\n//# sourceMappingURL=hashLocationService.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/vanilla/hashLocationService.js\n// module id = 1Ivj\n// module chunks = 0","\"use strict\";\n/**\n * @internalapi\n * @module vanilla\n */ /** */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar utils_1 = require(\"./utils\");\nvar predicates_1 = require(\"../common/predicates\");\nvar common_1 = require(\"../common/common\");\n/** A base `LocationServices` */\nvar BaseLocationServices = (function () {\n    function BaseLocationServices(router, fireAfterUpdate) {\n        var _this = this;\n        this.fireAfterUpdate = fireAfterUpdate;\n        this._listener = function (evt) { return _this._listeners.forEach(function (cb) { return cb(evt); }); };\n        this._listeners = [];\n        this.hash = function () { return utils_1.parseUrl(_this._get()).hash; };\n        this.path = function () { return utils_1.parseUrl(_this._get()).path; };\n        this.search = function () { return utils_1.getParams(utils_1.parseUrl(_this._get()).search); };\n        this._location = window && window.location;\n        this._history = window && window.history;\n    }\n    BaseLocationServices.prototype.url = function (url, replace) {\n        if (replace === void 0) { replace = true; }\n        if (predicates_1.isDefined(url) && url !== this._get()) {\n            this._set(null, null, url, replace);\n            if (this.fireAfterUpdate) {\n                var evt_1 = common_1.extend(new Event(\"locationchange\"), { url: url });\n                this._listeners.forEach(function (cb) { return cb(evt_1); });\n            }\n        }\n        return utils_1.buildUrl(this);\n    };\n    BaseLocationServices.prototype.onChange = function (cb) {\n        var _this = this;\n        this._listeners.push(cb);\n        return function () { return common_1.removeFrom(_this._listeners, cb); };\n    };\n    BaseLocationServices.prototype.dispose = function (router) {\n        common_1.deregAll(this._listeners);\n    };\n    return BaseLocationServices;\n}());\nexports.BaseLocationServices = BaseLocationServices;\n//# sourceMappingURL=baseLocationService.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/vanilla/baseLocationService.js\n// module id = 3PhR\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar TransitionHookPhase;\n(function (TransitionHookPhase) {\n    TransitionHookPhase[TransitionHookPhase[\"CREATE\"] = 0] = \"CREATE\";\n    TransitionHookPhase[TransitionHookPhase[\"BEFORE\"] = 1] = \"BEFORE\";\n    TransitionHookPhase[TransitionHookPhase[\"RUN\"] = 2] = \"RUN\";\n    TransitionHookPhase[TransitionHookPhase[\"SUCCESS\"] = 3] = \"SUCCESS\";\n    TransitionHookPhase[TransitionHookPhase[\"ERROR\"] = 4] = \"ERROR\";\n})(TransitionHookPhase = exports.TransitionHookPhase || (exports.TransitionHookPhase = {}));\nvar TransitionHookScope;\n(function (TransitionHookScope) {\n    TransitionHookScope[TransitionHookScope[\"TRANSITION\"] = 0] = \"TRANSITION\";\n    TransitionHookScope[TransitionHookScope[\"STATE\"] = 1] = \"STATE\";\n})(TransitionHookScope = exports.TransitionHookScope || (exports.TransitionHookScope = {}));\n//# sourceMappingURL=interface.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/transition/interface.js\n// module id = 4Kfa\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @coreapi\n * @module transition\n */\n/** for typedoc */\nvar interface_1 = require(\"./interface\");\nvar common_1 = require(\"../common/common\");\nvar strings_1 = require(\"../common/strings\");\nvar predicates_1 = require(\"../common/predicates\");\nvar hof_1 = require(\"../common/hof\");\nvar trace_1 = require(\"../common/trace\");\nvar coreservices_1 = require(\"../common/coreservices\");\nvar rejectFactory_1 = require(\"./rejectFactory\");\nvar targetState_1 = require(\"../state/targetState\");\nvar defaultOptions = {\n    current: common_1.noop,\n    transition: null,\n    traceData: {},\n    bind: null,\n};\n/** @hidden */\nvar TransitionHook = (function () {\n    function TransitionHook(transition, stateContext, registeredHook, options) {\n        var _this = this;\n        this.transition = transition;\n        this.stateContext = stateContext;\n        this.registeredHook = registeredHook;\n        this.options = options;\n        this.isSuperseded = function () {\n            return _this.type.hookPhase === interface_1.TransitionHookPhase.RUN && !_this.options.transition.isActive();\n        };\n        this.options = common_1.defaults(options, defaultOptions);\n        this.type = registeredHook.eventType;\n    }\n    TransitionHook.prototype.logError = function (err) {\n        this.transition.router.stateService.defaultErrorHandler()(err);\n    };\n    TransitionHook.prototype.invokeHook = function () {\n        var _this = this;\n        var hook = this.registeredHook;\n        if (hook._deregistered)\n            return;\n        var notCurrent = this.getNotCurrentRejection();\n        if (notCurrent)\n            return notCurrent;\n        var options = this.options;\n        trace_1.trace.traceHookInvocation(this, this.transition, options);\n        var invokeCallback = function () {\n            return hook.callback.call(options.bind, _this.transition, _this.stateContext);\n        };\n        var normalizeErr = function (err) {\n            return rejectFactory_1.Rejection.normalize(err).toPromise();\n        };\n        var handleError = function (err) {\n            return hook.eventType.getErrorHandler(_this)(err);\n        };\n        var handleResult = function (result) {\n            return hook.eventType.getResultHandler(_this)(result);\n        };\n        try {\n            var result = invokeCallback();\n            if (!this.type.synchronous && predicates_1.isPromise(result)) {\n                return result.catch(normalizeErr)\n                    .then(handleResult, handleError);\n            }\n            else {\n                return handleResult(result);\n            }\n        }\n        catch (err) {\n            // If callback throws (synchronously)\n            return handleError(rejectFactory_1.Rejection.normalize(err));\n        }\n    };\n    /**\n     * This method handles the return value of a Transition Hook.\n     *\n     * A hook can return false (cancel), a TargetState (redirect),\n     * or a promise (which may later resolve to false or a redirect)\n     *\n     * This also handles \"transition superseded\" -- when a new transition\n     * was started while the hook was still running\n     */\n    TransitionHook.prototype.handleHookResult = function (result) {\n        var _this = this;\n        var notCurrent = this.getNotCurrentRejection();\n        if (notCurrent)\n            return notCurrent;\n        // Hook returned a promise\n        if (predicates_1.isPromise(result)) {\n            // Wait for the promise, then reprocess with the resulting value\n            return result.then(function (val) { return _this.handleHookResult(val); });\n        }\n        trace_1.trace.traceHookResult(result, this.transition, this.options);\n        // Hook returned false\n        if (result === false) {\n            // Abort this Transition\n            return rejectFactory_1.Rejection.aborted(\"Hook aborted transition\").toPromise();\n        }\n        var isTargetState = hof_1.is(targetState_1.TargetState);\n        // hook returned a TargetState\n        if (isTargetState(result)) {\n            // Halt the current Transition and redirect (a new Transition) to the TargetState.\n            return rejectFactory_1.Rejection.redirected(result).toPromise();\n        }\n    };\n    /**\n     * Return a Rejection promise if the transition is no longer current due\n     * to a stopped router (disposed), or a new transition has started and superseded this one.\n     */\n    TransitionHook.prototype.getNotCurrentRejection = function () {\n        var router = this.transition.router;\n        // The router is stopped\n        if (router._disposed) {\n            return rejectFactory_1.Rejection.aborted(\"UIRouter instance #\" + router.$id + \" has been stopped (disposed)\").toPromise();\n        }\n        if (this.transition._aborted) {\n            return rejectFactory_1.Rejection.aborted().toPromise();\n        }\n        // This transition is no longer current.\n        // Another transition started while this hook was still running.\n        if (this.isSuperseded()) {\n            // Abort this transition\n            return rejectFactory_1.Rejection.superseded(this.options.current()).toPromise();\n        }\n    };\n    TransitionHook.prototype.toString = function () {\n        var _a = this, options = _a.options, registeredHook = _a.registeredHook;\n        var event = hof_1.parse(\"traceData.hookType\")(options) || \"internal\", context = hof_1.parse(\"traceData.context.state.name\")(options) || hof_1.parse(\"traceData.context\")(options) || \"unknown\", name = strings_1.fnToString(registeredHook.callback);\n        return event + \" context: \" + context + \", \" + strings_1.maxLength(200, name);\n    };\n    /**\n     * Chains together an array of TransitionHooks.\n     *\n     * Given a list of [[TransitionHook]] objects, chains them together.\n     * Each hook is invoked after the previous one completes.\n     *\n     * #### Example:\n     * ```js\n     * var hooks: TransitionHook[] = getHooks();\n     * let promise: Promise<any> = TransitionHook.chain(hooks);\n     *\n     * promise.then(handleSuccess, handleError);\n     * ```\n     *\n     * @param hooks the list of hooks to chain together\n     * @param waitFor if provided, the chain is `.then()`'ed off this promise\n     * @returns a `Promise` for sequentially invoking the hooks (in order)\n     */\n    TransitionHook.chain = function (hooks, waitFor) {\n        // Chain the next hook off the previous\n        var createHookChainR = function (prev, nextHook) {\n            return prev.then(function () { return nextHook.invokeHook(); });\n        };\n        return hooks.reduce(createHookChainR, waitFor || coreservices_1.services.$q.when());\n    };\n    /**\n     * Invokes all the provided TransitionHooks, in order.\n     * Each hook's return value is checked.\n     * If any hook returns a promise, then the rest of the hooks are chained off that promise, and the promise is returned.\n     * If no hook returns a promise, then all hooks are processed synchronously.\n     *\n     * @param hooks the list of TransitionHooks to invoke\n     * @param doneCallback a callback that is invoked after all the hooks have successfully completed\n     *\n     * @returns a promise for the async result, or the result of the callback\n     */\n    TransitionHook.invokeHooks = function (hooks, doneCallback) {\n        for (var idx = 0; idx < hooks.length; idx++) {\n            var hookResult = hooks[idx].invokeHook();\n            if (predicates_1.isPromise(hookResult)) {\n                var remainingHooks = hooks.slice(idx + 1);\n                return TransitionHook.chain(remainingHooks, hookResult)\n                    .then(doneCallback);\n            }\n        }\n        return doneCallback();\n    };\n    /**\n     * Run all TransitionHooks, ignoring their return value.\n     */\n    TransitionHook.runAllHooks = function (hooks) {\n        hooks.forEach(function (hook) { return hook.invokeHook(); });\n    };\n    return TransitionHook;\n}());\n/**\n * These GetResultHandler(s) are used by [[invokeHook]] below\n * Each HookType chooses a GetResultHandler (See: [[TransitionService._defineCoreEvents]])\n */\nTransitionHook.HANDLE_RESULT = function (hook) { return function (result) {\n    return hook.handleHookResult(result);\n}; };\n/**\n * If the result is a promise rejection, log it.\n * Otherwise, ignore the result.\n */\nTransitionHook.LOG_REJECTED_RESULT = function (hook) { return function (result) {\n    predicates_1.isPromise(result) && result.catch(function (err) {\n        return hook.logError(rejectFactory_1.Rejection.normalize(err));\n    });\n    return undefined;\n}; };\n/**\n * These GetErrorHandler(s) are used by [[invokeHook]] below\n * Each HookType chooses a GetErrorHandler (See: [[TransitionService._defineCoreEvents]])\n */\nTransitionHook.LOG_ERROR = function (hook) { return function (error) {\n    return hook.logError(error);\n}; };\nTransitionHook.REJECT_ERROR = function (hook) { return function (error) {\n    return common_1.silentRejection(error);\n}; };\nTransitionHook.THROW_ERROR = function (hook) { return function (error) {\n    throw error;\n}; };\nexports.TransitionHook = TransitionHook;\n//# sourceMappingURL=transitionHook.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/transition/transitionHook.js\n// module id = 5NUy\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar common_1 = require(\"../common/common\");\n/**\n * A [[TransitionHookFn]] which updates global UI-Router state\n *\n * Registered using `transitionService.onBefore({}, updateGlobalState);`\n *\n * Before a [[Transition]] starts, updates the global value of \"the current transition\" ([[Globals.transition]]).\n * After a successful [[Transition]], updates the global values of \"the current state\"\n * ([[Globals.current]] and [[Globals.$current]]) and \"the current param values\" ([[Globals.params]]).\n *\n * See also the deprecated properties:\n * [[StateService.transition]], [[StateService.current]], [[StateService.params]]\n */\nvar updateGlobalState = function (trans) {\n    var globals = trans.router.globals;\n    var transitionSuccessful = function () {\n        globals.successfulTransitions.enqueue(trans);\n        globals.$current = trans.$to();\n        globals.current = globals.$current.self;\n        common_1.copy(trans.params(), globals.params);\n    };\n    var clearCurrentTransition = function () {\n        // Do not clear globals.transition if a different transition has started in the meantime\n        if (globals.transition === trans)\n            globals.transition = null;\n    };\n    trans.onSuccess({}, transitionSuccessful, { priority: 10000 });\n    trans.promise.then(clearCurrentTransition, clearCurrentTransition);\n};\nexports.registerUpdateGlobalState = function (transitionService) {\n    return transitionService.onCreate({}, updateGlobalState);\n};\n//# sourceMappingURL=updateGlobals.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/hooks/updateGlobals.js\n// module id = 5YGX\n// module chunks = 0","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./urlMatcher\"));\n__export(require(\"./urlMatcherFactory\"));\n__export(require(\"./urlRouter\"));\n__export(require(\"./urlRule\"));\n__export(require(\"./urlService\"));\n//# sourceMappingURL=index.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/url/index.js\n// module id = 6Yox\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @coreapi\n * @module core\n */ /** */\nvar urlMatcherFactory_1 = require(\"./url/urlMatcherFactory\");\nvar urlRouter_1 = require(\"./url/urlRouter\");\nvar transitionService_1 = require(\"./transition/transitionService\");\nvar view_1 = require(\"./view/view\");\nvar stateRegistry_1 = require(\"./state/stateRegistry\");\nvar stateService_1 = require(\"./state/stateService\");\nvar globals_1 = require(\"./globals\");\nvar common_1 = require(\"./common/common\");\nvar predicates_1 = require(\"./common/predicates\");\nvar urlService_1 = require(\"./url/urlService\");\nvar trace_1 = require(\"./common/trace\");\n/** @hidden */\nvar _routerInstance = 0;\n/**\n * The master class used to instantiate an instance of UI-Router.\n *\n * UI-Router (for each specific framework) will create an instance of this class during bootstrap.\n * This class instantiates and wires the UI-Router services together.\n *\n * After a new instance of the UIRouter class is created, it should be configured for your app.\n * For instance, app states should be registered with the [[UIRouter.stateRegistry]].\n *\n * ---\n *\n * Normally the framework code will bootstrap UI-Router.\n * If you are bootstrapping UIRouter manually, tell it to monitor the URL by calling\n * [[UrlService.listen]] then [[UrlService.sync]].\n */\nvar UIRouter = (function () {\n    /**\n     * Creates a new `UIRouter` object\n     *\n     * @param locationService a [[LocationServices]] implementation\n     * @param locationConfig a [[LocationConfig]] implementation\n     * @internalapi\n     */\n    function UIRouter(locationService, locationConfig) {\n        if (locationService === void 0) { locationService = urlService_1.UrlService.locationServiceStub; }\n        if (locationConfig === void 0) { locationConfig = urlService_1.UrlService.locationConfigStub; }\n        this.locationService = locationService;\n        this.locationConfig = locationConfig;\n        /** @hidden */ this.$id = _routerInstance++;\n        /** @hidden */ this._disposed = false;\n        /** @hidden */ this._disposables = [];\n        /** Provides trace information to the console */\n        this.trace = trace_1.trace;\n        /** Provides services related to ui-view synchronization */\n        this.viewService = new view_1.ViewService();\n        /** Provides services related to Transitions */\n        this.transitionService = new transitionService_1.TransitionService(this);\n        /** Global router state */\n        this.globals = new globals_1.UIRouterGlobals();\n        /**\n         * Deprecated for public use. Use [[urlService]] instead.\n         * @deprecated Use [[urlService]] instead\n         */\n        this.urlMatcherFactory = new urlMatcherFactory_1.UrlMatcherFactory();\n        /**\n         * Deprecated for public use. Use [[urlService]] instead.\n         * @deprecated Use [[urlService]] instead\n         */\n        this.urlRouter = new urlRouter_1.UrlRouter(this);\n        /** Provides a registry for states, and related registration services */\n        this.stateRegistry = new stateRegistry_1.StateRegistry(this);\n        /** Provides services related to states */\n        this.stateService = new stateService_1.StateService(this);\n        /** Provides services related to the URL */\n        this.urlService = new urlService_1.UrlService(this);\n        /** @hidden */\n        this._plugins = {};\n        this.viewService._pluginapi._rootViewContext(this.stateRegistry.root());\n        this.globals.$current = this.stateRegistry.root();\n        this.globals.current = this.globals.$current.self;\n        this.disposable(this.globals);\n        this.disposable(this.stateService);\n        this.disposable(this.stateRegistry);\n        this.disposable(this.transitionService);\n        this.disposable(this.urlRouter);\n        this.disposable(locationService);\n        this.disposable(locationConfig);\n    }\n    /** Registers an object to be notified when the router is disposed */\n    UIRouter.prototype.disposable = function (disposable) {\n        this._disposables.push(disposable);\n    };\n    /**\n     * Disposes this router instance\n     *\n     * When called, clears resources retained by the router by calling `dispose(this)` on all\n     * registered [[disposable]] objects.\n     *\n     * Or, if a `disposable` object is provided, calls `dispose(this)` on that object only.\n     *\n     * @param disposable (optional) the disposable to dispose\n     */\n    UIRouter.prototype.dispose = function (disposable) {\n        var _this = this;\n        if (disposable && predicates_1.isFunction(disposable.dispose)) {\n            disposable.dispose(this);\n            return undefined;\n        }\n        this._disposed = true;\n        this._disposables.slice().forEach(function (d) {\n            try {\n                typeof d.dispose === 'function' && d.dispose(_this);\n                common_1.removeFrom(_this._disposables, d);\n            }\n            catch (ignored) { }\n        });\n    };\n    /**\n     * Adds a plugin to UI-Router\n     *\n     * This method adds a UI-Router Plugin.\n     * A plugin can enhance or change UI-Router behavior using any public API.\n     *\n     * #### Example:\n     * ```js\n     * import { MyCoolPlugin } from \"ui-router-cool-plugin\";\n     *\n     * var plugin = router.addPlugin(MyCoolPlugin);\n     * ```\n     *\n     * ### Plugin authoring\n     *\n     * A plugin is simply a class (or constructor function) which accepts a [[UIRouter]] instance and (optionally) an options object.\n     *\n     * The plugin can implement its functionality using any of the public APIs of [[UIRouter]].\n     * For example, it may configure router options or add a Transition Hook.\n     *\n     * The plugin can then be published as a separate module.\n     *\n     * #### Example:\n     * ```js\n     * export class MyAuthPlugin implements UIRouterPlugin {\n     *   constructor(router: UIRouter, options: any) {\n     *     this.name = \"MyAuthPlugin\";\n     *     let $transitions = router.transitionService;\n     *     let $state = router.stateService;\n     *\n     *     let authCriteria = {\n     *       to: (state) => state.data && state.data.requiresAuth\n     *     };\n     *\n     *     function authHook(transition: Transition) {\n     *       let authService = transition.injector().get('AuthService');\n     *       if (!authService.isAuthenticated()) {\n     *         return $state.target('login');\n     *       }\n     *     }\n     *\n     *     $transitions.onStart(authCriteria, authHook);\n     *   }\n     * }\n     * ```\n     *\n     * @param plugin one of:\n     *        - a plugin class which implements [[UIRouterPlugin]]\n     *        - a constructor function for a [[UIRouterPlugin]] which accepts a [[UIRouter]] instance\n     *        - a factory function which accepts a [[UIRouter]] instance and returns a [[UIRouterPlugin]] instance\n     * @param options options to pass to the plugin class/factory\n     * @returns the registered plugin instance\n     */\n    UIRouter.prototype.plugin = function (plugin, options) {\n        if (options === void 0) { options = {}; }\n        var pluginInstance = new plugin(this, options);\n        if (!pluginInstance.name)\n            throw new Error(\"Required property `name` missing on plugin: \" + pluginInstance);\n        this._disposables.push(pluginInstance);\n        return this._plugins[pluginInstance.name] = pluginInstance;\n    };\n    UIRouter.prototype.getPlugin = function (pluginName) {\n        return pluginName ? this._plugins[pluginName] : common_1.values(this._plugins);\n    };\n    return UIRouter;\n}());\nexports.UIRouter = UIRouter;\n//# sourceMappingURL=router.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/router.js\n// module id = 7UVt\n// module chunks = 0","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/** @module resolve */ /** for typedoc */\n__export(require(\"./interface\"));\n__export(require(\"./resolvable\"));\n__export(require(\"./resolveContext\"));\n//# sourceMappingURL=index.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/resolve/index.js\n// module id = 9f0h\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/** @module state */ /** for typedoc */\nvar predicates_1 = require(\"../common/predicates\");\nvar common_1 = require(\"../common/common\");\nvar StateMatcher = (function () {\n    function StateMatcher(_states) {\n        this._states = _states;\n    }\n    StateMatcher.prototype.isRelative = function (stateName) {\n        stateName = stateName || \"\";\n        return stateName.indexOf(\".\") === 0 || stateName.indexOf(\"^\") === 0;\n    };\n    StateMatcher.prototype.find = function (stateOrName, base, matchGlob) {\n        if (matchGlob === void 0) { matchGlob = true; }\n        if (!stateOrName && stateOrName !== \"\")\n            return undefined;\n        var isStr = predicates_1.isString(stateOrName);\n        var name = isStr ? stateOrName : stateOrName.name;\n        if (this.isRelative(name))\n            name = this.resolvePath(name, base);\n        var state = this._states[name];\n        if (state && (isStr || (!isStr && (state === stateOrName || state.self === stateOrName)))) {\n            return state;\n        }\n        else if (isStr && matchGlob) {\n            var _states = common_1.values(this._states);\n            var matches = _states.filter(function (state) {\n                return state.__stateObjectCache.nameGlob &&\n                    state.__stateObjectCache.nameGlob.matches(name);\n            });\n            if (matches.length > 1) {\n                console.log(\"stateMatcher.find: Found multiple matches for \" + name + \" using glob: \", matches.map(function (match) { return match.name; }));\n            }\n            return matches[0];\n        }\n        return undefined;\n    };\n    StateMatcher.prototype.resolvePath = function (name, base) {\n        if (!base)\n            throw new Error(\"No reference point given for path '\" + name + \"'\");\n        var baseState = this.find(base);\n        var splitName = name.split(\".\"), i = 0, pathLength = splitName.length, current = baseState;\n        for (; i < pathLength; i++) {\n            if (splitName[i] === \"\" && i === 0) {\n                current = baseState;\n                continue;\n            }\n            if (splitName[i] === \"^\") {\n                if (!current.parent)\n                    throw new Error(\"Path '\" + name + \"' not valid for state '\" + baseState.name + \"'\");\n                current = current.parent;\n                continue;\n            }\n            break;\n        }\n        var relName = splitName.slice(i).join(\".\");\n        return current.name + (current.name && relName ? \".\" : \"\") + relName;\n    };\n    return StateMatcher;\n}());\nexports.StateMatcher = StateMatcher;\n//# sourceMappingURL=stateMatcher.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/state/stateMatcher.js\n// module id = ALCb\n// module chunks = 0","\"use strict\";\n/**\n * Functions that manipulate strings\n *\n * Although these functions are exported, they are subject to change without notice.\n *\n * @module common_strings\n */ /** */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar predicates_1 = require(\"./predicates\");\nvar rejectFactory_1 = require(\"../transition/rejectFactory\");\nvar common_1 = require(\"./common\");\nvar hof_1 = require(\"./hof\");\nvar transition_1 = require(\"../transition/transition\");\nvar resolvable_1 = require(\"../resolve/resolvable\");\n/**\n * Returns a string shortened to a maximum length\n *\n * If the string is already less than the `max` length, return the string.\n * Else return the string, shortened to `max - 3` and append three dots (\"...\").\n *\n * @param max the maximum length of the string to return\n * @param str the input string\n */\nfunction maxLength(max, str) {\n    if (str.length <= max)\n        return str;\n    return str.substr(0, max - 3) + \"...\";\n}\nexports.maxLength = maxLength;\n/**\n * Returns a string, with spaces added to the end, up to a desired str length\n *\n * If the string is already longer than the desired length, return the string.\n * Else returns the string, with extra spaces on the end, such that it reaches `length` characters.\n *\n * @param length the desired length of the string to return\n * @param str the input string\n */\nfunction padString(length, str) {\n    while (str.length < length)\n        str += \" \";\n    return str;\n}\nexports.padString = padString;\nfunction kebobString(camelCase) {\n    return camelCase\n        .replace(/^([A-Z])/, function ($1) { return $1.toLowerCase(); }) // replace first char\n        .replace(/([A-Z])/g, function ($1) { return \"-\" + $1.toLowerCase(); }); // replace rest\n}\nexports.kebobString = kebobString;\nfunction _toJson(obj) {\n    return JSON.stringify(obj);\n}\nfunction _fromJson(json) {\n    return predicates_1.isString(json) ? JSON.parse(json) : json;\n}\nfunction promiseToString(p) {\n    return \"Promise(\" + JSON.stringify(p) + \")\";\n}\nfunction functionToString(fn) {\n    var fnStr = fnToString(fn);\n    var namedFunctionMatch = fnStr.match(/^(function [^ ]+\\([^)]*\\))/);\n    var toStr = namedFunctionMatch ? namedFunctionMatch[1] : fnStr;\n    var fnName = fn['name'] || \"\";\n    if (fnName && toStr.match(/function \\(/)) {\n        return 'function ' + fnName + toStr.substr(9);\n    }\n    return toStr;\n}\nexports.functionToString = functionToString;\nfunction fnToString(fn) {\n    var _fn = predicates_1.isArray(fn) ? fn.slice(-1)[0] : fn;\n    return _fn && _fn.toString() || \"undefined\";\n}\nexports.fnToString = fnToString;\nvar stringifyPatternFn = null;\nvar stringifyPattern = function (value) {\n    var isRejection = rejectFactory_1.Rejection.isRejectionPromise;\n    stringifyPatternFn = stringifyPatternFn || hof_1.pattern([\n        [hof_1.not(predicates_1.isDefined), hof_1.val(\"undefined\")],\n        [predicates_1.isNull, hof_1.val(\"null\")],\n        [predicates_1.isPromise, hof_1.val(\"[Promise]\")],\n        [isRejection, function (x) { return x._transitionRejection.toString(); }],\n        [hof_1.is(rejectFactory_1.Rejection), hof_1.invoke(\"toString\")],\n        [hof_1.is(transition_1.Transition), hof_1.invoke(\"toString\")],\n        [hof_1.is(resolvable_1.Resolvable), hof_1.invoke(\"toString\")],\n        [predicates_1.isInjectable, functionToString],\n        [hof_1.val(true), common_1.identity]\n    ]);\n    return stringifyPatternFn(value);\n};\nfunction stringify(o) {\n    var seen = [];\n    function format(val) {\n        if (predicates_1.isObject(val)) {\n            if (seen.indexOf(val) !== -1)\n                return '[circular ref]';\n            seen.push(val);\n        }\n        return stringifyPattern(val);\n    }\n    return JSON.stringify(o, function (key, val) { return format(val); }).replace(/\\\\\"/g, '\"');\n}\nexports.stringify = stringify;\n/** Returns a function that splits a string on a character or substring */\nexports.beforeAfterSubstr = function (char) { return function (str) {\n    if (!str)\n        return [\"\", \"\"];\n    var idx = str.indexOf(char);\n    if (idx === -1)\n        return [str, \"\"];\n    return [str.substr(0, idx), str.substr(idx + 1)];\n}; };\n/**\n * Splits on a delimiter, but returns the delimiters in the array\n *\n * #### Example:\n * ```js\n * var splitOnSlashes = splitOnDelim('/');\n * splitOnSlashes(\"/foo\"); // [\"/\", \"foo\"]\n * splitOnSlashes(\"/foo/\"); // [\"/\", \"foo\", \"/\"]\n * ```\n */\nfunction splitOnDelim(delim) {\n    var re = new RegExp(\"(\" + delim + \")\", \"g\");\n    return function (str) {\n        return str.split(re).filter(common_1.identity);\n    };\n}\nexports.splitOnDelim = splitOnDelim;\n;\n/**\n * Reduce fn that joins neighboring strings\n *\n * Given an array of strings, returns a new array\n * where all neighboring strings have been joined.\n *\n * #### Example:\n * ```js\n * let arr = [\"foo\", \"bar\", 1, \"baz\", \"\", \"qux\" ];\n * arr.reduce(joinNeighborsR, []) // [\"foobar\", 1, \"bazqux\" ]\n * ```\n */\nfunction joinNeighborsR(acc, x) {\n    if (predicates_1.isString(common_1.tail(acc)) && predicates_1.isString(x))\n        return acc.slice(0, -1).concat(common_1.tail(acc) + x);\n    return common_1.pushR(acc, x);\n}\nexports.joinNeighborsR = joinNeighborsR;\n;\n//# sourceMappingURL=strings.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/common/strings.js\n// module id = AvSd\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @coreapi\n * @module core\n */\n/**\n * Matches state names using glob-like pattern strings.\n *\n * Globs can be used in specific APIs including:\n *\n * - [[StateService.is]]\n * - [[StateService.includes]]\n * - The first argument to Hook Registration functions like [[TransitionService.onStart]]\n *    - [[HookMatchCriteria]] and [[HookMatchCriterion]]\n *\n * A `Glob` string is a pattern which matches state names.\n * Nested state names are split into segments (separated by a dot) when processing.\n * The state named `foo.bar.baz` is split into three segments ['foo', 'bar', 'baz']\n *\n * Globs work according to the following rules:\n *\n * ### Exact match:\n *\n * The glob `'A.B'` matches the state named exactly `'A.B'`.\n *\n * | Glob        |Matches states named|Does not match state named|\n * |:------------|:--------------------|:---------------------|\n * | `'A'`       | `'A'`               | `'B'` , `'A.C'`      |\n * | `'A.B'`     | `'A.B'`             | `'A'` , `'A.B.C'`    |\n * | `'foo'`     | `'foo'`             | `'FOO'` , `'foo.bar'`|\n *\n * ### Single star (`*`)\n *\n * A single star (`*`) is a wildcard that matches exactly one segment.\n *\n * | Glob        |Matches states named  |Does not match state named |\n * |:------------|:---------------------|:--------------------------|\n * | `'*'`       | `'A'` , `'Z'`        | `'A.B'` , `'Z.Y.X'`       |\n * | `'A.*'`     | `'A.B'` , `'A.C'`    | `'A'` , `'A.B.C'`         |\n * | `'A.*.*'`   | `'A.B.C'` , `'A.X.Y'`| `'A'`, `'A.B'` , `'Z.Y.X'`|\n *\n * ### Double star (`**`)\n *\n * A double star (`'**'`) is a wildcard that matches *zero or more segments*\n *\n * | Glob        |Matches states named                           |Does not match state named         |\n * |:------------|:----------------------------------------------|:----------------------------------|\n * | `'**'`      | `'A'` , `'A.B'`, `'Z.Y.X'`                    | (matches all states)              |\n * | `'A.**'`    | `'A'` , `'A.B'` , `'A.C.X'`                   | `'Z.Y.X'`                         |\n * | `'**.X'`    | `'X'` , `'A.X'` , `'Z.Y.X'`                   | `'A'` , `'A.login.Z'`             |\n * | `'A.**.X'`  | `'A.X'` , `'A.B.X'` , `'A.B.C.X'`             | `'A'` , `'A.B.C'`                 |\n *\n */\nvar Glob = (function () {\n    function Glob(text) {\n        this.text = text;\n        this.glob = text.split('.');\n        var regexpString = this.text.split('.')\n            .map(function (seg) {\n            if (seg === '**')\n                return '(?:|(?:\\\\.[^.]*)*)';\n            if (seg === '*')\n                return '\\\\.[^.]*';\n            return '\\\\.' + seg;\n        }).join('');\n        this.regexp = new RegExp(\"^\" + regexpString + \"$\");\n    }\n    Glob.prototype.matches = function (name) {\n        return this.regexp.test('.' + name);\n    };\n    /** Returns true if the string has glob-like characters in it */\n    Glob.is = function (text) {\n        return !!/[!,*]+/.exec(text);\n    };\n    /** Returns a glob from the string, or null if the string isn't Glob-like */\n    Glob.fromString = function (text) {\n        return Glob.is(text) ? new Glob(text) : null;\n    };\n    return Glob;\n}());\nexports.Glob = Glob;\n//# sourceMappingURL=glob.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/common/glob.js\n// module id = D+d5\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @internalapi\n * @module vanilla\n */\n/** */\nvar predicates_1 = require(\"../common/predicates\");\n/** A `LocationConfig` that delegates to the browser's `location` object */\nvar BrowserLocationConfig = (function () {\n    function BrowserLocationConfig(router, _isHtml5) {\n        if (_isHtml5 === void 0) { _isHtml5 = false; }\n        this._isHtml5 = _isHtml5;\n        this._baseHref = undefined;\n        this._hashPrefix = \"\";\n    }\n    BrowserLocationConfig.prototype.port = function () {\n        if (location.port) {\n            return Number(location.port);\n        }\n        return this.protocol() === 'https' ? 443 : 80;\n    };\n    BrowserLocationConfig.prototype.protocol = function () {\n        return location.protocol.replace(/:/g, '');\n    };\n    BrowserLocationConfig.prototype.host = function () {\n        return location.host;\n    };\n    BrowserLocationConfig.prototype.html5Mode = function () {\n        return this._isHtml5;\n    };\n    BrowserLocationConfig.prototype.hashPrefix = function (newprefix) {\n        return predicates_1.isDefined(newprefix) ? this._hashPrefix = newprefix : this._hashPrefix;\n    };\n    ;\n    BrowserLocationConfig.prototype.baseHref = function (href) {\n        return predicates_1.isDefined(href) ? this._baseHref = href : this._baseHref || this.applyDocumentBaseHref();\n    };\n    BrowserLocationConfig.prototype.applyDocumentBaseHref = function () {\n        var baseTags = document.getElementsByTagName(\"base\");\n        return this._baseHref = baseTags.length ? baseTags[0].href.substr(location.origin.length) : \"\";\n    };\n    BrowserLocationConfig.prototype.dispose = function () { };\n    return BrowserLocationConfig;\n}());\nexports.BrowserLocationConfig = BrowserLocationConfig;\n//# sourceMappingURL=browserLocationConfig.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/vanilla/browserLocationConfig.js\n// module id = Derp\n// module chunks = 0","/**\n * @license AngularJS v1.6.8\n * (c) 2010-2017 Google, Inc. http://angularjs.org\n * License: MIT\n */\n(function(window) {'use strict';\n\n/* exported\n  minErrConfig,\n  errorHandlingConfig,\n  isValidObjectMaxDepth\n*/\n\nvar minErrConfig = {\n  objectMaxDepth: 5\n};\n\n/**\n * @ngdoc function\n * @name angular.errorHandlingConfig\n * @module ng\n * @kind function\n *\n * @description\n * Configure several aspects of error handling in AngularJS if used as a setter or return the\n * current configuration if used as a getter. The following options are supported:\n *\n * - **objectMaxDepth**: The maximum depth to which objects are traversed when stringified for error messages.\n *\n * Omitted or undefined options will leave the corresponding configuration values unchanged.\n *\n * @param {Object=} config - The configuration object. May only contain the options that need to be\n *     updated. Supported keys:\n *\n * * `objectMaxDepth`  **{Number}** - The max depth for stringifying objects. Setting to a\n *   non-positive or non-numeric value, removes the max depth limit.\n *   Default: 5\n */\nfunction errorHandlingConfig(config) {\n  if (isObject(config)) {\n    if (isDefined(config.objectMaxDepth)) {\n      minErrConfig.objectMaxDepth = isValidObjectMaxDepth(config.objectMaxDepth) ? config.objectMaxDepth : NaN;\n    }\n  } else {\n    return minErrConfig;\n  }\n}\n\n/**\n * @private\n * @param {Number} maxDepth\n * @return {boolean}\n */\nfunction isValidObjectMaxDepth(maxDepth) {\n  return isNumber(maxDepth) && maxDepth > 0;\n}\n\n/**\n * @description\n *\n * This object provides a utility for producing rich Error messages within\n * Angular. It can be called as follows:\n *\n * var exampleMinErr = minErr('example');\n * throw exampleMinErr('one', 'This {0} is {1}', foo, bar);\n *\n * The above creates an instance of minErr in the example namespace. The\n * resulting error will have a namespaced error code of example.one.  The\n * resulting error will replace {0} with the value of foo, and {1} with the\n * value of bar. The object is not restricted in the number of arguments it can\n * take.\n *\n * If fewer arguments are specified than necessary for interpolation, the extra\n * interpolation markers will be preserved in the final string.\n *\n * Since data will be parsed statically during a build step, some restrictions\n * are applied with respect to how minErr instances are created and called.\n * Instances should have names of the form namespaceMinErr for a minErr created\n * using minErr('namespace') . Error codes, namespaces and template strings\n * should all be static strings, not variables or general expressions.\n *\n * @param {string} module The namespace to use for the new minErr instance.\n * @param {function} ErrorConstructor Custom error constructor to be instantiated when returning\n *   error from returned function, for cases when a particular type of error is useful.\n * @returns {function(code:string, template:string, ...templateArgs): Error} minErr instance\n */\n\nfunction minErr(module, ErrorConstructor) {\n  ErrorConstructor = ErrorConstructor || Error;\n  return function() {\n    var code = arguments[0],\n      template = arguments[1],\n      message = '[' + (module ? module + ':' : '') + code + '] ',\n      templateArgs = sliceArgs(arguments, 2).map(function(arg) {\n        return toDebugString(arg, minErrConfig.objectMaxDepth);\n      }),\n      paramPrefix, i;\n\n    message += template.replace(/\\{\\d+\\}/g, function(match) {\n      var index = +match.slice(1, -1);\n\n      if (index < templateArgs.length) {\n        return templateArgs[index];\n      }\n\n      return match;\n    });\n\n    message += '\\nhttp://errors.angularjs.org/1.6.8/' +\n      (module ? module + '/' : '') + code;\n\n    for (i = 0, paramPrefix = '?'; i < templateArgs.length; i++, paramPrefix = '&') {\n      message += paramPrefix + 'p' + i + '=' + encodeURIComponent(templateArgs[i]);\n    }\n\n    return new ErrorConstructor(message);\n  };\n}\n\n/* We need to tell ESLint what variables are being exported */\n/* exported\n  angular,\n  msie,\n  jqLite,\n  jQuery,\n  slice,\n  splice,\n  push,\n  toString,\n  minErrConfig,\n  errorHandlingConfig,\n  isValidObjectMaxDepth,\n  ngMinErr,\n  angularModule,\n  uid,\n  REGEX_STRING_REGEXP,\n  VALIDITY_STATE_PROPERTY,\n\n  lowercase,\n  uppercase,\n  manualLowercase,\n  manualUppercase,\n  nodeName_,\n  isArrayLike,\n  forEach,\n  forEachSorted,\n  reverseParams,\n  nextUid,\n  setHashKey,\n  extend,\n  toInt,\n  inherit,\n  merge,\n  noop,\n  identity,\n  valueFn,\n  isUndefined,\n  isDefined,\n  isObject,\n  isBlankObject,\n  isString,\n  isNumber,\n  isNumberNaN,\n  isDate,\n  isError,\n  isArray,\n  isFunction,\n  isRegExp,\n  isWindow,\n  isScope,\n  isFile,\n  isFormData,\n  isBlob,\n  isBoolean,\n  isPromiseLike,\n  trim,\n  escapeForRegexp,\n  isElement,\n  makeMap,\n  includes,\n  arrayRemove,\n  copy,\n  simpleCompare,\n  equals,\n  csp,\n  jq,\n  concat,\n  sliceArgs,\n  bind,\n  toJsonReplacer,\n  toJson,\n  fromJson,\n  convertTimezoneToLocal,\n  timezoneToOffset,\n  startingTag,\n  tryDecodeURIComponent,\n  parseKeyValue,\n  toKeyValue,\n  encodeUriSegment,\n  encodeUriQuery,\n  angularInit,\n  bootstrap,\n  getTestability,\n  snake_case,\n  bindJQuery,\n  assertArg,\n  assertArgFn,\n  assertNotHasOwnProperty,\n  getter,\n  getBlockNodes,\n  hasOwnProperty,\n  createMap,\n  stringify,\n\n  NODE_TYPE_ELEMENT,\n  NODE_TYPE_ATTRIBUTE,\n  NODE_TYPE_TEXT,\n  NODE_TYPE_COMMENT,\n  NODE_TYPE_DOCUMENT,\n  NODE_TYPE_DOCUMENT_FRAGMENT\n*/\n\n////////////////////////////////////\n\n/**\n * @ngdoc module\n * @name ng\n * @module ng\n * @installation\n * @description\n *\n * The ng module is loaded by default when an AngularJS application is started. The module itself\n * contains the essential components for an AngularJS application to function. The table below\n * lists a high level breakdown of each of the services/factories, filters, directives and testing\n * components available within this core module.\n *\n */\n\nvar REGEX_STRING_REGEXP = /^\\/(.+)\\/([a-z]*)$/;\n\n// The name of a form control's ValidityState property.\n// This is used so that it's possible for internal tests to create mock ValidityStates.\nvar VALIDITY_STATE_PROPERTY = 'validity';\n\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\n/**\n * @ngdoc function\n * @name angular.lowercase\n * @module ng\n * @kind function\n *\n * @deprecated\n * sinceVersion=\"1.5.0\"\n * removeVersion=\"1.7.0\"\n * Use [String.prototype.toLowerCase](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase) instead.\n *\n * @description Converts the specified string to lowercase.\n * @param {string} string String to be converted to lowercase.\n * @returns {string} Lowercased string.\n */\nvar lowercase = function(string) {return isString(string) ? string.toLowerCase() : string;};\n\n/**\n * @ngdoc function\n * @name angular.uppercase\n * @module ng\n * @kind function\n *\n * @deprecated\n * sinceVersion=\"1.5.0\"\n * removeVersion=\"1.7.0\"\n * Use [String.prototype.toUpperCase](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase) instead.\n *\n * @description Converts the specified string to uppercase.\n * @param {string} string String to be converted to uppercase.\n * @returns {string} Uppercased string.\n */\nvar uppercase = function(string) {return isString(string) ? string.toUpperCase() : string;};\n\n\nvar manualLowercase = function(s) {\n  /* eslint-disable no-bitwise */\n  return isString(s)\n      ? s.replace(/[A-Z]/g, function(ch) {return String.fromCharCode(ch.charCodeAt(0) | 32);})\n      : s;\n  /* eslint-enable */\n};\nvar manualUppercase = function(s) {\n  /* eslint-disable no-bitwise */\n  return isString(s)\n      ? s.replace(/[a-z]/g, function(ch) {return String.fromCharCode(ch.charCodeAt(0) & ~32);})\n      : s;\n  /* eslint-enable */\n};\n\n\n// String#toLowerCase and String#toUpperCase don't produce correct results in browsers with Turkish\n// locale, for this reason we need to detect this case and redefine lowercase/uppercase methods\n// with correct but slower alternatives. See https://github.com/angular/angular.js/issues/11387\nif ('i' !== 'I'.toLowerCase()) {\n  lowercase = manualLowercase;\n  uppercase = manualUppercase;\n}\n\n\nvar\n    msie,             // holds major version number for IE, or NaN if UA is not IE.\n    jqLite,           // delay binding since jQuery could be loaded after us.\n    jQuery,           // delay binding\n    slice             = [].slice,\n    splice            = [].splice,\n    push              = [].push,\n    toString          = Object.prototype.toString,\n    getPrototypeOf    = Object.getPrototypeOf,\n    ngMinErr          = minErr('ng'),\n\n    /** @name angular */\n    angular           = window.angular || (window.angular = {}),\n    angularModule,\n    uid               = 0;\n\n// Support: IE 9-11 only\n/**\n * documentMode is an IE-only property\n * http://msdn.microsoft.com/en-us/library/ie/cc196988(v=vs.85).aspx\n */\nmsie = window.document.documentMode;\n\n\n/**\n * @private\n * @param {*} obj\n * @return {boolean} Returns true if `obj` is an array or array-like object (NodeList, Arguments,\n *                   String ...)\n */\nfunction isArrayLike(obj) {\n\n  // `null`, `undefined` and `window` are not array-like\n  if (obj == null || isWindow(obj)) return false;\n\n  // arrays, strings and jQuery/jqLite objects are array like\n  // * jqLite is either the jQuery or jqLite constructor function\n  // * we have to check the existence of jqLite first as this method is called\n  //   via the forEach method when constructing the jqLite object in the first place\n  if (isArray(obj) || isString(obj) || (jqLite && obj instanceof jqLite)) return true;\n\n  // Support: iOS 8.2 (not reproducible in simulator)\n  // \"length\" in obj used to prevent JIT error (gh-11508)\n  var length = 'length' in Object(obj) && obj.length;\n\n  // NodeList objects (with `item` method) and\n  // other objects with suitable length characteristics are array-like\n  return isNumber(length) &&\n    (length >= 0 && ((length - 1) in obj || obj instanceof Array) || typeof obj.item === 'function');\n\n}\n\n/**\n * @ngdoc function\n * @name angular.forEach\n * @module ng\n * @kind function\n *\n * @description\n * Invokes the `iterator` function once for each item in `obj` collection, which can be either an\n * object or an array. The `iterator` function is invoked with `iterator(value, key, obj)`, where `value`\n * is the value of an object property or an array element, `key` is the object property key or\n * array element index and obj is the `obj` itself. Specifying a `context` for the function is optional.\n *\n * It is worth noting that `.forEach` does not iterate over inherited properties because it filters\n * using the `hasOwnProperty` method.\n *\n * Unlike ES262's\n * [Array.prototype.forEach](http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.18),\n * providing 'undefined' or 'null' values for `obj` will not throw a TypeError, but rather just\n * return the value provided.\n *\n   ```js\n     var values = {name: 'misko', gender: 'male'};\n     var log = [];\n     angular.forEach(values, function(value, key) {\n       this.push(key + ': ' + value);\n     }, log);\n     expect(log).toEqual(['name: misko', 'gender: male']);\n   ```\n *\n * @param {Object|Array} obj Object to iterate over.\n * @param {Function} iterator Iterator function.\n * @param {Object=} context Object to become context (`this`) for the iterator function.\n * @returns {Object|Array} Reference to `obj`.\n */\n\nfunction forEach(obj, iterator, context) {\n  var key, length;\n  if (obj) {\n    if (isFunction(obj)) {\n      for (key in obj) {\n        if (key !== 'prototype' && key !== 'length' && key !== 'name' && obj.hasOwnProperty(key)) {\n          iterator.call(context, obj[key], key, obj);\n        }\n      }\n    } else if (isArray(obj) || isArrayLike(obj)) {\n      var isPrimitive = typeof obj !== 'object';\n      for (key = 0, length = obj.length; key < length; key++) {\n        if (isPrimitive || key in obj) {\n          iterator.call(context, obj[key], key, obj);\n        }\n      }\n    } else if (obj.forEach && obj.forEach !== forEach) {\n        obj.forEach(iterator, context, obj);\n    } else if (isBlankObject(obj)) {\n      // createMap() fast path --- Safe to avoid hasOwnProperty check because prototype chain is empty\n      for (key in obj) {\n        iterator.call(context, obj[key], key, obj);\n      }\n    } else if (typeof obj.hasOwnProperty === 'function') {\n      // Slow path for objects inheriting Object.prototype, hasOwnProperty check needed\n      for (key in obj) {\n        if (obj.hasOwnProperty(key)) {\n          iterator.call(context, obj[key], key, obj);\n        }\n      }\n    } else {\n      // Slow path for objects which do not have a method `hasOwnProperty`\n      for (key in obj) {\n        if (hasOwnProperty.call(obj, key)) {\n          iterator.call(context, obj[key], key, obj);\n        }\n      }\n    }\n  }\n  return obj;\n}\n\nfunction forEachSorted(obj, iterator, context) {\n  var keys = Object.keys(obj).sort();\n  for (var i = 0; i < keys.length; i++) {\n    iterator.call(context, obj[keys[i]], keys[i]);\n  }\n  return keys;\n}\n\n\n/**\n * when using forEach the params are value, key, but it is often useful to have key, value.\n * @param {function(string, *)} iteratorFn\n * @returns {function(*, string)}\n */\nfunction reverseParams(iteratorFn) {\n  return function(value, key) {iteratorFn(key, value);};\n}\n\n/**\n * A consistent way of creating unique IDs in angular.\n *\n * Using simple numbers allows us to generate 28.6 million unique ids per second for 10 years before\n * we hit number precision issues in JavaScript.\n *\n * Math.pow(2,53) / 60 / 60 / 24 / 365 / 10 = 28.6M\n *\n * @returns {number} an unique alpha-numeric string\n */\nfunction nextUid() {\n  return ++uid;\n}\n\n\n/**\n * Set or clear the hashkey for an object.\n * @param obj object\n * @param h the hashkey (!truthy to delete the hashkey)\n */\nfunction setHashKey(obj, h) {\n  if (h) {\n    obj.$$hashKey = h;\n  } else {\n    delete obj.$$hashKey;\n  }\n}\n\n\nfunction baseExtend(dst, objs, deep) {\n  var h = dst.$$hashKey;\n\n  for (var i = 0, ii = objs.length; i < ii; ++i) {\n    var obj = objs[i];\n    if (!isObject(obj) && !isFunction(obj)) continue;\n    var keys = Object.keys(obj);\n    for (var j = 0, jj = keys.length; j < jj; j++) {\n      var key = keys[j];\n      var src = obj[key];\n\n      if (deep && isObject(src)) {\n        if (isDate(src)) {\n          dst[key] = new Date(src.valueOf());\n        } else if (isRegExp(src)) {\n          dst[key] = new RegExp(src);\n        } else if (src.nodeName) {\n          dst[key] = src.cloneNode(true);\n        } else if (isElement(src)) {\n          dst[key] = src.clone();\n        } else {\n          if (!isObject(dst[key])) dst[key] = isArray(src) ? [] : {};\n          baseExtend(dst[key], [src], true);\n        }\n      } else {\n        dst[key] = src;\n      }\n    }\n  }\n\n  setHashKey(dst, h);\n  return dst;\n}\n\n/**\n * @ngdoc function\n * @name angular.extend\n * @module ng\n * @kind function\n *\n * @description\n * Extends the destination object `dst` by copying own enumerable properties from the `src` object(s)\n * to `dst`. You can specify multiple `src` objects. If you want to preserve original objects, you can do so\n * by passing an empty object as the target: `var object = angular.extend({}, object1, object2)`.\n *\n * **Note:** Keep in mind that `angular.extend` does not support recursive merge (deep copy). Use\n * {@link angular.merge} for this.\n *\n * @param {Object} dst Destination object.\n * @param {...Object} src Source object(s).\n * @returns {Object} Reference to `dst`.\n */\nfunction extend(dst) {\n  return baseExtend(dst, slice.call(arguments, 1), false);\n}\n\n\n/**\n* @ngdoc function\n* @name angular.merge\n* @module ng\n* @kind function\n*\n* @description\n* Deeply extends the destination object `dst` by copying own enumerable properties from the `src` object(s)\n* to `dst`. You can specify multiple `src` objects. If you want to preserve original objects, you can do so\n* by passing an empty object as the target: `var object = angular.merge({}, object1, object2)`.\n*\n* Unlike {@link angular.extend extend()}, `merge()` recursively descends into object properties of source\n* objects, performing a deep copy.\n*\n* @deprecated\n* sinceVersion=\"1.6.5\"\n* This function is deprecated, but will not be removed in the 1.x lifecycle.\n* There are edge cases (see {@link angular.merge#known-issues known issues}) that are not\n* supported by this function. We suggest\n* using [lodash's merge()](https://lodash.com/docs/4.17.4#merge) instead.\n*\n* @knownIssue\n* This is a list of (known) object types that are not handled correctly by this function:\n* - [`Blob`](https://developer.mozilla.org/docs/Web/API/Blob)\n* - [`MediaStream`](https://developer.mozilla.org/docs/Web/API/MediaStream)\n* - [`CanvasGradient`](https://developer.mozilla.org/docs/Web/API/CanvasGradient)\n* - AngularJS {@link $rootScope.Scope scopes};\n*\n* @param {Object} dst Destination object.\n* @param {...Object} src Source object(s).\n* @returns {Object} Reference to `dst`.\n*/\nfunction merge(dst) {\n  return baseExtend(dst, slice.call(arguments, 1), true);\n}\n\n\n\nfunction toInt(str) {\n  return parseInt(str, 10);\n}\n\nvar isNumberNaN = Number.isNaN || function isNumberNaN(num) {\n  // eslint-disable-next-line no-self-compare\n  return num !== num;\n};\n\n\nfunction inherit(parent, extra) {\n  return extend(Object.create(parent), extra);\n}\n\n/**\n * @ngdoc function\n * @name angular.noop\n * @module ng\n * @kind function\n *\n * @description\n * A function that performs no operations. This function can be useful when writing code in the\n * functional style.\n   ```js\n     function foo(callback) {\n       var result = calculateResult();\n       (callback || angular.noop)(result);\n     }\n   ```\n */\nfunction noop() {}\nnoop.$inject = [];\n\n\n/**\n * @ngdoc function\n * @name angular.identity\n * @module ng\n * @kind function\n *\n * @description\n * A function that returns its first argument. This function is useful when writing code in the\n * functional style.\n *\n   ```js\n   function transformer(transformationFn, value) {\n     return (transformationFn || angular.identity)(value);\n   };\n\n   // E.g.\n   function getResult(fn, input) {\n     return (fn || angular.identity)(input);\n   };\n\n   getResult(function(n) { return n * 2; }, 21);   // returns 42\n   getResult(null, 21);                            // returns 21\n   getResult(undefined, 21);                       // returns 21\n   ```\n *\n * @param {*} value to be returned.\n * @returns {*} the value passed in.\n */\nfunction identity($) {return $;}\nidentity.$inject = [];\n\n\nfunction valueFn(value) {return function valueRef() {return value;};}\n\nfunction hasCustomToString(obj) {\n  return isFunction(obj.toString) && obj.toString !== toString;\n}\n\n\n/**\n * @ngdoc function\n * @name angular.isUndefined\n * @module ng\n * @kind function\n *\n * @description\n * Determines if a reference is undefined.\n *\n * @param {*} value Reference to check.\n * @returns {boolean} True if `value` is undefined.\n */\nfunction isUndefined(value) {return typeof value === 'undefined';}\n\n\n/**\n * @ngdoc function\n * @name angular.isDefined\n * @module ng\n * @kind function\n *\n * @description\n * Determines if a reference is defined.\n *\n * @param {*} value Reference to check.\n * @returns {boolean} True if `value` is defined.\n */\nfunction isDefined(value) {return typeof value !== 'undefined';}\n\n\n/**\n * @ngdoc function\n * @name angular.isObject\n * @module ng\n * @kind function\n *\n * @description\n * Determines if a reference is an `Object`. Unlike `typeof` in JavaScript, `null`s are not\n * considered to be objects. Note that JavaScript arrays are objects.\n *\n * @param {*} value Reference to check.\n * @returns {boolean} True if `value` is an `Object` but not `null`.\n */\nfunction isObject(value) {\n  // http://jsperf.com/isobject4\n  return value !== null && typeof value === 'object';\n}\n\n\n/**\n * Determine if a value is an object with a null prototype\n *\n * @returns {boolean} True if `value` is an `Object` with a null prototype\n */\nfunction isBlankObject(value) {\n  return value !== null && typeof value === 'object' && !getPrototypeOf(value);\n}\n\n\n/**\n * @ngdoc function\n * @name angular.isString\n * @module ng\n * @kind function\n *\n * @description\n * Determines if a reference is a `String`.\n *\n * @param {*} value Reference to check.\n * @returns {boolean} True if `value` is a `String`.\n */\nfunction isString(value) {return typeof value === 'string';}\n\n\n/**\n * @ngdoc function\n * @name angular.isNumber\n * @module ng\n * @kind function\n *\n * @description\n * Determines if a reference is a `Number`.\n *\n * This includes the \"special\" numbers `NaN`, `+Infinity` and `-Infinity`.\n *\n * If you wish to exclude these then you can use the native\n * [`isFinite'](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite)\n * method.\n *\n * @param {*} value Reference to check.\n * @returns {boolean} True if `value` is a `Number`.\n */\nfunction isNumber(value) {return typeof value === 'number';}\n\n\n/**\n * @ngdoc function\n * @name angular.isDate\n * @module ng\n * @kind function\n *\n * @description\n * Determines if a value is a date.\n *\n * @param {*} value Reference to check.\n * @returns {boolean} True if `value` is a `Date`.\n */\nfunction isDate(value) {\n  return toString.call(value) === '[object Date]';\n}\n\n\n/**\n * @ngdoc function\n * @name angular.isArray\n * @module ng\n * @kind function\n *\n * @description\n * Determines if a reference is an `Array`. Alias of Array.isArray.\n *\n * @param {*} value Reference to check.\n * @returns {boolean} True if `value` is an `Array`.\n */\nvar isArray = Array.isArray;\n\n/**\n * @description\n * Determines if a reference is an `Error`.\n * Loosely based on https://www.npmjs.com/package/iserror\n *\n * @param {*} value Reference to check.\n * @returns {boolean} True if `value` is an `Error`.\n */\nfunction isError(value) {\n  var tag = toString.call(value);\n  switch (tag) {\n    case '[object Error]': return true;\n    case '[object Exception]': return true;\n    case '[object DOMException]': return true;\n    default: return value instanceof Error;\n  }\n}\n\n/**\n * @ngdoc function\n * @name angular.isFunction\n * @module ng\n * @kind function\n *\n * @description\n * Determines if a reference is a `Function`.\n *\n * @param {*} value Reference to check.\n * @returns {boolean} True if `value` is a `Function`.\n */\nfunction isFunction(value) {return typeof value === 'function';}\n\n\n/**\n * Determines if a value is a regular expression object.\n *\n * @private\n * @param {*} value Reference to check.\n * @returns {boolean} True if `value` is a `RegExp`.\n */\nfunction isRegExp(value) {\n  return toString.call(value) === '[object RegExp]';\n}\n\n\n/**\n * Checks if `obj` is a window object.\n *\n * @private\n * @param {*} obj Object to check\n * @returns {boolean} True if `obj` is a window obj.\n */\nfunction isWindow(obj) {\n  return obj && obj.window === obj;\n}\n\n\nfunction isScope(obj) {\n  return obj && obj.$evalAsync && obj.$watch;\n}\n\n\nfunction isFile(obj) {\n  return toString.call(obj) === '[object File]';\n}\n\n\nfunction isFormData(obj) {\n  return toString.call(obj) === '[object FormData]';\n}\n\n\nfunction isBlob(obj) {\n  return toString.call(obj) === '[object Blob]';\n}\n\n\nfunction isBoolean(value) {\n  return typeof value === 'boolean';\n}\n\n\nfunction isPromiseLike(obj) {\n  return obj && isFunction(obj.then);\n}\n\n\nvar TYPED_ARRAY_REGEXP = /^\\[object (?:Uint8|Uint8Clamped|Uint16|Uint32|Int8|Int16|Int32|Float32|Float64)Array]$/;\nfunction isTypedArray(value) {\n  return value && isNumber(value.length) && TYPED_ARRAY_REGEXP.test(toString.call(value));\n}\n\nfunction isArrayBuffer(obj) {\n  return toString.call(obj) === '[object ArrayBuffer]';\n}\n\n\nvar trim = function(value) {\n  return isString(value) ? value.trim() : value;\n};\n\n// Copied from:\n// http://docs.closure-library.googlecode.com/git/local_closure_goog_string_string.js.source.html#line1021\n// Prereq: s is a string.\nvar escapeForRegexp = function(s) {\n  return s\n    .replace(/([-()[\\]{}+?*.$^|,:#<!\\\\])/g, '\\\\$1')\n    // eslint-disable-next-line no-control-regex\n    .replace(/\\x08/g, '\\\\x08');\n};\n\n\n/**\n * @ngdoc function\n * @name angular.isElement\n * @module ng\n * @kind function\n *\n * @description\n * Determines if a reference is a DOM element (or wrapped jQuery element).\n *\n * @param {*} value Reference to check.\n * @returns {boolean} True if `value` is a DOM element (or wrapped jQuery element).\n */\nfunction isElement(node) {\n  return !!(node &&\n    (node.nodeName  // We are a direct element.\n    || (node.prop && node.attr && node.find)));  // We have an on and find method part of jQuery API.\n}\n\n/**\n * @param str 'key1,key2,...'\n * @returns {object} in the form of {key1:true, key2:true, ...}\n */\nfunction makeMap(str) {\n  var obj = {}, items = str.split(','), i;\n  for (i = 0; i < items.length; i++) {\n    obj[items[i]] = true;\n  }\n  return obj;\n}\n\n\nfunction nodeName_(element) {\n  return lowercase(element.nodeName || (element[0] && element[0].nodeName));\n}\n\nfunction includes(array, obj) {\n  return Array.prototype.indexOf.call(array, obj) !== -1;\n}\n\nfunction arrayRemove(array, value) {\n  var index = array.indexOf(value);\n  if (index >= 0) {\n    array.splice(index, 1);\n  }\n  return index;\n}\n\n/**\n * @ngdoc function\n * @name angular.copy\n * @module ng\n * @kind function\n *\n * @description\n * Creates a deep copy of `source`, which should be an object or an array.\n *\n * * If no destination is supplied, a copy of the object or array is created.\n * * If a destination is provided, all of its elements (for arrays) or properties (for objects)\n *   are deleted and then all elements/properties from the source are copied to it.\n * * If `source` is not an object or array (inc. `null` and `undefined`), `source` is returned.\n * * If `source` is identical to `destination` an exception will be thrown.\n *\n * <br />\n * <div class=\"alert alert-warning\">\n *   Only enumerable properties are taken into account. Non-enumerable properties (both on `source`\n *   and on `destination`) will be ignored.\n * </div>\n *\n * @param {*} source The source that will be used to make a copy.\n *                   Can be any type, including primitives, `null`, and `undefined`.\n * @param {(Object|Array)=} destination Destination into which the source is copied. If\n *     provided, must be of the same type as `source`.\n * @returns {*} The copy or updated `destination`, if `destination` was specified.\n *\n * @example\n  <example module=\"copyExample\" name=\"angular-copy\">\n    <file name=\"index.html\">\n      <div ng-controller=\"ExampleController\">\n        <form novalidate class=\"simple-form\">\n          <label>Name: <input type=\"text\" ng-model=\"user.name\" /></label><br />\n          <label>Age:  <input type=\"number\" ng-model=\"user.age\" /></label><br />\n          Gender: <label><input type=\"radio\" ng-model=\"user.gender\" value=\"male\" />male</label>\n                  <label><input type=\"radio\" ng-model=\"user.gender\" value=\"female\" />female</label><br />\n          <button ng-click=\"reset()\">RESET</button>\n          <button ng-click=\"update(user)\">SAVE</button>\n        </form>\n        <pre>form = {{user | json}}</pre>\n        <pre>leader = {{leader | json}}</pre>\n      </div>\n    </file>\n    <file name=\"script.js\">\n      // Module: copyExample\n      angular.\n        module('copyExample', []).\n        controller('ExampleController', ['$scope', function($scope) {\n          $scope.leader = {};\n\n          $scope.reset = function() {\n            // Example with 1 argument\n            $scope.user = angular.copy($scope.leader);\n          };\n\n          $scope.update = function(user) {\n            // Example with 2 arguments\n            angular.copy(user, $scope.leader);\n          };\n\n          $scope.reset();\n        }]);\n    </file>\n  </example>\n */\nfunction copy(source, destination, maxDepth) {\n  var stackSource = [];\n  var stackDest = [];\n  maxDepth = isValidObjectMaxDepth(maxDepth) ? maxDepth : NaN;\n\n  if (destination) {\n    if (isTypedArray(destination) || isArrayBuffer(destination)) {\n      throw ngMinErr('cpta', 'Can\\'t copy! TypedArray destination cannot be mutated.');\n    }\n    if (source === destination) {\n      throw ngMinErr('cpi', 'Can\\'t copy! Source and destination are identical.');\n    }\n\n    // Empty the destination object\n    if (isArray(destination)) {\n      destination.length = 0;\n    } else {\n      forEach(destination, function(value, key) {\n        if (key !== '$$hashKey') {\n          delete destination[key];\n        }\n      });\n    }\n\n    stackSource.push(source);\n    stackDest.push(destination);\n    return copyRecurse(source, destination, maxDepth);\n  }\n\n  return copyElement(source, maxDepth);\n\n  function copyRecurse(source, destination, maxDepth) {\n    maxDepth--;\n    if (maxDepth < 0) {\n      return '...';\n    }\n    var h = destination.$$hashKey;\n    var key;\n    if (isArray(source)) {\n      for (var i = 0, ii = source.length; i < ii; i++) {\n        destination.push(copyElement(source[i], maxDepth));\n      }\n    } else if (isBlankObject(source)) {\n      // createMap() fast path --- Safe to avoid hasOwnProperty check because prototype chain is empty\n      for (key in source) {\n        destination[key] = copyElement(source[key], maxDepth);\n      }\n    } else if (source && typeof source.hasOwnProperty === 'function') {\n      // Slow path, which must rely on hasOwnProperty\n      for (key in source) {\n        if (source.hasOwnProperty(key)) {\n          destination[key] = copyElement(source[key], maxDepth);\n        }\n      }\n    } else {\n      // Slowest path --- hasOwnProperty can't be called as a method\n      for (key in source) {\n        if (hasOwnProperty.call(source, key)) {\n          destination[key] = copyElement(source[key], maxDepth);\n        }\n      }\n    }\n    setHashKey(destination, h);\n    return destination;\n  }\n\n  function copyElement(source, maxDepth) {\n    // Simple values\n    if (!isObject(source)) {\n      return source;\n    }\n\n    // Already copied values\n    var index = stackSource.indexOf(source);\n    if (index !== -1) {\n      return stackDest[index];\n    }\n\n    if (isWindow(source) || isScope(source)) {\n      throw ngMinErr('cpws',\n        'Can\\'t copy! Making copies of Window or Scope instances is not supported.');\n    }\n\n    var needsRecurse = false;\n    var destination = copyType(source);\n\n    if (destination === undefined) {\n      destination = isArray(source) ? [] : Object.create(getPrototypeOf(source));\n      needsRecurse = true;\n    }\n\n    stackSource.push(source);\n    stackDest.push(destination);\n\n    return needsRecurse\n      ? copyRecurse(source, destination, maxDepth)\n      : destination;\n  }\n\n  function copyType(source) {\n    switch (toString.call(source)) {\n      case '[object Int8Array]':\n      case '[object Int16Array]':\n      case '[object Int32Array]':\n      case '[object Float32Array]':\n      case '[object Float64Array]':\n      case '[object Uint8Array]':\n      case '[object Uint8ClampedArray]':\n      case '[object Uint16Array]':\n      case '[object Uint32Array]':\n        return new source.constructor(copyElement(source.buffer), source.byteOffset, source.length);\n\n      case '[object ArrayBuffer]':\n        // Support: IE10\n        if (!source.slice) {\n          // If we're in this case we know the environment supports ArrayBuffer\n          /* eslint-disable no-undef */\n          var copied = new ArrayBuffer(source.byteLength);\n          new Uint8Array(copied).set(new Uint8Array(source));\n          /* eslint-enable */\n          return copied;\n        }\n        return source.slice(0);\n\n      case '[object Boolean]':\n      case '[object Number]':\n      case '[object String]':\n      case '[object Date]':\n        return new source.constructor(source.valueOf());\n\n      case '[object RegExp]':\n        var re = new RegExp(source.source, source.toString().match(/[^/]*$/)[0]);\n        re.lastIndex = source.lastIndex;\n        return re;\n\n      case '[object Blob]':\n        return new source.constructor([source], {type: source.type});\n    }\n\n    if (isFunction(source.cloneNode)) {\n      return source.cloneNode(true);\n    }\n  }\n}\n\n\n// eslint-disable-next-line no-self-compare\nfunction simpleCompare(a, b) { return a === b || (a !== a && b !== b); }\n\n\n/**\n * @ngdoc function\n * @name angular.equals\n * @module ng\n * @kind function\n *\n * @description\n * Determines if two objects or two values are equivalent. Supports value types, regular\n * expressions, arrays and objects.\n *\n * Two objects or values are considered equivalent if at least one of the following is true:\n *\n * * Both objects or values pass `===` comparison.\n * * Both objects or values are of the same type and all of their properties are equal by\n *   comparing them with `angular.equals`.\n * * Both values are NaN. (In JavaScript, NaN == NaN => false. But we consider two NaN as equal)\n * * Both values represent the same regular expression (In JavaScript,\n *   /abc/ == /abc/ => false. But we consider two regular expressions as equal when their textual\n *   representation matches).\n *\n * During a property comparison, properties of `function` type and properties with names\n * that begin with `$` are ignored.\n *\n * Scope and DOMWindow objects are being compared only by identify (`===`).\n *\n * @param {*} o1 Object or value to compare.\n * @param {*} o2 Object or value to compare.\n * @returns {boolean} True if arguments are equal.\n *\n * @example\n   <example module=\"equalsExample\" name=\"equalsExample\">\n     <file name=\"index.html\">\n      <div ng-controller=\"ExampleController\">\n        <form novalidate>\n          <h3>User 1</h3>\n          Name: <input type=\"text\" ng-model=\"user1.name\">\n          Age: <input type=\"number\" ng-model=\"user1.age\">\n\n          <h3>User 2</h3>\n          Name: <input type=\"text\" ng-model=\"user2.name\">\n          Age: <input type=\"number\" ng-model=\"user2.age\">\n\n          <div>\n            <br/>\n            <input type=\"button\" value=\"Compare\" ng-click=\"compare()\">\n          </div>\n          User 1: <pre>{{user1 | json}}</pre>\n          User 2: <pre>{{user2 | json}}</pre>\n          Equal: <pre>{{result}}</pre>\n        </form>\n      </div>\n    </file>\n    <file name=\"script.js\">\n        angular.module('equalsExample', []).controller('ExampleController', ['$scope', function($scope) {\n          $scope.user1 = {};\n          $scope.user2 = {};\n          $scope.compare = function() {\n            $scope.result = angular.equals($scope.user1, $scope.user2);\n          };\n        }]);\n    </file>\n  </example>\n */\nfunction equals(o1, o2) {\n  if (o1 === o2) return true;\n  if (o1 === null || o2 === null) return false;\n  // eslint-disable-next-line no-self-compare\n  if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN\n  var t1 = typeof o1, t2 = typeof o2, length, key, keySet;\n  if (t1 === t2 && t1 === 'object') {\n    if (isArray(o1)) {\n      if (!isArray(o2)) return false;\n      if ((length = o1.length) === o2.length) {\n        for (key = 0; key < length; key++) {\n          if (!equals(o1[key], o2[key])) return false;\n        }\n        return true;\n      }\n    } else if (isDate(o1)) {\n      if (!isDate(o2)) return false;\n      return simpleCompare(o1.getTime(), o2.getTime());\n    } else if (isRegExp(o1)) {\n      if (!isRegExp(o2)) return false;\n      return o1.toString() === o2.toString();\n    } else {\n      if (isScope(o1) || isScope(o2) || isWindow(o1) || isWindow(o2) ||\n        isArray(o2) || isDate(o2) || isRegExp(o2)) return false;\n      keySet = createMap();\n      for (key in o1) {\n        if (key.charAt(0) === '$' || isFunction(o1[key])) continue;\n        if (!equals(o1[key], o2[key])) return false;\n        keySet[key] = true;\n      }\n      for (key in o2) {\n        if (!(key in keySet) &&\n            key.charAt(0) !== '$' &&\n            isDefined(o2[key]) &&\n            !isFunction(o2[key])) return false;\n      }\n      return true;\n    }\n  }\n  return false;\n}\n\nvar csp = function() {\n  if (!isDefined(csp.rules)) {\n\n\n    var ngCspElement = (window.document.querySelector('[ng-csp]') ||\n                    window.document.querySelector('[data-ng-csp]'));\n\n    if (ngCspElement) {\n      var ngCspAttribute = ngCspElement.getAttribute('ng-csp') ||\n                    ngCspElement.getAttribute('data-ng-csp');\n      csp.rules = {\n        noUnsafeEval: !ngCspAttribute || (ngCspAttribute.indexOf('no-unsafe-eval') !== -1),\n        noInlineStyle: !ngCspAttribute || (ngCspAttribute.indexOf('no-inline-style') !== -1)\n      };\n    } else {\n      csp.rules = {\n        noUnsafeEval: noUnsafeEval(),\n        noInlineStyle: false\n      };\n    }\n  }\n\n  return csp.rules;\n\n  function noUnsafeEval() {\n    try {\n      // eslint-disable-next-line no-new, no-new-func\n      new Function('');\n      return false;\n    } catch (e) {\n      return true;\n    }\n  }\n};\n\n/**\n * @ngdoc directive\n * @module ng\n * @name ngJq\n *\n * @element ANY\n * @param {string=} ngJq the name of the library available under `window`\n * to be used for angular.element\n * @description\n * Use this directive to force the angular.element library.  This should be\n * used to force either jqLite by leaving ng-jq blank or setting the name of\n * the jquery variable under window (eg. jQuery).\n *\n * Since angular looks for this directive when it is loaded (doesn't wait for the\n * DOMContentLoaded event), it must be placed on an element that comes before the script\n * which loads angular. Also, only the first instance of `ng-jq` will be used and all\n * others ignored.\n *\n * @example\n * This example shows how to force jqLite using the `ngJq` directive to the `html` tag.\n ```html\n <!doctype html>\n <html ng-app ng-jq>\n ...\n ...\n </html>\n ```\n * @example\n * This example shows how to use a jQuery based library of a different name.\n * The library name must be available at the top most 'window'.\n ```html\n <!doctype html>\n <html ng-app ng-jq=\"jQueryLib\">\n ...\n ...\n </html>\n ```\n */\nvar jq = function() {\n  if (isDefined(jq.name_)) return jq.name_;\n  var el;\n  var i, ii = ngAttrPrefixes.length, prefix, name;\n  for (i = 0; i < ii; ++i) {\n    prefix = ngAttrPrefixes[i];\n    el = window.document.querySelector('[' + prefix.replace(':', '\\\\:') + 'jq]');\n    if (el) {\n      name = el.getAttribute(prefix + 'jq');\n      break;\n    }\n  }\n\n  return (jq.name_ = name);\n};\n\nfunction concat(array1, array2, index) {\n  return array1.concat(slice.call(array2, index));\n}\n\nfunction sliceArgs(args, startIndex) {\n  return slice.call(args, startIndex || 0);\n}\n\n\n/**\n * @ngdoc function\n * @name angular.bind\n * @module ng\n * @kind function\n *\n * @description\n * Returns a function which calls function `fn` bound to `self` (`self` becomes the `this` for\n * `fn`). You can supply optional `args` that are prebound to the function. This feature is also\n * known as [partial application](http://en.wikipedia.org/wiki/Partial_application), as\n * distinguished from [function currying](http://en.wikipedia.org/wiki/Currying#Contrast_with_partial_function_application).\n *\n * @param {Object} self Context which `fn` should be evaluated in.\n * @param {function()} fn Function to be bound.\n * @param {...*} args Optional arguments to be prebound to the `fn` function call.\n * @returns {function()} Function that wraps the `fn` with all the specified bindings.\n */\nfunction bind(self, fn) {\n  var curryArgs = arguments.length > 2 ? sliceArgs(arguments, 2) : [];\n  if (isFunction(fn) && !(fn instanceof RegExp)) {\n    return curryArgs.length\n      ? function() {\n          return arguments.length\n            ? fn.apply(self, concat(curryArgs, arguments, 0))\n            : fn.apply(self, curryArgs);\n        }\n      : function() {\n          return arguments.length\n            ? fn.apply(self, arguments)\n            : fn.call(self);\n        };\n  } else {\n    // In IE, native methods are not functions so they cannot be bound (note: they don't need to be).\n    return fn;\n  }\n}\n\n\nfunction toJsonReplacer(key, value) {\n  var val = value;\n\n  if (typeof key === 'string' && key.charAt(0) === '$' && key.charAt(1) === '$') {\n    val = undefined;\n  } else if (isWindow(value)) {\n    val = '$WINDOW';\n  } else if (value &&  window.document === value) {\n    val = '$DOCUMENT';\n  } else if (isScope(value)) {\n    val = '$SCOPE';\n  }\n\n  return val;\n}\n\n\n/**\n * @ngdoc function\n * @name angular.toJson\n * @module ng\n * @kind function\n *\n * @description\n * Serializes input into a JSON-formatted string. Properties with leading $$ characters will be\n * stripped since angular uses this notation internally.\n *\n * @param {Object|Array|Date|string|number|boolean} obj Input to be serialized into JSON.\n * @param {boolean|number} [pretty=2] If set to true, the JSON output will contain newlines and whitespace.\n *    If set to an integer, the JSON output will contain that many spaces per indentation.\n * @returns {string|undefined} JSON-ified string representing `obj`.\n * @knownIssue\n *\n * The Safari browser throws a `RangeError` instead of returning `null` when it tries to stringify a `Date`\n * object with an invalid date value. The only reliable way to prevent this is to monkeypatch the\n * `Date.prototype.toJSON` method as follows:\n *\n * ```\n * var _DatetoJSON = Date.prototype.toJSON;\n * Date.prototype.toJSON = function() {\n *   try {\n *     return _DatetoJSON.call(this);\n *   } catch(e) {\n *     if (e instanceof RangeError) {\n *       return null;\n *     }\n *     throw e;\n *   }\n * };\n * ```\n *\n * See https://github.com/angular/angular.js/pull/14221 for more information.\n */\nfunction toJson(obj, pretty) {\n  if (isUndefined(obj)) return undefined;\n  if (!isNumber(pretty)) {\n    pretty = pretty ? 2 : null;\n  }\n  return JSON.stringify(obj, toJsonReplacer, pretty);\n}\n\n\n/**\n * @ngdoc function\n * @name angular.fromJson\n * @module ng\n * @kind function\n *\n * @description\n * Deserializes a JSON string.\n *\n * @param {string} json JSON string to deserialize.\n * @returns {Object|Array|string|number} Deserialized JSON string.\n */\nfunction fromJson(json) {\n  return isString(json)\n      ? JSON.parse(json)\n      : json;\n}\n\n\nvar ALL_COLONS = /:/g;\nfunction timezoneToOffset(timezone, fallback) {\n  // Support: IE 9-11 only, Edge 13-15+\n  // IE/Edge do not \"understand\" colon (`:`) in timezone\n  timezone = timezone.replace(ALL_COLONS, '');\n  var requestedTimezoneOffset = Date.parse('Jan 01, 1970 00:00:00 ' + timezone) / 60000;\n  return isNumberNaN(requestedTimezoneOffset) ? fallback : requestedTimezoneOffset;\n}\n\n\nfunction addDateMinutes(date, minutes) {\n  date = new Date(date.getTime());\n  date.setMinutes(date.getMinutes() + minutes);\n  return date;\n}\n\n\nfunction convertTimezoneToLocal(date, timezone, reverse) {\n  reverse = reverse ? -1 : 1;\n  var dateTimezoneOffset = date.getTimezoneOffset();\n  var timezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);\n  return addDateMinutes(date, reverse * (timezoneOffset - dateTimezoneOffset));\n}\n\n\n/**\n * @returns {string} Returns the string representation of the element.\n */\nfunction startingTag(element) {\n  element = jqLite(element).clone().empty();\n  var elemHtml = jqLite('<div>').append(element).html();\n  try {\n    return element[0].nodeType === NODE_TYPE_TEXT ? lowercase(elemHtml) :\n        elemHtml.\n          match(/^(<[^>]+>)/)[1].\n          replace(/^<([\\w-]+)/, function(match, nodeName) {return '<' + lowercase(nodeName);});\n  } catch (e) {\n    return lowercase(elemHtml);\n  }\n\n}\n\n\n/////////////////////////////////////////////////\n\n/**\n * Tries to decode the URI component without throwing an exception.\n *\n * @private\n * @param str value potential URI component to check.\n * @returns {boolean} True if `value` can be decoded\n * with the decodeURIComponent function.\n */\nfunction tryDecodeURIComponent(value) {\n  try {\n    return decodeURIComponent(value);\n  } catch (e) {\n    // Ignore any invalid uri component.\n  }\n}\n\n\n/**\n * Parses an escaped url query string into key-value pairs.\n * @returns {Object.<string,boolean|Array>}\n */\nfunction parseKeyValue(/**string*/keyValue) {\n  var obj = {};\n  forEach((keyValue || '').split('&'), function(keyValue) {\n    var splitPoint, key, val;\n    if (keyValue) {\n      key = keyValue = keyValue.replace(/\\+/g,'%20');\n      splitPoint = keyValue.indexOf('=');\n      if (splitPoint !== -1) {\n        key = keyValue.substring(0, splitPoint);\n        val = keyValue.substring(splitPoint + 1);\n      }\n      key = tryDecodeURIComponent(key);\n      if (isDefined(key)) {\n        val = isDefined(val) ? tryDecodeURIComponent(val) : true;\n        if (!hasOwnProperty.call(obj, key)) {\n          obj[key] = val;\n        } else if (isArray(obj[key])) {\n          obj[key].push(val);\n        } else {\n          obj[key] = [obj[key],val];\n        }\n      }\n    }\n  });\n  return obj;\n}\n\nfunction toKeyValue(obj) {\n  var parts = [];\n  forEach(obj, function(value, key) {\n    if (isArray(value)) {\n      forEach(value, function(arrayValue) {\n        parts.push(encodeUriQuery(key, true) +\n                   (arrayValue === true ? '' : '=' + encodeUriQuery(arrayValue, true)));\n      });\n    } else {\n    parts.push(encodeUriQuery(key, true) +\n               (value === true ? '' : '=' + encodeUriQuery(value, true)));\n    }\n  });\n  return parts.length ? parts.join('&') : '';\n}\n\n\n/**\n * We need our custom method because encodeURIComponent is too aggressive and doesn't follow\n * http://www.ietf.org/rfc/rfc3986.txt with regards to the character set (pchar) allowed in path\n * segments:\n *    segment       = *pchar\n *    pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n *    pct-encoded   = \"%\" HEXDIG HEXDIG\n *    unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n *    sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n *                     / \"*\" / \"+\" / \",\" / \";\" / \"=\"\n */\nfunction encodeUriSegment(val) {\n  return encodeUriQuery(val, true).\n             replace(/%26/gi, '&').\n             replace(/%3D/gi, '=').\n             replace(/%2B/gi, '+');\n}\n\n\n/**\n * This method is intended for encoding *key* or *value* parts of query component. We need a custom\n * method because encodeURIComponent is too aggressive and encodes stuff that doesn't have to be\n * encoded per http://tools.ietf.org/html/rfc3986:\n *    query         = *( pchar / \"/\" / \"?\" )\n *    pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n *    unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n *    pct-encoded   = \"%\" HEXDIG HEXDIG\n *    sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n *                     / \"*\" / \"+\" / \",\" / \";\" / \"=\"\n */\nfunction encodeUriQuery(val, pctEncodeSpaces) {\n  return encodeURIComponent(val).\n             replace(/%40/gi, '@').\n             replace(/%3A/gi, ':').\n             replace(/%24/g, '$').\n             replace(/%2C/gi, ',').\n             replace(/%3B/gi, ';').\n             replace(/%20/g, (pctEncodeSpaces ? '%20' : '+'));\n}\n\nvar ngAttrPrefixes = ['ng-', 'data-ng-', 'ng:', 'x-ng-'];\n\nfunction getNgAttribute(element, ngAttr) {\n  var attr, i, ii = ngAttrPrefixes.length;\n  for (i = 0; i < ii; ++i) {\n    attr = ngAttrPrefixes[i] + ngAttr;\n    if (isString(attr = element.getAttribute(attr))) {\n      return attr;\n    }\n  }\n  return null;\n}\n\nfunction allowAutoBootstrap(document) {\n  var script = document.currentScript;\n\n  if (!script) {\n    // Support: IE 9-11 only\n    // IE does not have `document.currentScript`\n    return true;\n  }\n\n  // If the `currentScript` property has been clobbered just return false, since this indicates a probable attack\n  if (!(script instanceof window.HTMLScriptElement || script instanceof window.SVGScriptElement)) {\n    return false;\n  }\n\n  var attributes = script.attributes;\n  var srcs = [attributes.getNamedItem('src'), attributes.getNamedItem('href'), attributes.getNamedItem('xlink:href')];\n\n  return srcs.every(function(src) {\n    if (!src) {\n      return true;\n    }\n    if (!src.value) {\n      return false;\n    }\n\n    var link = document.createElement('a');\n    link.href = src.value;\n\n    if (document.location.origin === link.origin) {\n      // Same-origin resources are always allowed, even for non-whitelisted schemes.\n      return true;\n    }\n    // Disabled bootstrapping unless angular.js was loaded from a known scheme used on the web.\n    // This is to prevent angular.js bundled with browser extensions from being used to bypass the\n    // content security policy in web pages and other browser extensions.\n    switch (link.protocol) {\n      case 'http:':\n      case 'https:':\n      case 'ftp:':\n      case 'blob:':\n      case 'file:':\n      case 'data:':\n        return true;\n      default:\n        return false;\n    }\n  });\n}\n\n// Cached as it has to run during loading so that document.currentScript is available.\nvar isAutoBootstrapAllowed = allowAutoBootstrap(window.document);\n\n/**\n * @ngdoc directive\n * @name ngApp\n * @module ng\n *\n * @element ANY\n * @param {angular.Module} ngApp an optional application\n *   {@link angular.module module} name to load.\n * @param {boolean=} ngStrictDi if this attribute is present on the app element, the injector will be\n *   created in \"strict-di\" mode. This means that the application will fail to invoke functions which\n *   do not use explicit function annotation (and are thus unsuitable for minification), as described\n *   in {@link guide/di the Dependency Injection guide}, and useful debugging info will assist in\n *   tracking down the root of these bugs.\n *\n * @description\n *\n * Use this directive to **auto-bootstrap** an AngularJS application. The `ngApp` directive\n * designates the **root element** of the application and is typically placed near the root element\n * of the page - e.g. on the `<body>` or `<html>` tags.\n *\n * There are a few things to keep in mind when using `ngApp`:\n * - only one AngularJS application can be auto-bootstrapped per HTML document. The first `ngApp`\n *   found in the document will be used to define the root element to auto-bootstrap as an\n *   application. To run multiple applications in an HTML document you must manually bootstrap them using\n *   {@link angular.bootstrap} instead.\n * - AngularJS applications cannot be nested within each other.\n * - Do not use a directive that uses {@link ng.$compile#transclusion transclusion} on the same element as `ngApp`.\n *   This includes directives such as {@link ng.ngIf `ngIf`}, {@link ng.ngInclude `ngInclude`} and\n *   {@link ngRoute.ngView `ngView`}.\n *   Doing this misplaces the app {@link ng.$rootElement `$rootElement`} and the app's {@link auto.$injector injector},\n *   causing animations to stop working and making the injector inaccessible from outside the app.\n *\n * You can specify an **AngularJS module** to be used as the root module for the application.  This\n * module will be loaded into the {@link auto.$injector} when the application is bootstrapped. It\n * should contain the application code needed or have dependencies on other modules that will\n * contain the code. See {@link angular.module} for more information.\n *\n * In the example below if the `ngApp` directive were not placed on the `html` element then the\n * document would not be compiled, the `AppController` would not be instantiated and the `{{ a+b }}`\n * would not be resolved to `3`.\n *\n * @example\n *\n * ### Simple Usage\n *\n * `ngApp` is the easiest, and most common way to bootstrap an application.\n *\n <example module=\"ngAppDemo\" name=\"ng-app\">\n   <file name=\"index.html\">\n   <div ng-controller=\"ngAppDemoController\">\n     I can add: {{a}} + {{b}} =  {{ a+b }}\n   </div>\n   </file>\n   <file name=\"script.js\">\n   angular.module('ngAppDemo', []).controller('ngAppDemoController', function($scope) {\n     $scope.a = 1;\n     $scope.b = 2;\n   });\n   </file>\n </example>\n *\n * @example\n *\n * ### With `ngStrictDi`\n *\n * Using `ngStrictDi`, you would see something like this:\n *\n <example ng-app-included=\"true\" name=\"strict-di\">\n   <file name=\"index.html\">\n   <div ng-app=\"ngAppStrictDemo\" ng-strict-di>\n       <div ng-controller=\"GoodController1\">\n           I can add: {{a}} + {{b}} =  {{ a+b }}\n\n           <p>This renders because the controller does not fail to\n              instantiate, by using explicit annotation style (see\n              script.js for details)\n           </p>\n       </div>\n\n       <div ng-controller=\"GoodController2\">\n           Name: <input ng-model=\"name\"><br />\n           Hello, {{name}}!\n\n           <p>This renders because the controller does not fail to\n              instantiate, by using explicit annotation style\n              (see script.js for details)\n           </p>\n       </div>\n\n       <div ng-controller=\"BadController\">\n           I can add: {{a}} + {{b}} =  {{ a+b }}\n\n           <p>The controller could not be instantiated, due to relying\n              on automatic function annotations (which are disabled in\n              strict mode). As such, the content of this section is not\n              interpolated, and there should be an error in your web console.\n           </p>\n       </div>\n   </div>\n   </file>\n   <file name=\"script.js\">\n   angular.module('ngAppStrictDemo', [])\n     // BadController will fail to instantiate, due to relying on automatic function annotation,\n     // rather than an explicit annotation\n     .controller('BadController', function($scope) {\n       $scope.a = 1;\n       $scope.b = 2;\n     })\n     // Unlike BadController, GoodController1 and GoodController2 will not fail to be instantiated,\n     // due to using explicit annotations using the array style and $inject property, respectively.\n     .controller('GoodController1', ['$scope', function($scope) {\n       $scope.a = 1;\n       $scope.b = 2;\n     }])\n     .controller('GoodController2', GoodController2);\n     function GoodController2($scope) {\n       $scope.name = 'World';\n     }\n     GoodController2.$inject = ['$scope'];\n   </file>\n   <file name=\"style.css\">\n   div[ng-controller] {\n       margin-bottom: 1em;\n       -webkit-border-radius: 4px;\n       border-radius: 4px;\n       border: 1px solid;\n       padding: .5em;\n   }\n   div[ng-controller^=Good] {\n       border-color: #d6e9c6;\n       background-color: #dff0d8;\n       color: #3c763d;\n   }\n   div[ng-controller^=Bad] {\n       border-color: #ebccd1;\n       background-color: #f2dede;\n       color: #a94442;\n       margin-bottom: 0;\n   }\n   </file>\n </example>\n */\nfunction angularInit(element, bootstrap) {\n  var appElement,\n      module,\n      config = {};\n\n  // The element `element` has priority over any other element.\n  forEach(ngAttrPrefixes, function(prefix) {\n    var name = prefix + 'app';\n\n    if (!appElement && element.hasAttribute && element.hasAttribute(name)) {\n      appElement = element;\n      module = element.getAttribute(name);\n    }\n  });\n  forEach(ngAttrPrefixes, function(prefix) {\n    var name = prefix + 'app';\n    var candidate;\n\n    if (!appElement && (candidate = element.querySelector('[' + name.replace(':', '\\\\:') + ']'))) {\n      appElement = candidate;\n      module = candidate.getAttribute(name);\n    }\n  });\n  if (appElement) {\n    if (!isAutoBootstrapAllowed) {\n      window.console.error('Angular: disabling automatic bootstrap. <script> protocol indicates ' +\n          'an extension, document.location.href does not match.');\n      return;\n    }\n    config.strictDi = getNgAttribute(appElement, 'strict-di') !== null;\n    bootstrap(appElement, module ? [module] : [], config);\n  }\n}\n\n/**\n * @ngdoc function\n * @name angular.bootstrap\n * @module ng\n * @description\n * Use this function to manually start up angular application.\n *\n * For more information, see the {@link guide/bootstrap Bootstrap guide}.\n *\n * Angular will detect if it has been loaded into the browser more than once and only allow the\n * first loaded script to be bootstrapped and will report a warning to the browser console for\n * each of the subsequent scripts. This prevents strange results in applications, where otherwise\n * multiple instances of Angular try to work on the DOM.\n *\n * <div class=\"alert alert-warning\">\n * **Note:** Protractor based end-to-end tests cannot use this function to bootstrap manually.\n * They must use {@link ng.directive:ngApp ngApp}.\n * </div>\n *\n * <div class=\"alert alert-warning\">\n * **Note:** Do not bootstrap the app on an element with a directive that uses {@link ng.$compile#transclusion transclusion},\n * such as {@link ng.ngIf `ngIf`}, {@link ng.ngInclude `ngInclude`} and {@link ngRoute.ngView `ngView`}.\n * Doing this misplaces the app {@link ng.$rootElement `$rootElement`} and the app's {@link auto.$injector injector},\n * causing animations to stop working and making the injector inaccessible from outside the app.\n * </div>\n *\n * ```html\n * <!doctype html>\n * <html>\n * <body>\n * <div ng-controller=\"WelcomeController\">\n *   {{greeting}}\n * </div>\n *\n * <script src=\"angular.js\"></script>\n * <script>\n *   var app = angular.module('demo', [])\n *   .controller('WelcomeController', function($scope) {\n *       $scope.greeting = 'Welcome!';\n *   });\n *   angular.bootstrap(document, ['demo']);\n * </script>\n * </body>\n * </html>\n * ```\n *\n * @param {DOMElement} element DOM element which is the root of angular application.\n * @param {Array<String|Function|Array>=} modules an array of modules to load into the application.\n *     Each item in the array should be the name of a predefined module or a (DI annotated)\n *     function that will be invoked by the injector as a `config` block.\n *     See: {@link angular.module modules}\n * @param {Object=} config an object for defining configuration options for the application. The\n *     following keys are supported:\n *\n * * `strictDi` - disable automatic function annotation for the application. This is meant to\n *   assist in finding bugs which break minified code. Defaults to `false`.\n *\n * @returns {auto.$injector} Returns the newly created injector for this app.\n */\nfunction bootstrap(element, modules, config) {\n  if (!isObject(config)) config = {};\n  var defaultConfig = {\n    strictDi: false\n  };\n  config = extend(defaultConfig, config);\n  var doBootstrap = function() {\n    element = jqLite(element);\n\n    if (element.injector()) {\n      var tag = (element[0] === window.document) ? 'document' : startingTag(element);\n      // Encode angle brackets to prevent input from being sanitized to empty string #8683.\n      throw ngMinErr(\n          'btstrpd',\n          'App already bootstrapped with this element \\'{0}\\'',\n          tag.replace(/</,'&lt;').replace(/>/,'&gt;'));\n    }\n\n    modules = modules || [];\n    modules.unshift(['$provide', function($provide) {\n      $provide.value('$rootElement', element);\n    }]);\n\n    if (config.debugInfoEnabled) {\n      // Pushing so that this overrides `debugInfoEnabled` setting defined in user's `modules`.\n      modules.push(['$compileProvider', function($compileProvider) {\n        $compileProvider.debugInfoEnabled(true);\n      }]);\n    }\n\n    modules.unshift('ng');\n    var injector = createInjector(modules, config.strictDi);\n    injector.invoke(['$rootScope', '$rootElement', '$compile', '$injector',\n       function bootstrapApply(scope, element, compile, injector) {\n        scope.$apply(function() {\n          element.data('$injector', injector);\n          compile(element)(scope);\n        });\n      }]\n    );\n    return injector;\n  };\n\n  var NG_ENABLE_DEBUG_INFO = /^NG_ENABLE_DEBUG_INFO!/;\n  var NG_DEFER_BOOTSTRAP = /^NG_DEFER_BOOTSTRAP!/;\n\n  if (window && NG_ENABLE_DEBUG_INFO.test(window.name)) {\n    config.debugInfoEnabled = true;\n    window.name = window.name.replace(NG_ENABLE_DEBUG_INFO, '');\n  }\n\n  if (window && !NG_DEFER_BOOTSTRAP.test(window.name)) {\n    return doBootstrap();\n  }\n\n  window.name = window.name.replace(NG_DEFER_BOOTSTRAP, '');\n  angular.resumeBootstrap = function(extraModules) {\n    forEach(extraModules, function(module) {\n      modules.push(module);\n    });\n    return doBootstrap();\n  };\n\n  if (isFunction(angular.resumeDeferredBootstrap)) {\n    angular.resumeDeferredBootstrap();\n  }\n}\n\n/**\n * @ngdoc function\n * @name angular.reloadWithDebugInfo\n * @module ng\n * @description\n * Use this function to reload the current application with debug information turned on.\n * This takes precedence over a call to `$compileProvider.debugInfoEnabled(false)`.\n *\n * See {@link ng.$compileProvider#debugInfoEnabled} for more.\n */\nfunction reloadWithDebugInfo() {\n  window.name = 'NG_ENABLE_DEBUG_INFO!' + window.name;\n  window.location.reload();\n}\n\n/**\n * @name angular.getTestability\n * @module ng\n * @description\n * Get the testability service for the instance of Angular on the given\n * element.\n * @param {DOMElement} element DOM element which is the root of angular application.\n */\nfunction getTestability(rootElement) {\n  var injector = angular.element(rootElement).injector();\n  if (!injector) {\n    throw ngMinErr('test',\n      'no injector found for element argument to getTestability');\n  }\n  return injector.get('$$testability');\n}\n\nvar SNAKE_CASE_REGEXP = /[A-Z]/g;\nfunction snake_case(name, separator) {\n  separator = separator || '_';\n  return name.replace(SNAKE_CASE_REGEXP, function(letter, pos) {\n    return (pos ? separator : '') + letter.toLowerCase();\n  });\n}\n\nvar bindJQueryFired = false;\nfunction bindJQuery() {\n  var originalCleanData;\n\n  if (bindJQueryFired) {\n    return;\n  }\n\n  // bind to jQuery if present;\n  var jqName = jq();\n  jQuery = isUndefined(jqName) ? window.jQuery :   // use jQuery (if present)\n           !jqName             ? undefined     :   // use jqLite\n                                 window[jqName];   // use jQuery specified by `ngJq`\n\n  // Use jQuery if it exists with proper functionality, otherwise default to us.\n  // Angular 1.2+ requires jQuery 1.7+ for on()/off() support.\n  // Angular 1.3+ technically requires at least jQuery 2.1+ but it may work with older\n  // versions. It will not work for sure with jQuery <1.7, though.\n  if (jQuery && jQuery.fn.on) {\n    jqLite = jQuery;\n    extend(jQuery.fn, {\n      scope: JQLitePrototype.scope,\n      isolateScope: JQLitePrototype.isolateScope,\n      controller: /** @type {?} */ (JQLitePrototype).controller,\n      injector: JQLitePrototype.injector,\n      inheritedData: JQLitePrototype.inheritedData\n    });\n\n    // All nodes removed from the DOM via various jQuery APIs like .remove()\n    // are passed through jQuery.cleanData. Monkey-patch this method to fire\n    // the $destroy event on all removed nodes.\n    originalCleanData = jQuery.cleanData;\n    jQuery.cleanData = function(elems) {\n      var events;\n      for (var i = 0, elem; (elem = elems[i]) != null; i++) {\n        events = jQuery._data(elem, 'events');\n        if (events && events.$destroy) {\n          jQuery(elem).triggerHandler('$destroy');\n        }\n      }\n      originalCleanData(elems);\n    };\n  } else {\n    jqLite = JQLite;\n  }\n\n  angular.element = jqLite;\n\n  // Prevent double-proxying.\n  bindJQueryFired = true;\n}\n\n/**\n * throw error if the argument is falsy.\n */\nfunction assertArg(arg, name, reason) {\n  if (!arg) {\n    throw ngMinErr('areq', 'Argument \\'{0}\\' is {1}', (name || '?'), (reason || 'required'));\n  }\n  return arg;\n}\n\nfunction assertArgFn(arg, name, acceptArrayAnnotation) {\n  if (acceptArrayAnnotation && isArray(arg)) {\n      arg = arg[arg.length - 1];\n  }\n\n  assertArg(isFunction(arg), name, 'not a function, got ' +\n      (arg && typeof arg === 'object' ? arg.constructor.name || 'Object' : typeof arg));\n  return arg;\n}\n\n/**\n * throw error if the name given is hasOwnProperty\n * @param  {String} name    the name to test\n * @param  {String} context the context in which the name is used, such as module or directive\n */\nfunction assertNotHasOwnProperty(name, context) {\n  if (name === 'hasOwnProperty') {\n    throw ngMinErr('badname', 'hasOwnProperty is not a valid {0} name', context);\n  }\n}\n\n/**\n * Return the value accessible from the object by path. Any undefined traversals are ignored\n * @param {Object} obj starting object\n * @param {String} path path to traverse\n * @param {boolean} [bindFnToScope=true]\n * @returns {Object} value as accessible by path\n */\n//TODO(misko): this function needs to be removed\nfunction getter(obj, path, bindFnToScope) {\n  if (!path) return obj;\n  var keys = path.split('.');\n  var key;\n  var lastInstance = obj;\n  var len = keys.length;\n\n  for (var i = 0; i < len; i++) {\n    key = keys[i];\n    if (obj) {\n      obj = (lastInstance = obj)[key];\n    }\n  }\n  if (!bindFnToScope && isFunction(obj)) {\n    return bind(lastInstance, obj);\n  }\n  return obj;\n}\n\n/**\n * Return the DOM siblings between the first and last node in the given array.\n * @param {Array} array like object\n * @returns {Array} the inputted object or a jqLite collection containing the nodes\n */\nfunction getBlockNodes(nodes) {\n  // TODO(perf): update `nodes` instead of creating a new object?\n  var node = nodes[0];\n  var endNode = nodes[nodes.length - 1];\n  var blockNodes;\n\n  for (var i = 1; node !== endNode && (node = node.nextSibling); i++) {\n    if (blockNodes || nodes[i] !== node) {\n      if (!blockNodes) {\n        blockNodes = jqLite(slice.call(nodes, 0, i));\n      }\n      blockNodes.push(node);\n    }\n  }\n\n  return blockNodes || nodes;\n}\n\n\n/**\n * Creates a new object without a prototype. This object is useful for lookup without having to\n * guard against prototypically inherited properties via hasOwnProperty.\n *\n * Related micro-benchmarks:\n * - http://jsperf.com/object-create2\n * - http://jsperf.com/proto-map-lookup/2\n * - http://jsperf.com/for-in-vs-object-keys2\n *\n * @returns {Object}\n */\nfunction createMap() {\n  return Object.create(null);\n}\n\nfunction stringify(value) {\n  if (value == null) { // null || undefined\n    return '';\n  }\n  switch (typeof value) {\n    case 'string':\n      break;\n    case 'number':\n      value = '' + value;\n      break;\n    default:\n      if (hasCustomToString(value) && !isArray(value) && !isDate(value)) {\n        value = value.toString();\n      } else {\n        value = toJson(value);\n      }\n  }\n\n  return value;\n}\n\nvar NODE_TYPE_ELEMENT = 1;\nvar NODE_TYPE_ATTRIBUTE = 2;\nvar NODE_TYPE_TEXT = 3;\nvar NODE_TYPE_COMMENT = 8;\nvar NODE_TYPE_DOCUMENT = 9;\nvar NODE_TYPE_DOCUMENT_FRAGMENT = 11;\n\n/**\n * @ngdoc type\n * @name angular.Module\n * @module ng\n * @description\n *\n * Interface for configuring angular {@link angular.module modules}.\n */\n\nfunction setupModuleLoader(window) {\n\n  var $injectorMinErr = minErr('$injector');\n  var ngMinErr = minErr('ng');\n\n  function ensure(obj, name, factory) {\n    return obj[name] || (obj[name] = factory());\n  }\n\n  var angular = ensure(window, 'angular', Object);\n\n  // We need to expose `angular.$$minErr` to modules such as `ngResource` that reference it during bootstrap\n  angular.$$minErr = angular.$$minErr || minErr;\n\n  return ensure(angular, 'module', function() {\n    /** @type {Object.<string, angular.Module>} */\n    var modules = {};\n\n    /**\n     * @ngdoc function\n     * @name angular.module\n     * @module ng\n     * @description\n     *\n     * The `angular.module` is a global place for creating, registering and retrieving Angular\n     * modules.\n     * All modules (angular core or 3rd party) that should be available to an application must be\n     * registered using this mechanism.\n     *\n     * Passing one argument retrieves an existing {@link angular.Module},\n     * whereas passing more than one argument creates a new {@link angular.Module}\n     *\n     *\n     * # Module\n     *\n     * A module is a collection of services, directives, controllers, filters, and configuration information.\n     * `angular.module` is used to configure the {@link auto.$injector $injector}.\n     *\n     * ```js\n     * // Create a new module\n     * var myModule = angular.module('myModule', []);\n     *\n     * // register a new service\n     * myModule.value('appName', 'MyCoolApp');\n     *\n     * // configure existing services inside initialization blocks.\n     * myModule.config(['$locationProvider', function($locationProvider) {\n     *   // Configure existing providers\n     *   $locationProvider.hashPrefix('!');\n     * }]);\n     * ```\n     *\n     * Then you can create an injector and load your modules like this:\n     *\n     * ```js\n     * var injector = angular.injector(['ng', 'myModule'])\n     * ```\n     *\n     * However it's more likely that you'll just use\n     * {@link ng.directive:ngApp ngApp} or\n     * {@link angular.bootstrap} to simplify this process for you.\n     *\n     * @param {!string} name The name of the module to create or retrieve.\n     * @param {!Array.<string>=} requires If specified then new module is being created. If\n     *        unspecified then the module is being retrieved for further configuration.\n     * @param {Function=} configFn Optional configuration function for the module. Same as\n     *        {@link angular.Module#config Module#config()}.\n     * @returns {angular.Module} new module with the {@link angular.Module} api.\n     */\n    return function module(name, requires, configFn) {\n\n      var info = {};\n\n      var assertNotHasOwnProperty = function(name, context) {\n        if (name === 'hasOwnProperty') {\n          throw ngMinErr('badname', 'hasOwnProperty is not a valid {0} name', context);\n        }\n      };\n\n      assertNotHasOwnProperty(name, 'module');\n      if (requires && modules.hasOwnProperty(name)) {\n        modules[name] = null;\n      }\n      return ensure(modules, name, function() {\n        if (!requires) {\n          throw $injectorMinErr('nomod', 'Module \\'{0}\\' is not available! You either misspelled ' +\n             'the module name or forgot to load it. If registering a module ensure that you ' +\n             'specify the dependencies as the second argument.', name);\n        }\n\n        /** @type {!Array.<Array.<*>>} */\n        var invokeQueue = [];\n\n        /** @type {!Array.<Function>} */\n        var configBlocks = [];\n\n        /** @type {!Array.<Function>} */\n        var runBlocks = [];\n\n        var config = invokeLater('$injector', 'invoke', 'push', configBlocks);\n\n        /** @type {angular.Module} */\n        var moduleInstance = {\n          // Private state\n          _invokeQueue: invokeQueue,\n          _configBlocks: configBlocks,\n          _runBlocks: runBlocks,\n\n          /**\n           * @ngdoc method\n           * @name angular.Module#info\n           * @module ng\n           *\n           * @param {Object=} info Information about the module\n           * @returns {Object|Module} The current info object for this module if called as a getter,\n           *                          or `this` if called as a setter.\n           *\n           * @description\n           * Read and write custom information about this module.\n           * For example you could put the version of the module in here.\n           *\n           * ```js\n           * angular.module('myModule', []).info({ version: '1.0.0' });\n           * ```\n           *\n           * The version could then be read back out by accessing the module elsewhere:\n           *\n           * ```\n           * var version = angular.module('myModule').info().version;\n           * ```\n           *\n           * You can also retrieve this information during runtime via the\n           * {@link $injector#modules `$injector.modules`} property:\n           *\n           * ```js\n           * var version = $injector.modules['myModule'].info().version;\n           * ```\n           */\n          info: function(value) {\n            if (isDefined(value)) {\n              if (!isObject(value)) throw ngMinErr('aobj', 'Argument \\'{0}\\' must be an object', 'value');\n              info = value;\n              return this;\n            }\n            return info;\n          },\n\n          /**\n           * @ngdoc property\n           * @name angular.Module#requires\n           * @module ng\n           *\n           * @description\n           * Holds the list of modules which the injector will load before the current module is\n           * loaded.\n           */\n          requires: requires,\n\n          /**\n           * @ngdoc property\n           * @name angular.Module#name\n           * @module ng\n           *\n           * @description\n           * Name of the module.\n           */\n          name: name,\n\n\n          /**\n           * @ngdoc method\n           * @name angular.Module#provider\n           * @module ng\n           * @param {string} name service name\n           * @param {Function} providerType Construction function for creating new instance of the\n           *                                service.\n           * @description\n           * See {@link auto.$provide#provider $provide.provider()}.\n           */\n          provider: invokeLaterAndSetModuleName('$provide', 'provider'),\n\n          /**\n           * @ngdoc method\n           * @name angular.Module#factory\n           * @module ng\n           * @param {string} name service name\n           * @param {Function} providerFunction Function for creating new instance of the service.\n           * @description\n           * See {@link auto.$provide#factory $provide.factory()}.\n           */\n          factory: invokeLaterAndSetModuleName('$provide', 'factory'),\n\n          /**\n           * @ngdoc method\n           * @name angular.Module#service\n           * @module ng\n           * @param {string} name service name\n           * @param {Function} constructor A constructor function that will be instantiated.\n           * @description\n           * See {@link auto.$provide#service $provide.service()}.\n           */\n          service: invokeLaterAndSetModuleName('$provide', 'service'),\n\n          /**\n           * @ngdoc method\n           * @name angular.Module#value\n           * @module ng\n           * @param {string} name service name\n           * @param {*} object Service instance object.\n           * @description\n           * See {@link auto.$provide#value $provide.value()}.\n           */\n          value: invokeLater('$provide', 'value'),\n\n          /**\n           * @ngdoc method\n           * @name angular.Module#constant\n           * @module ng\n           * @param {string} name constant name\n           * @param {*} object Constant value.\n           * @description\n           * Because the constants are fixed, they get applied before other provide methods.\n           * See {@link auto.$provide#constant $provide.constant()}.\n           */\n          constant: invokeLater('$provide', 'constant', 'unshift'),\n\n           /**\n           * @ngdoc method\n           * @name angular.Module#decorator\n           * @module ng\n           * @param {string} name The name of the service to decorate.\n           * @param {Function} decorFn This function will be invoked when the service needs to be\n           *                           instantiated and should return the decorated service instance.\n           * @description\n           * See {@link auto.$provide#decorator $provide.decorator()}.\n           */\n          decorator: invokeLaterAndSetModuleName('$provide', 'decorator', configBlocks),\n\n          /**\n           * @ngdoc method\n           * @name angular.Module#animation\n           * @module ng\n           * @param {string} name animation name\n           * @param {Function} animationFactory Factory function for creating new instance of an\n           *                                    animation.\n           * @description\n           *\n           * **NOTE**: animations take effect only if the **ngAnimate** module is loaded.\n           *\n           *\n           * Defines an animation hook that can be later used with\n           * {@link $animate $animate} service and directives that use this service.\n           *\n           * ```js\n           * module.animation('.animation-name', function($inject1, $inject2) {\n           *   return {\n           *     eventName : function(element, done) {\n           *       //code to run the animation\n           *       //once complete, then run done()\n           *       return function cancellationFunction(element) {\n           *         //code to cancel the animation\n           *       }\n           *     }\n           *   }\n           * })\n           * ```\n           *\n           * See {@link ng.$animateProvider#register $animateProvider.register()} and\n           * {@link ngAnimate ngAnimate module} for more information.\n           */\n          animation: invokeLaterAndSetModuleName('$animateProvider', 'register'),\n\n          /**\n           * @ngdoc method\n           * @name angular.Module#filter\n           * @module ng\n           * @param {string} name Filter name - this must be a valid angular expression identifier\n           * @param {Function} filterFactory Factory function for creating new instance of filter.\n           * @description\n           * See {@link ng.$filterProvider#register $filterProvider.register()}.\n           *\n           * <div class=\"alert alert-warning\">\n           * **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.\n           * Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace\n           * your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores\n           * (`myapp_subsection_filterx`).\n           * </div>\n           */\n          filter: invokeLaterAndSetModuleName('$filterProvider', 'register'),\n\n          /**\n           * @ngdoc method\n           * @name angular.Module#controller\n           * @module ng\n           * @param {string|Object} name Controller name, or an object map of controllers where the\n           *    keys are the names and the values are the constructors.\n           * @param {Function} constructor Controller constructor function.\n           * @description\n           * See {@link ng.$controllerProvider#register $controllerProvider.register()}.\n           */\n          controller: invokeLaterAndSetModuleName('$controllerProvider', 'register'),\n\n          /**\n           * @ngdoc method\n           * @name angular.Module#directive\n           * @module ng\n           * @param {string|Object} name Directive name, or an object map of directives where the\n           *    keys are the names and the values are the factories.\n           * @param {Function} directiveFactory Factory function for creating new instance of\n           * directives.\n           * @description\n           * See {@link ng.$compileProvider#directive $compileProvider.directive()}.\n           */\n          directive: invokeLaterAndSetModuleName('$compileProvider', 'directive'),\n\n          /**\n           * @ngdoc method\n           * @name angular.Module#component\n           * @module ng\n           * @param {string} name Name of the component in camel-case (i.e. myComp which will match as my-comp)\n           * @param {Object} options Component definition object (a simplified\n           *    {@link ng.$compile#directive-definition-object directive definition object})\n           *\n           * @description\n           * See {@link ng.$compileProvider#component $compileProvider.component()}.\n           */\n          component: invokeLaterAndSetModuleName('$compileProvider', 'component'),\n\n          /**\n           * @ngdoc method\n           * @name angular.Module#config\n           * @module ng\n           * @param {Function} configFn Execute this function on module load. Useful for service\n           *    configuration.\n           * @description\n           * Use this method to register work which needs to be performed on module loading.\n           * For more about how to configure services, see\n           * {@link providers#provider-recipe Provider Recipe}.\n           */\n          config: config,\n\n          /**\n           * @ngdoc method\n           * @name angular.Module#run\n           * @module ng\n           * @param {Function} initializationFn Execute this function after injector creation.\n           *    Useful for application initialization.\n           * @description\n           * Use this method to register work which should be performed when the injector is done\n           * loading all modules.\n           */\n          run: function(block) {\n            runBlocks.push(block);\n            return this;\n          }\n        };\n\n        if (configFn) {\n          config(configFn);\n        }\n\n        return moduleInstance;\n\n        /**\n         * @param {string} provider\n         * @param {string} method\n         * @param {String=} insertMethod\n         * @returns {angular.Module}\n         */\n        function invokeLater(provider, method, insertMethod, queue) {\n          if (!queue) queue = invokeQueue;\n          return function() {\n            queue[insertMethod || 'push']([provider, method, arguments]);\n            return moduleInstance;\n          };\n        }\n\n        /**\n         * @param {string} provider\n         * @param {string} method\n         * @returns {angular.Module}\n         */\n        function invokeLaterAndSetModuleName(provider, method, queue) {\n          if (!queue) queue = invokeQueue;\n          return function(recipeName, factoryFunction) {\n            if (factoryFunction && isFunction(factoryFunction)) factoryFunction.$$moduleName = name;\n            queue.push([provider, method, arguments]);\n            return moduleInstance;\n          };\n        }\n      });\n    };\n  });\n\n}\n\n/* global shallowCopy: true */\n\n/**\n * Creates a shallow copy of an object, an array or a primitive.\n *\n * Assumes that there are no proto properties for objects.\n */\nfunction shallowCopy(src, dst) {\n  if (isArray(src)) {\n    dst = dst || [];\n\n    for (var i = 0, ii = src.length; i < ii; i++) {\n      dst[i] = src[i];\n    }\n  } else if (isObject(src)) {\n    dst = dst || {};\n\n    for (var key in src) {\n      if (!(key.charAt(0) === '$' && key.charAt(1) === '$')) {\n        dst[key] = src[key];\n      }\n    }\n  }\n\n  return dst || src;\n}\n\n/* exported toDebugString */\n\nfunction serializeObject(obj, maxDepth) {\n  var seen = [];\n\n  // There is no direct way to stringify object until reaching a specific depth\n  // and a very deep object can cause a performance issue, so we copy the object\n  // based on this specific depth and then stringify it.\n  if (isValidObjectMaxDepth(maxDepth)) {\n    // This file is also included in `angular-loader`, so `copy()` might not always be available in\n    // the closure. Therefore, it is lazily retrieved as `angular.copy()` when needed.\n    obj = angular.copy(obj, null, maxDepth);\n  }\n  return JSON.stringify(obj, function(key, val) {\n    val = toJsonReplacer(key, val);\n    if (isObject(val)) {\n\n      if (seen.indexOf(val) >= 0) return '...';\n\n      seen.push(val);\n    }\n    return val;\n  });\n}\n\nfunction toDebugString(obj, maxDepth) {\n  if (typeof obj === 'function') {\n    return obj.toString().replace(/ \\{[\\s\\S]*$/, '');\n  } else if (isUndefined(obj)) {\n    return 'undefined';\n  } else if (typeof obj !== 'string') {\n    return serializeObject(obj, maxDepth);\n  }\n  return obj;\n}\n\n/* global angularModule: true,\n  version: true,\n\n  $CompileProvider,\n\n  htmlAnchorDirective,\n  inputDirective,\n  inputDirective,\n  formDirective,\n  scriptDirective,\n  selectDirective,\n  optionDirective,\n  ngBindDirective,\n  ngBindHtmlDirective,\n  ngBindTemplateDirective,\n  ngClassDirective,\n  ngClassEvenDirective,\n  ngClassOddDirective,\n  ngCloakDirective,\n  ngControllerDirective,\n  ngFormDirective,\n  ngHideDirective,\n  ngIfDirective,\n  ngIncludeDirective,\n  ngIncludeFillContentDirective,\n  ngInitDirective,\n  ngNonBindableDirective,\n  ngPluralizeDirective,\n  ngRepeatDirective,\n  ngShowDirective,\n  ngStyleDirective,\n  ngSwitchDirective,\n  ngSwitchWhenDirective,\n  ngSwitchDefaultDirective,\n  ngOptionsDirective,\n  ngTranscludeDirective,\n  ngModelDirective,\n  ngListDirective,\n  ngChangeDirective,\n  patternDirective,\n  patternDirective,\n  requiredDirective,\n  requiredDirective,\n  minlengthDirective,\n  minlengthDirective,\n  maxlengthDirective,\n  maxlengthDirective,\n  ngValueDirective,\n  ngModelOptionsDirective,\n  ngAttributeAliasDirectives,\n  ngEventDirectives,\n\n  $AnchorScrollProvider,\n  $AnimateProvider,\n  $CoreAnimateCssProvider,\n  $$CoreAnimateJsProvider,\n  $$CoreAnimateQueueProvider,\n  $$AnimateRunnerFactoryProvider,\n  $$AnimateAsyncRunFactoryProvider,\n  $BrowserProvider,\n  $CacheFactoryProvider,\n  $ControllerProvider,\n  $DateProvider,\n  $DocumentProvider,\n  $$IsDocumentHiddenProvider,\n  $ExceptionHandlerProvider,\n  $FilterProvider,\n  $$ForceReflowProvider,\n  $InterpolateProvider,\n  $IntervalProvider,\n  $HttpProvider,\n  $HttpParamSerializerProvider,\n  $HttpParamSerializerJQLikeProvider,\n  $HttpBackendProvider,\n  $xhrFactoryProvider,\n  $jsonpCallbacksProvider,\n  $LocationProvider,\n  $LogProvider,\n  $$MapProvider,\n  $ParseProvider,\n  $RootScopeProvider,\n  $QProvider,\n  $$QProvider,\n  $$SanitizeUriProvider,\n  $SceProvider,\n  $SceDelegateProvider,\n  $SnifferProvider,\n  $TemplateCacheProvider,\n  $TemplateRequestProvider,\n  $$TestabilityProvider,\n  $TimeoutProvider,\n  $$RAFProvider,\n  $WindowProvider,\n  $$jqLiteProvider,\n  $$CookieReaderProvider\n*/\n\n\n/**\n * @ngdoc object\n * @name angular.version\n * @module ng\n * @description\n * An object that contains information about the current AngularJS version.\n *\n * This object has the following properties:\n *\n * - `full` – `{string}` – Full version string, such as \"0.9.18\".\n * - `major` – `{number}` – Major version number, such as \"0\".\n * - `minor` – `{number}` – Minor version number, such as \"9\".\n * - `dot` – `{number}` – Dot version number, such as \"18\".\n * - `codeName` – `{string}` – Code name of the release, such as \"jiggling-armfat\".\n */\nvar version = {\n  // These placeholder strings will be replaced by grunt's `build` task.\n  // They need to be double- or single-quoted.\n  full: '1.6.8',\n  major: 1,\n  minor: 6,\n  dot: 8,\n  codeName: 'beneficial-tincture'\n};\n\n\nfunction publishExternalAPI(angular) {\n  extend(angular, {\n    'errorHandlingConfig': errorHandlingConfig,\n    'bootstrap': bootstrap,\n    'copy': copy,\n    'extend': extend,\n    'merge': merge,\n    'equals': equals,\n    'element': jqLite,\n    'forEach': forEach,\n    'injector': createInjector,\n    'noop': noop,\n    'bind': bind,\n    'toJson': toJson,\n    'fromJson': fromJson,\n    'identity': identity,\n    'isUndefined': isUndefined,\n    'isDefined': isDefined,\n    'isString': isString,\n    'isFunction': isFunction,\n    'isObject': isObject,\n    'isNumber': isNumber,\n    'isElement': isElement,\n    'isArray': isArray,\n    'version': version,\n    'isDate': isDate,\n    'lowercase': lowercase,\n    'uppercase': uppercase,\n    'callbacks': {$$counter: 0},\n    'getTestability': getTestability,\n    'reloadWithDebugInfo': reloadWithDebugInfo,\n    '$$minErr': minErr,\n    '$$csp': csp,\n    '$$encodeUriSegment': encodeUriSegment,\n    '$$encodeUriQuery': encodeUriQuery,\n    '$$stringify': stringify\n  });\n\n  angularModule = setupModuleLoader(window);\n\n  angularModule('ng', ['ngLocale'], ['$provide',\n    function ngModule($provide) {\n      // $$sanitizeUriProvider needs to be before $compileProvider as it is used by it.\n      $provide.provider({\n        $$sanitizeUri: $$SanitizeUriProvider\n      });\n      $provide.provider('$compile', $CompileProvider).\n        directive({\n            a: htmlAnchorDirective,\n            input: inputDirective,\n            textarea: inputDirective,\n            form: formDirective,\n            script: scriptDirective,\n            select: selectDirective,\n            option: optionDirective,\n            ngBind: ngBindDirective,\n            ngBindHtml: ngBindHtmlDirective,\n            ngBindTemplate: ngBindTemplateDirective,\n            ngClass: ngClassDirective,\n            ngClassEven: ngClassEvenDirective,\n            ngClassOdd: ngClassOddDirective,\n            ngCloak: ngCloakDirective,\n            ngController: ngControllerDirective,\n            ngForm: ngFormDirective,\n            ngHide: ngHideDirective,\n            ngIf: ngIfDirective,\n            ngInclude: ngIncludeDirective,\n            ngInit: ngInitDirective,\n            ngNonBindable: ngNonBindableDirective,\n            ngPluralize: ngPluralizeDirective,\n            ngRepeat: ngRepeatDirective,\n            ngShow: ngShowDirective,\n            ngStyle: ngStyleDirective,\n            ngSwitch: ngSwitchDirective,\n            ngSwitchWhen: ngSwitchWhenDirective,\n            ngSwitchDefault: ngSwitchDefaultDirective,\n            ngOptions: ngOptionsDirective,\n            ngTransclude: ngTranscludeDirective,\n            ngModel: ngModelDirective,\n            ngList: ngListDirective,\n            ngChange: ngChangeDirective,\n            pattern: patternDirective,\n            ngPattern: patternDirective,\n            required: requiredDirective,\n            ngRequired: requiredDirective,\n            minlength: minlengthDirective,\n            ngMinlength: minlengthDirective,\n            maxlength: maxlengthDirective,\n            ngMaxlength: maxlengthDirective,\n            ngValue: ngValueDirective,\n            ngModelOptions: ngModelOptionsDirective\n        }).\n        directive({\n          ngInclude: ngIncludeFillContentDirective\n        }).\n        directive(ngAttributeAliasDirectives).\n        directive(ngEventDirectives);\n      $provide.provider({\n        $anchorScroll: $AnchorScrollProvider,\n        $animate: $AnimateProvider,\n        $animateCss: $CoreAnimateCssProvider,\n        $$animateJs: $$CoreAnimateJsProvider,\n        $$animateQueue: $$CoreAnimateQueueProvider,\n        $$AnimateRunner: $$AnimateRunnerFactoryProvider,\n        $$animateAsyncRun: $$AnimateAsyncRunFactoryProvider,\n        $browser: $BrowserProvider,\n        $cacheFactory: $CacheFactoryProvider,\n        $controller: $ControllerProvider,\n        $document: $DocumentProvider,\n        $$isDocumentHidden: $$IsDocumentHiddenProvider,\n        $exceptionHandler: $ExceptionHandlerProvider,\n        $filter: $FilterProvider,\n        $$forceReflow: $$ForceReflowProvider,\n        $interpolate: $InterpolateProvider,\n        $interval: $IntervalProvider,\n        $http: $HttpProvider,\n        $httpParamSerializer: $HttpParamSerializerProvider,\n        $httpParamSerializerJQLike: $HttpParamSerializerJQLikeProvider,\n        $httpBackend: $HttpBackendProvider,\n        $xhrFactory: $xhrFactoryProvider,\n        $jsonpCallbacks: $jsonpCallbacksProvider,\n        $location: $LocationProvider,\n        $log: $LogProvider,\n        $parse: $ParseProvider,\n        $rootScope: $RootScopeProvider,\n        $q: $QProvider,\n        $$q: $$QProvider,\n        $sce: $SceProvider,\n        $sceDelegate: $SceDelegateProvider,\n        $sniffer: $SnifferProvider,\n        $templateCache: $TemplateCacheProvider,\n        $templateRequest: $TemplateRequestProvider,\n        $$testability: $$TestabilityProvider,\n        $timeout: $TimeoutProvider,\n        $window: $WindowProvider,\n        $$rAF: $$RAFProvider,\n        $$jqLite: $$jqLiteProvider,\n        $$Map: $$MapProvider,\n        $$cookieReader: $$CookieReaderProvider\n      });\n    }\n  ])\n  .info({ angularVersion: '1.6.8' });\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *     Any commits to this file should be reviewed with security in mind.  *\n *   Changes to this file can potentially create security vulnerabilities. *\n *          An approval from 2 Core members with history of modifying      *\n *                         this file is required.                          *\n *                                                                         *\n *  Does the change somehow allow for arbitrary javascript to be executed? *\n *    Or allows for someone to change the prototype of built-in objects?   *\n *     Or gives undesired access to variables likes document or window?    *\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\n/* global\n  JQLitePrototype: true,\n  BOOLEAN_ATTR: true,\n  ALIASED_ATTR: true\n*/\n\n//////////////////////////////////\n//JQLite\n//////////////////////////////////\n\n/**\n * @ngdoc function\n * @name angular.element\n * @module ng\n * @kind function\n *\n * @description\n * Wraps a raw DOM element or HTML string as a [jQuery](http://jquery.com) element.\n *\n * If jQuery is available, `angular.element` is an alias for the\n * [jQuery](http://api.jquery.com/jQuery/) function. If jQuery is not available, `angular.element`\n * delegates to Angular's built-in subset of jQuery, called \"jQuery lite\" or **jqLite**.\n *\n * jqLite is a tiny, API-compatible subset of jQuery that allows\n * Angular to manipulate the DOM in a cross-browser compatible way. jqLite implements only the most\n * commonly needed functionality with the goal of having a very small footprint.\n *\n * To use `jQuery`, simply ensure it is loaded before the `angular.js` file. You can also use the\n * {@link ngJq `ngJq`} directive to specify that jqlite should be used over jQuery, or to use a\n * specific version of jQuery if multiple versions exist on the page.\n *\n * <div class=\"alert alert-info\">**Note:** All element references in Angular are always wrapped with jQuery or\n * jqLite (such as the element argument in a directive's compile / link function). They are never raw DOM references.</div>\n *\n * <div class=\"alert alert-warning\">**Note:** Keep in mind that this function will not find elements\n * by tag name / CSS selector. For lookups by tag name, try instead `angular.element(document).find(...)`\n * or `$document.find()`, or use the standard DOM APIs, e.g. `document.querySelectorAll()`.</div>\n *\n * ## Angular's jqLite\n * jqLite provides only the following jQuery methods:\n *\n * - [`addClass()`](http://api.jquery.com/addClass/) - Does not support a function as first argument\n * - [`after()`](http://api.jquery.com/after/)\n * - [`append()`](http://api.jquery.com/append/)\n * - [`attr()`](http://api.jquery.com/attr/) - Does not support functions as parameters\n * - [`bind()`](http://api.jquery.com/bind/) (_deprecated_, use [`on()`](http://api.jquery.com/on/)) - Does not support namespaces, selectors or eventData\n * - [`children()`](http://api.jquery.com/children/) - Does not support selectors\n * - [`clone()`](http://api.jquery.com/clone/)\n * - [`contents()`](http://api.jquery.com/contents/)\n * - [`css()`](http://api.jquery.com/css/) - Only retrieves inline-styles, does not call `getComputedStyle()`.\n *   As a setter, does not convert numbers to strings or append 'px', and also does not have automatic property prefixing.\n * - [`data()`](http://api.jquery.com/data/)\n * - [`detach()`](http://api.jquery.com/detach/)\n * - [`empty()`](http://api.jquery.com/empty/)\n * - [`eq()`](http://api.jquery.com/eq/)\n * - [`find()`](http://api.jquery.com/find/) - Limited to lookups by tag name\n * - [`hasClass()`](http://api.jquery.com/hasClass/)\n * - [`html()`](http://api.jquery.com/html/)\n * - [`next()`](http://api.jquery.com/next/) - Does not support selectors\n * - [`on()`](http://api.jquery.com/on/) - Does not support namespaces, selectors or eventData\n * - [`off()`](http://api.jquery.com/off/) - Does not support namespaces, selectors or event object as parameter\n * - [`one()`](http://api.jquery.com/one/) - Does not support namespaces or selectors\n * - [`parent()`](http://api.jquery.com/parent/) - Does not support selectors\n * - [`prepend()`](http://api.jquery.com/prepend/)\n * - [`prop()`](http://api.jquery.com/prop/)\n * - [`ready()`](http://api.jquery.com/ready/) (_deprecated_, use `angular.element(callback)` instead of `angular.element(document).ready(callback)`)\n * - [`remove()`](http://api.jquery.com/remove/)\n * - [`removeAttr()`](http://api.jquery.com/removeAttr/) - Does not support multiple attributes\n * - [`removeClass()`](http://api.jquery.com/removeClass/) - Does not support a function as first argument\n * - [`removeData()`](http://api.jquery.com/removeData/)\n * - [`replaceWith()`](http://api.jquery.com/replaceWith/)\n * - [`text()`](http://api.jquery.com/text/)\n * - [`toggleClass()`](http://api.jquery.com/toggleClass/) - Does not support a function as first argument\n * - [`triggerHandler()`](http://api.jquery.com/triggerHandler/) - Passes a dummy event object to handlers\n * - [`unbind()`](http://api.jquery.com/unbind/) (_deprecated_, use [`off()`](http://api.jquery.com/off/)) - Does not support namespaces or event object as parameter\n * - [`val()`](http://api.jquery.com/val/)\n * - [`wrap()`](http://api.jquery.com/wrap/)\n *\n * ## jQuery/jqLite Extras\n * Angular also provides the following additional methods and events to both jQuery and jqLite:\n *\n * ### Events\n * - `$destroy` - AngularJS intercepts all jqLite/jQuery's DOM destruction apis and fires this event\n *    on all DOM nodes being removed.  This can be used to clean up any 3rd party bindings to the DOM\n *    element before it is removed.\n *\n * ### Methods\n * - `controller(name)` - retrieves the controller of the current element or its parent. By default\n *   retrieves controller associated with the `ngController` directive. If `name` is provided as\n *   camelCase directive name, then the controller for this directive will be retrieved (e.g.\n *   `'ngModel'`).\n * - `injector()` - retrieves the injector of the current element or its parent.\n * - `scope()` - retrieves the {@link ng.$rootScope.Scope scope} of the current\n *   element or its parent. Requires {@link guide/production#disabling-debug-data Debug Data} to\n *   be enabled.\n * - `isolateScope()` - retrieves an isolate {@link ng.$rootScope.Scope scope} if one is attached directly to the\n *   current element. This getter should be used only on elements that contain a directive which starts a new isolate\n *   scope. Calling `scope()` on this element always returns the original non-isolate scope.\n *   Requires {@link guide/production#disabling-debug-data Debug Data} to be enabled.\n * - `inheritedData()` - same as `data()`, but walks up the DOM until a value is found or the top\n *   parent element is reached.\n *\n * @knownIssue You cannot spy on `angular.element` if you are using Jasmine version 1.x. See\n * https://github.com/angular/angular.js/issues/14251 for more information.\n *\n * @param {string|DOMElement} element HTML string or DOMElement to be wrapped into jQuery.\n * @returns {Object} jQuery object.\n */\n\nJQLite.expando = 'ng339';\n\nvar jqCache = JQLite.cache = {},\n    jqId = 1;\n\n/*\n * !!! This is an undocumented \"private\" function !!!\n */\nJQLite._data = function(node) {\n  //jQuery always returns an object on cache miss\n  return this.cache[node[this.expando]] || {};\n};\n\nfunction jqNextId() { return ++jqId; }\n\n\nvar DASH_LOWERCASE_REGEXP = /-([a-z])/g;\nvar MS_HACK_REGEXP = /^-ms-/;\nvar MOUSE_EVENT_MAP = { mouseleave: 'mouseout', mouseenter: 'mouseover' };\nvar jqLiteMinErr = minErr('jqLite');\n\n/**\n * Converts kebab-case to camelCase.\n * There is also a special case for the ms prefix starting with a lowercase letter.\n * @param name Name to normalize\n */\nfunction cssKebabToCamel(name) {\n    return kebabToCamel(name.replace(MS_HACK_REGEXP, 'ms-'));\n}\n\nfunction fnCamelCaseReplace(all, letter) {\n  return letter.toUpperCase();\n}\n\n/**\n * Converts kebab-case to camelCase.\n * @param name Name to normalize\n */\nfunction kebabToCamel(name) {\n  return name\n    .replace(DASH_LOWERCASE_REGEXP, fnCamelCaseReplace);\n}\n\nvar SINGLE_TAG_REGEXP = /^<([\\w-]+)\\s*\\/?>(?:<\\/\\1>|)$/;\nvar HTML_REGEXP = /<|&#?\\w+;/;\nvar TAG_NAME_REGEXP = /<([\\w:-]+)/;\nvar XHTML_TAG_REGEXP = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\\w:-]+)[^>]*)\\/>/gi;\n\nvar wrapMap = {\n  'option': [1, '<select multiple=\"multiple\">', '</select>'],\n\n  'thead': [1, '<table>', '</table>'],\n  'col': [2, '<table><colgroup>', '</colgroup></table>'],\n  'tr': [2, '<table><tbody>', '</tbody></table>'],\n  'td': [3, '<table><tbody><tr>', '</tr></tbody></table>'],\n  '_default': [0, '', '']\n};\n\nwrapMap.optgroup = wrapMap.option;\nwrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\nwrapMap.th = wrapMap.td;\n\n\nfunction jqLiteIsTextNode(html) {\n  return !HTML_REGEXP.test(html);\n}\n\nfunction jqLiteAcceptsData(node) {\n  // The window object can accept data but has no nodeType\n  // Otherwise we are only interested in elements (1) and documents (9)\n  var nodeType = node.nodeType;\n  return nodeType === NODE_TYPE_ELEMENT || !nodeType || nodeType === NODE_TYPE_DOCUMENT;\n}\n\nfunction jqLiteHasData(node) {\n  for (var key in jqCache[node.ng339]) {\n    return true;\n  }\n  return false;\n}\n\nfunction jqLiteBuildFragment(html, context) {\n  var tmp, tag, wrap,\n      fragment = context.createDocumentFragment(),\n      nodes = [], i;\n\n  if (jqLiteIsTextNode(html)) {\n    // Convert non-html into a text node\n    nodes.push(context.createTextNode(html));\n  } else {\n    // Convert html into DOM nodes\n    tmp = fragment.appendChild(context.createElement('div'));\n    tag = (TAG_NAME_REGEXP.exec(html) || ['', ''])[1].toLowerCase();\n    wrap = wrapMap[tag] || wrapMap._default;\n    tmp.innerHTML = wrap[1] + html.replace(XHTML_TAG_REGEXP, '<$1></$2>') + wrap[2];\n\n    // Descend through wrappers to the right content\n    i = wrap[0];\n    while (i--) {\n      tmp = tmp.lastChild;\n    }\n\n    nodes = concat(nodes, tmp.childNodes);\n\n    tmp = fragment.firstChild;\n    tmp.textContent = '';\n  }\n\n  // Remove wrapper from fragment\n  fragment.textContent = '';\n  fragment.innerHTML = ''; // Clear inner HTML\n  forEach(nodes, function(node) {\n    fragment.appendChild(node);\n  });\n\n  return fragment;\n}\n\nfunction jqLiteParseHTML(html, context) {\n  context = context || window.document;\n  var parsed;\n\n  if ((parsed = SINGLE_TAG_REGEXP.exec(html))) {\n    return [context.createElement(parsed[1])];\n  }\n\n  if ((parsed = jqLiteBuildFragment(html, context))) {\n    return parsed.childNodes;\n  }\n\n  return [];\n}\n\nfunction jqLiteWrapNode(node, wrapper) {\n  var parent = node.parentNode;\n\n  if (parent) {\n    parent.replaceChild(wrapper, node);\n  }\n\n  wrapper.appendChild(node);\n}\n\n\n// IE9-11 has no method \"contains\" in SVG element and in Node.prototype. Bug #10259.\nvar jqLiteContains = window.Node.prototype.contains || /** @this */ function(arg) {\n  // eslint-disable-next-line no-bitwise\n  return !!(this.compareDocumentPosition(arg) & 16);\n};\n\n/////////////////////////////////////////////\nfunction JQLite(element) {\n  if (element instanceof JQLite) {\n    return element;\n  }\n\n  var argIsString;\n\n  if (isString(element)) {\n    element = trim(element);\n    argIsString = true;\n  }\n  if (!(this instanceof JQLite)) {\n    if (argIsString && element.charAt(0) !== '<') {\n      throw jqLiteMinErr('nosel', 'Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element');\n    }\n    return new JQLite(element);\n  }\n\n  if (argIsString) {\n    jqLiteAddNodes(this, jqLiteParseHTML(element));\n  } else if (isFunction(element)) {\n    jqLiteReady(element);\n  } else {\n    jqLiteAddNodes(this, element);\n  }\n}\n\nfunction jqLiteClone(element) {\n  return element.cloneNode(true);\n}\n\nfunction jqLiteDealoc(element, onlyDescendants) {\n  if (!onlyDescendants && jqLiteAcceptsData(element)) jqLite.cleanData([element]);\n\n  if (element.querySelectorAll) {\n    jqLite.cleanData(element.querySelectorAll('*'));\n  }\n}\n\nfunction jqLiteOff(element, type, fn, unsupported) {\n  if (isDefined(unsupported)) throw jqLiteMinErr('offargs', 'jqLite#off() does not support the `selector` argument');\n\n  var expandoStore = jqLiteExpandoStore(element);\n  var events = expandoStore && expandoStore.events;\n  var handle = expandoStore && expandoStore.handle;\n\n  if (!handle) return; //no listeners registered\n\n  if (!type) {\n    for (type in events) {\n      if (type !== '$destroy') {\n        element.removeEventListener(type, handle);\n      }\n      delete events[type];\n    }\n  } else {\n\n    var removeHandler = function(type) {\n      var listenerFns = events[type];\n      if (isDefined(fn)) {\n        arrayRemove(listenerFns || [], fn);\n      }\n      if (!(isDefined(fn) && listenerFns && listenerFns.length > 0)) {\n        element.removeEventListener(type, handle);\n        delete events[type];\n      }\n    };\n\n    forEach(type.split(' '), function(type) {\n      removeHandler(type);\n      if (MOUSE_EVENT_MAP[type]) {\n        removeHandler(MOUSE_EVENT_MAP[type]);\n      }\n    });\n  }\n}\n\nfunction jqLiteRemoveData(element, name) {\n  var expandoId = element.ng339;\n  var expandoStore = expandoId && jqCache[expandoId];\n\n  if (expandoStore) {\n    if (name) {\n      delete expandoStore.data[name];\n      return;\n    }\n\n    if (expandoStore.handle) {\n      if (expandoStore.events.$destroy) {\n        expandoStore.handle({}, '$destroy');\n      }\n      jqLiteOff(element);\n    }\n    delete jqCache[expandoId];\n    element.ng339 = undefined; // don't delete DOM expandos. IE and Chrome don't like it\n  }\n}\n\n\nfunction jqLiteExpandoStore(element, createIfNecessary) {\n  var expandoId = element.ng339,\n      expandoStore = expandoId && jqCache[expandoId];\n\n  if (createIfNecessary && !expandoStore) {\n    element.ng339 = expandoId = jqNextId();\n    expandoStore = jqCache[expandoId] = {events: {}, data: {}, handle: undefined};\n  }\n\n  return expandoStore;\n}\n\n\nfunction jqLiteData(element, key, value) {\n  if (jqLiteAcceptsData(element)) {\n    var prop;\n\n    var isSimpleSetter = isDefined(value);\n    var isSimpleGetter = !isSimpleSetter && key && !isObject(key);\n    var massGetter = !key;\n    var expandoStore = jqLiteExpandoStore(element, !isSimpleGetter);\n    var data = expandoStore && expandoStore.data;\n\n    if (isSimpleSetter) { // data('key', value)\n      data[kebabToCamel(key)] = value;\n    } else {\n      if (massGetter) {  // data()\n        return data;\n      } else {\n        if (isSimpleGetter) { // data('key')\n          // don't force creation of expandoStore if it doesn't exist yet\n          return data && data[kebabToCamel(key)];\n        } else { // mass-setter: data({key1: val1, key2: val2})\n          for (prop in key) {\n            data[kebabToCamel(prop)] = key[prop];\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction jqLiteHasClass(element, selector) {\n  if (!element.getAttribute) return false;\n  return ((' ' + (element.getAttribute('class') || '') + ' ').replace(/[\\n\\t]/g, ' ').\n      indexOf(' ' + selector + ' ') > -1);\n}\n\nfunction jqLiteRemoveClass(element, cssClasses) {\n  if (cssClasses && element.setAttribute) {\n    var existingClasses = (' ' + (element.getAttribute('class') || '') + ' ')\n                            .replace(/[\\n\\t]/g, ' ');\n    var newClasses = existingClasses;\n\n    forEach(cssClasses.split(' '), function(cssClass) {\n      cssClass = trim(cssClass);\n      newClasses = newClasses.replace(' ' + cssClass + ' ', ' ');\n    });\n\n    if (newClasses !== existingClasses) {\n      element.setAttribute('class', trim(newClasses));\n    }\n  }\n}\n\nfunction jqLiteAddClass(element, cssClasses) {\n  if (cssClasses && element.setAttribute) {\n    var existingClasses = (' ' + (element.getAttribute('class') || '') + ' ')\n                            .replace(/[\\n\\t]/g, ' ');\n    var newClasses = existingClasses;\n\n    forEach(cssClasses.split(' '), function(cssClass) {\n      cssClass = trim(cssClass);\n      if (newClasses.indexOf(' ' + cssClass + ' ') === -1) {\n        newClasses += cssClass + ' ';\n      }\n    });\n\n    if (newClasses !== existingClasses) {\n      element.setAttribute('class', trim(newClasses));\n    }\n  }\n}\n\n\nfunction jqLiteAddNodes(root, elements) {\n  // THIS CODE IS VERY HOT. Don't make changes without benchmarking.\n\n  if (elements) {\n\n    // if a Node (the most common case)\n    if (elements.nodeType) {\n      root[root.length++] = elements;\n    } else {\n      var length = elements.length;\n\n      // if an Array or NodeList and not a Window\n      if (typeof length === 'number' && elements.window !== elements) {\n        if (length) {\n          for (var i = 0; i < length; i++) {\n            root[root.length++] = elements[i];\n          }\n        }\n      } else {\n        root[root.length++] = elements;\n      }\n    }\n  }\n}\n\n\nfunction jqLiteController(element, name) {\n  return jqLiteInheritedData(element, '$' + (name || 'ngController') + 'Controller');\n}\n\nfunction jqLiteInheritedData(element, name, value) {\n  // if element is the document object work with the html element instead\n  // this makes $(document).scope() possible\n  if (element.nodeType === NODE_TYPE_DOCUMENT) {\n    element = element.documentElement;\n  }\n  var names = isArray(name) ? name : [name];\n\n  while (element) {\n    for (var i = 0, ii = names.length; i < ii; i++) {\n      if (isDefined(value = jqLite.data(element, names[i]))) return value;\n    }\n\n    // If dealing with a document fragment node with a host element, and no parent, use the host\n    // element as the parent. This enables directives within a Shadow DOM or polyfilled Shadow DOM\n    // to lookup parent controllers.\n    element = element.parentNode || (element.nodeType === NODE_TYPE_DOCUMENT_FRAGMENT && element.host);\n  }\n}\n\nfunction jqLiteEmpty(element) {\n  jqLiteDealoc(element, true);\n  while (element.firstChild) {\n    element.removeChild(element.firstChild);\n  }\n}\n\nfunction jqLiteRemove(element, keepData) {\n  if (!keepData) jqLiteDealoc(element);\n  var parent = element.parentNode;\n  if (parent) parent.removeChild(element);\n}\n\n\nfunction jqLiteDocumentLoaded(action, win) {\n  win = win || window;\n  if (win.document.readyState === 'complete') {\n    // Force the action to be run async for consistent behavior\n    // from the action's point of view\n    // i.e. it will definitely not be in a $apply\n    win.setTimeout(action);\n  } else {\n    // No need to unbind this handler as load is only ever called once\n    jqLite(win).on('load', action);\n  }\n}\n\nfunction jqLiteReady(fn) {\n  function trigger() {\n    window.document.removeEventListener('DOMContentLoaded', trigger);\n    window.removeEventListener('load', trigger);\n    fn();\n  }\n\n  // check if document is already loaded\n  if (window.document.readyState === 'complete') {\n    window.setTimeout(fn);\n  } else {\n    // We can not use jqLite since we are not done loading and jQuery could be loaded later.\n\n    // Works for modern browsers and IE9\n    window.document.addEventListener('DOMContentLoaded', trigger);\n\n    // Fallback to window.onload for others\n    window.addEventListener('load', trigger);\n  }\n}\n\n//////////////////////////////////////////\n// Functions which are declared directly.\n//////////////////////////////////////////\nvar JQLitePrototype = JQLite.prototype = {\n  ready: jqLiteReady,\n  toString: function() {\n    var value = [];\n    forEach(this, function(e) { value.push('' + e);});\n    return '[' + value.join(', ') + ']';\n  },\n\n  eq: function(index) {\n      return (index >= 0) ? jqLite(this[index]) : jqLite(this[this.length + index]);\n  },\n\n  length: 0,\n  push: push,\n  sort: [].sort,\n  splice: [].splice\n};\n\n//////////////////////////////////////////\n// Functions iterating getter/setters.\n// these functions return self on setter and\n// value on get.\n//////////////////////////////////////////\nvar BOOLEAN_ATTR = {};\nforEach('multiple,selected,checked,disabled,readOnly,required,open'.split(','), function(value) {\n  BOOLEAN_ATTR[lowercase(value)] = value;\n});\nvar BOOLEAN_ELEMENTS = {};\nforEach('input,select,option,textarea,button,form,details'.split(','), function(value) {\n  BOOLEAN_ELEMENTS[value] = true;\n});\nvar ALIASED_ATTR = {\n  'ngMinlength': 'minlength',\n  'ngMaxlength': 'maxlength',\n  'ngMin': 'min',\n  'ngMax': 'max',\n  'ngPattern': 'pattern',\n  'ngStep': 'step'\n};\n\nfunction getBooleanAttrName(element, name) {\n  // check dom last since we will most likely fail on name\n  var booleanAttr = BOOLEAN_ATTR[name.toLowerCase()];\n\n  // booleanAttr is here twice to minimize DOM access\n  return booleanAttr && BOOLEAN_ELEMENTS[nodeName_(element)] && booleanAttr;\n}\n\nfunction getAliasedAttrName(name) {\n  return ALIASED_ATTR[name];\n}\n\nforEach({\n  data: jqLiteData,\n  removeData: jqLiteRemoveData,\n  hasData: jqLiteHasData,\n  cleanData: function jqLiteCleanData(nodes) {\n    for (var i = 0, ii = nodes.length; i < ii; i++) {\n      jqLiteRemoveData(nodes[i]);\n    }\n  }\n}, function(fn, name) {\n  JQLite[name] = fn;\n});\n\nforEach({\n  data: jqLiteData,\n  inheritedData: jqLiteInheritedData,\n\n  scope: function(element) {\n    // Can't use jqLiteData here directly so we stay compatible with jQuery!\n    return jqLite.data(element, '$scope') || jqLiteInheritedData(element.parentNode || element, ['$isolateScope', '$scope']);\n  },\n\n  isolateScope: function(element) {\n    // Can't use jqLiteData here directly so we stay compatible with jQuery!\n    return jqLite.data(element, '$isolateScope') || jqLite.data(element, '$isolateScopeNoTemplate');\n  },\n\n  controller: jqLiteController,\n\n  injector: function(element) {\n    return jqLiteInheritedData(element, '$injector');\n  },\n\n  removeAttr: function(element, name) {\n    element.removeAttribute(name);\n  },\n\n  hasClass: jqLiteHasClass,\n\n  css: function(element, name, value) {\n    name = cssKebabToCamel(name);\n\n    if (isDefined(value)) {\n      element.style[name] = value;\n    } else {\n      return element.style[name];\n    }\n  },\n\n  attr: function(element, name, value) {\n    var ret;\n    var nodeType = element.nodeType;\n    if (nodeType === NODE_TYPE_TEXT || nodeType === NODE_TYPE_ATTRIBUTE || nodeType === NODE_TYPE_COMMENT ||\n      !element.getAttribute) {\n      return;\n    }\n\n    var lowercasedName = lowercase(name);\n    var isBooleanAttr = BOOLEAN_ATTR[lowercasedName];\n\n    if (isDefined(value)) {\n      // setter\n\n      if (value === null || (value === false && isBooleanAttr)) {\n        element.removeAttribute(name);\n      } else {\n        element.setAttribute(name, isBooleanAttr ? lowercasedName : value);\n      }\n    } else {\n      // getter\n\n      ret = element.getAttribute(name);\n\n      if (isBooleanAttr && ret !== null) {\n        ret = lowercasedName;\n      }\n      // Normalize non-existing attributes to undefined (as jQuery).\n      return ret === null ? undefined : ret;\n    }\n  },\n\n  prop: function(element, name, value) {\n    if (isDefined(value)) {\n      element[name] = value;\n    } else {\n      return element[name];\n    }\n  },\n\n  text: (function() {\n    getText.$dv = '';\n    return getText;\n\n    function getText(element, value) {\n      if (isUndefined(value)) {\n        var nodeType = element.nodeType;\n        return (nodeType === NODE_TYPE_ELEMENT || nodeType === NODE_TYPE_TEXT) ? element.textContent : '';\n      }\n      element.textContent = value;\n    }\n  })(),\n\n  val: function(element, value) {\n    if (isUndefined(value)) {\n      if (element.multiple && nodeName_(element) === 'select') {\n        var result = [];\n        forEach(element.options, function(option) {\n          if (option.selected) {\n            result.push(option.value || option.text);\n          }\n        });\n        return result;\n      }\n      return element.value;\n    }\n    element.value = value;\n  },\n\n  html: function(element, value) {\n    if (isUndefined(value)) {\n      return element.innerHTML;\n    }\n    jqLiteDealoc(element, true);\n    element.innerHTML = value;\n  },\n\n  empty: jqLiteEmpty\n}, function(fn, name) {\n  /**\n   * Properties: writes return selection, reads return first value\n   */\n  JQLite.prototype[name] = function(arg1, arg2) {\n    var i, key;\n    var nodeCount = this.length;\n\n    // jqLiteHasClass has only two arguments, but is a getter-only fn, so we need to special-case it\n    // in a way that survives minification.\n    // jqLiteEmpty takes no arguments but is a setter.\n    if (fn !== jqLiteEmpty &&\n        (isUndefined((fn.length === 2 && (fn !== jqLiteHasClass && fn !== jqLiteController)) ? arg1 : arg2))) {\n      if (isObject(arg1)) {\n\n        // we are a write, but the object properties are the key/values\n        for (i = 0; i < nodeCount; i++) {\n          if (fn === jqLiteData) {\n            // data() takes the whole object in jQuery\n            fn(this[i], arg1);\n          } else {\n            for (key in arg1) {\n              fn(this[i], key, arg1[key]);\n            }\n          }\n        }\n        // return self for chaining\n        return this;\n      } else {\n        // we are a read, so read the first child.\n        // TODO: do we still need this?\n        var value = fn.$dv;\n        // Only if we have $dv do we iterate over all, otherwise it is just the first element.\n        var jj = (isUndefined(value)) ? Math.min(nodeCount, 1) : nodeCount;\n        for (var j = 0; j < jj; j++) {\n          var nodeValue = fn(this[j], arg1, arg2);\n          value = value ? value + nodeValue : nodeValue;\n        }\n        return value;\n      }\n    } else {\n      // we are a write, so apply to all children\n      for (i = 0; i < nodeCount; i++) {\n        fn(this[i], arg1, arg2);\n      }\n      // return self for chaining\n      return this;\n    }\n  };\n});\n\nfunction createEventHandler(element, events) {\n  var eventHandler = function(event, type) {\n    // jQuery specific api\n    event.isDefaultPrevented = function() {\n      return event.defaultPrevented;\n    };\n\n    var eventFns = events[type || event.type];\n    var eventFnsLength = eventFns ? eventFns.length : 0;\n\n    if (!eventFnsLength) return;\n\n    if (isUndefined(event.immediatePropagationStopped)) {\n      var originalStopImmediatePropagation = event.stopImmediatePropagation;\n      event.stopImmediatePropagation = function() {\n        event.immediatePropagationStopped = true;\n\n        if (event.stopPropagation) {\n          event.stopPropagation();\n        }\n\n        if (originalStopImmediatePropagation) {\n          originalStopImmediatePropagation.call(event);\n        }\n      };\n    }\n\n    event.isImmediatePropagationStopped = function() {\n      return event.immediatePropagationStopped === true;\n    };\n\n    // Some events have special handlers that wrap the real handler\n    var handlerWrapper = eventFns.specialHandlerWrapper || defaultHandlerWrapper;\n\n    // Copy event handlers in case event handlers array is modified during execution.\n    if ((eventFnsLength > 1)) {\n      eventFns = shallowCopy(eventFns);\n    }\n\n    for (var i = 0; i < eventFnsLength; i++) {\n      if (!event.isImmediatePropagationStopped()) {\n        handlerWrapper(element, event, eventFns[i]);\n      }\n    }\n  };\n\n  // TODO: this is a hack for angularMocks/clearDataCache that makes it possible to deregister all\n  //       events on `element`\n  eventHandler.elem = element;\n  return eventHandler;\n}\n\nfunction defaultHandlerWrapper(element, event, handler) {\n  handler.call(element, event);\n}\n\nfunction specialMouseHandlerWrapper(target, event, handler) {\n  // Refer to jQuery's implementation of mouseenter & mouseleave\n  // Read about mouseenter and mouseleave:\n  // http://www.quirksmode.org/js/events_mouse.html#link8\n  var related = event.relatedTarget;\n  // For mousenter/leave call the handler if related is outside the target.\n  // NB: No relatedTarget if the mouse left/entered the browser window\n  if (!related || (related !== target && !jqLiteContains.call(target, related))) {\n    handler.call(target, event);\n  }\n}\n\n//////////////////////////////////////////\n// Functions iterating traversal.\n// These functions chain results into a single\n// selector.\n//////////////////////////////////////////\nforEach({\n  removeData: jqLiteRemoveData,\n\n  on: function jqLiteOn(element, type, fn, unsupported) {\n    if (isDefined(unsupported)) throw jqLiteMinErr('onargs', 'jqLite#on() does not support the `selector` or `eventData` parameters');\n\n    // Do not add event handlers to non-elements because they will not be cleaned up.\n    if (!jqLiteAcceptsData(element)) {\n      return;\n    }\n\n    var expandoStore = jqLiteExpandoStore(element, true);\n    var events = expandoStore.events;\n    var handle = expandoStore.handle;\n\n    if (!handle) {\n      handle = expandoStore.handle = createEventHandler(element, events);\n    }\n\n    // http://jsperf.com/string-indexof-vs-split\n    var types = type.indexOf(' ') >= 0 ? type.split(' ') : [type];\n    var i = types.length;\n\n    var addHandler = function(type, specialHandlerWrapper, noEventListener) {\n      var eventFns = events[type];\n\n      if (!eventFns) {\n        eventFns = events[type] = [];\n        eventFns.specialHandlerWrapper = specialHandlerWrapper;\n        if (type !== '$destroy' && !noEventListener) {\n          element.addEventListener(type, handle);\n        }\n      }\n\n      eventFns.push(fn);\n    };\n\n    while (i--) {\n      type = types[i];\n      if (MOUSE_EVENT_MAP[type]) {\n        addHandler(MOUSE_EVENT_MAP[type], specialMouseHandlerWrapper);\n        addHandler(type, undefined, true);\n      } else {\n        addHandler(type);\n      }\n    }\n  },\n\n  off: jqLiteOff,\n\n  one: function(element, type, fn) {\n    element = jqLite(element);\n\n    //add the listener twice so that when it is called\n    //you can remove the original function and still be\n    //able to call element.off(ev, fn) normally\n    element.on(type, function onFn() {\n      element.off(type, fn);\n      element.off(type, onFn);\n    });\n    element.on(type, fn);\n  },\n\n  replaceWith: function(element, replaceNode) {\n    var index, parent = element.parentNode;\n    jqLiteDealoc(element);\n    forEach(new JQLite(replaceNode), function(node) {\n      if (index) {\n        parent.insertBefore(node, index.nextSibling);\n      } else {\n        parent.replaceChild(node, element);\n      }\n      index = node;\n    });\n  },\n\n  children: function(element) {\n    var children = [];\n    forEach(element.childNodes, function(element) {\n      if (element.nodeType === NODE_TYPE_ELEMENT) {\n        children.push(element);\n      }\n    });\n    return children;\n  },\n\n  contents: function(element) {\n    return element.contentDocument || element.childNodes || [];\n  },\n\n  append: function(element, node) {\n    var nodeType = element.nodeType;\n    if (nodeType !== NODE_TYPE_ELEMENT && nodeType !== NODE_TYPE_DOCUMENT_FRAGMENT) return;\n\n    node = new JQLite(node);\n\n    for (var i = 0, ii = node.length; i < ii; i++) {\n      var child = node[i];\n      element.appendChild(child);\n    }\n  },\n\n  prepend: function(element, node) {\n    if (element.nodeType === NODE_TYPE_ELEMENT) {\n      var index = element.firstChild;\n      forEach(new JQLite(node), function(child) {\n        element.insertBefore(child, index);\n      });\n    }\n  },\n\n  wrap: function(element, wrapNode) {\n    jqLiteWrapNode(element, jqLite(wrapNode).eq(0).clone()[0]);\n  },\n\n  remove: jqLiteRemove,\n\n  detach: function(element) {\n    jqLiteRemove(element, true);\n  },\n\n  after: function(element, newElement) {\n    var index = element, parent = element.parentNode;\n\n    if (parent) {\n      newElement = new JQLite(newElement);\n\n      for (var i = 0, ii = newElement.length; i < ii; i++) {\n        var node = newElement[i];\n        parent.insertBefore(node, index.nextSibling);\n        index = node;\n      }\n    }\n  },\n\n  addClass: jqLiteAddClass,\n  removeClass: jqLiteRemoveClass,\n\n  toggleClass: function(element, selector, condition) {\n    if (selector) {\n      forEach(selector.split(' '), function(className) {\n        var classCondition = condition;\n        if (isUndefined(classCondition)) {\n          classCondition = !jqLiteHasClass(element, className);\n        }\n        (classCondition ? jqLiteAddClass : jqLiteRemoveClass)(element, className);\n      });\n    }\n  },\n\n  parent: function(element) {\n    var parent = element.parentNode;\n    return parent && parent.nodeType !== NODE_TYPE_DOCUMENT_FRAGMENT ? parent : null;\n  },\n\n  next: function(element) {\n    return element.nextElementSibling;\n  },\n\n  find: function(element, selector) {\n    if (element.getElementsByTagName) {\n      return element.getElementsByTagName(selector);\n    } else {\n      return [];\n    }\n  },\n\n  clone: jqLiteClone,\n\n  triggerHandler: function(element, event, extraParameters) {\n\n    var dummyEvent, eventFnsCopy, handlerArgs;\n    var eventName = event.type || event;\n    var expandoStore = jqLiteExpandoStore(element);\n    var events = expandoStore && expandoStore.events;\n    var eventFns = events && events[eventName];\n\n    if (eventFns) {\n      // Create a dummy event to pass to the handlers\n      dummyEvent = {\n        preventDefault: function() { this.defaultPrevented = true; },\n        isDefaultPrevented: function() { return this.defaultPrevented === true; },\n        stopImmediatePropagation: function() { this.immediatePropagationStopped = true; },\n        isImmediatePropagationStopped: function() { return this.immediatePropagationStopped === true; },\n        stopPropagation: noop,\n        type: eventName,\n        target: element\n      };\n\n      // If a custom event was provided then extend our dummy event with it\n      if (event.type) {\n        dummyEvent = extend(dummyEvent, event);\n      }\n\n      // Copy event handlers in case event handlers array is modified during execution.\n      eventFnsCopy = shallowCopy(eventFns);\n      handlerArgs = extraParameters ? [dummyEvent].concat(extraParameters) : [dummyEvent];\n\n      forEach(eventFnsCopy, function(fn) {\n        if (!dummyEvent.isImmediatePropagationStopped()) {\n          fn.apply(element, handlerArgs);\n        }\n      });\n    }\n  }\n}, function(fn, name) {\n  /**\n   * chaining functions\n   */\n  JQLite.prototype[name] = function(arg1, arg2, arg3) {\n    var value;\n\n    for (var i = 0, ii = this.length; i < ii; i++) {\n      if (isUndefined(value)) {\n        value = fn(this[i], arg1, arg2, arg3);\n        if (isDefined(value)) {\n          // any function which returns a value needs to be wrapped\n          value = jqLite(value);\n        }\n      } else {\n        jqLiteAddNodes(value, fn(this[i], arg1, arg2, arg3));\n      }\n    }\n    return isDefined(value) ? value : this;\n  };\n});\n\n// bind legacy bind/unbind to on/off\nJQLite.prototype.bind = JQLite.prototype.on;\nJQLite.prototype.unbind = JQLite.prototype.off;\n\n\n// Provider for private $$jqLite service\n/** @this */\nfunction $$jqLiteProvider() {\n  this.$get = function $$jqLite() {\n    return extend(JQLite, {\n      hasClass: function(node, classes) {\n        if (node.attr) node = node[0];\n        return jqLiteHasClass(node, classes);\n      },\n      addClass: function(node, classes) {\n        if (node.attr) node = node[0];\n        return jqLiteAddClass(node, classes);\n      },\n      removeClass: function(node, classes) {\n        if (node.attr) node = node[0];\n        return jqLiteRemoveClass(node, classes);\n      }\n    });\n  };\n}\n\n/**\n * Computes a hash of an 'obj'.\n * Hash of a:\n *  string is string\n *  number is number as string\n *  object is either result of calling $$hashKey function on the object or uniquely generated id,\n *         that is also assigned to the $$hashKey property of the object.\n *\n * @param obj\n * @returns {string} hash string such that the same input will have the same hash string.\n *         The resulting string key is in 'type:hashKey' format.\n */\nfunction hashKey(obj, nextUidFn) {\n  var key = obj && obj.$$hashKey;\n\n  if (key) {\n    if (typeof key === 'function') {\n      key = obj.$$hashKey();\n    }\n    return key;\n  }\n\n  var objType = typeof obj;\n  if (objType === 'function' || (objType === 'object' && obj !== null)) {\n    key = obj.$$hashKey = objType + ':' + (nextUidFn || nextUid)();\n  } else {\n    key = objType + ':' + obj;\n  }\n\n  return key;\n}\n\n// A minimal ES2015 Map implementation.\n// Should be bug/feature equivalent to the native implementations of supported browsers\n// (for the features required in Angular).\n// See https://kangax.github.io/compat-table/es6/#test-Map\nvar nanKey = Object.create(null);\nfunction NgMapShim() {\n  this._keys = [];\n  this._values = [];\n  this._lastKey = NaN;\n  this._lastIndex = -1;\n}\nNgMapShim.prototype = {\n  _idx: function(key) {\n    if (key === this._lastKey) {\n      return this._lastIndex;\n    }\n    this._lastKey = key;\n    this._lastIndex = this._keys.indexOf(key);\n    return this._lastIndex;\n  },\n  _transformKey: function(key) {\n    return isNumberNaN(key) ? nanKey : key;\n  },\n  get: function(key) {\n    key = this._transformKey(key);\n    var idx = this._idx(key);\n    if (idx !== -1) {\n      return this._values[idx];\n    }\n  },\n  set: function(key, value) {\n    key = this._transformKey(key);\n    var idx = this._idx(key);\n    if (idx === -1) {\n      idx = this._lastIndex = this._keys.length;\n    }\n    this._keys[idx] = key;\n    this._values[idx] = value;\n\n    // Support: IE11\n    // Do not `return this` to simulate the partial IE11 implementation\n  },\n  delete: function(key) {\n    key = this._transformKey(key);\n    var idx = this._idx(key);\n    if (idx === -1) {\n      return false;\n    }\n    this._keys.splice(idx, 1);\n    this._values.splice(idx, 1);\n    this._lastKey = NaN;\n    this._lastIndex = -1;\n    return true;\n  }\n};\n\n// For now, always use `NgMapShim`, even if `window.Map` is available. Some native implementations\n// are still buggy (often in subtle ways) and can cause hard-to-debug failures. When native `Map`\n// implementations get more stable, we can reconsider switching to `window.Map` (when available).\nvar NgMap = NgMapShim;\n\nvar $$MapProvider = [/** @this */function() {\n  this.$get = [function() {\n    return NgMap;\n  }];\n}];\n\n/**\n * @ngdoc function\n * @module ng\n * @name angular.injector\n * @kind function\n *\n * @description\n * Creates an injector object that can be used for retrieving services as well as for\n * dependency injection (see {@link guide/di dependency injection}).\n *\n * @param {Array.<string|Function>} modules A list of module functions or their aliases. See\n *     {@link angular.module}. The `ng` module must be explicitly added.\n * @param {boolean=} [strictDi=false] Whether the injector should be in strict mode, which\n *     disallows argument name annotation inference.\n * @returns {injector} Injector object. See {@link auto.$injector $injector}.\n *\n * @example\n * Typical usage\n * ```js\n *   // create an injector\n *   var $injector = angular.injector(['ng']);\n *\n *   // use the injector to kick off your application\n *   // use the type inference to auto inject arguments, or use implicit injection\n *   $injector.invoke(function($rootScope, $compile, $document) {\n *     $compile($document)($rootScope);\n *     $rootScope.$digest();\n *   });\n * ```\n *\n * Sometimes you want to get access to the injector of a currently running Angular app\n * from outside Angular. Perhaps, you want to inject and compile some markup after the\n * application has been bootstrapped. You can do this using the extra `injector()` added\n * to JQuery/jqLite elements. See {@link angular.element}.\n *\n * *This is fairly rare but could be the case if a third party library is injecting the\n * markup.*\n *\n * In the following example a new block of HTML containing a `ng-controller`\n * directive is added to the end of the document body by JQuery. We then compile and link\n * it into the current AngularJS scope.\n *\n * ```js\n * var $div = $('<div ng-controller=\"MyCtrl\">{{content.label}}</div>');\n * $(document.body).append($div);\n *\n * angular.element(document).injector().invoke(function($compile) {\n *   var scope = angular.element($div).scope();\n *   $compile($div)(scope);\n * });\n * ```\n */\n\n\n/**\n * @ngdoc module\n * @name auto\n * @installation\n * @description\n *\n * Implicit module which gets automatically added to each {@link auto.$injector $injector}.\n */\n\nvar ARROW_ARG = /^([^(]+?)=>/;\nvar FN_ARGS = /^[^(]*\\(\\s*([^)]*)\\)/m;\nvar FN_ARG_SPLIT = /,/;\nvar FN_ARG = /^\\s*(_?)(\\S+?)\\1\\s*$/;\nvar STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\nvar $injectorMinErr = minErr('$injector');\n\nfunction stringifyFn(fn) {\n  return Function.prototype.toString.call(fn);\n}\n\nfunction extractArgs(fn) {\n  var fnText = stringifyFn(fn).replace(STRIP_COMMENTS, ''),\n      args = fnText.match(ARROW_ARG) || fnText.match(FN_ARGS);\n  return args;\n}\n\nfunction anonFn(fn) {\n  // For anonymous functions, showing at the very least the function signature can help in\n  // debugging.\n  var args = extractArgs(fn);\n  if (args) {\n    return 'function(' + (args[1] || '').replace(/[\\s\\r\\n]+/, ' ') + ')';\n  }\n  return 'fn';\n}\n\nfunction annotate(fn, strictDi, name) {\n  var $inject,\n      argDecl,\n      last;\n\n  if (typeof fn === 'function') {\n    if (!($inject = fn.$inject)) {\n      $inject = [];\n      if (fn.length) {\n        if (strictDi) {\n          if (!isString(name) || !name) {\n            name = fn.name || anonFn(fn);\n          }\n          throw $injectorMinErr('strictdi',\n            '{0} is not using explicit annotation and cannot be invoked in strict mode', name);\n        }\n        argDecl = extractArgs(fn);\n        forEach(argDecl[1].split(FN_ARG_SPLIT), function(arg) {\n          arg.replace(FN_ARG, function(all, underscore, name) {\n            $inject.push(name);\n          });\n        });\n      }\n      fn.$inject = $inject;\n    }\n  } else if (isArray(fn)) {\n    last = fn.length - 1;\n    assertArgFn(fn[last], 'fn');\n    $inject = fn.slice(0, last);\n  } else {\n    assertArgFn(fn, 'fn', true);\n  }\n  return $inject;\n}\n\n///////////////////////////////////////\n\n/**\n * @ngdoc service\n * @name $injector\n *\n * @description\n *\n * `$injector` is used to retrieve object instances as defined by\n * {@link auto.$provide provider}, instantiate types, invoke methods,\n * and load modules.\n *\n * The following always holds true:\n *\n * ```js\n *   var $injector = angular.injector();\n *   expect($injector.get('$injector')).toBe($injector);\n *   expect($injector.invoke(function($injector) {\n *     return $injector;\n *   })).toBe($injector);\n * ```\n *\n * ## Injection Function Annotation\n *\n * JavaScript does not have annotations, and annotations are needed for dependency injection. The\n * following are all valid ways of annotating function with injection arguments and are equivalent.\n *\n * ```js\n *   // inferred (only works if code not minified/obfuscated)\n *   $injector.invoke(function(serviceA){});\n *\n *   // annotated\n *   function explicit(serviceA) {};\n *   explicit.$inject = ['serviceA'];\n *   $injector.invoke(explicit);\n *\n *   // inline\n *   $injector.invoke(['serviceA', function(serviceA){}]);\n * ```\n *\n * ### Inference\n *\n * In JavaScript calling `toString()` on a function returns the function definition. The definition\n * can then be parsed and the function arguments can be extracted. This method of discovering\n * annotations is disallowed when the injector is in strict mode.\n * *NOTE:* This does not work with minification, and obfuscation tools since these tools change the\n * argument names.\n *\n * ### `$inject` Annotation\n * By adding an `$inject` property onto a function the injection parameters can be specified.\n *\n * ### Inline\n * As an array of injection names, where the last item in the array is the function to call.\n */\n\n/**\n * @ngdoc property\n * @name $injector#modules\n * @type {Object}\n * @description\n * A hash containing all the modules that have been loaded into the\n * $injector.\n *\n * You can use this property to find out information about a module via the\n * {@link angular.Module#info `myModule.info(...)`} method.\n *\n * For example:\n *\n * ```\n * var info = $injector.modules['ngAnimate'].info();\n * ```\n *\n * **Do not use this property to attempt to modify the modules after the application\n * has been bootstrapped.**\n */\n\n\n/**\n * @ngdoc method\n * @name $injector#get\n *\n * @description\n * Return an instance of the service.\n *\n * @param {string} name The name of the instance to retrieve.\n * @param {string=} caller An optional string to provide the origin of the function call for error messages.\n * @return {*} The instance.\n */\n\n/**\n * @ngdoc method\n * @name $injector#invoke\n *\n * @description\n * Invoke the method and supply the method arguments from the `$injector`.\n *\n * @param {Function|Array.<string|Function>} fn The injectable function to invoke. Function parameters are\n *   injected according to the {@link guide/di $inject Annotation} rules.\n * @param {Object=} self The `this` for the invoked method.\n * @param {Object=} locals Optional object. If preset then any argument names are read from this\n *                         object first, before the `$injector` is consulted.\n * @returns {*} the value returned by the invoked `fn` function.\n */\n\n/**\n * @ngdoc method\n * @name $injector#has\n *\n * @description\n * Allows the user to query if the particular service exists.\n *\n * @param {string} name Name of the service to query.\n * @returns {boolean} `true` if injector has given service.\n */\n\n/**\n * @ngdoc method\n * @name $injector#instantiate\n * @description\n * Create a new instance of JS type. The method takes a constructor function, invokes the new\n * operator, and supplies all of the arguments to the constructor function as specified by the\n * constructor annotation.\n *\n * @param {Function} Type Annotated constructor function.\n * @param {Object=} locals Optional object. If preset then any argument names are read from this\n * object first, before the `$injector` is consulted.\n * @returns {Object} new instance of `Type`.\n */\n\n/**\n * @ngdoc method\n * @name $injector#annotate\n *\n * @description\n * Returns an array of service names which the function is requesting for injection. This API is\n * used by the injector to determine which services need to be injected into the function when the\n * function is invoked. There are three ways in which the function can be annotated with the needed\n * dependencies.\n *\n * #### Argument names\n *\n * The simplest form is to extract the dependencies from the arguments of the function. This is done\n * by converting the function into a string using `toString()` method and extracting the argument\n * names.\n * ```js\n *   // Given\n *   function MyController($scope, $route) {\n *     // ...\n *   }\n *\n *   // Then\n *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);\n * ```\n *\n * You can disallow this method by using strict injection mode.\n *\n * This method does not work with code minification / obfuscation. For this reason the following\n * annotation strategies are supported.\n *\n * #### The `$inject` property\n *\n * If a function has an `$inject` property and its value is an array of strings, then the strings\n * represent names of services to be injected into the function.\n * ```js\n *   // Given\n *   var MyController = function(obfuscatedScope, obfuscatedRoute) {\n *     // ...\n *   }\n *   // Define function dependencies\n *   MyController['$inject'] = ['$scope', '$route'];\n *\n *   // Then\n *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);\n * ```\n *\n * #### The array notation\n *\n * It is often desirable to inline Injected functions and that's when setting the `$inject` property\n * is very inconvenient. In these situations using the array notation to specify the dependencies in\n * a way that survives minification is a better choice:\n *\n * ```js\n *   // We wish to write this (not minification / obfuscation safe)\n *   injector.invoke(function($compile, $rootScope) {\n *     // ...\n *   });\n *\n *   // We are forced to write break inlining\n *   var tmpFn = function(obfuscatedCompile, obfuscatedRootScope) {\n *     // ...\n *   };\n *   tmpFn.$inject = ['$compile', '$rootScope'];\n *   injector.invoke(tmpFn);\n *\n *   // To better support inline function the inline annotation is supported\n *   injector.invoke(['$compile', '$rootScope', function(obfCompile, obfRootScope) {\n *     // ...\n *   }]);\n *\n *   // Therefore\n *   expect(injector.annotate(\n *      ['$compile', '$rootScope', function(obfus_$compile, obfus_$rootScope) {}])\n *    ).toEqual(['$compile', '$rootScope']);\n * ```\n *\n * @param {Function|Array.<string|Function>} fn Function for which dependent service names need to\n * be retrieved as described above.\n *\n * @param {boolean=} [strictDi=false] Disallow argument name annotation inference.\n *\n * @returns {Array.<string>} The names of the services which the function requires.\n */\n/**\n * @ngdoc method\n * @name $injector#loadNewModules\n *\n * @description\n *\n * **This is a dangerous API, which you use at your own risk!**\n *\n * Add the specified modules to the current injector.\n *\n * This method will add each of the injectables to the injector and execute all of the config and run\n * blocks for each module passed to the method.\n *\n * If a module has already been loaded into the injector then it will not be loaded again.\n *\n * * The application developer is responsible for loading the code containing the modules; and for\n * ensuring that lazy scripts are not downloaded and executed more often that desired.\n * * Previously compiled HTML will not be affected by newly loaded directives, filters and components.\n * * Modules cannot be unloaded.\n *\n * You can use {@link $injector#modules `$injector.modules`} to check whether a module has been loaded\n * into the injector, which may indicate whether the script has been executed already.\n *\n * @example\n * Here is an example of loading a bundle of modules, with a utility method called `getScript`:\n *\n * ```javascript\n * app.factory('loadModule', function($injector) {\n *   return function loadModule(moduleName, bundleUrl) {\n *     return getScript(bundleUrl).then(function() { $injector.loadNewModules([moduleName]); });\n *   };\n * })\n * ```\n *\n * @param {Array<String|Function|Array>=} mods an array of modules to load into the application.\n *     Each item in the array should be the name of a predefined module or a (DI annotated)\n *     function that will be invoked by the injector as a `config` block.\n *     See: {@link angular.module modules}\n */\n\n\n/**\n * @ngdoc service\n * @name $provide\n *\n * @description\n *\n * The {@link auto.$provide $provide} service has a number of methods for registering components\n * with the {@link auto.$injector $injector}. Many of these functions are also exposed on\n * {@link angular.Module}.\n *\n * An Angular **service** is a singleton object created by a **service factory**.  These **service\n * factories** are functions which, in turn, are created by a **service provider**.\n * The **service providers** are constructor functions. When instantiated they must contain a\n * property called `$get`, which holds the **service factory** function.\n *\n * When you request a service, the {@link auto.$injector $injector} is responsible for finding the\n * correct **service provider**, instantiating it and then calling its `$get` **service factory**\n * function to get the instance of the **service**.\n *\n * Often services have no configuration options and there is no need to add methods to the service\n * provider.  The provider will be no more than a constructor function with a `$get` property. For\n * these cases the {@link auto.$provide $provide} service has additional helper methods to register\n * services without specifying a provider.\n *\n * * {@link auto.$provide#provider provider(name, provider)} - registers a **service provider** with the\n *     {@link auto.$injector $injector}\n * * {@link auto.$provide#constant constant(name, obj)} - registers a value/object that can be accessed by\n *     providers and services.\n * * {@link auto.$provide#value value(name, obj)} - registers a value/object that can only be accessed by\n *     services, not providers.\n * * {@link auto.$provide#factory factory(name, fn)} - registers a service **factory function**\n *     that will be wrapped in a **service provider** object, whose `$get` property will contain the\n *     given factory function.\n * * {@link auto.$provide#service service(name, Fn)} - registers a **constructor function**\n *     that will be wrapped in a **service provider** object, whose `$get` property will instantiate\n *      a new object using the given constructor function.\n * * {@link auto.$provide#decorator decorator(name, decorFn)} - registers a **decorator function** that\n *      will be able to modify or replace the implementation of another service.\n *\n * See the individual methods for more information and examples.\n */\n\n/**\n * @ngdoc method\n * @name $provide#provider\n * @description\n *\n * Register a **provider function** with the {@link auto.$injector $injector}. Provider functions\n * are constructor functions, whose instances are responsible for \"providing\" a factory for a\n * service.\n *\n * Service provider names start with the name of the service they provide followed by `Provider`.\n * For example, the {@link ng.$log $log} service has a provider called\n * {@link ng.$logProvider $logProvider}.\n *\n * Service provider objects can have additional methods which allow configuration of the provider\n * and its service. Importantly, you can configure what kind of service is created by the `$get`\n * method, or how that service will act. For example, the {@link ng.$logProvider $logProvider} has a\n * method {@link ng.$logProvider#debugEnabled debugEnabled}\n * which lets you specify whether the {@link ng.$log $log} service will log debug messages to the\n * console or not.\n *\n * @param {string} name The name of the instance. NOTE: the provider will be available under `name +\n                        'Provider'` key.\n * @param {(Object|function())} provider If the provider is:\n *\n *   - `Object`: then it should have a `$get` method. The `$get` method will be invoked using\n *     {@link auto.$injector#invoke $injector.invoke()} when an instance needs to be created.\n *   - `Constructor`: a new instance of the provider will be created using\n *     {@link auto.$injector#instantiate $injector.instantiate()}, then treated as `object`.\n *\n * @returns {Object} registered provider instance\n\n * @example\n *\n * The following example shows how to create a simple event tracking service and register it using\n * {@link auto.$provide#provider $provide.provider()}.\n *\n * ```js\n *  // Define the eventTracker provider\n *  function EventTrackerProvider() {\n *    var trackingUrl = '/track';\n *\n *    // A provider method for configuring where the tracked events should been saved\n *    this.setTrackingUrl = function(url) {\n *      trackingUrl = url;\n *    };\n *\n *    // The service factory function\n *    this.$get = ['$http', function($http) {\n *      var trackedEvents = {};\n *      return {\n *        // Call this to track an event\n *        event: function(event) {\n *          var count = trackedEvents[event] || 0;\n *          count += 1;\n *          trackedEvents[event] = count;\n *          return count;\n *        },\n *        // Call this to save the tracked events to the trackingUrl\n *        save: function() {\n *          $http.post(trackingUrl, trackedEvents);\n *        }\n *      };\n *    }];\n *  }\n *\n *  describe('eventTracker', function() {\n *    var postSpy;\n *\n *    beforeEach(module(function($provide) {\n *      // Register the eventTracker provider\n *      $provide.provider('eventTracker', EventTrackerProvider);\n *    }));\n *\n *    beforeEach(module(function(eventTrackerProvider) {\n *      // Configure eventTracker provider\n *      eventTrackerProvider.setTrackingUrl('/custom-track');\n *    }));\n *\n *    it('tracks events', inject(function(eventTracker) {\n *      expect(eventTracker.event('login')).toEqual(1);\n *      expect(eventTracker.event('login')).toEqual(2);\n *    }));\n *\n *    it('saves to the tracking url', inject(function(eventTracker, $http) {\n *      postSpy = spyOn($http, 'post');\n *      eventTracker.event('login');\n *      eventTracker.save();\n *      expect(postSpy).toHaveBeenCalled();\n *      expect(postSpy.mostRecentCall.args[0]).not.toEqual('/track');\n *      expect(postSpy.mostRecentCall.args[0]).toEqual('/custom-track');\n *      expect(postSpy.mostRecentCall.args[1]).toEqual({ 'login': 1 });\n *    }));\n *  });\n * ```\n */\n\n/**\n * @ngdoc method\n * @name $provide#factory\n * @description\n *\n * Register a **service factory**, which will be called to return the service instance.\n * This is short for registering a service where its provider consists of only a `$get` property,\n * which is the given service factory function.\n * You should use {@link auto.$provide#factory $provide.factory(getFn)} if you do not need to\n * configure your service in a provider.\n *\n * @param {string} name The name of the instance.\n * @param {Function|Array.<string|Function>} $getFn The injectable $getFn for the instance creation.\n *                      Internally this is a short hand for `$provide.provider(name, {$get: $getFn})`.\n * @returns {Object} registered provider instance\n *\n * @example\n * Here is an example of registering a service\n * ```js\n *   $provide.factory('ping', ['$http', function($http) {\n *     return function ping() {\n *       return $http.send('/ping');\n *     };\n *   }]);\n * ```\n * You would then inject and use this service like this:\n * ```js\n *   someModule.controller('Ctrl', ['ping', function(ping) {\n *     ping();\n *   }]);\n * ```\n */\n\n\n/**\n * @ngdoc method\n * @name $provide#service\n * @description\n *\n * Register a **service constructor**, which will be invoked with `new` to create the service\n * instance.\n * This is short for registering a service where its provider's `$get` property is a factory\n * function that returns an instance instantiated by the injector from the service constructor\n * function.\n *\n * Internally it looks a bit like this:\n *\n * ```\n * {\n *   $get: function() {\n *     return $injector.instantiate(constructor);\n *   }\n * }\n * ```\n *\n *\n * You should use {@link auto.$provide#service $provide.service(class)} if you define your service\n * as a type/class.\n *\n * @param {string} name The name of the instance.\n * @param {Function|Array.<string|Function>} constructor An injectable class (constructor function)\n *     that will be instantiated.\n * @returns {Object} registered provider instance\n *\n * @example\n * Here is an example of registering a service using\n * {@link auto.$provide#service $provide.service(class)}.\n * ```js\n *   var Ping = function($http) {\n *     this.$http = $http;\n *   };\n *\n *   Ping.$inject = ['$http'];\n *\n *   Ping.prototype.send = function() {\n *     return this.$http.get('/ping');\n *   };\n *   $provide.service('ping', Ping);\n * ```\n * You would then inject and use this service like this:\n * ```js\n *   someModule.controller('Ctrl', ['ping', function(ping) {\n *     ping.send();\n *   }]);\n * ```\n */\n\n\n/**\n * @ngdoc method\n * @name $provide#value\n * @description\n *\n * Register a **value service** with the {@link auto.$injector $injector}, such as a string, a\n * number, an array, an object or a function. This is short for registering a service where its\n * provider's `$get` property is a factory function that takes no arguments and returns the **value\n * service**. That also means it is not possible to inject other services into a value service.\n *\n * Value services are similar to constant services, except that they cannot be injected into a\n * module configuration function (see {@link angular.Module#config}) but they can be overridden by\n * an Angular {@link auto.$provide#decorator decorator}.\n *\n * @param {string} name The name of the instance.\n * @param {*} value The value.\n * @returns {Object} registered provider instance\n *\n * @example\n * Here are some examples of creating value services.\n * ```js\n *   $provide.value('ADMIN_USER', 'admin');\n *\n *   $provide.value('RoleLookup', { admin: 0, writer: 1, reader: 2 });\n *\n *   $provide.value('halfOf', function(value) {\n *     return value / 2;\n *   });\n * ```\n */\n\n\n/**\n * @ngdoc method\n * @name $provide#constant\n * @description\n *\n * Register a **constant service** with the {@link auto.$injector $injector}, such as a string,\n * a number, an array, an object or a function. Like the {@link auto.$provide#value value}, it is not\n * possible to inject other services into a constant.\n *\n * But unlike {@link auto.$provide#value value}, a constant can be\n * injected into a module configuration function (see {@link angular.Module#config}) and it cannot\n * be overridden by an Angular {@link auto.$provide#decorator decorator}.\n *\n * @param {string} name The name of the constant.\n * @param {*} value The constant value.\n * @returns {Object} registered instance\n *\n * @example\n * Here a some examples of creating constants:\n * ```js\n *   $provide.constant('SHARD_HEIGHT', 306);\n *\n *   $provide.constant('MY_COLOURS', ['red', 'blue', 'grey']);\n *\n *   $provide.constant('double', function(value) {\n *     return value * 2;\n *   });\n * ```\n */\n\n\n/**\n * @ngdoc method\n * @name $provide#decorator\n * @description\n *\n * Register a **decorator function** with the {@link auto.$injector $injector}. A decorator function\n * intercepts the creation of a service, allowing it to override or modify the behavior of the\n * service. The return value of the decorator function may be the original service, or a new service\n * that replaces (or wraps and delegates to) the original service.\n *\n * You can find out more about using decorators in the {@link guide/decorators} guide.\n *\n * @param {string} name The name of the service to decorate.\n * @param {Function|Array.<string|Function>} decorator This function will be invoked when the service needs to be\n *    provided and should return the decorated service instance. The function is called using\n *    the {@link auto.$injector#invoke injector.invoke} method and is therefore fully injectable.\n *    Local injection arguments:\n *\n *    * `$delegate` - The original service instance, which can be replaced, monkey patched, configured,\n *      decorated or delegated to.\n *\n * @example\n * Here we decorate the {@link ng.$log $log} service to convert warnings to errors by intercepting\n * calls to {@link ng.$log#error $log.warn()}.\n * ```js\n *   $provide.decorator('$log', ['$delegate', function($delegate) {\n *     $delegate.warn = $delegate.error;\n *     return $delegate;\n *   }]);\n * ```\n */\n\n\nfunction createInjector(modulesToLoad, strictDi) {\n  strictDi = (strictDi === true);\n  var INSTANTIATING = {},\n      providerSuffix = 'Provider',\n      path = [],\n      loadedModules = new NgMap(),\n      providerCache = {\n        $provide: {\n            provider: supportObject(provider),\n            factory: supportObject(factory),\n            service: supportObject(service),\n            value: supportObject(value),\n            constant: supportObject(constant),\n            decorator: decorator\n          }\n      },\n      providerInjector = (providerCache.$injector =\n          createInternalInjector(providerCache, function(serviceName, caller) {\n            if (angular.isString(caller)) {\n              path.push(caller);\n            }\n            throw $injectorMinErr('unpr', 'Unknown provider: {0}', path.join(' <- '));\n          })),\n      instanceCache = {},\n      protoInstanceInjector =\n          createInternalInjector(instanceCache, function(serviceName, caller) {\n            var provider = providerInjector.get(serviceName + providerSuffix, caller);\n            return instanceInjector.invoke(\n                provider.$get, provider, undefined, serviceName);\n          }),\n      instanceInjector = protoInstanceInjector;\n\n  providerCache['$injector' + providerSuffix] = { $get: valueFn(protoInstanceInjector) };\n  instanceInjector.modules = providerInjector.modules = createMap();\n  var runBlocks = loadModules(modulesToLoad);\n  instanceInjector = protoInstanceInjector.get('$injector');\n  instanceInjector.strictDi = strictDi;\n  forEach(runBlocks, function(fn) { if (fn) instanceInjector.invoke(fn); });\n\n  instanceInjector.loadNewModules = function(mods) {\n    forEach(loadModules(mods), function(fn) { if (fn) instanceInjector.invoke(fn); });\n  };\n\n\n  return instanceInjector;\n\n  ////////////////////////////////////\n  // $provider\n  ////////////////////////////////////\n\n  function supportObject(delegate) {\n    return function(key, value) {\n      if (isObject(key)) {\n        forEach(key, reverseParams(delegate));\n      } else {\n        return delegate(key, value);\n      }\n    };\n  }\n\n  function provider(name, provider_) {\n    assertNotHasOwnProperty(name, 'service');\n    if (isFunction(provider_) || isArray(provider_)) {\n      provider_ = providerInjector.instantiate(provider_);\n    }\n    if (!provider_.$get) {\n      throw $injectorMinErr('pget', 'Provider \\'{0}\\' must define $get factory method.', name);\n    }\n    return (providerCache[name + providerSuffix] = provider_);\n  }\n\n  function enforceReturnValue(name, factory) {\n    return /** @this */ function enforcedReturnValue() {\n      var result = instanceInjector.invoke(factory, this);\n      if (isUndefined(result)) {\n        throw $injectorMinErr('undef', 'Provider \\'{0}\\' must return a value from $get factory method.', name);\n      }\n      return result;\n    };\n  }\n\n  function factory(name, factoryFn, enforce) {\n    return provider(name, {\n      $get: enforce !== false ? enforceReturnValue(name, factoryFn) : factoryFn\n    });\n  }\n\n  function service(name, constructor) {\n    return factory(name, ['$injector', function($injector) {\n      return $injector.instantiate(constructor);\n    }]);\n  }\n\n  function value(name, val) { return factory(name, valueFn(val), false); }\n\n  function constant(name, value) {\n    assertNotHasOwnProperty(name, 'constant');\n    providerCache[name] = value;\n    instanceCache[name] = value;\n  }\n\n  function decorator(serviceName, decorFn) {\n    var origProvider = providerInjector.get(serviceName + providerSuffix),\n        orig$get = origProvider.$get;\n\n    origProvider.$get = function() {\n      var origInstance = instanceInjector.invoke(orig$get, origProvider);\n      return instanceInjector.invoke(decorFn, null, {$delegate: origInstance});\n    };\n  }\n\n  ////////////////////////////////////\n  // Module Loading\n  ////////////////////////////////////\n  function loadModules(modulesToLoad) {\n    assertArg(isUndefined(modulesToLoad) || isArray(modulesToLoad), 'modulesToLoad', 'not an array');\n    var runBlocks = [], moduleFn;\n    forEach(modulesToLoad, function(module) {\n      if (loadedModules.get(module)) return;\n      loadedModules.set(module, true);\n\n      function runInvokeQueue(queue) {\n        var i, ii;\n        for (i = 0, ii = queue.length; i < ii; i++) {\n          var invokeArgs = queue[i],\n              provider = providerInjector.get(invokeArgs[0]);\n\n          provider[invokeArgs[1]].apply(provider, invokeArgs[2]);\n        }\n      }\n\n      try {\n        if (isString(module)) {\n          moduleFn = angularModule(module);\n          instanceInjector.modules[module] = moduleFn;\n          runBlocks = runBlocks.concat(loadModules(moduleFn.requires)).concat(moduleFn._runBlocks);\n          runInvokeQueue(moduleFn._invokeQueue);\n          runInvokeQueue(moduleFn._configBlocks);\n        } else if (isFunction(module)) {\n            runBlocks.push(providerInjector.invoke(module));\n        } else if (isArray(module)) {\n            runBlocks.push(providerInjector.invoke(module));\n        } else {\n          assertArgFn(module, 'module');\n        }\n      } catch (e) {\n        if (isArray(module)) {\n          module = module[module.length - 1];\n        }\n        if (e.message && e.stack && e.stack.indexOf(e.message) === -1) {\n          // Safari & FF's stack traces don't contain error.message content\n          // unlike those of Chrome and IE\n          // So if stack doesn't contain message, we create a new string that contains both.\n          // Since error.stack is read-only in Safari, I'm overriding e and not e.stack here.\n          // eslint-disable-next-line no-ex-assign\n          e = e.message + '\\n' + e.stack;\n        }\n        throw $injectorMinErr('modulerr', 'Failed to instantiate module {0} due to:\\n{1}',\n                  module, e.stack || e.message || e);\n      }\n    });\n    return runBlocks;\n  }\n\n  ////////////////////////////////////\n  // internal Injector\n  ////////////////////////////////////\n\n  function createInternalInjector(cache, factory) {\n\n    function getService(serviceName, caller) {\n      if (cache.hasOwnProperty(serviceName)) {\n        if (cache[serviceName] === INSTANTIATING) {\n          throw $injectorMinErr('cdep', 'Circular dependency found: {0}',\n                    serviceName + ' <- ' + path.join(' <- '));\n        }\n        return cache[serviceName];\n      } else {\n        try {\n          path.unshift(serviceName);\n          cache[serviceName] = INSTANTIATING;\n          cache[serviceName] = factory(serviceName, caller);\n          return cache[serviceName];\n        } catch (err) {\n          if (cache[serviceName] === INSTANTIATING) {\n            delete cache[serviceName];\n          }\n          throw err;\n        } finally {\n          path.shift();\n        }\n      }\n    }\n\n\n    function injectionArgs(fn, locals, serviceName) {\n      var args = [],\n          $inject = createInjector.$$annotate(fn, strictDi, serviceName);\n\n      for (var i = 0, length = $inject.length; i < length; i++) {\n        var key = $inject[i];\n        if (typeof key !== 'string') {\n          throw $injectorMinErr('itkn',\n                  'Incorrect injection token! Expected service name as string, got {0}', key);\n        }\n        args.push(locals && locals.hasOwnProperty(key) ? locals[key] :\n                                                         getService(key, serviceName));\n      }\n      return args;\n    }\n\n    function isClass(func) {\n      // Support: IE 9-11 only\n      // IE 9-11 do not support classes and IE9 leaks with the code below.\n      if (msie || typeof func !== 'function') {\n        return false;\n      }\n      var result = func.$$ngIsClass;\n      if (!isBoolean(result)) {\n        // Support: Edge 12-13 only\n        // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/6156135/\n        result = func.$$ngIsClass = /^(?:class\\b|constructor\\()/.test(stringifyFn(func));\n      }\n      return result;\n    }\n\n    function invoke(fn, self, locals, serviceName) {\n      if (typeof locals === 'string') {\n        serviceName = locals;\n        locals = null;\n      }\n\n      var args = injectionArgs(fn, locals, serviceName);\n      if (isArray(fn)) {\n        fn = fn[fn.length - 1];\n      }\n\n      if (!isClass(fn)) {\n        // http://jsperf.com/angularjs-invoke-apply-vs-switch\n        // #5388\n        return fn.apply(self, args);\n      } else {\n        args.unshift(null);\n        return new (Function.prototype.bind.apply(fn, args))();\n      }\n    }\n\n\n    function instantiate(Type, locals, serviceName) {\n      // Check if Type is annotated and use just the given function at n-1 as parameter\n      // e.g. someModule.factory('greeter', ['$window', function(renamed$window) {}]);\n      var ctor = (isArray(Type) ? Type[Type.length - 1] : Type);\n      var args = injectionArgs(Type, locals, serviceName);\n      // Empty object at position 0 is ignored for invocation with `new`, but required.\n      args.unshift(null);\n      return new (Function.prototype.bind.apply(ctor, args))();\n    }\n\n\n    return {\n      invoke: invoke,\n      instantiate: instantiate,\n      get: getService,\n      annotate: createInjector.$$annotate,\n      has: function(name) {\n        return providerCache.hasOwnProperty(name + providerSuffix) || cache.hasOwnProperty(name);\n      }\n    };\n  }\n}\n\ncreateInjector.$$annotate = annotate;\n\n/**\n * @ngdoc provider\n * @name $anchorScrollProvider\n * @this\n *\n * @description\n * Use `$anchorScrollProvider` to disable automatic scrolling whenever\n * {@link ng.$location#hash $location.hash()} changes.\n */\nfunction $AnchorScrollProvider() {\n\n  var autoScrollingEnabled = true;\n\n  /**\n   * @ngdoc method\n   * @name $anchorScrollProvider#disableAutoScrolling\n   *\n   * @description\n   * By default, {@link ng.$anchorScroll $anchorScroll()} will automatically detect changes to\n   * {@link ng.$location#hash $location.hash()} and scroll to the element matching the new hash.<br />\n   * Use this method to disable automatic scrolling.\n   *\n   * If automatic scrolling is disabled, one must explicitly call\n   * {@link ng.$anchorScroll $anchorScroll()} in order to scroll to the element related to the\n   * current hash.\n   */\n  this.disableAutoScrolling = function() {\n    autoScrollingEnabled = false;\n  };\n\n  /**\n   * @ngdoc service\n   * @name $anchorScroll\n   * @kind function\n   * @requires $window\n   * @requires $location\n   * @requires $rootScope\n   *\n   * @description\n   * When called, it scrolls to the element related to the specified `hash` or (if omitted) to the\n   * current value of {@link ng.$location#hash $location.hash()}, according to the rules specified\n   * in the\n   * [HTML5 spec](http://www.w3.org/html/wg/drafts/html/master/browsers.html#an-indicated-part-of-the-document).\n   *\n   * It also watches the {@link ng.$location#hash $location.hash()} and automatically scrolls to\n   * match any anchor whenever it changes. This can be disabled by calling\n   * {@link ng.$anchorScrollProvider#disableAutoScrolling $anchorScrollProvider.disableAutoScrolling()}.\n   *\n   * Additionally, you can use its {@link ng.$anchorScroll#yOffset yOffset} property to specify a\n   * vertical scroll-offset (either fixed or dynamic).\n   *\n   * @param {string=} hash The hash specifying the element to scroll to. If omitted, the value of\n   *                       {@link ng.$location#hash $location.hash()} will be used.\n   *\n   * @property {(number|function|jqLite)} yOffset\n   * If set, specifies a vertical scroll-offset. This is often useful when there are fixed\n   * positioned elements at the top of the page, such as navbars, headers etc.\n   *\n   * `yOffset` can be specified in various ways:\n   * - **number**: A fixed number of pixels to be used as offset.<br /><br />\n   * - **function**: A getter function called everytime `$anchorScroll()` is executed. Must return\n   *   a number representing the offset (in pixels).<br /><br />\n   * - **jqLite**: A jqLite/jQuery element to be used for specifying the offset. The distance from\n   *   the top of the page to the element's bottom will be used as offset.<br />\n   *   **Note**: The element will be taken into account only as long as its `position` is set to\n   *   `fixed`. This option is useful, when dealing with responsive navbars/headers that adjust\n   *   their height and/or positioning according to the viewport's size.\n   *\n   * <br />\n   * <div class=\"alert alert-warning\">\n   * In order for `yOffset` to work properly, scrolling should take place on the document's root and\n   * not some child element.\n   * </div>\n   *\n   * @example\n     <example module=\"anchorScrollExample\" name=\"anchor-scroll\">\n       <file name=\"index.html\">\n         <div id=\"scrollArea\" ng-controller=\"ScrollController\">\n           <a ng-click=\"gotoBottom()\">Go to bottom</a>\n           <a id=\"bottom\"></a> You're at the bottom!\n         </div>\n       </file>\n       <file name=\"script.js\">\n         angular.module('anchorScrollExample', [])\n           .controller('ScrollController', ['$scope', '$location', '$anchorScroll',\n             function($scope, $location, $anchorScroll) {\n               $scope.gotoBottom = function() {\n                 // set the location.hash to the id of\n                 // the element you wish to scroll to.\n                 $location.hash('bottom');\n\n                 // call $anchorScroll()\n                 $anchorScroll();\n               };\n             }]);\n       </file>\n       <file name=\"style.css\">\n         #scrollArea {\n           height: 280px;\n           overflow: auto;\n         }\n\n         #bottom {\n           display: block;\n           margin-top: 2000px;\n         }\n       </file>\n     </example>\n   *\n   * <hr />\n   * The example below illustrates the use of a vertical scroll-offset (specified as a fixed value).\n   * See {@link ng.$anchorScroll#yOffset $anchorScroll.yOffset} for more details.\n   *\n   * @example\n     <example module=\"anchorScrollOffsetExample\" name=\"anchor-scroll-offset\">\n       <file name=\"index.html\">\n         <div class=\"fixed-header\" ng-controller=\"headerCtrl\">\n           <a href=\"\" ng-click=\"gotoAnchor(x)\" ng-repeat=\"x in [1,2,3,4,5]\">\n             Go to anchor {{x}}\n           </a>\n         </div>\n         <div id=\"anchor{{x}}\" class=\"anchor\" ng-repeat=\"x in [1,2,3,4,5]\">\n           Anchor {{x}} of 5\n         </div>\n       </file>\n       <file name=\"script.js\">\n         angular.module('anchorScrollOffsetExample', [])\n           .run(['$anchorScroll', function($anchorScroll) {\n             $anchorScroll.yOffset = 50;   // always scroll by 50 extra pixels\n           }])\n           .controller('headerCtrl', ['$anchorScroll', '$location', '$scope',\n             function($anchorScroll, $location, $scope) {\n               $scope.gotoAnchor = function(x) {\n                 var newHash = 'anchor' + x;\n                 if ($location.hash() !== newHash) {\n                   // set the $location.hash to `newHash` and\n                   // $anchorScroll will automatically scroll to it\n                   $location.hash('anchor' + x);\n                 } else {\n                   // call $anchorScroll() explicitly,\n                   // since $location.hash hasn't changed\n                   $anchorScroll();\n                 }\n               };\n             }\n           ]);\n       </file>\n       <file name=\"style.css\">\n         body {\n           padding-top: 50px;\n         }\n\n         .anchor {\n           border: 2px dashed DarkOrchid;\n           padding: 10px 10px 200px 10px;\n         }\n\n         .fixed-header {\n           background-color: rgba(0, 0, 0, 0.2);\n           height: 50px;\n           position: fixed;\n           top: 0; left: 0; right: 0;\n         }\n\n         .fixed-header > a {\n           display: inline-block;\n           margin: 5px 15px;\n         }\n       </file>\n     </example>\n   */\n  this.$get = ['$window', '$location', '$rootScope', function($window, $location, $rootScope) {\n    var document = $window.document;\n\n    // Helper function to get first anchor from a NodeList\n    // (using `Array#some()` instead of `angular#forEach()` since it's more performant\n    //  and working in all supported browsers.)\n    function getFirstAnchor(list) {\n      var result = null;\n      Array.prototype.some.call(list, function(element) {\n        if (nodeName_(element) === 'a') {\n          result = element;\n          return true;\n        }\n      });\n      return result;\n    }\n\n    function getYOffset() {\n\n      var offset = scroll.yOffset;\n\n      if (isFunction(offset)) {\n        offset = offset();\n      } else if (isElement(offset)) {\n        var elem = offset[0];\n        var style = $window.getComputedStyle(elem);\n        if (style.position !== 'fixed') {\n          offset = 0;\n        } else {\n          offset = elem.getBoundingClientRect().bottom;\n        }\n      } else if (!isNumber(offset)) {\n        offset = 0;\n      }\n\n      return offset;\n    }\n\n    function scrollTo(elem) {\n      if (elem) {\n        elem.scrollIntoView();\n\n        var offset = getYOffset();\n\n        if (offset) {\n          // `offset` is the number of pixels we should scroll UP in order to align `elem` properly.\n          // This is true ONLY if the call to `elem.scrollIntoView()` initially aligns `elem` at the\n          // top of the viewport.\n          //\n          // IF the number of pixels from the top of `elem` to the end of the page's content is less\n          // than the height of the viewport, then `elem.scrollIntoView()` will align the `elem` some\n          // way down the page.\n          //\n          // This is often the case for elements near the bottom of the page.\n          //\n          // In such cases we do not need to scroll the whole `offset` up, just the difference between\n          // the top of the element and the offset, which is enough to align the top of `elem` at the\n          // desired position.\n          var elemTop = elem.getBoundingClientRect().top;\n          $window.scrollBy(0, elemTop - offset);\n        }\n      } else {\n        $window.scrollTo(0, 0);\n      }\n    }\n\n    function scroll(hash) {\n      // Allow numeric hashes\n      hash = isString(hash) ? hash : isNumber(hash) ? hash.toString() : $location.hash();\n      var elm;\n\n      // empty hash, scroll to the top of the page\n      if (!hash) scrollTo(null);\n\n      // element with given id\n      else if ((elm = document.getElementById(hash))) scrollTo(elm);\n\n      // first anchor with given name :-D\n      else if ((elm = getFirstAnchor(document.getElementsByName(hash)))) scrollTo(elm);\n\n      // no element and hash === 'top', scroll to the top of the page\n      else if (hash === 'top') scrollTo(null);\n    }\n\n    // does not scroll when user clicks on anchor link that is currently on\n    // (no url change, no $location.hash() change), browser native does scroll\n    if (autoScrollingEnabled) {\n      $rootScope.$watch(function autoScrollWatch() {return $location.hash();},\n        function autoScrollWatchAction(newVal, oldVal) {\n          // skip the initial scroll if $location.hash is empty\n          if (newVal === oldVal && newVal === '') return;\n\n          jqLiteDocumentLoaded(function() {\n            $rootScope.$evalAsync(scroll);\n          });\n        });\n    }\n\n    return scroll;\n  }];\n}\n\nvar $animateMinErr = minErr('$animate');\nvar ELEMENT_NODE = 1;\nvar NG_ANIMATE_CLASSNAME = 'ng-animate';\n\nfunction mergeClasses(a,b) {\n  if (!a && !b) return '';\n  if (!a) return b;\n  if (!b) return a;\n  if (isArray(a)) a = a.join(' ');\n  if (isArray(b)) b = b.join(' ');\n  return a + ' ' + b;\n}\n\nfunction extractElementNode(element) {\n  for (var i = 0; i < element.length; i++) {\n    var elm = element[i];\n    if (elm.nodeType === ELEMENT_NODE) {\n      return elm;\n    }\n  }\n}\n\nfunction splitClasses(classes) {\n  if (isString(classes)) {\n    classes = classes.split(' ');\n  }\n\n  // Use createMap() to prevent class assumptions involving property names in\n  // Object.prototype\n  var obj = createMap();\n  forEach(classes, function(klass) {\n    // sometimes the split leaves empty string values\n    // incase extra spaces were applied to the options\n    if (klass.length) {\n      obj[klass] = true;\n    }\n  });\n  return obj;\n}\n\n// if any other type of options value besides an Object value is\n// passed into the $animate.method() animation then this helper code\n// will be run which will ignore it. While this patch is not the\n// greatest solution to this, a lot of existing plugins depend on\n// $animate to either call the callback (< 1.2) or return a promise\n// that can be changed. This helper function ensures that the options\n// are wiped clean incase a callback function is provided.\nfunction prepareAnimateOptions(options) {\n  return isObject(options)\n      ? options\n      : {};\n}\n\nvar $$CoreAnimateJsProvider = /** @this */ function() {\n  this.$get = noop;\n};\n\n// this is prefixed with Core since it conflicts with\n// the animateQueueProvider defined in ngAnimate/animateQueue.js\nvar $$CoreAnimateQueueProvider = /** @this */ function() {\n  var postDigestQueue = new NgMap();\n  var postDigestElements = [];\n\n  this.$get = ['$$AnimateRunner', '$rootScope',\n       function($$AnimateRunner,   $rootScope) {\n    return {\n      enabled: noop,\n      on: noop,\n      off: noop,\n      pin: noop,\n\n      push: function(element, event, options, domOperation) {\n        if (domOperation) {\n          domOperation();\n        }\n\n        options = options || {};\n        if (options.from) {\n          element.css(options.from);\n        }\n        if (options.to) {\n          element.css(options.to);\n        }\n\n        if (options.addClass || options.removeClass) {\n          addRemoveClassesPostDigest(element, options.addClass, options.removeClass);\n        }\n\n        var runner = new $$AnimateRunner();\n\n        // since there are no animations to run the runner needs to be\n        // notified that the animation call is complete.\n        runner.complete();\n        return runner;\n      }\n    };\n\n\n    function updateData(data, classes, value) {\n      var changed = false;\n      if (classes) {\n        classes = isString(classes) ? classes.split(' ') :\n                  isArray(classes) ? classes : [];\n        forEach(classes, function(className) {\n          if (className) {\n            changed = true;\n            data[className] = value;\n          }\n        });\n      }\n      return changed;\n    }\n\n    function handleCSSClassChanges() {\n      forEach(postDigestElements, function(element) {\n        var data = postDigestQueue.get(element);\n        if (data) {\n          var existing = splitClasses(element.attr('class'));\n          var toAdd = '';\n          var toRemove = '';\n          forEach(data, function(status, className) {\n            var hasClass = !!existing[className];\n            if (status !== hasClass) {\n              if (status) {\n                toAdd += (toAdd.length ? ' ' : '') + className;\n              } else {\n                toRemove += (toRemove.length ? ' ' : '') + className;\n              }\n            }\n          });\n\n          forEach(element, function(elm) {\n            if (toAdd) {\n              jqLiteAddClass(elm, toAdd);\n            }\n            if (toRemove) {\n              jqLiteRemoveClass(elm, toRemove);\n            }\n          });\n          postDigestQueue.delete(element);\n        }\n      });\n      postDigestElements.length = 0;\n    }\n\n\n    function addRemoveClassesPostDigest(element, add, remove) {\n      var data = postDigestQueue.get(element) || {};\n\n      var classesAdded = updateData(data, add, true);\n      var classesRemoved = updateData(data, remove, false);\n\n      if (classesAdded || classesRemoved) {\n\n        postDigestQueue.set(element, data);\n        postDigestElements.push(element);\n\n        if (postDigestElements.length === 1) {\n          $rootScope.$$postDigest(handleCSSClassChanges);\n        }\n      }\n    }\n  }];\n};\n\n/**\n * @ngdoc provider\n * @name $animateProvider\n *\n * @description\n * Default implementation of $animate that doesn't perform any animations, instead just\n * synchronously performs DOM updates and resolves the returned runner promise.\n *\n * In order to enable animations the `ngAnimate` module has to be loaded.\n *\n * To see the functional implementation check out `src/ngAnimate/animate.js`.\n */\nvar $AnimateProvider = ['$provide', /** @this */ function($provide) {\n  var provider = this;\n  var classNameFilter = null;\n  var customFilter = null;\n\n  this.$$registeredAnimations = Object.create(null);\n\n   /**\n   * @ngdoc method\n   * @name $animateProvider#register\n   *\n   * @description\n   * Registers a new injectable animation factory function. The factory function produces the\n   * animation object which contains callback functions for each event that is expected to be\n   * animated.\n   *\n   *   * `eventFn`: `function(element, ... , doneFunction, options)`\n   *   The element to animate, the `doneFunction` and the options fed into the animation. Depending\n   *   on the type of animation additional arguments will be injected into the animation function. The\n   *   list below explains the function signatures for the different animation methods:\n   *\n   *   - setClass: function(element, addedClasses, removedClasses, doneFunction, options)\n   *   - addClass: function(element, addedClasses, doneFunction, options)\n   *   - removeClass: function(element, removedClasses, doneFunction, options)\n   *   - enter, leave, move: function(element, doneFunction, options)\n   *   - animate: function(element, fromStyles, toStyles, doneFunction, options)\n   *\n   *   Make sure to trigger the `doneFunction` once the animation is fully complete.\n   *\n   * ```js\n   *   return {\n   *     //enter, leave, move signature\n   *     eventFn : function(element, done, options) {\n   *       //code to run the animation\n   *       //once complete, then run done()\n   *       return function endFunction(wasCancelled) {\n   *         //code to cancel the animation\n   *       }\n   *     }\n   *   }\n   * ```\n   *\n   * @param {string} name The name of the animation (this is what the class-based CSS value will be compared to).\n   * @param {Function} factory The factory function that will be executed to return the animation\n   *                           object.\n   */\n  this.register = function(name, factory) {\n    if (name && name.charAt(0) !== '.') {\n      throw $animateMinErr('notcsel', 'Expecting class selector starting with \\'.\\' got \\'{0}\\'.', name);\n    }\n\n    var key = name + '-animation';\n    provider.$$registeredAnimations[name.substr(1)] = key;\n    $provide.factory(key, factory);\n  };\n\n  /**\n   * @ngdoc method\n   * @name $animateProvider#customFilter\n   *\n   * @description\n   * Sets and/or returns the custom filter function that is used to \"filter\" animations, i.e.\n   * determine if an animation is allowed or not. When no filter is specified (the default), no\n   * animation will be blocked. Setting the `customFilter` value will only allow animations for\n   * which the filter function's return value is truthy.\n   *\n   * This allows to easily create arbitrarily complex rules for filtering animations, such as\n   * allowing specific events only, or enabling animations on specific subtrees of the DOM, etc.\n   * Filtering animations can also boost performance for low-powered devices, as well as\n   * applications containing a lot of structural operations.\n   *\n   * <div class=\"alert alert-success\">\n   *   **Best Practice:**\n   *   Keep the filtering function as lean as possible, because it will be called for each DOM\n   *   action (e.g. insertion, removal, class change) performed by \"animation-aware\" directives.\n   *   See {@link guide/animations#which-directives-support-animations- here} for a list of built-in\n   *   directives that support animations.\n   *   Performing computationally expensive or time-consuming operations on each call of the\n   *   filtering function can make your animations sluggish.\n   * </div>\n   *\n   * **Note:** If present, `customFilter` will be checked before\n   * {@link $animateProvider#classNameFilter classNameFilter}.\n   *\n   * @param {Function=} filterFn - The filter function which will be used to filter all animations.\n   *   If a falsy value is returned, no animation will be performed. The function will be called\n   *   with the following arguments:\n   *   - **node** `{DOMElement}` - The DOM element to be animated.\n   *   - **event** `{String}` - The name of the animation event (e.g. `enter`, `leave`, `addClass`\n   *     etc).\n   *   - **options** `{Object}` - A collection of options/styles used for the animation.\n   * @return {Function} The current filter function or `null` if there is none set.\n   */\n  this.customFilter = function(filterFn) {\n    if (arguments.length === 1) {\n      customFilter = isFunction(filterFn) ? filterFn : null;\n    }\n\n    return customFilter;\n  };\n\n  /**\n   * @ngdoc method\n   * @name $animateProvider#classNameFilter\n   *\n   * @description\n   * Sets and/or returns the CSS class regular expression that is checked when performing\n   * an animation. Upon bootstrap the classNameFilter value is not set at all and will\n   * therefore enable $animate to attempt to perform an animation on any element that is triggered.\n   * When setting the `classNameFilter` value, animations will only be performed on elements\n   * that successfully match the filter expression. This in turn can boost performance\n   * for low-powered devices as well as applications containing a lot of structural operations.\n   *\n   * **Note:** If present, `classNameFilter` will be checked after\n   * {@link $animateProvider#customFilter customFilter}. If `customFilter` is present and returns\n   * false, `classNameFilter` will not be checked.\n   *\n   * @param {RegExp=} expression The className expression which will be checked against all animations\n   * @return {RegExp} The current CSS className expression value. If null then there is no expression value\n   */\n  this.classNameFilter = function(expression) {\n    if (arguments.length === 1) {\n      classNameFilter = (expression instanceof RegExp) ? expression : null;\n      if (classNameFilter) {\n        var reservedRegex = new RegExp('[(\\\\s|\\\\/)]' + NG_ANIMATE_CLASSNAME + '[(\\\\s|\\\\/)]');\n        if (reservedRegex.test(classNameFilter.toString())) {\n          classNameFilter = null;\n          throw $animateMinErr('nongcls', '$animateProvider.classNameFilter(regex) prohibits accepting a regex value which matches/contains the \"{0}\" CSS class.', NG_ANIMATE_CLASSNAME);\n        }\n      }\n    }\n    return classNameFilter;\n  };\n\n  this.$get = ['$$animateQueue', function($$animateQueue) {\n    function domInsert(element, parentElement, afterElement) {\n      // if for some reason the previous element was removed\n      // from the dom sometime before this code runs then let's\n      // just stick to using the parent element as the anchor\n      if (afterElement) {\n        var afterNode = extractElementNode(afterElement);\n        if (afterNode && !afterNode.parentNode && !afterNode.previousElementSibling) {\n          afterElement = null;\n        }\n      }\n      if (afterElement) {\n        afterElement.after(element);\n      } else {\n        parentElement.prepend(element);\n      }\n    }\n\n    /**\n     * @ngdoc service\n     * @name $animate\n     * @description The $animate service exposes a series of DOM utility methods that provide support\n     * for animation hooks. The default behavior is the application of DOM operations, however,\n     * when an animation is detected (and animations are enabled), $animate will do the heavy lifting\n     * to ensure that animation runs with the triggered DOM operation.\n     *\n     * By default $animate doesn't trigger any animations. This is because the `ngAnimate` module isn't\n     * included and only when it is active then the animation hooks that `$animate` triggers will be\n     * functional. Once active then all structural `ng-` directives will trigger animations as they perform\n     * their DOM-related operations (enter, leave and move). Other directives such as `ngClass`,\n     * `ngShow`, `ngHide` and `ngMessages` also provide support for animations.\n     *\n     * It is recommended that the`$animate` service is always used when executing DOM-related procedures within directives.\n     *\n     * To learn more about enabling animation support, click here to visit the\n     * {@link ngAnimate ngAnimate module page}.\n     */\n    return {\n      // we don't call it directly since non-existant arguments may\n      // be interpreted as null within the sub enabled function\n\n      /**\n       *\n       * @ngdoc method\n       * @name $animate#on\n       * @kind function\n       * @description Sets up an event listener to fire whenever the animation event (enter, leave, move, etc...)\n       *    has fired on the given element or among any of its children. Once the listener is fired, the provided callback\n       *    is fired with the following params:\n       *\n       * ```js\n       * $animate.on('enter', container,\n       *    function callback(element, phase) {\n       *      // cool we detected an enter animation within the container\n       *    }\n       * );\n       * ```\n       *\n       * @param {string} event the animation event that will be captured (e.g. enter, leave, move, addClass, removeClass, etc...)\n       * @param {DOMElement} container the container element that will capture each of the animation events that are fired on itself\n       *     as well as among its children\n       * @param {Function} callback the callback function that will be fired when the listener is triggered\n       *\n       * The arguments present in the callback function are:\n       * * `element` - The captured DOM element that the animation was fired on.\n       * * `phase` - The phase of the animation. The two possible phases are **start** (when the animation starts) and **close** (when it ends).\n       */\n      on: $$animateQueue.on,\n\n      /**\n       *\n       * @ngdoc method\n       * @name $animate#off\n       * @kind function\n       * @description Deregisters an event listener based on the event which has been associated with the provided element. This method\n       * can be used in three different ways depending on the arguments:\n       *\n       * ```js\n       * // remove all the animation event listeners listening for `enter`\n       * $animate.off('enter');\n       *\n       * // remove listeners for all animation events from the container element\n       * $animate.off(container);\n       *\n       * // remove all the animation event listeners listening for `enter` on the given element and its children\n       * $animate.off('enter', container);\n       *\n       * // remove the event listener function provided by `callback` that is set\n       * // to listen for `enter` on the given `container` as well as its children\n       * $animate.off('enter', container, callback);\n       * ```\n       *\n       * @param {string|DOMElement} event|container the animation event (e.g. enter, leave, move,\n       * addClass, removeClass, etc...), or the container element. If it is the element, all other\n       * arguments are ignored.\n       * @param {DOMElement=} container the container element the event listener was placed on\n       * @param {Function=} callback the callback function that was registered as the listener\n       */\n      off: $$animateQueue.off,\n\n      /**\n       * @ngdoc method\n       * @name $animate#pin\n       * @kind function\n       * @description Associates the provided element with a host parent element to allow the element to be animated even if it exists\n       *    outside of the DOM structure of the Angular application. By doing so, any animation triggered via `$animate` can be issued on the\n       *    element despite being outside the realm of the application or within another application. Say for example if the application\n       *    was bootstrapped on an element that is somewhere inside of the `<body>` tag, but we wanted to allow for an element to be situated\n       *    as a direct child of `document.body`, then this can be achieved by pinning the element via `$animate.pin(element)`. Keep in mind\n       *    that calling `$animate.pin(element, parentElement)` will not actually insert into the DOM anywhere; it will just create the association.\n       *\n       *    Note that this feature is only active when the `ngAnimate` module is used.\n       *\n       * @param {DOMElement} element the external element that will be pinned\n       * @param {DOMElement} parentElement the host parent element that will be associated with the external element\n       */\n      pin: $$animateQueue.pin,\n\n      /**\n       *\n       * @ngdoc method\n       * @name $animate#enabled\n       * @kind function\n       * @description Used to get and set whether animations are enabled or not on the entire application or on an element and its children. This\n       * function can be called in four ways:\n       *\n       * ```js\n       * // returns true or false\n       * $animate.enabled();\n       *\n       * // changes the enabled state for all animations\n       * $animate.enabled(false);\n       * $animate.enabled(true);\n       *\n       * // returns true or false if animations are enabled for an element\n       * $animate.enabled(element);\n       *\n       * // changes the enabled state for an element and its children\n       * $animate.enabled(element, true);\n       * $animate.enabled(element, false);\n       * ```\n       *\n       * @param {DOMElement=} element the element that will be considered for checking/setting the enabled state\n       * @param {boolean=} enabled whether or not the animations will be enabled for the element\n       *\n       * @return {boolean} whether or not animations are enabled\n       */\n      enabled: $$animateQueue.enabled,\n\n      /**\n       * @ngdoc method\n       * @name $animate#cancel\n       * @kind function\n       * @description Cancels the provided animation.\n       *\n       * @param {Promise} animationPromise The animation promise that is returned when an animation is started.\n       */\n      cancel: function(runner) {\n        if (runner.end) {\n          runner.end();\n        }\n      },\n\n      /**\n       *\n       * @ngdoc method\n       * @name $animate#enter\n       * @kind function\n       * @description Inserts the element into the DOM either after the `after` element (if provided) or\n       *   as the first child within the `parent` element and then triggers an animation.\n       *   A promise is returned that will be resolved during the next digest once the animation\n       *   has completed.\n       *\n       * @param {DOMElement} element the element which will be inserted into the DOM\n       * @param {DOMElement} parent the parent element which will append the element as\n       *   a child (so long as the after element is not present)\n       * @param {DOMElement=} after the sibling element after which the element will be appended\n       * @param {object=} options an optional collection of options/styles that will be applied to the element.\n       *   The object can have the following properties:\n       *\n       *   - **addClass** - `{string}` - space-separated CSS classes to add to element\n       *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`\n       *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element\n       *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`\n       *\n       * @return {Promise} the animation callback promise\n       */\n      enter: function(element, parent, after, options) {\n        parent = parent && jqLite(parent);\n        after = after && jqLite(after);\n        parent = parent || after.parent();\n        domInsert(element, parent, after);\n        return $$animateQueue.push(element, 'enter', prepareAnimateOptions(options));\n      },\n\n      /**\n       *\n       * @ngdoc method\n       * @name $animate#move\n       * @kind function\n       * @description Inserts (moves) the element into its new position in the DOM either after\n       *   the `after` element (if provided) or as the first child within the `parent` element\n       *   and then triggers an animation. A promise is returned that will be resolved\n       *   during the next digest once the animation has completed.\n       *\n       * @param {DOMElement} element the element which will be moved into the new DOM position\n       * @param {DOMElement} parent the parent element which will append the element as\n       *   a child (so long as the after element is not present)\n       * @param {DOMElement=} after the sibling element after which the element will be appended\n       * @param {object=} options an optional collection of options/styles that will be applied to the element.\n       *   The object can have the following properties:\n       *\n       *   - **addClass** - `{string}` - space-separated CSS classes to add to element\n       *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`\n       *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element\n       *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`\n       *\n       * @return {Promise} the animation callback promise\n       */\n      move: function(element, parent, after, options) {\n        parent = parent && jqLite(parent);\n        after = after && jqLite(after);\n        parent = parent || after.parent();\n        domInsert(element, parent, after);\n        return $$animateQueue.push(element, 'move', prepareAnimateOptions(options));\n      },\n\n      /**\n       * @ngdoc method\n       * @name $animate#leave\n       * @kind function\n       * @description Triggers an animation and then removes the element from the DOM.\n       * When the function is called a promise is returned that will be resolved during the next\n       * digest once the animation has completed.\n       *\n       * @param {DOMElement} element the element which will be removed from the DOM\n       * @param {object=} options an optional collection of options/styles that will be applied to the element.\n       *   The object can have the following properties:\n       *\n       *   - **addClass** - `{string}` - space-separated CSS classes to add to element\n       *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`\n       *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element\n       *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`\n       *\n       * @return {Promise} the animation callback promise\n       */\n      leave: function(element, options) {\n        return $$animateQueue.push(element, 'leave', prepareAnimateOptions(options), function() {\n          element.remove();\n        });\n      },\n\n      /**\n       * @ngdoc method\n       * @name $animate#addClass\n       * @kind function\n       *\n       * @description Triggers an addClass animation surrounding the addition of the provided CSS class(es). Upon\n       *   execution, the addClass operation will only be handled after the next digest and it will not trigger an\n       *   animation if element already contains the CSS class or if the class is removed at a later step.\n       *   Note that class-based animations are treated differently compared to structural animations\n       *   (like enter, move and leave) since the CSS classes may be added/removed at different points\n       *   depending if CSS or JavaScript animations are used.\n       *\n       * @param {DOMElement} element the element which the CSS classes will be applied to\n       * @param {string} className the CSS class(es) that will be added (multiple classes are separated via spaces)\n       * @param {object=} options an optional collection of options/styles that will be applied to the element.\n       *   The object can have the following properties:\n       *\n       *   - **addClass** - `{string}` - space-separated CSS classes to add to element\n       *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`\n       *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element\n       *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`\n       *\n       * @return {Promise} the animation callback promise\n       */\n      addClass: function(element, className, options) {\n        options = prepareAnimateOptions(options);\n        options.addClass = mergeClasses(options.addclass, className);\n        return $$animateQueue.push(element, 'addClass', options);\n      },\n\n      /**\n       * @ngdoc method\n       * @name $animate#removeClass\n       * @kind function\n       *\n       * @description Triggers a removeClass animation surrounding the removal of the provided CSS class(es). Upon\n       *   execution, the removeClass operation will only be handled after the next digest and it will not trigger an\n       *   animation if element does not contain the CSS class or if the class is added at a later step.\n       *   Note that class-based animations are treated differently compared to structural animations\n       *   (like enter, move and leave) since the CSS classes may be added/removed at different points\n       *   depending if CSS or JavaScript animations are used.\n       *\n       * @param {DOMElement} element the element which the CSS classes will be applied to\n       * @param {string} className the CSS class(es) that will be removed (multiple classes are separated via spaces)\n       * @param {object=} options an optional collection of options/styles that will be applied to the element.\n       *   The object can have the following properties:\n       *\n       *   - **addClass** - `{string}` - space-separated CSS classes to add to element\n       *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`\n       *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element\n       *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`\n       *\n       * @return {Promise} the animation callback promise\n       */\n      removeClass: function(element, className, options) {\n        options = prepareAnimateOptions(options);\n        options.removeClass = mergeClasses(options.removeClass, className);\n        return $$animateQueue.push(element, 'removeClass', options);\n      },\n\n      /**\n       * @ngdoc method\n       * @name $animate#setClass\n       * @kind function\n       *\n       * @description Performs both the addition and removal of a CSS classes on an element and (during the process)\n       *    triggers an animation surrounding the class addition/removal. Much like `$animate.addClass` and\n       *    `$animate.removeClass`, `setClass` will only evaluate the classes being added/removed once a digest has\n       *    passed. Note that class-based animations are treated differently compared to structural animations\n       *    (like enter, move and leave) since the CSS classes may be added/removed at different points\n       *    depending if CSS or JavaScript animations are used.\n       *\n       * @param {DOMElement} element the element which the CSS classes will be applied to\n       * @param {string} add the CSS class(es) that will be added (multiple classes are separated via spaces)\n       * @param {string} remove the CSS class(es) that will be removed (multiple classes are separated via spaces)\n       * @param {object=} options an optional collection of options/styles that will be applied to the element.\n       *   The object can have the following properties:\n       *\n       *   - **addClass** - `{string}` - space-separated CSS classes to add to element\n       *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`\n       *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element\n       *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`\n       *\n       * @return {Promise} the animation callback promise\n       */\n      setClass: function(element, add, remove, options) {\n        options = prepareAnimateOptions(options);\n        options.addClass = mergeClasses(options.addClass, add);\n        options.removeClass = mergeClasses(options.removeClass, remove);\n        return $$animateQueue.push(element, 'setClass', options);\n      },\n\n      /**\n       * @ngdoc method\n       * @name $animate#animate\n       * @kind function\n       *\n       * @description Performs an inline animation on the element which applies the provided to and from CSS styles to the element.\n       * If any detected CSS transition, keyframe or JavaScript matches the provided className value, then the animation will take\n       * on the provided styles. For example, if a transition animation is set for the given className, then the provided `from` and\n       * `to` styles will be applied alongside the given transition. If the CSS style provided in `from` does not have a corresponding\n       * style in `to`, the style in `from` is applied immediately, and no animation is run.\n       * If a JavaScript animation is detected then the provided styles will be given in as function parameters into the `animate`\n       * method (or as part of the `options` parameter):\n       *\n       * ```js\n       * ngModule.animation('.my-inline-animation', function() {\n       *   return {\n       *     animate : function(element, from, to, done, options) {\n       *       //animation\n       *       done();\n       *     }\n       *   }\n       * });\n       * ```\n       *\n       * @param {DOMElement} element the element which the CSS styles will be applied to\n       * @param {object} from the from (starting) CSS styles that will be applied to the element and across the animation.\n       * @param {object} to the to (destination) CSS styles that will be applied to the element and across the animation.\n       * @param {string=} className an optional CSS class that will be applied to the element for the duration of the animation. If\n       *    this value is left as empty then a CSS class of `ng-inline-animate` will be applied to the element.\n       *    (Note that if no animation is detected then this value will not be applied to the element.)\n       * @param {object=} options an optional collection of options/styles that will be applied to the element.\n       *   The object can have the following properties:\n       *\n       *   - **addClass** - `{string}` - space-separated CSS classes to add to element\n       *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`\n       *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element\n       *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`\n       *\n       * @return {Promise} the animation callback promise\n       */\n      animate: function(element, from, to, className, options) {\n        options = prepareAnimateOptions(options);\n        options.from = options.from ? extend(options.from, from) : from;\n        options.to   = options.to   ? extend(options.to, to)     : to;\n\n        className = className || 'ng-inline-animate';\n        options.tempClasses = mergeClasses(options.tempClasses, className);\n        return $$animateQueue.push(element, 'animate', options);\n      }\n    };\n  }];\n}];\n\nvar $$AnimateAsyncRunFactoryProvider = /** @this */ function() {\n  this.$get = ['$$rAF', function($$rAF) {\n    var waitQueue = [];\n\n    function waitForTick(fn) {\n      waitQueue.push(fn);\n      if (waitQueue.length > 1) return;\n      $$rAF(function() {\n        for (var i = 0; i < waitQueue.length; i++) {\n          waitQueue[i]();\n        }\n        waitQueue = [];\n      });\n    }\n\n    return function() {\n      var passed = false;\n      waitForTick(function() {\n        passed = true;\n      });\n      return function(callback) {\n        if (passed) {\n          callback();\n        } else {\n          waitForTick(callback);\n        }\n      };\n    };\n  }];\n};\n\nvar $$AnimateRunnerFactoryProvider = /** @this */ function() {\n  this.$get = ['$q', '$sniffer', '$$animateAsyncRun', '$$isDocumentHidden', '$timeout',\n       function($q,   $sniffer,   $$animateAsyncRun,   $$isDocumentHidden,   $timeout) {\n\n    var INITIAL_STATE = 0;\n    var DONE_PENDING_STATE = 1;\n    var DONE_COMPLETE_STATE = 2;\n\n    AnimateRunner.chain = function(chain, callback) {\n      var index = 0;\n\n      next();\n      function next() {\n        if (index === chain.length) {\n          callback(true);\n          return;\n        }\n\n        chain[index](function(response) {\n          if (response === false) {\n            callback(false);\n            return;\n          }\n          index++;\n          next();\n        });\n      }\n    };\n\n    AnimateRunner.all = function(runners, callback) {\n      var count = 0;\n      var status = true;\n      forEach(runners, function(runner) {\n        runner.done(onProgress);\n      });\n\n      function onProgress(response) {\n        status = status && response;\n        if (++count === runners.length) {\n          callback(status);\n        }\n      }\n    };\n\n    function AnimateRunner(host) {\n      this.setHost(host);\n\n      var rafTick = $$animateAsyncRun();\n      var timeoutTick = function(fn) {\n        $timeout(fn, 0, false);\n      };\n\n      this._doneCallbacks = [];\n      this._tick = function(fn) {\n        if ($$isDocumentHidden()) {\n          timeoutTick(fn);\n        } else {\n          rafTick(fn);\n        }\n      };\n      this._state = 0;\n    }\n\n    AnimateRunner.prototype = {\n      setHost: function(host) {\n        this.host = host || {};\n      },\n\n      done: function(fn) {\n        if (this._state === DONE_COMPLETE_STATE) {\n          fn();\n        } else {\n          this._doneCallbacks.push(fn);\n        }\n      },\n\n      progress: noop,\n\n      getPromise: function() {\n        if (!this.promise) {\n          var self = this;\n          this.promise = $q(function(resolve, reject) {\n            self.done(function(status) {\n              if (status === false) {\n                reject();\n              } else {\n                resolve();\n              }\n            });\n          });\n        }\n        return this.promise;\n      },\n\n      then: function(resolveHandler, rejectHandler) {\n        return this.getPromise().then(resolveHandler, rejectHandler);\n      },\n\n      'catch': function(handler) {\n        return this.getPromise()['catch'](handler);\n      },\n\n      'finally': function(handler) {\n        return this.getPromise()['finally'](handler);\n      },\n\n      pause: function() {\n        if (this.host.pause) {\n          this.host.pause();\n        }\n      },\n\n      resume: function() {\n        if (this.host.resume) {\n          this.host.resume();\n        }\n      },\n\n      end: function() {\n        if (this.host.end) {\n          this.host.end();\n        }\n        this._resolve(true);\n      },\n\n      cancel: function() {\n        if (this.host.cancel) {\n          this.host.cancel();\n        }\n        this._resolve(false);\n      },\n\n      complete: function(response) {\n        var self = this;\n        if (self._state === INITIAL_STATE) {\n          self._state = DONE_PENDING_STATE;\n          self._tick(function() {\n            self._resolve(response);\n          });\n        }\n      },\n\n      _resolve: function(response) {\n        if (this._state !== DONE_COMPLETE_STATE) {\n          forEach(this._doneCallbacks, function(fn) {\n            fn(response);\n          });\n          this._doneCallbacks.length = 0;\n          this._state = DONE_COMPLETE_STATE;\n        }\n      }\n    };\n\n    return AnimateRunner;\n  }];\n};\n\n/* exported $CoreAnimateCssProvider */\n\n/**\n * @ngdoc service\n * @name $animateCss\n * @kind object\n * @this\n *\n * @description\n * This is the core version of `$animateCss`. By default, only when the `ngAnimate` is included,\n * then the `$animateCss` service will actually perform animations.\n *\n * Click here {@link ngAnimate.$animateCss to read the documentation for $animateCss}.\n */\nvar $CoreAnimateCssProvider = function() {\n  this.$get = ['$$rAF', '$q', '$$AnimateRunner', function($$rAF, $q, $$AnimateRunner) {\n\n    return function(element, initialOptions) {\n      // all of the animation functions should create\n      // a copy of the options data, however, if a\n      // parent service has already created a copy then\n      // we should stick to using that\n      var options = initialOptions || {};\n      if (!options.$$prepared) {\n        options = copy(options);\n      }\n\n      // there is no point in applying the styles since\n      // there is no animation that goes on at all in\n      // this version of $animateCss.\n      if (options.cleanupStyles) {\n        options.from = options.to = null;\n      }\n\n      if (options.from) {\n        element.css(options.from);\n        options.from = null;\n      }\n\n      var closed, runner = new $$AnimateRunner();\n      return {\n        start: run,\n        end: run\n      };\n\n      function run() {\n        $$rAF(function() {\n          applyAnimationContents();\n          if (!closed) {\n            runner.complete();\n          }\n          closed = true;\n        });\n        return runner;\n      }\n\n      function applyAnimationContents() {\n        if (options.addClass) {\n          element.addClass(options.addClass);\n          options.addClass = null;\n        }\n        if (options.removeClass) {\n          element.removeClass(options.removeClass);\n          options.removeClass = null;\n        }\n        if (options.to) {\n          element.css(options.to);\n          options.to = null;\n        }\n      }\n    };\n  }];\n};\n\n/* global stripHash: true */\n\n/**\n * ! This is a private undocumented service !\n *\n * @name $browser\n * @requires $log\n * @description\n * This object has two goals:\n *\n * - hide all the global state in the browser caused by the window object\n * - abstract away all the browser specific features and inconsistencies\n *\n * For tests we provide {@link ngMock.$browser mock implementation} of the `$browser`\n * service, which can be used for convenient testing of the application without the interaction with\n * the real browser apis.\n */\n/**\n * @param {object} window The global window object.\n * @param {object} document jQuery wrapped document.\n * @param {object} $log window.console or an object with the same interface.\n * @param {object} $sniffer $sniffer service\n */\nfunction Browser(window, document, $log, $sniffer) {\n  var self = this,\n      location = window.location,\n      history = window.history,\n      setTimeout = window.setTimeout,\n      clearTimeout = window.clearTimeout,\n      pendingDeferIds = {};\n\n  self.isMock = false;\n\n  var outstandingRequestCount = 0;\n  var outstandingRequestCallbacks = [];\n\n  // TODO(vojta): remove this temporary api\n  self.$$completeOutstandingRequest = completeOutstandingRequest;\n  self.$$incOutstandingRequestCount = function() { outstandingRequestCount++; };\n\n  /**\n   * Executes the `fn` function(supports currying) and decrements the `outstandingRequestCallbacks`\n   * counter. If the counter reaches 0, all the `outstandingRequestCallbacks` are executed.\n   */\n  function completeOutstandingRequest(fn) {\n    try {\n      fn.apply(null, sliceArgs(arguments, 1));\n    } finally {\n      outstandingRequestCount--;\n      if (outstandingRequestCount === 0) {\n        while (outstandingRequestCallbacks.length) {\n          try {\n            outstandingRequestCallbacks.pop()();\n          } catch (e) {\n            $log.error(e);\n          }\n        }\n      }\n    }\n  }\n\n  function getHash(url) {\n    var index = url.indexOf('#');\n    return index === -1 ? '' : url.substr(index);\n  }\n\n  /**\n   * @private\n   * TODO(vojta): prefix this method with $$ ?\n   * @param {function()} callback Function that will be called when no outstanding request\n   */\n  self.notifyWhenNoOutstandingRequests = function(callback) {\n    if (outstandingRequestCount === 0) {\n      callback();\n    } else {\n      outstandingRequestCallbacks.push(callback);\n    }\n  };\n\n  //////////////////////////////////////////////////////////////\n  // URL API\n  //////////////////////////////////////////////////////////////\n\n  var cachedState, lastHistoryState,\n      lastBrowserUrl = location.href,\n      baseElement = document.find('base'),\n      pendingLocation = null,\n      getCurrentState = !$sniffer.history ? noop : function getCurrentState() {\n        try {\n          return history.state;\n        } catch (e) {\n          // MSIE can reportedly throw when there is no state (UNCONFIRMED).\n        }\n      };\n\n  cacheState();\n\n  /**\n   * @name $browser#url\n   *\n   * @description\n   * GETTER:\n   * Without any argument, this method just returns current value of location.href.\n   *\n   * SETTER:\n   * With at least one argument, this method sets url to new value.\n   * If html5 history api supported, pushState/replaceState is used, otherwise\n   * location.href/location.replace is used.\n   * Returns its own instance to allow chaining\n   *\n   * NOTE: this api is intended for use only by the $location service. Please use the\n   * {@link ng.$location $location service} to change url.\n   *\n   * @param {string} url New url (when used as setter)\n   * @param {boolean=} replace Should new url replace current history record?\n   * @param {object=} state object to use with pushState/replaceState\n   */\n  self.url = function(url, replace, state) {\n    // In modern browsers `history.state` is `null` by default; treating it separately\n    // from `undefined` would cause `$browser.url('/foo')` to change `history.state`\n    // to undefined via `pushState`. Instead, let's change `undefined` to `null` here.\n    if (isUndefined(state)) {\n      state = null;\n    }\n\n    // Android Browser BFCache causes location, history reference to become stale.\n    if (location !== window.location) location = window.location;\n    if (history !== window.history) history = window.history;\n\n    // setter\n    if (url) {\n      var sameState = lastHistoryState === state;\n\n      // Don't change anything if previous and current URLs and states match. This also prevents\n      // IE<10 from getting into redirect loop when in LocationHashbangInHtml5Url mode.\n      // See https://github.com/angular/angular.js/commit/ffb2701\n      if (lastBrowserUrl === url && (!$sniffer.history || sameState)) {\n        return self;\n      }\n      var sameBase = lastBrowserUrl && stripHash(lastBrowserUrl) === stripHash(url);\n      lastBrowserUrl = url;\n      lastHistoryState = state;\n      // Don't use history API if only the hash changed\n      // due to a bug in IE10/IE11 which leads\n      // to not firing a `hashchange` nor `popstate` event\n      // in some cases (see #9143).\n      if ($sniffer.history && (!sameBase || !sameState)) {\n        history[replace ? 'replaceState' : 'pushState'](state, '', url);\n        cacheState();\n      } else {\n        if (!sameBase) {\n          pendingLocation = url;\n        }\n        if (replace) {\n          location.replace(url);\n        } else if (!sameBase) {\n          location.href = url;\n        } else {\n          location.hash = getHash(url);\n        }\n        if (location.href !== url) {\n          pendingLocation = url;\n        }\n      }\n      if (pendingLocation) {\n        pendingLocation = url;\n      }\n      return self;\n    // getter\n    } else {\n      // - pendingLocation is needed as browsers don't allow to read out\n      //   the new location.href if a reload happened or if there is a bug like in iOS 9 (see\n      //   https://openradar.appspot.com/22186109).\n      // - the replacement is a workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=407172\n      return pendingLocation || location.href.replace(/%27/g,'\\'');\n    }\n  };\n\n  /**\n   * @name $browser#state\n   *\n   * @description\n   * This method is a getter.\n   *\n   * Return history.state or null if history.state is undefined.\n   *\n   * @returns {object} state\n   */\n  self.state = function() {\n    return cachedState;\n  };\n\n  var urlChangeListeners = [],\n      urlChangeInit = false;\n\n  function cacheStateAndFireUrlChange() {\n    pendingLocation = null;\n    fireStateOrUrlChange();\n  }\n\n  // This variable should be used *only* inside the cacheState function.\n  var lastCachedState = null;\n  function cacheState() {\n    // This should be the only place in $browser where `history.state` is read.\n    cachedState = getCurrentState();\n    cachedState = isUndefined(cachedState) ? null : cachedState;\n\n    // Prevent callbacks fo fire twice if both hashchange & popstate were fired.\n    if (equals(cachedState, lastCachedState)) {\n      cachedState = lastCachedState;\n    }\n\n    lastCachedState = cachedState;\n    lastHistoryState = cachedState;\n  }\n\n  function fireStateOrUrlChange() {\n    var prevLastHistoryState = lastHistoryState;\n    cacheState();\n\n    if (lastBrowserUrl === self.url() && prevLastHistoryState === cachedState) {\n      return;\n    }\n\n    lastBrowserUrl = self.url();\n    lastHistoryState = cachedState;\n    forEach(urlChangeListeners, function(listener) {\n      listener(self.url(), cachedState);\n    });\n  }\n\n  /**\n   * @name $browser#onUrlChange\n   *\n   * @description\n   * Register callback function that will be called, when url changes.\n   *\n   * It's only called when the url is changed from outside of angular:\n   * - user types different url into address bar\n   * - user clicks on history (forward/back) button\n   * - user clicks on a link\n   *\n   * It's not called when url is changed by $browser.url() method\n   *\n   * The listener gets called with new url as parameter.\n   *\n   * NOTE: this api is intended for use only by the $location service. Please use the\n   * {@link ng.$location $location service} to monitor url changes in angular apps.\n   *\n   * @param {function(string)} listener Listener function to be called when url changes.\n   * @return {function(string)} Returns the registered listener fn - handy if the fn is anonymous.\n   */\n  self.onUrlChange = function(callback) {\n    // TODO(vojta): refactor to use node's syntax for events\n    if (!urlChangeInit) {\n      // We listen on both (hashchange/popstate) when available, as some browsers don't\n      // fire popstate when user changes the address bar and don't fire hashchange when url\n      // changed by push/replaceState\n\n      // html5 history api - popstate event\n      if ($sniffer.history) jqLite(window).on('popstate', cacheStateAndFireUrlChange);\n      // hashchange event\n      jqLite(window).on('hashchange', cacheStateAndFireUrlChange);\n\n      urlChangeInit = true;\n    }\n\n    urlChangeListeners.push(callback);\n    return callback;\n  };\n\n  /**\n   * @private\n   * Remove popstate and hashchange handler from window.\n   *\n   * NOTE: this api is intended for use only by $rootScope.\n   */\n  self.$$applicationDestroyed = function() {\n    jqLite(window).off('hashchange popstate', cacheStateAndFireUrlChange);\n  };\n\n  /**\n   * Checks whether the url has changed outside of Angular.\n   * Needs to be exported to be able to check for changes that have been done in sync,\n   * as hashchange/popstate events fire in async.\n   */\n  self.$$checkUrlChange = fireStateOrUrlChange;\n\n  //////////////////////////////////////////////////////////////\n  // Misc API\n  //////////////////////////////////////////////////////////////\n\n  /**\n   * @name $browser#baseHref\n   *\n   * @description\n   * Returns current <base href>\n   * (always relative - without domain)\n   *\n   * @returns {string} The current base href\n   */\n  self.baseHref = function() {\n    var href = baseElement.attr('href');\n    return href ? href.replace(/^(https?:)?\\/\\/[^/]*/, '') : '';\n  };\n\n  /**\n   * @name $browser#defer\n   * @param {function()} fn A function, who's execution should be deferred.\n   * @param {number=} [delay=0] of milliseconds to defer the function execution.\n   * @returns {*} DeferId that can be used to cancel the task via `$browser.defer.cancel()`.\n   *\n   * @description\n   * Executes a fn asynchronously via `setTimeout(fn, delay)`.\n   *\n   * Unlike when calling `setTimeout` directly, in test this function is mocked and instead of using\n   * `setTimeout` in tests, the fns are queued in an array, which can be programmatically flushed\n   * via `$browser.defer.flush()`.\n   *\n   */\n  self.defer = function(fn, delay) {\n    var timeoutId;\n    outstandingRequestCount++;\n    timeoutId = setTimeout(function() {\n      delete pendingDeferIds[timeoutId];\n      completeOutstandingRequest(fn);\n    }, delay || 0);\n    pendingDeferIds[timeoutId] = true;\n    return timeoutId;\n  };\n\n\n  /**\n   * @name $browser#defer.cancel\n   *\n   * @description\n   * Cancels a deferred task identified with `deferId`.\n   *\n   * @param {*} deferId Token returned by the `$browser.defer` function.\n   * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully\n   *                    canceled.\n   */\n  self.defer.cancel = function(deferId) {\n    if (pendingDeferIds[deferId]) {\n      delete pendingDeferIds[deferId];\n      clearTimeout(deferId);\n      completeOutstandingRequest(noop);\n      return true;\n    }\n    return false;\n  };\n\n}\n\n/** @this */\nfunction $BrowserProvider() {\n  this.$get = ['$window', '$log', '$sniffer', '$document',\n      function($window, $log, $sniffer, $document) {\n        return new Browser($window, $document, $log, $sniffer);\n      }];\n}\n\n/**\n * @ngdoc service\n * @name $cacheFactory\n * @this\n *\n * @description\n * Factory that constructs {@link $cacheFactory.Cache Cache} objects and gives access to\n * them.\n *\n * ```js\n *\n *  var cache = $cacheFactory('cacheId');\n *  expect($cacheFactory.get('cacheId')).toBe(cache);\n *  expect($cacheFactory.get('noSuchCacheId')).not.toBeDefined();\n *\n *  cache.put(\"key\", \"value\");\n *  cache.put(\"another key\", \"another value\");\n *\n *  // We've specified no options on creation\n *  expect(cache.info()).toEqual({id: 'cacheId', size: 2});\n *\n * ```\n *\n *\n * @param {string} cacheId Name or id of the newly created cache.\n * @param {object=} options Options object that specifies the cache behavior. Properties:\n *\n *   - `{number=}` `capacity` — turns the cache into LRU cache.\n *\n * @returns {object} Newly created cache object with the following set of methods:\n *\n * - `{object}` `info()` — Returns id, size, and options of cache.\n * - `{{*}}` `put({string} key, {*} value)` — Puts a new key-value pair into the cache and returns\n *   it.\n * - `{{*}}` `get({string} key)` — Returns cached value for `key` or undefined for cache miss.\n * - `{void}` `remove({string} key)` — Removes a key-value pair from the cache.\n * - `{void}` `removeAll()` — Removes all cached values.\n * - `{void}` `destroy()` — Removes references to this cache from $cacheFactory.\n *\n * @example\n   <example module=\"cacheExampleApp\" name=\"cache-factory\">\n     <file name=\"index.html\">\n       <div ng-controller=\"CacheController\">\n         <input ng-model=\"newCacheKey\" placeholder=\"Key\">\n         <input ng-model=\"newCacheValue\" placeholder=\"Value\">\n         <button ng-click=\"put(newCacheKey, newCacheValue)\">Cache</button>\n\n         <p ng-if=\"keys.length\">Cached Values</p>\n         <div ng-repeat=\"key in keys\">\n           <span ng-bind=\"key\"></span>\n           <span>: </span>\n           <b ng-bind=\"cache.get(key)\"></b>\n         </div>\n\n         <p>Cache Info</p>\n         <div ng-repeat=\"(key, value) in cache.info()\">\n           <span ng-bind=\"key\"></span>\n           <span>: </span>\n           <b ng-bind=\"value\"></b>\n         </div>\n       </div>\n     </file>\n     <file name=\"script.js\">\n       angular.module('cacheExampleApp', []).\n         controller('CacheController', ['$scope', '$cacheFactory', function($scope, $cacheFactory) {\n           $scope.keys = [];\n           $scope.cache = $cacheFactory('cacheId');\n           $scope.put = function(key, value) {\n             if (angular.isUndefined($scope.cache.get(key))) {\n               $scope.keys.push(key);\n             }\n             $scope.cache.put(key, angular.isUndefined(value) ? null : value);\n           };\n         }]);\n     </file>\n     <file name=\"style.css\">\n       p {\n         margin: 10px 0 3px;\n       }\n     </file>\n   </example>\n */\nfunction $CacheFactoryProvider() {\n\n  this.$get = function() {\n    var caches = {};\n\n    function cacheFactory(cacheId, options) {\n      if (cacheId in caches) {\n        throw minErr('$cacheFactory')('iid', 'CacheId \\'{0}\\' is already taken!', cacheId);\n      }\n\n      var size = 0,\n          stats = extend({}, options, {id: cacheId}),\n          data = createMap(),\n          capacity = (options && options.capacity) || Number.MAX_VALUE,\n          lruHash = createMap(),\n          freshEnd = null,\n          staleEnd = null;\n\n      /**\n       * @ngdoc type\n       * @name $cacheFactory.Cache\n       *\n       * @description\n       * A cache object used to store and retrieve data, primarily used by\n       * {@link $templateRequest $templateRequest} and the {@link ng.directive:script script}\n       * directive to cache templates and other data.\n       *\n       * ```js\n       *  angular.module('superCache')\n       *    .factory('superCache', ['$cacheFactory', function($cacheFactory) {\n       *      return $cacheFactory('super-cache');\n       *    }]);\n       * ```\n       *\n       * Example test:\n       *\n       * ```js\n       *  it('should behave like a cache', inject(function(superCache) {\n       *    superCache.put('key', 'value');\n       *    superCache.put('another key', 'another value');\n       *\n       *    expect(superCache.info()).toEqual({\n       *      id: 'super-cache',\n       *      size: 2\n       *    });\n       *\n       *    superCache.remove('another key');\n       *    expect(superCache.get('another key')).toBeUndefined();\n       *\n       *    superCache.removeAll();\n       *    expect(superCache.info()).toEqual({\n       *      id: 'super-cache',\n       *      size: 0\n       *    });\n       *  }));\n       * ```\n       */\n      return (caches[cacheId] = {\n\n        /**\n         * @ngdoc method\n         * @name $cacheFactory.Cache#put\n         * @kind function\n         *\n         * @description\n         * Inserts a named entry into the {@link $cacheFactory.Cache Cache} object to be\n         * retrieved later, and incrementing the size of the cache if the key was not already\n         * present in the cache. If behaving like an LRU cache, it will also remove stale\n         * entries from the set.\n         *\n         * It will not insert undefined values into the cache.\n         *\n         * @param {string} key the key under which the cached data is stored.\n         * @param {*} value the value to store alongside the key. If it is undefined, the key\n         *    will not be stored.\n         * @returns {*} the value stored.\n         */\n        put: function(key, value) {\n          if (isUndefined(value)) return;\n          if (capacity < Number.MAX_VALUE) {\n            var lruEntry = lruHash[key] || (lruHash[key] = {key: key});\n\n            refresh(lruEntry);\n          }\n\n          if (!(key in data)) size++;\n          data[key] = value;\n\n          if (size > capacity) {\n            this.remove(staleEnd.key);\n          }\n\n          return value;\n        },\n\n        /**\n         * @ngdoc method\n         * @name $cacheFactory.Cache#get\n         * @kind function\n         *\n         * @description\n         * Retrieves named data stored in the {@link $cacheFactory.Cache Cache} object.\n         *\n         * @param {string} key the key of the data to be retrieved\n         * @returns {*} the value stored.\n         */\n        get: function(key) {\n          if (capacity < Number.MAX_VALUE) {\n            var lruEntry = lruHash[key];\n\n            if (!lruEntry) return;\n\n            refresh(lruEntry);\n          }\n\n          return data[key];\n        },\n\n\n        /**\n         * @ngdoc method\n         * @name $cacheFactory.Cache#remove\n         * @kind function\n         *\n         * @description\n         * Removes an entry from the {@link $cacheFactory.Cache Cache} object.\n         *\n         * @param {string} key the key of the entry to be removed\n         */\n        remove: function(key) {\n          if (capacity < Number.MAX_VALUE) {\n            var lruEntry = lruHash[key];\n\n            if (!lruEntry) return;\n\n            if (lruEntry === freshEnd) freshEnd = lruEntry.p;\n            if (lruEntry === staleEnd) staleEnd = lruEntry.n;\n            link(lruEntry.n,lruEntry.p);\n\n            delete lruHash[key];\n          }\n\n          if (!(key in data)) return;\n\n          delete data[key];\n          size--;\n        },\n\n\n        /**\n         * @ngdoc method\n         * @name $cacheFactory.Cache#removeAll\n         * @kind function\n         *\n         * @description\n         * Clears the cache object of any entries.\n         */\n        removeAll: function() {\n          data = createMap();\n          size = 0;\n          lruHash = createMap();\n          freshEnd = staleEnd = null;\n        },\n\n\n        /**\n         * @ngdoc method\n         * @name $cacheFactory.Cache#destroy\n         * @kind function\n         *\n         * @description\n         * Destroys the {@link $cacheFactory.Cache Cache} object entirely,\n         * removing it from the {@link $cacheFactory $cacheFactory} set.\n         */\n        destroy: function() {\n          data = null;\n          stats = null;\n          lruHash = null;\n          delete caches[cacheId];\n        },\n\n\n        /**\n         * @ngdoc method\n         * @name $cacheFactory.Cache#info\n         * @kind function\n         *\n         * @description\n         * Retrieve information regarding a particular {@link $cacheFactory.Cache Cache}.\n         *\n         * @returns {object} an object with the following properties:\n         *   <ul>\n         *     <li>**id**: the id of the cache instance</li>\n         *     <li>**size**: the number of entries kept in the cache instance</li>\n         *     <li>**...**: any additional properties from the options object when creating the\n         *       cache.</li>\n         *   </ul>\n         */\n        info: function() {\n          return extend({}, stats, {size: size});\n        }\n      });\n\n\n      /**\n       * makes the `entry` the freshEnd of the LRU linked list\n       */\n      function refresh(entry) {\n        if (entry !== freshEnd) {\n          if (!staleEnd) {\n            staleEnd = entry;\n          } else if (staleEnd === entry) {\n            staleEnd = entry.n;\n          }\n\n          link(entry.n, entry.p);\n          link(entry, freshEnd);\n          freshEnd = entry;\n          freshEnd.n = null;\n        }\n      }\n\n\n      /**\n       * bidirectionally links two entries of the LRU linked list\n       */\n      function link(nextEntry, prevEntry) {\n        if (nextEntry !== prevEntry) {\n          if (nextEntry) nextEntry.p = prevEntry; //p stands for previous, 'prev' didn't minify\n          if (prevEntry) prevEntry.n = nextEntry; //n stands for next, 'next' didn't minify\n        }\n      }\n    }\n\n\n  /**\n   * @ngdoc method\n   * @name $cacheFactory#info\n   *\n   * @description\n   * Get information about all the caches that have been created\n   *\n   * @returns {Object} - key-value map of `cacheId` to the result of calling `cache#info`\n   */\n    cacheFactory.info = function() {\n      var info = {};\n      forEach(caches, function(cache, cacheId) {\n        info[cacheId] = cache.info();\n      });\n      return info;\n    };\n\n\n  /**\n   * @ngdoc method\n   * @name $cacheFactory#get\n   *\n   * @description\n   * Get access to a cache object by the `cacheId` used when it was created.\n   *\n   * @param {string} cacheId Name or id of a cache to access.\n   * @returns {object} Cache object identified by the cacheId or undefined if no such cache.\n   */\n    cacheFactory.get = function(cacheId) {\n      return caches[cacheId];\n    };\n\n\n    return cacheFactory;\n  };\n}\n\n/**\n * @ngdoc service\n * @name $templateCache\n * @this\n *\n * @description\n * `$templateCache` is a {@link $cacheFactory.Cache Cache object} created by the\n * {@link ng.$cacheFactory $cacheFactory}.\n *\n * The first time a template is used, it is loaded in the template cache for quick retrieval. You\n * can load templates directly into the cache in a `script` tag, by using {@link $templateRequest},\n * or by consuming the `$templateCache` service directly.\n *\n * Adding via the `script` tag:\n *\n * ```html\n *   <script type=\"text/ng-template\" id=\"templateId.html\">\n *     <p>This is the content of the template</p>\n *   </script>\n * ```\n *\n * **Note:** the `script` tag containing the template does not need to be included in the `head` of\n * the document, but it must be a descendent of the {@link ng.$rootElement $rootElement} (e.g.\n * element with {@link ngApp} attribute), otherwise the template will be ignored.\n *\n * Adding via the `$templateCache` service:\n *\n * ```js\n * var myApp = angular.module('myApp', []);\n * myApp.run(function($templateCache) {\n *   $templateCache.put('templateId.html', 'This is the content of the template');\n * });\n * ```\n *\n * To retrieve the template later, simply use it in your component:\n * ```js\n * myApp.component('myComponent', {\n *    templateUrl: 'templateId.html'\n * });\n * ```\n *\n * or get it via the `$templateCache` service:\n * ```js\n * $templateCache.get('templateId.html')\n * ```\n *\n */\nfunction $TemplateCacheProvider() {\n  this.$get = ['$cacheFactory', function($cacheFactory) {\n    return $cacheFactory('templates');\n  }];\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *     Any commits to this file should be reviewed with security in mind.  *\n *   Changes to this file can potentially create security vulnerabilities. *\n *          An approval from 2 Core members with history of modifying      *\n *                         this file is required.                          *\n *                                                                         *\n *  Does the change somehow allow for arbitrary javascript to be executed? *\n *    Or allows for someone to change the prototype of built-in objects?   *\n *     Or gives undesired access to variables like document or window?    *\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\n/* ! VARIABLE/FUNCTION NAMING CONVENTIONS THAT APPLY TO THIS FILE!\n *\n * DOM-related variables:\n *\n * - \"node\" - DOM Node\n * - \"element\" - DOM Element or Node\n * - \"$node\" or \"$element\" - jqLite-wrapped node or element\n *\n *\n * Compiler related stuff:\n *\n * - \"linkFn\" - linking fn of a single directive\n * - \"nodeLinkFn\" - function that aggregates all linking fns for a particular node\n * - \"childLinkFn\" -  function that aggregates all linking fns for child nodes of a particular node\n * - \"compositeLinkFn\" - function that aggregates all linking fns for a compilation root (nodeList)\n */\n\n\n/**\n * @ngdoc service\n * @name $compile\n * @kind function\n *\n * @description\n * Compiles an HTML string or DOM into a template and produces a template function, which\n * can then be used to link {@link ng.$rootScope.Scope `scope`} and the template together.\n *\n * The compilation is a process of walking the DOM tree and matching DOM elements to\n * {@link ng.$compileProvider#directive directives}.\n *\n * <div class=\"alert alert-warning\">\n * **Note:** This document is an in-depth reference of all directive options.\n * For a gentle introduction to directives with examples of common use cases,\n * see the {@link guide/directive directive guide}.\n * </div>\n *\n * ## Comprehensive Directive API\n *\n * There are many different options for a directive.\n *\n * The difference resides in the return value of the factory function.\n * You can either return a {@link $compile#directive-definition-object Directive Definition Object (see below)}\n * that defines the directive properties, or just the `postLink` function (all other properties will have\n * the default values).\n *\n * <div class=\"alert alert-success\">\n * **Best Practice:** It's recommended to use the \"directive definition object\" form.\n * </div>\n *\n * Here's an example directive declared with a Directive Definition Object:\n *\n * ```js\n *   var myModule = angular.module(...);\n *\n *   myModule.directive('directiveName', function factory(injectables) {\n *     var directiveDefinitionObject = {\n *       {@link $compile#-priority- priority}: 0,\n *       {@link $compile#-template- template}: '<div></div>', // or // function(tElement, tAttrs) { ... },\n *       // or\n *       // {@link $compile#-templateurl- templateUrl}: 'directive.html', // or // function(tElement, tAttrs) { ... },\n *       {@link $compile#-transclude- transclude}: false,\n *       {@link $compile#-restrict- restrict}: 'A',\n *       {@link $compile#-templatenamespace- templateNamespace}: 'html',\n *       {@link $compile#-scope- scope}: false,\n *       {@link $compile#-controller- controller}: function($scope, $element, $attrs, $transclude, otherInjectables) { ... },\n *       {@link $compile#-controlleras- controllerAs}: 'stringIdentifier',\n *       {@link $compile#-bindtocontroller- bindToController}: false,\n *       {@link $compile#-require- require}: 'siblingDirectiveName', // or // ['^parentDirectiveName', '?optionalDirectiveName', '?^optionalParent'],\n *       {@link $compile#-multielement- multiElement}: false,\n *       {@link $compile#-compile- compile}: function compile(tElement, tAttrs, transclude) {\n *         return {\n *            {@link $compile#pre-linking-function pre}: function preLink(scope, iElement, iAttrs, controller) { ... },\n *            {@link $compile#post-linking-function post}: function postLink(scope, iElement, iAttrs, controller) { ... }\n *         }\n *         // or\n *         // return function postLink( ... ) { ... }\n *       },\n *       // or\n *       // {@link $compile#-link- link}: {\n *       //  {@link $compile#pre-linking-function pre}: function preLink(scope, iElement, iAttrs, controller) { ... },\n *       //  {@link $compile#post-linking-function post}: function postLink(scope, iElement, iAttrs, controller) { ... }\n *       // }\n *       // or\n *       // {@link $compile#-link- link}: function postLink( ... ) { ... }\n *     };\n *     return directiveDefinitionObject;\n *   });\n * ```\n *\n * <div class=\"alert alert-warning\">\n * **Note:** Any unspecified options will use the default value. You can see the default values below.\n * </div>\n *\n * Therefore the above can be simplified as:\n *\n * ```js\n *   var myModule = angular.module(...);\n *\n *   myModule.directive('directiveName', function factory(injectables) {\n *     var directiveDefinitionObject = {\n *       link: function postLink(scope, iElement, iAttrs) { ... }\n *     };\n *     return directiveDefinitionObject;\n *     // or\n *     // return function postLink(scope, iElement, iAttrs) { ... }\n *   });\n * ```\n *\n * ### Life-cycle hooks\n * Directive controllers can provide the following methods that are called by Angular at points in the life-cycle of the\n * directive:\n * * `$onInit()` - Called on each controller after all the controllers on an element have been constructed and\n *   had their bindings initialized (and before the pre &amp; post linking functions for the directives on\n *   this element). This is a good place to put initialization code for your controller.\n * * `$onChanges(changesObj)` - Called whenever one-way (`<`) or interpolation (`@`) bindings are updated. The\n *   `changesObj` is a hash whose keys are the names of the bound properties that have changed, and the values are an\n *   object of the form `{ currentValue, previousValue, isFirstChange() }`. Use this hook to trigger updates within a\n *   component such as cloning the bound value to prevent accidental mutation of the outer value. Note that this will\n *   also be called when your bindings are initialized.\n * * `$doCheck()` - Called on each turn of the digest cycle. Provides an opportunity to detect and act on\n *   changes. Any actions that you wish to take in response to the changes that you detect must be\n *   invoked from this hook; implementing this has no effect on when `$onChanges` is called. For example, this hook\n *   could be useful if you wish to perform a deep equality check, or to check a Date object, changes to which would not\n *   be detected by Angular's change detector and thus not trigger `$onChanges`. This hook is invoked with no arguments;\n *   if detecting changes, you must store the previous value(s) for comparison to the current values.\n * * `$onDestroy()` - Called on a controller when its containing scope is destroyed. Use this hook for releasing\n *   external resources, watches and event handlers. Note that components have their `$onDestroy()` hooks called in\n *   the same order as the `$scope.$broadcast` events are triggered, which is top down. This means that parent\n *   components will have their `$onDestroy()` hook called before child components.\n * * `$postLink()` - Called after this controller's element and its children have been linked. Similar to the post-link\n *   function this hook can be used to set up DOM event handlers and do direct DOM manipulation.\n *   Note that child elements that contain `templateUrl` directives will not have been compiled and linked since\n *   they are waiting for their template to load asynchronously and their own compilation and linking has been\n *   suspended until that occurs.\n *\n * #### Comparison with Angular 2 life-cycle hooks\n * Angular 2 also uses life-cycle hooks for its components. While the Angular 1 life-cycle hooks are similar there are\n * some differences that you should be aware of, especially when it comes to moving your code from Angular 1 to Angular 2:\n *\n * * Angular 1 hooks are prefixed with `$`, such as `$onInit`. Angular 2 hooks are prefixed with `ng`, such as `ngOnInit`.\n * * Angular 1 hooks can be defined on the controller prototype or added to the controller inside its constructor.\n *   In Angular 2 you can only define hooks on the prototype of the Component class.\n * * Due to the differences in change-detection, you may get many more calls to `$doCheck` in Angular 1 than you would to\n *   `ngDoCheck` in Angular 2\n * * Changes to the model inside `$doCheck` will trigger new turns of the digest loop, which will cause the changes to be\n *   propagated throughout the application.\n *   Angular 2 does not allow the `ngDoCheck` hook to trigger a change outside of the component. It will either throw an\n *   error or do nothing depending upon the state of `enableProdMode()`.\n *\n * #### Life-cycle hook examples\n *\n * This example shows how you can check for mutations to a Date object even though the identity of the object\n * has not changed.\n *\n * <example name=\"doCheckDateExample\" module=\"do-check-module\">\n *   <file name=\"app.js\">\n *     angular.module('do-check-module', [])\n *       .component('app', {\n *         template:\n *           'Month: <input ng-model=\"$ctrl.month\" ng-change=\"$ctrl.updateDate()\">' +\n *           'Date: {{ $ctrl.date }}' +\n *           '<test date=\"$ctrl.date\"></test>',\n *         controller: function() {\n *           this.date = new Date();\n *           this.month = this.date.getMonth();\n *           this.updateDate = function() {\n *             this.date.setMonth(this.month);\n *           };\n *         }\n *       })\n *       .component('test', {\n *         bindings: { date: '<' },\n *         template:\n *           '<pre>{{ $ctrl.log | json }}</pre>',\n *         controller: function() {\n *           var previousValue;\n *           this.log = [];\n *           this.$doCheck = function() {\n *             var currentValue = this.date && this.date.valueOf();\n *             if (previousValue !== currentValue) {\n *               this.log.push('doCheck: date mutated: ' + this.date);\n *               previousValue = currentValue;\n *             }\n *           };\n *         }\n *       });\n *   </file>\n *   <file name=\"index.html\">\n *     <app></app>\n *   </file>\n * </example>\n *\n * This example show how you might use `$doCheck` to trigger changes in your component's inputs even if the\n * actual identity of the component doesn't change. (Be aware that cloning and deep equality checks on large\n * arrays or objects can have a negative impact on your application performance)\n *\n * <example name=\"doCheckArrayExample\" module=\"do-check-module\">\n *   <file name=\"index.html\">\n *     <div ng-init=\"items = []\">\n *       <button ng-click=\"items.push(items.length)\">Add Item</button>\n *       <button ng-click=\"items = []\">Reset Items</button>\n *       <pre>{{ items }}</pre>\n *       <test items=\"items\"></test>\n *     </div>\n *   </file>\n *   <file name=\"app.js\">\n *      angular.module('do-check-module', [])\n *        .component('test', {\n *          bindings: { items: '<' },\n *          template:\n *            '<pre>{{ $ctrl.log | json }}</pre>',\n *          controller: function() {\n *            this.log = [];\n *\n *            this.$doCheck = function() {\n *              if (this.items_ref !== this.items) {\n *                this.log.push('doCheck: items changed');\n *                this.items_ref = this.items;\n *              }\n *              if (!angular.equals(this.items_clone, this.items)) {\n *                this.log.push('doCheck: items mutated');\n *                this.items_clone = angular.copy(this.items);\n *              }\n *            };\n *          }\n *        });\n *   </file>\n * </example>\n *\n *\n * ### Directive Definition Object\n *\n * The directive definition object provides instructions to the {@link ng.$compile\n * compiler}. The attributes are:\n *\n * #### `multiElement`\n * When this property is set to true (default is `false`), the HTML compiler will collect DOM nodes between\n * nodes with the attributes `directive-name-start` and `directive-name-end`, and group them\n * together as the directive elements. It is recommended that this feature be used on directives\n * which are not strictly behavioral (such as {@link ngClick}), and which\n * do not manipulate or replace child nodes (such as {@link ngInclude}).\n *\n * #### `priority`\n * When there are multiple directives defined on a single DOM element, sometimes it\n * is necessary to specify the order in which the directives are applied. The `priority` is used\n * to sort the directives before their `compile` functions get called. Priority is defined as a\n * number. Directives with greater numerical `priority` are compiled first. Pre-link functions\n * are also run in priority order, but post-link functions are run in reverse order. The order\n * of directives with the same priority is undefined. The default priority is `0`.\n *\n * #### `terminal`\n * If set to true then the current `priority` will be the last set of directives\n * which will execute (any directives at the current priority will still execute\n * as the order of execution on same `priority` is undefined). Note that expressions\n * and other directives used in the directive's template will also be excluded from execution.\n *\n * #### `scope`\n * The scope property can be `false`, `true`, or an object:\n *\n * * **`false` (default):** No scope will be created for the directive. The directive will use its\n * parent's scope.\n *\n * * **`true`:** A new child scope that prototypically inherits from its parent will be created for\n * the directive's element. If multiple directives on the same element request a new scope,\n * only one new scope is created.\n *\n * * **`{...}` (an object hash):** A new \"isolate\" scope is created for the directive's template.\n * The 'isolate' scope differs from normal scope in that it does not prototypically\n * inherit from its parent scope. This is useful when creating reusable components, which should not\n * accidentally read or modify data in the parent scope. Note that an isolate scope\n * directive without a `template` or `templateUrl` will not apply the isolate scope\n * to its children elements.\n *\n * The 'isolate' scope object hash defines a set of local scope properties derived from attributes on the\n * directive's element. These local properties are useful for aliasing values for templates. The keys in\n * the object hash map to the name of the property on the isolate scope; the values define how the property\n * is bound to the parent scope, via matching attributes on the directive's element:\n *\n * * `@` or `@attr` - bind a local scope property to the value of DOM attribute. The result is\n *   always a string since DOM attributes are strings. If no `attr` name is specified then the\n *   attribute name is assumed to be the same as the local name. Given `<my-component\n *   my-attr=\"hello {{name}}\">` and the isolate scope definition `scope: { localName:'@myAttr' }`,\n *   the directive's scope property `localName` will reflect the interpolated value of `hello\n *   {{name}}`. As the `name` attribute changes so will the `localName` property on the directive's\n *   scope. The `name` is read from the parent scope (not the directive's scope).\n *\n * * `=` or `=attr` - set up a bidirectional binding between a local scope property and an expression\n *   passed via the attribute `attr`. The expression is evaluated in the context of the parent scope.\n *   If no `attr` name is specified then the attribute name is assumed to be the same as the local\n *   name. Given `<my-component my-attr=\"parentModel\">` and the isolate scope definition `scope: {\n *   localModel: '=myAttr' }`, the property `localModel` on the directive's scope will reflect the\n *   value of `parentModel` on the parent scope. Changes to `parentModel` will be reflected in\n *   `localModel` and vice versa. Optional attributes should be marked as such with a question mark:\n *   `=?` or `=?attr`. If the binding expression is non-assignable, or if the attribute isn't\n *   optional and doesn't exist, an exception ({@link error/$compile/nonassign `$compile:nonassign`})\n *   will be thrown upon discovering changes to the local value, since it will be impossible to sync\n *   them back to the parent scope. By default, the {@link ng.$rootScope.Scope#$watch `$watch`}\n *   method is used for tracking changes, and the equality check is based on object identity.\n *   However, if an object literal or an array literal is passed as the binding expression, the\n *   equality check is done by value (using the {@link angular.equals} function). It's also possible\n *   to watch the evaluated value shallowly with {@link ng.$rootScope.Scope#$watchCollection\n *   `$watchCollection`}: use `=*` or `=*attr` (`=*?` or `=*?attr` if the attribute is optional).\n *\n  * * `<` or `<attr` - set up a one-way (one-directional) binding between a local scope property and an\n *   expression passed via the attribute `attr`. The expression is evaluated in the context of the\n *   parent scope. If no `attr` name is specified then the attribute name is assumed to be the same as the\n *   local name. You can also make the binding optional by adding `?`: `<?` or `<?attr`.\n *\n *   For example, given `<my-component my-attr=\"parentModel\">` and directive definition of\n *   `scope: { localModel:'<myAttr' }`, then the isolated scope property `localModel` will reflect the\n *   value of `parentModel` on the parent scope. Any changes to `parentModel` will be reflected\n *   in `localModel`, but changes in `localModel` will not reflect in `parentModel`. There are however\n *   two caveats:\n *     1. one-way binding does not copy the value from the parent to the isolate scope, it simply\n *     sets the same value. That means if your bound value is an object, changes to its properties\n *     in the isolated scope will be reflected in the parent scope (because both reference the same object).\n *     2. one-way binding watches changes to the **identity** of the parent value. That means the\n *     {@link ng.$rootScope.Scope#$watch `$watch`} on the parent value only fires if the reference\n *     to the value has changed. In most cases, this should not be of concern, but can be important\n *     to know if you one-way bind to an object, and then replace that object in the isolated scope.\n *     If you now change a property of the object in your parent scope, the change will not be\n *     propagated to the isolated scope, because the identity of the object on the parent scope\n *     has not changed. Instead you must assign a new object.\n *\n *   One-way binding is useful if you do not plan to propagate changes to your isolated scope bindings\n *   back to the parent. However, it does not make this completely impossible.\n *\n * * `&` or `&attr` - provides a way to execute an expression in the context of the parent scope. If\n *   no `attr` name is specified then the attribute name is assumed to be the same as the local name.\n *   Given `<my-component my-attr=\"count = count + value\">` and the isolate scope definition `scope: {\n *   localFn:'&myAttr' }`, the isolate scope property `localFn` will point to a function wrapper for\n *   the `count = count + value` expression. Often it's desirable to pass data from the isolated scope\n *   via an expression to the parent scope. This can be done by passing a map of local variable names\n *   and values into the expression wrapper fn. For example, if the expression is `increment(amount)`\n *   then we can specify the amount value by calling the `localFn` as `localFn({amount: 22})`.\n *\n * In general it's possible to apply more than one directive to one element, but there might be limitations\n * depending on the type of scope required by the directives. The following points will help explain these limitations.\n * For simplicity only two directives are taken into account, but it is also applicable for several directives:\n *\n * * **no scope** + **no scope** => Two directives which don't require their own scope will use their parent's scope\n * * **child scope** + **no scope** =>  Both directives will share one single child scope\n * * **child scope** + **child scope** =>  Both directives will share one single child scope\n * * **isolated scope** + **no scope** =>  The isolated directive will use it's own created isolated scope. The other directive will use\n * its parent's scope\n * * **isolated scope** + **child scope** =>  **Won't work!** Only one scope can be related to one element. Therefore these directives cannot\n * be applied to the same element.\n * * **isolated scope** + **isolated scope**  =>  **Won't work!** Only one scope can be related to one element. Therefore these directives\n * cannot be applied to the same element.\n *\n *\n * #### `bindToController`\n * This property is used to bind scope properties directly to the controller. It can be either\n * `true` or an object hash with the same format as the `scope` property.\n *\n * When an isolate scope is used for a directive (see above), `bindToController: true` will\n * allow a component to have its properties bound to the controller, rather than to scope.\n *\n * After the controller is instantiated, the initial values of the isolate scope bindings will be bound to the controller\n * properties. You can access these bindings once they have been initialized by providing a controller method called\n * `$onInit`, which is called after all the controllers on an element have been constructed and had their bindings\n * initialized.\n *\n * <div class=\"alert alert-warning\">\n * **Deprecation warning:** if `$compileProcvider.preAssignBindingsEnabled(true)` was called, bindings for non-ES6 class\n * controllers are bound to `this` before the controller constructor is called but this use is now deprecated. Please\n * place initialization code that relies upon bindings inside a `$onInit` method on the controller, instead.\n * </div>\n *\n * It is also possible to set `bindToController` to an object hash with the same format as the `scope` property.\n * This will set up the scope bindings to the controller directly. Note that `scope` can still be used\n * to define which kind of scope is created. By default, no scope is created. Use `scope: {}` to create an isolate\n * scope (useful for component directives).\n *\n * If both `bindToController` and `scope` are defined and have object hashes, `bindToController` overrides `scope`.\n *\n *\n * #### `controller`\n * Controller constructor function. The controller is instantiated before the\n * pre-linking phase and can be accessed by other directives (see\n * `require` attribute). This allows the directives to communicate with each other and augment\n * each other's behavior. The controller is injectable (and supports bracket notation) with the following locals:\n *\n * * `$scope` - Current scope associated with the element\n * * `$element` - Current element\n * * `$attrs` - Current attributes object for the element\n * * `$transclude` - A transclude linking function pre-bound to the correct transclusion scope:\n *   `function([scope], cloneLinkingFn, futureParentElement, slotName)`:\n *    * `scope`: (optional) override the scope.\n *    * `cloneLinkingFn`: (optional) argument to create clones of the original transcluded content.\n *    * `futureParentElement` (optional):\n *        * defines the parent to which the `cloneLinkingFn` will add the cloned elements.\n *        * default: `$element.parent()` resp. `$element` for `transclude:'element'` resp. `transclude:true`.\n *        * only needed for transcludes that are allowed to contain non html elements (e.g. SVG elements)\n *          and when the `cloneLinkingFn` is passed,\n *          as those elements need to created and cloned in a special way when they are defined outside their\n *          usual containers (e.g. like `<svg>`).\n *        * See also the `directive.templateNamespace` property.\n *    * `slotName`: (optional) the name of the slot to transclude. If falsy (e.g. `null`, `undefined` or `''`)\n *      then the default transclusion is provided.\n *    The `$transclude` function also has a method on it, `$transclude.isSlotFilled(slotName)`, which returns\n *    `true` if the specified slot contains content (i.e. one or more DOM nodes).\n *\n * #### `require`\n * Require another directive and inject its controller as the fourth argument to the linking function. The\n * `require` property can be a string, an array or an object:\n * * a **string** containing the name of the directive to pass to the linking function\n * * an **array** containing the names of directives to pass to the linking function. The argument passed to the\n * linking function will be an array of controllers in the same order as the names in the `require` property\n * * an **object** whose property values are the names of the directives to pass to the linking function. The argument\n * passed to the linking function will also be an object with matching keys, whose values will hold the corresponding\n * controllers.\n *\n * If the `require` property is an object and `bindToController` is truthy, then the required controllers are\n * bound to the controller using the keys of the `require` property. This binding occurs after all the controllers\n * have been constructed but before `$onInit` is called.\n * If the name of the required controller is the same as the local name (the key), the name can be\n * omitted. For example, `{parentDir: '^^'}` is equivalent to `{parentDir: '^^parentDir'}`.\n * See the {@link $compileProvider#component} helper for an example of how this can be used.\n * If no such required directive(s) can be found, or if the directive does not have a controller, then an error is\n * raised (unless no link function is specified and the required controllers are not being bound to the directive\n * controller, in which case error checking is skipped). The name can be prefixed with:\n *\n * * (no prefix) - Locate the required controller on the current element. Throw an error if not found.\n * * `?` - Attempt to locate the required controller or pass `null` to the `link` fn if not found.\n * * `^` - Locate the required controller by searching the element and its parents. Throw an error if not found.\n * * `^^` - Locate the required controller by searching the element's parents. Throw an error if not found.\n * * `?^` - Attempt to locate the required controller by searching the element and its parents or pass\n *   `null` to the `link` fn if not found.\n * * `?^^` - Attempt to locate the required controller by searching the element's parents, or pass\n *   `null` to the `link` fn if not found.\n *\n *\n * #### `controllerAs`\n * Identifier name for a reference to the controller in the directive's scope.\n * This allows the controller to be referenced from the directive template. This is especially\n * useful when a directive is used as component, i.e. with an `isolate` scope. It's also possible\n * to use it in a directive without an `isolate` / `new` scope, but you need to be aware that the\n * `controllerAs` reference might overwrite a property that already exists on the parent scope.\n *\n *\n * #### `restrict`\n * String of subset of `EACM` which restricts the directive to a specific directive\n * declaration style. If omitted, the defaults (elements and attributes) are used.\n *\n * * `E` - Element name (default): `<my-directive></my-directive>`\n * * `A` - Attribute (default): `<div my-directive=\"exp\"></div>`\n * * `C` - Class: `<div class=\"my-directive: exp;\"></div>`\n * * `M` - Comment: `<!-- directive: my-directive exp -->`\n *\n *\n * #### `templateNamespace`\n * String representing the document type used by the markup in the template.\n * AngularJS needs this information as those elements need to be created and cloned\n * in a special way when they are defined outside their usual containers like `<svg>` and `<math>`.\n *\n * * `html` - All root nodes in the template are HTML. Root nodes may also be\n *   top-level elements such as `<svg>` or `<math>`.\n * * `svg` - The root nodes in the template are SVG elements (excluding `<math>`).\n * * `math` - The root nodes in the template are MathML elements (excluding `<svg>`).\n *\n * If no `templateNamespace` is specified, then the namespace is considered to be `html`.\n *\n * #### `template`\n * HTML markup that may:\n * * Replace the contents of the directive's element (default).\n * * Replace the directive's element itself (if `replace` is true - DEPRECATED).\n * * Wrap the contents of the directive's element (if `transclude` is true).\n *\n * Value may be:\n *\n * * A string. For example `<div red-on-hover>{{delete_str}}</div>`.\n * * A function which takes two arguments `tElement` and `tAttrs` (described in the `compile`\n *   function api below) and returns a string value.\n *\n *\n * #### `templateUrl`\n * This is similar to `template` but the template is loaded from the specified URL, asynchronously.\n *\n * Because template loading is asynchronous the compiler will suspend compilation of directives on that element\n * for later when the template has been resolved.  In the meantime it will continue to compile and link\n * sibling and parent elements as though this element had not contained any directives.\n *\n * The compiler does not suspend the entire compilation to wait for templates to be loaded because this\n * would result in the whole app \"stalling\" until all templates are loaded asynchronously - even in the\n * case when only one deeply nested directive has `templateUrl`.\n *\n * Template loading is asynchronous even if the template has been preloaded into the {@link $templateCache}\n *\n * You can specify `templateUrl` as a string representing the URL or as a function which takes two\n * arguments `tElement` and `tAttrs` (described in the `compile` function api below) and returns\n * a string value representing the url.  In either case, the template URL is passed through {@link\n * $sce#getTrustedResourceUrl $sce.getTrustedResourceUrl}.\n *\n *\n * #### `replace` (*DEPRECATED*)\n *\n * `replace` will be removed in next major release - i.e. v2.0).\n *\n * Specifies what the template should replace. Defaults to `false`.\n *\n * * `true` - the template will replace the directive's element.\n * * `false` - the template will replace the contents of the directive's element.\n *\n * The replacement process migrates all of the attributes / classes from the old element to the new\n * one. See the {@link guide/directive#template-expanding-directive\n * Directives Guide} for an example.\n *\n * There are very few scenarios where element replacement is required for the application function,\n * the main one being reusable custom components that are used within SVG contexts\n * (because SVG doesn't work with custom elements in the DOM tree).\n *\n * #### `transclude`\n * Extract the contents of the element where the directive appears and make it available to the directive.\n * The contents are compiled and provided to the directive as a **transclusion function**. See the\n * {@link $compile#transclusion Transclusion} section below.\n *\n *\n * #### `compile`\n *\n * ```js\n *   function compile(tElement, tAttrs, transclude) { ... }\n * ```\n *\n * The compile function deals with transforming the template DOM. Since most directives do not do\n * template transformation, it is not used often. The compile function takes the following arguments:\n *\n *   * `tElement` - template element - The element where the directive has been declared. It is\n *     safe to do template transformation on the element and child elements only.\n *\n *   * `tAttrs` - template attributes - Normalized list of attributes declared on this element shared\n *     between all directive compile functions.\n *\n *   * `transclude` -  [*DEPRECATED*!] A transclude linking function: `function(scope, cloneLinkingFn)`\n *\n * <div class=\"alert alert-warning\">\n * **Note:** The template instance and the link instance may be different objects if the template has\n * been cloned. For this reason it is **not** safe to do anything other than DOM transformations that\n * apply to all cloned DOM nodes within the compile function. Specifically, DOM listener registration\n * should be done in a linking function rather than in a compile function.\n * </div>\n\n * <div class=\"alert alert-warning\">\n * **Note:** The compile function cannot handle directives that recursively use themselves in their\n * own templates or compile functions. Compiling these directives results in an infinite loop and\n * stack overflow errors.\n *\n * This can be avoided by manually using $compile in the postLink function to imperatively compile\n * a directive's template instead of relying on automatic template compilation via `template` or\n * `templateUrl` declaration or manual compilation inside the compile function.\n * </div>\n *\n * <div class=\"alert alert-danger\">\n * **Note:** The `transclude` function that is passed to the compile function is deprecated, as it\n *   e.g. does not know about the right outer scope. Please use the transclude function that is passed\n *   to the link function instead.\n * </div>\n\n * A compile function can have a return value which can be either a function or an object.\n *\n * * returning a (post-link) function - is equivalent to registering the linking function via the\n *   `link` property of the config object when the compile function is empty.\n *\n * * returning an object with function(s) registered via `pre` and `post` properties - allows you to\n *   control when a linking function should be called during the linking phase. See info about\n *   pre-linking and post-linking functions below.\n *\n *\n * #### `link`\n * This property is used only if the `compile` property is not defined.\n *\n * ```js\n *   function link(scope, iElement, iAttrs, controller, transcludeFn) { ... }\n * ```\n *\n * The link function is responsible for registering DOM listeners as well as updating the DOM. It is\n * executed after the template has been cloned. This is where most of the directive logic will be\n * put.\n *\n *   * `scope` - {@link ng.$rootScope.Scope Scope} - The scope to be used by the\n *     directive for registering {@link ng.$rootScope.Scope#$watch watches}.\n *\n *   * `iElement` - instance element - The element where the directive is to be used. It is safe to\n *     manipulate the children of the element only in `postLink` function since the children have\n *     already been linked.\n *\n *   * `iAttrs` - instance attributes - Normalized list of attributes declared on this element shared\n *     between all directive linking functions.\n *\n *   * `controller` - the directive's required controller instance(s) - Instances are shared\n *     among all directives, which allows the directives to use the controllers as a communication\n *     channel. The exact value depends on the directive's `require` property:\n *       * no controller(s) required: the directive's own controller, or `undefined` if it doesn't have one\n *       * `string`: the controller instance\n *       * `array`: array of controller instances\n *\n *     If a required controller cannot be found, and it is optional, the instance is `null`,\n *     otherwise the {@link error:$compile:ctreq Missing Required Controller} error is thrown.\n *\n *     Note that you can also require the directive's own controller - it will be made available like\n *     any other controller.\n *\n *   * `transcludeFn` - A transclude linking function pre-bound to the correct transclusion scope.\n *     This is the same as the `$transclude` parameter of directive controllers,\n *     see {@link ng.$compile#-controller- the controller section for details}.\n *     `function([scope], cloneLinkingFn, futureParentElement)`.\n *\n * #### Pre-linking function\n *\n * Executed before the child elements are linked. Not safe to do DOM transformation since the\n * compiler linking function will fail to locate the correct elements for linking.\n *\n * #### Post-linking function\n *\n * Executed after the child elements are linked.\n *\n * Note that child elements that contain `templateUrl` directives will not have been compiled\n * and linked since they are waiting for their template to load asynchronously and their own\n * compilation and linking has been suspended until that occurs.\n *\n * It is safe to do DOM transformation in the post-linking function on elements that are not waiting\n * for their async templates to be resolved.\n *\n *\n * ### Transclusion\n *\n * Transclusion is the process of extracting a collection of DOM elements from one part of the DOM and\n * copying them to another part of the DOM, while maintaining their connection to the original AngularJS\n * scope from where they were taken.\n *\n * Transclusion is used (often with {@link ngTransclude}) to insert the\n * original contents of a directive's element into a specified place in the template of the directive.\n * The benefit of transclusion, over simply moving the DOM elements manually, is that the transcluded\n * content has access to the properties on the scope from which it was taken, even if the directive\n * has isolated scope.\n * See the {@link guide/directive#creating-a-directive-that-wraps-other-elements Directives Guide}.\n *\n * This makes it possible for the widget to have private state for its template, while the transcluded\n * content has access to its originating scope.\n *\n * <div class=\"alert alert-warning\">\n * **Note:** When testing an element transclude directive you must not place the directive at the root of the\n * DOM fragment that is being compiled. See {@link guide/unit-testing#testing-transclusion-directives\n * Testing Transclusion Directives}.\n * </div>\n *\n * There are three kinds of transclusion depending upon whether you want to transclude just the contents of the\n * directive's element, the entire element or multiple parts of the element contents:\n *\n * * `true` - transclude the content (i.e. the child nodes) of the directive's element.\n * * `'element'` - transclude the whole of the directive's element including any directives on this\n *   element that defined at a lower priority than this directive. When used, the `template`\n *   property is ignored.\n * * **`{...}` (an object hash):** - map elements of the content onto transclusion \"slots\" in the template.\n *\n * **Mult-slot transclusion** is declared by providing an object for the `transclude` property.\n *\n * This object is a map where the keys are the name of the slot to fill and the value is an element selector\n * used to match the HTML to the slot. The element selector should be in normalized form (e.g. `myElement`)\n * and will match the standard element variants (e.g. `my-element`, `my:element`, `data-my-element`, etc).\n *\n * For further information check out the guide on {@link guide/directive#matching-directives Matching Directives}\n *\n * If the element selector is prefixed with a `?` then that slot is optional.\n *\n * For example, the transclude object `{ slotA: '?myCustomElement' }` maps `<my-custom-element>` elements to\n * the `slotA` slot, which can be accessed via the `$transclude` function or via the {@link ngTransclude} directive.\n *\n * Slots that are not marked as optional (`?`) will trigger a compile time error if there are no matching elements\n * in the transclude content. If you wish to know if an optional slot was filled with content, then you can call\n * `$transclude.isSlotFilled(slotName)` on the transclude function passed to the directive's link function and\n * injectable into the directive's controller.\n *\n *\n * #### Transclusion Functions\n *\n * When a directive requests transclusion, the compiler extracts its contents and provides a **transclusion\n * function** to the directive's `link` function and `controller`. This transclusion function is a special\n * **linking function** that will return the compiled contents linked to a new transclusion scope.\n *\n * <div class=\"alert alert-info\">\n * If you are just using {@link ngTransclude} then you don't need to worry about this function, since\n * ngTransclude will deal with it for us.\n * </div>\n *\n * If you want to manually control the insertion and removal of the transcluded content in your directive\n * then you must use this transclude function. When you call a transclude function it returns a a jqLite/JQuery\n * object that contains the compiled DOM, which is linked to the correct transclusion scope.\n *\n * When you call a transclusion function you can pass in a **clone attach function**. This function accepts\n * two parameters, `function(clone, scope) { ... }`, where the `clone` is a fresh compiled copy of your transcluded\n * content and the `scope` is the newly created transclusion scope, which the clone will be linked to.\n *\n * <div class=\"alert alert-info\">\n * **Best Practice**: Always provide a `cloneFn` (clone attach function) when you call a transclude function\n * since you then get a fresh clone of the original DOM and also have access to the new transclusion scope.\n * </div>\n *\n * It is normal practice to attach your transcluded content (`clone`) to the DOM inside your **clone\n * attach function**:\n *\n * ```js\n * var transcludedContent, transclusionScope;\n *\n * $transclude(function(clone, scope) {\n *   element.append(clone);\n *   transcludedContent = clone;\n *   transclusionScope = scope;\n * });\n * ```\n *\n * Later, if you want to remove the transcluded content from your DOM then you should also destroy the\n * associated transclusion scope:\n *\n * ```js\n * transcludedContent.remove();\n * transclusionScope.$destroy();\n * ```\n *\n * <div class=\"alert alert-info\">\n * **Best Practice**: if you intend to add and remove transcluded content manually in your directive\n * (by calling the transclude function to get the DOM and calling `element.remove()` to remove it),\n * then you are also responsible for calling `$destroy` on the transclusion scope.\n * </div>\n *\n * The built-in DOM manipulation directives, such as {@link ngIf}, {@link ngSwitch} and {@link ngRepeat}\n * automatically destroy their transcluded clones as necessary so you do not need to worry about this if\n * you are simply using {@link ngTransclude} to inject the transclusion into your directive.\n *\n *\n * #### Transclusion Scopes\n *\n * When you call a transclude function it returns a DOM fragment that is pre-bound to a **transclusion\n * scope**. This scope is special, in that it is a child of the directive's scope (and so gets destroyed\n * when the directive's scope gets destroyed) but it inherits the properties of the scope from which it\n * was taken.\n *\n * For example consider a directive that uses transclusion and isolated scope. The DOM hierarchy might look\n * like this:\n *\n * ```html\n * <div ng-app>\n *   <div isolate>\n *     <div transclusion>\n *     </div>\n *   </div>\n * </div>\n * ```\n *\n * The `$parent` scope hierarchy will look like this:\n *\n   ```\n   - $rootScope\n     - isolate\n       - transclusion\n   ```\n *\n * but the scopes will inherit prototypically from different scopes to their `$parent`.\n *\n   ```\n   - $rootScope\n     - transclusion\n   - isolate\n   ```\n *\n *\n * ### Attributes\n *\n * The {@link ng.$compile.directive.Attributes Attributes} object - passed as a parameter in the\n * `link()` or `compile()` functions. It has a variety of uses.\n *\n * * *Accessing normalized attribute names:* Directives like 'ngBind' can be expressed in many ways:\n *   'ng:bind', `data-ng-bind`, or 'x-ng-bind'. The attributes object allows for normalized access\n *   to the attributes.\n *\n * * *Directive inter-communication:* All directives share the same instance of the attributes\n *   object which allows the directives to use the attributes object as inter directive\n *   communication.\n *\n * * *Supports interpolation:* Interpolation attributes are assigned to the attribute object\n *   allowing other directives to read the interpolated value.\n *\n * * *Observing interpolated attributes:* Use `$observe` to observe the value changes of attributes\n *   that contain interpolation (e.g. `src=\"{{bar}}\"`). Not only is this very efficient but it's also\n *   the only way to easily get the actual value because during the linking phase the interpolation\n *   hasn't been evaluated yet and so the value is at this time set to `undefined`.\n *\n * ```js\n * function linkingFn(scope, elm, attrs, ctrl) {\n *   // get the attribute value\n *   console.log(attrs.ngModel);\n *\n *   // change the attribute\n *   attrs.$set('ngModel', 'new value');\n *\n *   // observe changes to interpolated attribute\n *   attrs.$observe('ngModel', function(value) {\n *     console.log('ngModel has changed value to ' + value);\n *   });\n * }\n * ```\n *\n * ## Example\n *\n * <div class=\"alert alert-warning\">\n * **Note**: Typically directives are registered with `module.directive`. The example below is\n * to illustrate how `$compile` works.\n * </div>\n *\n <example module=\"compileExample\" name=\"compile\">\n   <file name=\"index.html\">\n    <script>\n      angular.module('compileExample', [], function($compileProvider) {\n        // configure new 'compile' directive by passing a directive\n        // factory function. The factory function injects the '$compile'\n        $compileProvider.directive('compile', function($compile) {\n          // directive factory creates a link function\n          return function(scope, element, attrs) {\n            scope.$watch(\n              function(scope) {\n                 // watch the 'compile' expression for changes\n                return scope.$eval(attrs.compile);\n              },\n              function(value) {\n                // when the 'compile' expression changes\n                // assign it into the current DOM\n                element.html(value);\n\n                // compile the new DOM and link it to the current\n                // scope.\n                // NOTE: we only compile .childNodes so that\n                // we don't get into infinite loop compiling ourselves\n                $compile(element.contents())(scope);\n              }\n            );\n          };\n        });\n      })\n      .controller('GreeterController', ['$scope', function($scope) {\n        $scope.name = 'Angular';\n        $scope.html = 'Hello {{name}}';\n      }]);\n    </script>\n    <div ng-controller=\"GreeterController\">\n      <input ng-model=\"name\"> <br/>\n      <textarea ng-model=\"html\"></textarea> <br/>\n      <div compile=\"html\"></div>\n    </div>\n   </file>\n   <file name=\"protractor.js\" type=\"protractor\">\n     it('should auto compile', function() {\n       var textarea = $('textarea');\n       var output = $('div[compile]');\n       // The initial state reads 'Hello Angular'.\n       expect(output.getText()).toBe('Hello Angular');\n       textarea.clear();\n       textarea.sendKeys('{{name}}!');\n       expect(output.getText()).toBe('Angular!');\n     });\n   </file>\n </example>\n\n *\n *\n * @param {string|DOMElement} element Element or HTML string to compile into a template function.\n * @param {function(angular.Scope, cloneAttachFn=)} transclude function available to directives - DEPRECATED.\n *\n * <div class=\"alert alert-danger\">\n * **Note:** Passing a `transclude` function to the $compile function is deprecated, as it\n *   e.g. will not use the right outer scope. Please pass the transclude function as a\n *   `parentBoundTranscludeFn` to the link function instead.\n * </div>\n *\n * @param {number} maxPriority only apply directives lower than given priority (Only effects the\n *                 root element(s), not their children)\n * @returns {function(scope, cloneAttachFn=, options=)} a link function which is used to bind template\n * (a DOM element/tree) to a scope. Where:\n *\n *  * `scope` - A {@link ng.$rootScope.Scope Scope} to bind to.\n *  * `cloneAttachFn` - If `cloneAttachFn` is provided, then the link function will clone the\n *  `template` and call the `cloneAttachFn` function allowing the caller to attach the\n *  cloned elements to the DOM document at the appropriate place. The `cloneAttachFn` is\n *  called as: <br/> `cloneAttachFn(clonedElement, scope)` where:\n *\n *      * `clonedElement` - is a clone of the original `element` passed into the compiler.\n *      * `scope` - is the current scope with which the linking function is working with.\n *\n *  * `options` - An optional object hash with linking options. If `options` is provided, then the following\n *  keys may be used to control linking behavior:\n *\n *      * `parentBoundTranscludeFn` - the transclude function made available to\n *        directives; if given, it will be passed through to the link functions of\n *        directives found in `element` during compilation.\n *      * `transcludeControllers` - an object hash with keys that map controller names\n *        to a hash with the key `instance`, which maps to the controller instance;\n *        if given, it will make the controllers available to directives on the compileNode:\n *        ```\n *        {\n *          parent: {\n *            instance: parentControllerInstance\n *          }\n *        }\n *        ```\n *      * `futureParentElement` - defines the parent to which the `cloneAttachFn` will add\n *        the cloned elements; only needed for transcludes that are allowed to contain non html\n *        elements (e.g. SVG elements). See also the directive.controller property.\n *\n * Calling the linking function returns the element of the template. It is either the original\n * element passed in, or the clone of the element if the `cloneAttachFn` is provided.\n *\n * After linking the view is not updated until after a call to $digest which typically is done by\n * Angular automatically.\n *\n * If you need access to the bound view, there are two ways to do it:\n *\n * - If you are not asking the linking function to clone the template, create the DOM element(s)\n *   before you send them to the compiler and keep this reference around.\n *   ```js\n *     var element = $compile('<p>{{total}}</p>')(scope);\n *   ```\n *\n * - if on the other hand, you need the element to be cloned, the view reference from the original\n *   example would not point to the clone, but rather to the original template that was cloned. In\n *   this case, you can access the clone via the cloneAttachFn:\n *   ```js\n *     var templateElement = angular.element('<p>{{total}}</p>'),\n *         scope = ....;\n *\n *     var clonedElement = $compile(templateElement)(scope, function(clonedElement, scope) {\n *       //attach the clone to DOM document at the right place\n *     });\n *\n *     //now we have reference to the cloned DOM via `clonedElement`\n *   ```\n *\n *\n * For information on how the compiler works, see the\n * {@link guide/compiler Angular HTML Compiler} section of the Developer Guide.\n *\n * @knownIssue\n *\n * ### Double Compilation\n *\n   Double compilation occurs when an already compiled part of the DOM gets\n   compiled again. This is an undesired effect and can lead to misbehaving directives, performance issues,\n   and memory leaks. Refer to the Compiler Guide {@link guide/compiler#double-compilation-and-how-to-avoid-it\n   section on double compilation} for an in-depth explanation and ways to avoid it.\n *\n */\n\nvar $compileMinErr = minErr('$compile');\n\nfunction UNINITIALIZED_VALUE() {}\nvar _UNINITIALIZED_VALUE = new UNINITIALIZED_VALUE();\n\n/**\n * @ngdoc provider\n * @name $compileProvider\n *\n * @description\n */\n$CompileProvider.$inject = ['$provide', '$$sanitizeUriProvider'];\n/** @this */\nfunction $CompileProvider($provide, $$sanitizeUriProvider) {\n  var hasDirectives = {},\n      Suffix = 'Directive',\n      COMMENT_DIRECTIVE_REGEXP = /^\\s*directive:\\s*([\\w-]+)\\s+(.*)$/,\n      CLASS_DIRECTIVE_REGEXP = /(([\\w-]+)(?::([^;]+))?;?)/,\n      ALL_OR_NOTHING_ATTRS = makeMap('ngSrc,ngSrcset,src,srcset'),\n      REQUIRE_PREFIX_REGEXP = /^(?:(\\^\\^?)?(\\?)?(\\^\\^?)?)?/;\n\n  // Ref: http://developers.whatwg.org/webappapis.html#event-handler-idl-attributes\n  // The assumption is that future DOM event attribute names will begin with\n  // 'on' and be composed of only English letters.\n  var EVENT_HANDLER_ATTR_REGEXP = /^(on[a-z]+|formaction)$/;\n  var bindingCache = createMap();\n\n  function parseIsolateBindings(scope, directiveName, isController) {\n    var LOCAL_REGEXP = /^\\s*([@&<]|=(\\*?))(\\??)\\s*([\\w$]*)\\s*$/;\n\n    var bindings = createMap();\n\n    forEach(scope, function(definition, scopeName) {\n      if (definition in bindingCache) {\n        bindings[scopeName] = bindingCache[definition];\n        return;\n      }\n      var match = definition.match(LOCAL_REGEXP);\n\n      if (!match) {\n        throw $compileMinErr('iscp',\n            'Invalid {3} for directive \\'{0}\\'.' +\n            ' Definition: {... {1}: \\'{2}\\' ...}',\n            directiveName, scopeName, definition,\n            (isController ? 'controller bindings definition' :\n            'isolate scope definition'));\n      }\n\n      bindings[scopeName] = {\n        mode: match[1][0],\n        collection: match[2] === '*',\n        optional: match[3] === '?',\n        attrName: match[4] || scopeName\n      };\n      if (match[4]) {\n        bindingCache[definition] = bindings[scopeName];\n      }\n    });\n\n    return bindings;\n  }\n\n  function parseDirectiveBindings(directive, directiveName) {\n    var bindings = {\n      isolateScope: null,\n      bindToController: null\n    };\n    if (isObject(directive.scope)) {\n      if (directive.bindToController === true) {\n        bindings.bindToController = parseIsolateBindings(directive.scope,\n                                                         directiveName, true);\n        bindings.isolateScope = {};\n      } else {\n        bindings.isolateScope = parseIsolateBindings(directive.scope,\n                                                     directiveName, false);\n      }\n    }\n    if (isObject(directive.bindToController)) {\n      bindings.bindToController =\n          parseIsolateBindings(directive.bindToController, directiveName, true);\n    }\n    if (bindings.bindToController && !directive.controller) {\n      // There is no controller\n      throw $compileMinErr('noctrl',\n            'Cannot bind to controller without directive \\'{0}\\'s controller.',\n            directiveName);\n    }\n    return bindings;\n  }\n\n  function assertValidDirectiveName(name) {\n    var letter = name.charAt(0);\n    if (!letter || letter !== lowercase(letter)) {\n      throw $compileMinErr('baddir', 'Directive/Component name \\'{0}\\' is invalid. The first character must be a lowercase letter', name);\n    }\n    if (name !== name.trim()) {\n      throw $compileMinErr('baddir',\n            'Directive/Component name \\'{0}\\' is invalid. The name should not contain leading or trailing whitespaces',\n            name);\n    }\n  }\n\n  function getDirectiveRequire(directive) {\n    var require = directive.require || (directive.controller && directive.name);\n\n    if (!isArray(require) && isObject(require)) {\n      forEach(require, function(value, key) {\n        var match = value.match(REQUIRE_PREFIX_REGEXP);\n        var name = value.substring(match[0].length);\n        if (!name) require[key] = match[0] + key;\n      });\n    }\n\n    return require;\n  }\n\n  function getDirectiveRestrict(restrict, name) {\n    if (restrict && !(isString(restrict) && /[EACM]/.test(restrict))) {\n      throw $compileMinErr('badrestrict',\n          'Restrict property \\'{0}\\' of directive \\'{1}\\' is invalid',\n          restrict,\n          name);\n    }\n\n    return restrict || 'EA';\n  }\n\n  /**\n   * @ngdoc method\n   * @name $compileProvider#directive\n   * @kind function\n   *\n   * @description\n   * Register a new directive with the compiler.\n   *\n   * @param {string|Object} name Name of the directive in camel-case (i.e. <code>ngBind</code> which\n   *    will match as <code>ng-bind</code>), or an object map of directives where the keys are the\n   *    names and the values are the factories.\n   * @param {Function|Array} directiveFactory An injectable directive factory function. See the\n   *    {@link guide/directive directive guide} and the {@link $compile compile API} for more info.\n   * @returns {ng.$compileProvider} Self for chaining.\n   */\n  this.directive = function registerDirective(name, directiveFactory) {\n    assertArg(name, 'name');\n    assertNotHasOwnProperty(name, 'directive');\n    if (isString(name)) {\n      assertValidDirectiveName(name);\n      assertArg(directiveFactory, 'directiveFactory');\n      if (!hasDirectives.hasOwnProperty(name)) {\n        hasDirectives[name] = [];\n        $provide.factory(name + Suffix, ['$injector', '$exceptionHandler',\n          function($injector, $exceptionHandler) {\n            var directives = [];\n            forEach(hasDirectives[name], function(directiveFactory, index) {\n              try {\n                var directive = $injector.invoke(directiveFactory);\n                if (isFunction(directive)) {\n                  directive = { compile: valueFn(directive) };\n                } else if (!directive.compile && directive.link) {\n                  directive.compile = valueFn(directive.link);\n                }\n                directive.priority = directive.priority || 0;\n                directive.index = index;\n                directive.name = directive.name || name;\n                directive.require = getDirectiveRequire(directive);\n                directive.restrict = getDirectiveRestrict(directive.restrict, name);\n                directive.$$moduleName = directiveFactory.$$moduleName;\n                directives.push(directive);\n              } catch (e) {\n                $exceptionHandler(e);\n              }\n            });\n            return directives;\n          }]);\n      }\n      hasDirectives[name].push(directiveFactory);\n    } else {\n      forEach(name, reverseParams(registerDirective));\n    }\n    return this;\n  };\n\n  /**\n   * @ngdoc method\n   * @name $compileProvider#component\n   * @module ng\n   * @param {string|Object} name Name of the component in camelCase (i.e. `myComp` which will match `<my-comp>`),\n   *    or an object map of components where the keys are the names and the values are the component definition objects.\n   * @param {Object} options Component definition object (a simplified\n   *    {@link ng.$compile#directive-definition-object directive definition object}),\n   *    with the following properties (all optional):\n   *\n   *    - `controller` – `{(string|function()=}` – controller constructor function that should be\n   *      associated with newly created scope or the name of a {@link ng.$compile#-controller-\n   *      registered controller} if passed as a string. An empty `noop` function by default.\n   *    - `controllerAs` – `{string=}` – identifier name for to reference the controller in the component's scope.\n   *      If present, the controller will be published to scope under the `controllerAs` name.\n   *      If not present, this will default to be `$ctrl`.\n   *    - `template` – `{string=|function()=}` – html template as a string or a function that\n   *      returns an html template as a string which should be used as the contents of this component.\n   *      Empty string by default.\n   *\n   *      If `template` is a function, then it is {@link auto.$injector#invoke injected} with\n   *      the following locals:\n   *\n   *      - `$element` - Current element\n   *      - `$attrs` - Current attributes object for the element\n   *\n   *    - `templateUrl` – `{string=|function()=}` – path or function that returns a path to an html\n   *      template that should be used  as the contents of this component.\n   *\n   *      If `templateUrl` is a function, then it is {@link auto.$injector#invoke injected} with\n   *      the following locals:\n   *\n   *      - `$element` - Current element\n   *      - `$attrs` - Current attributes object for the element\n   *\n   *    - `bindings` – `{object=}` – defines bindings between DOM attributes and component properties.\n   *      Component properties are always bound to the component controller and not to the scope.\n   *      See {@link ng.$compile#-bindtocontroller- `bindToController`}.\n   *    - `transclude` – `{boolean=}` – whether {@link $compile#transclusion content transclusion} is enabled.\n   *      Disabled by default.\n   *    - `require` - `{Object<string, string>=}` - requires the controllers of other directives and binds them to\n   *      this component's controller. The object keys specify the property names under which the required\n   *      controllers (object values) will be bound. See {@link ng.$compile#-require- `require`}.\n   *    - `$...` – additional properties to attach to the directive factory function and the controller\n   *      constructor function. (This is used by the component router to annotate)\n   *\n   * @returns {ng.$compileProvider} the compile provider itself, for chaining of function calls.\n   * @description\n   * Register a **component definition** with the compiler. This is a shorthand for registering a special\n   * type of directive, which represents a self-contained UI component in your application. Such components\n   * are always isolated (i.e. `scope: {}`) and are always restricted to elements (i.e. `restrict: 'E'`).\n   *\n   * Component definitions are very simple and do not require as much configuration as defining general\n   * directives. Component definitions usually consist only of a template and a controller backing it.\n   *\n   * In order to make the definition easier, components enforce best practices like use of `controllerAs`,\n   * `bindToController`. They always have **isolate scope** and are restricted to elements.\n   *\n   * Here are a few examples of how you would usually define components:\n   *\n   * ```js\n   *   var myMod = angular.module(...);\n   *   myMod.component('myComp', {\n   *     template: '<div>My name is {{$ctrl.name}}</div>',\n   *     controller: function() {\n   *       this.name = 'shahar';\n   *     }\n   *   });\n   *\n   *   myMod.component('myComp', {\n   *     template: '<div>My name is {{$ctrl.name}}</div>',\n   *     bindings: {name: '@'}\n   *   });\n   *\n   *   myMod.component('myComp', {\n   *     templateUrl: 'views/my-comp.html',\n   *     controller: 'MyCtrl',\n   *     controllerAs: 'ctrl',\n   *     bindings: {name: '@'}\n   *   });\n   *\n   * ```\n   * For more examples, and an in-depth guide, see the {@link guide/component component guide}.\n   *\n   * <br />\n   * See also {@link ng.$compileProvider#directive $compileProvider.directive()}.\n   */\n  this.component = function registerComponent(name, options) {\n    if (!isString(name)) {\n      forEach(name, reverseParams(bind(this, registerComponent)));\n      return this;\n    }\n\n    var controller = options.controller || function() {};\n\n    function factory($injector) {\n      function makeInjectable(fn) {\n        if (isFunction(fn) || isArray(fn)) {\n          return /** @this */ function(tElement, tAttrs) {\n            return $injector.invoke(fn, this, {$element: tElement, $attrs: tAttrs});\n          };\n        } else {\n          return fn;\n        }\n      }\n\n      var template = (!options.template && !options.templateUrl ? '' : options.template);\n      var ddo = {\n        controller: controller,\n        controllerAs: identifierForController(options.controller) || options.controllerAs || '$ctrl',\n        template: makeInjectable(template),\n        templateUrl: makeInjectable(options.templateUrl),\n        transclude: options.transclude,\n        scope: {},\n        bindToController: options.bindings || {},\n        restrict: 'E',\n        require: options.require\n      };\n\n      // Copy annotations (starting with $) over to the DDO\n      forEach(options, function(val, key) {\n        if (key.charAt(0) === '$') ddo[key] = val;\n      });\n\n      return ddo;\n    }\n\n    // TODO(pete) remove the following `forEach` before we release 1.6.0\n    // The component-router@0.2.0 looks for the annotations on the controller constructor\n    // Nothing in Angular looks for annotations on the factory function but we can't remove\n    // it from 1.5.x yet.\n\n    // Copy any annotation properties (starting with $) over to the factory and controller constructor functions\n    // These could be used by libraries such as the new component router\n    forEach(options, function(val, key) {\n      if (key.charAt(0) === '$') {\n        factory[key] = val;\n        // Don't try to copy over annotations to named controller\n        if (isFunction(controller)) controller[key] = val;\n      }\n    });\n\n    factory.$inject = ['$injector'];\n\n    return this.directive(name, factory);\n  };\n\n\n  /**\n   * @ngdoc method\n   * @name $compileProvider#aHrefSanitizationWhitelist\n   * @kind function\n   *\n   * @description\n   * Retrieves or overrides the default regular expression that is used for whitelisting of safe\n   * urls during a[href] sanitization.\n   *\n   * The sanitization is a security measure aimed at preventing XSS attacks via html links.\n   *\n   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into\n   * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`\n   * regular expression. If a match is found, the original url is written into the dom. Otherwise,\n   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.\n   *\n   * @param {RegExp=} regexp New regexp to whitelist urls with.\n   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for\n   *    chaining otherwise.\n   */\n  this.aHrefSanitizationWhitelist = function(regexp) {\n    if (isDefined(regexp)) {\n      $$sanitizeUriProvider.aHrefSanitizationWhitelist(regexp);\n      return this;\n    } else {\n      return $$sanitizeUriProvider.aHrefSanitizationWhitelist();\n    }\n  };\n\n\n  /**\n   * @ngdoc method\n   * @name $compileProvider#imgSrcSanitizationWhitelist\n   * @kind function\n   *\n   * @description\n   * Retrieves or overrides the default regular expression that is used for whitelisting of safe\n   * urls during img[src] sanitization.\n   *\n   * The sanitization is a security measure aimed at prevent XSS attacks via html links.\n   *\n   * Any url about to be assigned to img[src] via data-binding is first normalized and turned into\n   * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`\n   * regular expression. If a match is found, the original url is written into the dom. Otherwise,\n   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.\n   *\n   * @param {RegExp=} regexp New regexp to whitelist urls with.\n   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for\n   *    chaining otherwise.\n   */\n  this.imgSrcSanitizationWhitelist = function(regexp) {\n    if (isDefined(regexp)) {\n      $$sanitizeUriProvider.imgSrcSanitizationWhitelist(regexp);\n      return this;\n    } else {\n      return $$sanitizeUriProvider.imgSrcSanitizationWhitelist();\n    }\n  };\n\n  /**\n   * @ngdoc method\n   * @name  $compileProvider#debugInfoEnabled\n   *\n   * @param {boolean=} enabled update the debugInfoEnabled state if provided, otherwise just return the\n   * current debugInfoEnabled state\n   * @returns {*} current value if used as getter or itself (chaining) if used as setter\n   *\n   * @kind function\n   *\n   * @description\n   * Call this method to enable/disable various debug runtime information in the compiler such as adding\n   * binding information and a reference to the current scope on to DOM elements.\n   * If enabled, the compiler will add the following to DOM elements that have been bound to the scope\n   * * `ng-binding` CSS class\n   * * `ng-scope` and `ng-isolated-scope` CSS classes\n   * * `$binding` data property containing an array of the binding expressions\n   * * Data properties used by the {@link angular.element#methods `scope()`/`isolateScope()` methods} to return\n   *   the element's scope.\n   * * Placeholder comments will contain information about what directive and binding caused the placeholder.\n   *   E.g. `<!-- ngIf: shouldShow() -->`.\n   *\n   * You may want to disable this in production for a significant performance boost. See\n   * {@link guide/production#disabling-debug-data Disabling Debug Data} for more.\n   *\n   * The default value is true.\n   */\n  var debugInfoEnabled = true;\n  this.debugInfoEnabled = function(enabled) {\n    if (isDefined(enabled)) {\n      debugInfoEnabled = enabled;\n      return this;\n    }\n    return debugInfoEnabled;\n  };\n\n  /**\n   * @ngdoc method\n   * @name  $compileProvider#preAssignBindingsEnabled\n   *\n   * @param {boolean=} enabled update the preAssignBindingsEnabled state if provided, otherwise just return the\n   * current preAssignBindingsEnabled state\n   * @returns {*} current value if used as getter or itself (chaining) if used as setter\n   *\n   * @kind function\n   *\n   * @description\n   * Call this method to enable/disable whether directive controllers are assigned bindings before\n   * calling the controller's constructor.\n   * If enabled (true), the compiler assigns the value of each of the bindings to the\n   * properties of the controller object before the constructor of this object is called.\n   *\n   * If disabled (false), the compiler calls the constructor first before assigning bindings.\n   *\n   * The default value is false.\n   *\n   * @deprecated\n   * sinceVersion=\"1.6.0\"\n   * removeVersion=\"1.7.0\"\n   *\n   * This method and the option to assign the bindings before calling the controller's constructor\n   * will be removed in v1.7.0.\n   */\n  var preAssignBindingsEnabled = false;\n  this.preAssignBindingsEnabled = function(enabled) {\n    if (isDefined(enabled)) {\n      preAssignBindingsEnabled = enabled;\n      return this;\n    }\n    return preAssignBindingsEnabled;\n  };\n\n  /**\n   * @ngdoc method\n   * @name  $compileProvider#strictComponentBindingsEnabled\n   *\n   * @param {boolean=} enabled update the strictComponentBindingsEnabled state if provided, otherwise just return the\n   * current strictComponentBindingsEnabled state\n   * @returns {*} current value if used as getter or itself (chaining) if used as setter\n   *\n   * @kind function\n   *\n   * @description\n   * Call this method to enable/disable strict component bindings check. If enabled, the compiler will enforce that\n   * for all bindings of a component that are not set as optional with `?`, an attribute needs to be provided\n   * on the component's HTML tag.\n   *\n   * The default value is false.\n   */\n  var strictComponentBindingsEnabled = false;\n  this.strictComponentBindingsEnabled = function(enabled) {\n    if (isDefined(enabled)) {\n      strictComponentBindingsEnabled = enabled;\n      return this;\n    }\n    return strictComponentBindingsEnabled;\n  };\n\n  var TTL = 10;\n  /**\n   * @ngdoc method\n   * @name $compileProvider#onChangesTtl\n   * @description\n   *\n   * Sets the number of times `$onChanges` hooks can trigger new changes before giving up and\n   * assuming that the model is unstable.\n   *\n   * The current default is 10 iterations.\n   *\n   * In complex applications it's possible that dependencies between `$onChanges` hooks and bindings will result\n   * in several iterations of calls to these hooks. However if an application needs more than the default 10\n   * iterations to stabilize then you should investigate what is causing the model to continuously change during\n   * the `$onChanges` hook execution.\n   *\n   * Increasing the TTL could have performance implications, so you should not change it without proper justification.\n   *\n   * @param {number} limit The number of `$onChanges` hook iterations.\n   * @returns {number|object} the current limit (or `this` if called as a setter for chaining)\n   */\n  this.onChangesTtl = function(value) {\n    if (arguments.length) {\n      TTL = value;\n      return this;\n    }\n    return TTL;\n  };\n\n  var commentDirectivesEnabledConfig = true;\n  /**\n   * @ngdoc method\n   * @name $compileProvider#commentDirectivesEnabled\n   * @description\n   *\n   * It indicates to the compiler\n   * whether or not directives on comments should be compiled.\n   * Defaults to `true`.\n   *\n   * Calling this function with false disables the compilation of directives\n   * on comments for the whole application.\n   * This results in a compilation performance gain,\n   * as the compiler doesn't have to check comments when looking for directives.\n   * This should however only be used if you are sure that no comment directives are used in\n   * the application (including any 3rd party directives).\n   *\n   * @param {boolean} enabled `false` if the compiler may ignore directives on comments\n   * @returns {boolean|object} the current value (or `this` if called as a setter for chaining)\n   */\n  this.commentDirectivesEnabled = function(value) {\n    if (arguments.length) {\n      commentDirectivesEnabledConfig = value;\n      return this;\n    }\n    return commentDirectivesEnabledConfig;\n  };\n\n\n  var cssClassDirectivesEnabledConfig = true;\n  /**\n   * @ngdoc method\n   * @name $compileProvider#cssClassDirectivesEnabled\n   * @description\n   *\n   * It indicates to the compiler\n   * whether or not directives on element classes should be compiled.\n   * Defaults to `true`.\n   *\n   * Calling this function with false disables the compilation of directives\n   * on element classes for the whole application.\n   * This results in a compilation performance gain,\n   * as the compiler doesn't have to check element classes when looking for directives.\n   * This should however only be used if you are sure that no class directives are used in\n   * the application (including any 3rd party directives).\n   *\n   * @param {boolean} enabled `false` if the compiler may ignore directives on element classes\n   * @returns {boolean|object} the current value (or `this` if called as a setter for chaining)\n   */\n  this.cssClassDirectivesEnabled = function(value) {\n    if (arguments.length) {\n      cssClassDirectivesEnabledConfig = value;\n      return this;\n    }\n    return cssClassDirectivesEnabledConfig;\n  };\n\n  this.$get = [\n            '$injector', '$interpolate', '$exceptionHandler', '$templateRequest', '$parse',\n            '$controller', '$rootScope', '$sce', '$animate', '$$sanitizeUri',\n    function($injector,   $interpolate,   $exceptionHandler,   $templateRequest,   $parse,\n             $controller,   $rootScope,   $sce,   $animate,   $$sanitizeUri) {\n\n    var SIMPLE_ATTR_NAME = /^\\w/;\n    var specialAttrHolder = window.document.createElement('div');\n\n\n    var commentDirectivesEnabled = commentDirectivesEnabledConfig;\n    var cssClassDirectivesEnabled = cssClassDirectivesEnabledConfig;\n\n\n    var onChangesTtl = TTL;\n    // The onChanges hooks should all be run together in a single digest\n    // When changes occur, the call to trigger their hooks will be added to this queue\n    var onChangesQueue;\n\n    // This function is called in a $$postDigest to trigger all the onChanges hooks in a single digest\n    function flushOnChangesQueue() {\n      try {\n        if (!(--onChangesTtl)) {\n          // We have hit the TTL limit so reset everything\n          onChangesQueue = undefined;\n          throw $compileMinErr('infchng', '{0} $onChanges() iterations reached. Aborting!\\n', TTL);\n        }\n        // We must run this hook in an apply since the $$postDigest runs outside apply\n        $rootScope.$apply(function() {\n          var errors = [];\n          for (var i = 0, ii = onChangesQueue.length; i < ii; ++i) {\n            try {\n              onChangesQueue[i]();\n            } catch (e) {\n              errors.push(e);\n            }\n          }\n          // Reset the queue to trigger a new schedule next time there is a change\n          onChangesQueue = undefined;\n          if (errors.length) {\n            throw errors;\n          }\n        });\n      } finally {\n        onChangesTtl++;\n      }\n    }\n\n\n    function Attributes(element, attributesToCopy) {\n      if (attributesToCopy) {\n        var keys = Object.keys(attributesToCopy);\n        var i, l, key;\n\n        for (i = 0, l = keys.length; i < l; i++) {\n          key = keys[i];\n          this[key] = attributesToCopy[key];\n        }\n      } else {\n        this.$attr = {};\n      }\n\n      this.$$element = element;\n    }\n\n    Attributes.prototype = {\n      /**\n       * @ngdoc method\n       * @name $compile.directive.Attributes#$normalize\n       * @kind function\n       *\n       * @description\n       * Converts an attribute name (e.g. dash/colon/underscore-delimited string, optionally prefixed with `x-` or\n       * `data-`) to its normalized, camelCase form.\n       *\n       * Also there is special case for Moz prefix starting with upper case letter.\n       *\n       * For further information check out the guide on {@link guide/directive#matching-directives Matching Directives}\n       *\n       * @param {string} name Name to normalize\n       */\n      $normalize: directiveNormalize,\n\n\n      /**\n       * @ngdoc method\n       * @name $compile.directive.Attributes#$addClass\n       * @kind function\n       *\n       * @description\n       * Adds the CSS class value specified by the classVal parameter to the element. If animations\n       * are enabled then an animation will be triggered for the class addition.\n       *\n       * @param {string} classVal The className value that will be added to the element\n       */\n      $addClass: function(classVal) {\n        if (classVal && classVal.length > 0) {\n          $animate.addClass(this.$$element, classVal);\n        }\n      },\n\n      /**\n       * @ngdoc method\n       * @name $compile.directive.Attributes#$removeClass\n       * @kind function\n       *\n       * @description\n       * Removes the CSS class value specified by the classVal parameter from the element. If\n       * animations are enabled then an animation will be triggered for the class removal.\n       *\n       * @param {string} classVal The className value that will be removed from the element\n       */\n      $removeClass: function(classVal) {\n        if (classVal && classVal.length > 0) {\n          $animate.removeClass(this.$$element, classVal);\n        }\n      },\n\n      /**\n       * @ngdoc method\n       * @name $compile.directive.Attributes#$updateClass\n       * @kind function\n       *\n       * @description\n       * Adds and removes the appropriate CSS class values to the element based on the difference\n       * between the new and old CSS class values (specified as newClasses and oldClasses).\n       *\n       * @param {string} newClasses The current CSS className value\n       * @param {string} oldClasses The former CSS className value\n       */\n      $updateClass: function(newClasses, oldClasses) {\n        var toAdd = tokenDifference(newClasses, oldClasses);\n        if (toAdd && toAdd.length) {\n          $animate.addClass(this.$$element, toAdd);\n        }\n\n        var toRemove = tokenDifference(oldClasses, newClasses);\n        if (toRemove && toRemove.length) {\n          $animate.removeClass(this.$$element, toRemove);\n        }\n      },\n\n      /**\n       * Set a normalized attribute on the element in a way such that all directives\n       * can share the attribute. This function properly handles boolean attributes.\n       * @param {string} key Normalized key. (ie ngAttribute)\n       * @param {string|boolean} value The value to set. If `null` attribute will be deleted.\n       * @param {boolean=} writeAttr If false, does not write the value to DOM element attribute.\n       *     Defaults to true.\n       * @param {string=} attrName Optional none normalized name. Defaults to key.\n       */\n      $set: function(key, value, writeAttr, attrName) {\n        // TODO: decide whether or not to throw an error if \"class\"\n        //is set through this function since it may cause $updateClass to\n        //become unstable.\n\n        var node = this.$$element[0],\n            booleanKey = getBooleanAttrName(node, key),\n            aliasedKey = getAliasedAttrName(key),\n            observer = key,\n            nodeName;\n\n        if (booleanKey) {\n          this.$$element.prop(key, value);\n          attrName = booleanKey;\n        } else if (aliasedKey) {\n          this[aliasedKey] = value;\n          observer = aliasedKey;\n        }\n\n        this[key] = value;\n\n        // translate normalized key to actual key\n        if (attrName) {\n          this.$attr[key] = attrName;\n        } else {\n          attrName = this.$attr[key];\n          if (!attrName) {\n            this.$attr[key] = attrName = snake_case(key, '-');\n          }\n        }\n\n        nodeName = nodeName_(this.$$element);\n\n        if ((nodeName === 'a' && (key === 'href' || key === 'xlinkHref')) ||\n            (nodeName === 'img' && key === 'src')) {\n          // sanitize a[href] and img[src] values\n          this[key] = value = $$sanitizeUri(value, key === 'src');\n        } else if (nodeName === 'img' && key === 'srcset' && isDefined(value)) {\n          // sanitize img[srcset] values\n          var result = '';\n\n          // first check if there are spaces because it's not the same pattern\n          var trimmedSrcset = trim(value);\n          //                (   999x   ,|   999w   ,|   ,|,   )\n          var srcPattern = /(\\s+\\d+x\\s*,|\\s+\\d+w\\s*,|\\s+,|,\\s+)/;\n          var pattern = /\\s/.test(trimmedSrcset) ? srcPattern : /(,)/;\n\n          // split srcset into tuple of uri and descriptor except for the last item\n          var rawUris = trimmedSrcset.split(pattern);\n\n          // for each tuples\n          var nbrUrisWith2parts = Math.floor(rawUris.length / 2);\n          for (var i = 0; i < nbrUrisWith2parts; i++) {\n            var innerIdx = i * 2;\n            // sanitize the uri\n            result += $$sanitizeUri(trim(rawUris[innerIdx]), true);\n            // add the descriptor\n            result += (' ' + trim(rawUris[innerIdx + 1]));\n          }\n\n          // split the last item into uri and descriptor\n          var lastTuple = trim(rawUris[i * 2]).split(/\\s/);\n\n          // sanitize the last uri\n          result += $$sanitizeUri(trim(lastTuple[0]), true);\n\n          // and add the last descriptor if any\n          if (lastTuple.length === 2) {\n            result += (' ' + trim(lastTuple[1]));\n          }\n          this[key] = value = result;\n        }\n\n        if (writeAttr !== false) {\n          if (value === null || isUndefined(value)) {\n            this.$$element.removeAttr(attrName);\n          } else {\n            if (SIMPLE_ATTR_NAME.test(attrName)) {\n              this.$$element.attr(attrName, value);\n            } else {\n              setSpecialAttr(this.$$element[0], attrName, value);\n            }\n          }\n        }\n\n        // fire observers\n        var $$observers = this.$$observers;\n        if ($$observers) {\n          forEach($$observers[observer], function(fn) {\n            try {\n              fn(value);\n            } catch (e) {\n              $exceptionHandler(e);\n            }\n          });\n        }\n      },\n\n\n      /**\n       * @ngdoc method\n       * @name $compile.directive.Attributes#$observe\n       * @kind function\n       *\n       * @description\n       * Observes an interpolated attribute.\n       *\n       * The observer function will be invoked once during the next `$digest` following\n       * compilation. The observer is then invoked whenever the interpolated value\n       * changes.\n       *\n       * @param {string} key Normalized key. (ie ngAttribute) .\n       * @param {function(interpolatedValue)} fn Function that will be called whenever\n                the interpolated value of the attribute changes.\n       *        See the {@link guide/interpolation#how-text-and-attribute-bindings-work Interpolation\n       *        guide} for more info.\n       * @returns {function()} Returns a deregistration function for this observer.\n       */\n      $observe: function(key, fn) {\n        var attrs = this,\n            $$observers = (attrs.$$observers || (attrs.$$observers = createMap())),\n            listeners = ($$observers[key] || ($$observers[key] = []));\n\n        listeners.push(fn);\n        $rootScope.$evalAsync(function() {\n          if (!listeners.$$inter && attrs.hasOwnProperty(key) && !isUndefined(attrs[key])) {\n            // no one registered attribute interpolation function, so lets call it manually\n            fn(attrs[key]);\n          }\n        });\n\n        return function() {\n          arrayRemove(listeners, fn);\n        };\n      }\n    };\n\n    function setSpecialAttr(element, attrName, value) {\n      // Attributes names that do not start with letters (such as `(click)`) cannot be set using `setAttribute`\n      // so we have to jump through some hoops to get such an attribute\n      // https://github.com/angular/angular.js/pull/13318\n      specialAttrHolder.innerHTML = '<span ' + attrName + '>';\n      var attributes = specialAttrHolder.firstChild.attributes;\n      var attribute = attributes[0];\n      // We have to remove the attribute from its container element before we can add it to the destination element\n      attributes.removeNamedItem(attribute.name);\n      attribute.value = value;\n      element.attributes.setNamedItem(attribute);\n    }\n\n    function safeAddClass($element, className) {\n      try {\n        $element.addClass(className);\n      } catch (e) {\n        // ignore, since it means that we are trying to set class on\n        // SVG element, where class name is read-only.\n      }\n    }\n\n\n    var startSymbol = $interpolate.startSymbol(),\n        endSymbol = $interpolate.endSymbol(),\n        denormalizeTemplate = (startSymbol === '{{' && endSymbol  === '}}')\n            ? identity\n            : function denormalizeTemplate(template) {\n              return template.replace(/\\{\\{/g, startSymbol).replace(/}}/g, endSymbol);\n        },\n        NG_ATTR_BINDING = /^ngAttr[A-Z]/;\n    var MULTI_ELEMENT_DIR_RE = /^(.+)Start$/;\n\n    compile.$$addBindingInfo = debugInfoEnabled ? function $$addBindingInfo($element, binding) {\n      var bindings = $element.data('$binding') || [];\n\n      if (isArray(binding)) {\n        bindings = bindings.concat(binding);\n      } else {\n        bindings.push(binding);\n      }\n\n      $element.data('$binding', bindings);\n    } : noop;\n\n    compile.$$addBindingClass = debugInfoEnabled ? function $$addBindingClass($element) {\n      safeAddClass($element, 'ng-binding');\n    } : noop;\n\n    compile.$$addScopeInfo = debugInfoEnabled ? function $$addScopeInfo($element, scope, isolated, noTemplate) {\n      var dataName = isolated ? (noTemplate ? '$isolateScopeNoTemplate' : '$isolateScope') : '$scope';\n      $element.data(dataName, scope);\n    } : noop;\n\n    compile.$$addScopeClass = debugInfoEnabled ? function $$addScopeClass($element, isolated) {\n      safeAddClass($element, isolated ? 'ng-isolate-scope' : 'ng-scope');\n    } : noop;\n\n    compile.$$createComment = function(directiveName, comment) {\n      var content = '';\n      if (debugInfoEnabled) {\n        content = ' ' + (directiveName || '') + ': ';\n        if (comment) content += comment + ' ';\n      }\n      return window.document.createComment(content);\n    };\n\n    return compile;\n\n    //================================\n\n    function compile($compileNodes, transcludeFn, maxPriority, ignoreDirective,\n                        previousCompileContext) {\n      if (!($compileNodes instanceof jqLite)) {\n        // jquery always rewraps, whereas we need to preserve the original selector so that we can\n        // modify it.\n        $compileNodes = jqLite($compileNodes);\n      }\n      var compositeLinkFn =\n              compileNodes($compileNodes, transcludeFn, $compileNodes,\n                           maxPriority, ignoreDirective, previousCompileContext);\n      compile.$$addScopeClass($compileNodes);\n      var namespace = null;\n      return function publicLinkFn(scope, cloneConnectFn, options) {\n        if (!$compileNodes) {\n          throw $compileMinErr('multilink', 'This element has already been linked.');\n        }\n        assertArg(scope, 'scope');\n\n        if (previousCompileContext && previousCompileContext.needsNewScope) {\n          // A parent directive did a replace and a directive on this element asked\n          // for transclusion, which caused us to lose a layer of element on which\n          // we could hold the new transclusion scope, so we will create it manually\n          // here.\n          scope = scope.$parent.$new();\n        }\n\n        options = options || {};\n        var parentBoundTranscludeFn = options.parentBoundTranscludeFn,\n          transcludeControllers = options.transcludeControllers,\n          futureParentElement = options.futureParentElement;\n\n        // When `parentBoundTranscludeFn` is passed, it is a\n        // `controllersBoundTransclude` function (it was previously passed\n        // as `transclude` to directive.link) so we must unwrap it to get\n        // its `boundTranscludeFn`\n        if (parentBoundTranscludeFn && parentBoundTranscludeFn.$$boundTransclude) {\n          parentBoundTranscludeFn = parentBoundTranscludeFn.$$boundTransclude;\n        }\n\n        if (!namespace) {\n          namespace = detectNamespaceForChildElements(futureParentElement);\n        }\n        var $linkNode;\n        if (namespace !== 'html') {\n          // When using a directive with replace:true and templateUrl the $compileNodes\n          // (or a child element inside of them)\n          // might change, so we need to recreate the namespace adapted compileNodes\n          // for call to the link function.\n          // Note: This will already clone the nodes...\n          $linkNode = jqLite(\n            wrapTemplate(namespace, jqLite('<div>').append($compileNodes).html())\n          );\n        } else if (cloneConnectFn) {\n          // important!!: we must call our jqLite.clone() since the jQuery one is trying to be smart\n          // and sometimes changes the structure of the DOM.\n          $linkNode = JQLitePrototype.clone.call($compileNodes);\n        } else {\n          $linkNode = $compileNodes;\n        }\n\n        if (transcludeControllers) {\n          for (var controllerName in transcludeControllers) {\n            $linkNode.data('$' + controllerName + 'Controller', transcludeControllers[controllerName].instance);\n          }\n        }\n\n        compile.$$addScopeInfo($linkNode, scope);\n\n        if (cloneConnectFn) cloneConnectFn($linkNode, scope);\n        if (compositeLinkFn) compositeLinkFn(scope, $linkNode, $linkNode, parentBoundTranscludeFn);\n\n        if (!cloneConnectFn) {\n          $compileNodes = compositeLinkFn = null;\n        }\n        return $linkNode;\n      };\n    }\n\n    function detectNamespaceForChildElements(parentElement) {\n      // TODO: Make this detect MathML as well...\n      var node = parentElement && parentElement[0];\n      if (!node) {\n        return 'html';\n      } else {\n        return nodeName_(node) !== 'foreignobject' && toString.call(node).match(/SVG/) ? 'svg' : 'html';\n      }\n    }\n\n    /**\n     * Compile function matches each node in nodeList against the directives. Once all directives\n     * for a particular node are collected their compile functions are executed. The compile\n     * functions return values - the linking functions - are combined into a composite linking\n     * function, which is the a linking function for the node.\n     *\n     * @param {NodeList} nodeList an array of nodes or NodeList to compile\n     * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the\n     *        scope argument is auto-generated to the new child of the transcluded parent scope.\n     * @param {DOMElement=} $rootElement If the nodeList is the root of the compilation tree then\n     *        the rootElement must be set the jqLite collection of the compile root. This is\n     *        needed so that the jqLite collection items can be replaced with widgets.\n     * @param {number=} maxPriority Max directive priority.\n     * @returns {Function} A composite linking function of all of the matched directives or null.\n     */\n    function compileNodes(nodeList, transcludeFn, $rootElement, maxPriority, ignoreDirective,\n                            previousCompileContext) {\n      var linkFns = [],\n          // `nodeList` can be either an element's `.childNodes` (live NodeList)\n          // or a jqLite/jQuery collection or an array\n          notLiveList = isArray(nodeList) || (nodeList instanceof jqLite),\n          attrs, directives, nodeLinkFn, childNodes, childLinkFn, linkFnFound, nodeLinkFnFound;\n\n\n      for (var i = 0; i < nodeList.length; i++) {\n        attrs = new Attributes();\n\n        // Support: IE 11 only\n        // Workaround for #11781 and #14924\n        if (msie === 11) {\n          mergeConsecutiveTextNodes(nodeList, i, notLiveList);\n        }\n\n        // We must always refer to `nodeList[i]` hereafter,\n        // since the nodes can be replaced underneath us.\n        directives = collectDirectives(nodeList[i], [], attrs, i === 0 ? maxPriority : undefined,\n                                        ignoreDirective);\n\n        nodeLinkFn = (directives.length)\n            ? applyDirectivesToNode(directives, nodeList[i], attrs, transcludeFn, $rootElement,\n                                      null, [], [], previousCompileContext)\n            : null;\n\n        if (nodeLinkFn && nodeLinkFn.scope) {\n          compile.$$addScopeClass(attrs.$$element);\n        }\n\n        childLinkFn = (nodeLinkFn && nodeLinkFn.terminal ||\n                      !(childNodes = nodeList[i].childNodes) ||\n                      !childNodes.length)\n            ? null\n            : compileNodes(childNodes,\n                 nodeLinkFn ? (\n                  (nodeLinkFn.transcludeOnThisElement || !nodeLinkFn.templateOnThisElement)\n                     && nodeLinkFn.transclude) : transcludeFn);\n\n        if (nodeLinkFn || childLinkFn) {\n          linkFns.push(i, nodeLinkFn, childLinkFn);\n          linkFnFound = true;\n          nodeLinkFnFound = nodeLinkFnFound || nodeLinkFn;\n        }\n\n        //use the previous context only for the first element in the virtual group\n        previousCompileContext = null;\n      }\n\n      // return a linking function if we have found anything, null otherwise\n      return linkFnFound ? compositeLinkFn : null;\n\n      function compositeLinkFn(scope, nodeList, $rootElement, parentBoundTranscludeFn) {\n        var nodeLinkFn, childLinkFn, node, childScope, i, ii, idx, childBoundTranscludeFn;\n        var stableNodeList;\n\n\n        if (nodeLinkFnFound) {\n          // copy nodeList so that if a nodeLinkFn removes or adds an element at this DOM level our\n          // offsets don't get screwed up\n          var nodeListLength = nodeList.length;\n          stableNodeList = new Array(nodeListLength);\n\n          // create a sparse array by only copying the elements which have a linkFn\n          for (i = 0; i < linkFns.length; i += 3) {\n            idx = linkFns[i];\n            stableNodeList[idx] = nodeList[idx];\n          }\n        } else {\n          stableNodeList = nodeList;\n        }\n\n        for (i = 0, ii = linkFns.length; i < ii;) {\n          node = stableNodeList[linkFns[i++]];\n          nodeLinkFn = linkFns[i++];\n          childLinkFn = linkFns[i++];\n\n          if (nodeLinkFn) {\n            if (nodeLinkFn.scope) {\n              childScope = scope.$new();\n              compile.$$addScopeInfo(jqLite(node), childScope);\n            } else {\n              childScope = scope;\n            }\n\n            if (nodeLinkFn.transcludeOnThisElement) {\n              childBoundTranscludeFn = createBoundTranscludeFn(\n                  scope, nodeLinkFn.transclude, parentBoundTranscludeFn);\n\n            } else if (!nodeLinkFn.templateOnThisElement && parentBoundTranscludeFn) {\n              childBoundTranscludeFn = parentBoundTranscludeFn;\n\n            } else if (!parentBoundTranscludeFn && transcludeFn) {\n              childBoundTranscludeFn = createBoundTranscludeFn(scope, transcludeFn);\n\n            } else {\n              childBoundTranscludeFn = null;\n            }\n\n            nodeLinkFn(childLinkFn, childScope, node, $rootElement, childBoundTranscludeFn);\n\n          } else if (childLinkFn) {\n            childLinkFn(scope, node.childNodes, undefined, parentBoundTranscludeFn);\n          }\n        }\n      }\n    }\n\n    function mergeConsecutiveTextNodes(nodeList, idx, notLiveList) {\n      var node = nodeList[idx];\n      var parent = node.parentNode;\n      var sibling;\n\n      if (node.nodeType !== NODE_TYPE_TEXT) {\n        return;\n      }\n\n      while (true) {\n        sibling = parent ? node.nextSibling : nodeList[idx + 1];\n        if (!sibling || sibling.nodeType !== NODE_TYPE_TEXT) {\n          break;\n        }\n\n        node.nodeValue = node.nodeValue + sibling.nodeValue;\n\n        if (sibling.parentNode) {\n          sibling.parentNode.removeChild(sibling);\n        }\n        if (notLiveList && sibling === nodeList[idx + 1]) {\n          nodeList.splice(idx + 1, 1);\n        }\n      }\n    }\n\n    function createBoundTranscludeFn(scope, transcludeFn, previousBoundTranscludeFn) {\n      function boundTranscludeFn(transcludedScope, cloneFn, controllers, futureParentElement, containingScope) {\n\n        if (!transcludedScope) {\n          transcludedScope = scope.$new(false, containingScope);\n          transcludedScope.$$transcluded = true;\n        }\n\n        return transcludeFn(transcludedScope, cloneFn, {\n          parentBoundTranscludeFn: previousBoundTranscludeFn,\n          transcludeControllers: controllers,\n          futureParentElement: futureParentElement\n        });\n      }\n\n      // We need  to attach the transclusion slots onto the `boundTranscludeFn`\n      // so that they are available inside the `controllersBoundTransclude` function\n      var boundSlots = boundTranscludeFn.$$slots = createMap();\n      for (var slotName in transcludeFn.$$slots) {\n        if (transcludeFn.$$slots[slotName]) {\n          boundSlots[slotName] = createBoundTranscludeFn(scope, transcludeFn.$$slots[slotName], previousBoundTranscludeFn);\n        } else {\n          boundSlots[slotName] = null;\n        }\n      }\n\n      return boundTranscludeFn;\n    }\n\n    /**\n     * Looks for directives on the given node and adds them to the directive collection which is\n     * sorted.\n     *\n     * @param node Node to search.\n     * @param directives An array to which the directives are added to. This array is sorted before\n     *        the function returns.\n     * @param attrs The shared attrs object which is used to populate the normalized attributes.\n     * @param {number=} maxPriority Max directive priority.\n     */\n    function collectDirectives(node, directives, attrs, maxPriority, ignoreDirective) {\n      var nodeType = node.nodeType,\n          attrsMap = attrs.$attr,\n          match,\n          nodeName,\n          className;\n\n      switch (nodeType) {\n        case NODE_TYPE_ELEMENT: /* Element */\n\n          nodeName = nodeName_(node);\n\n          // use the node name: <directive>\n          addDirective(directives,\n              directiveNormalize(nodeName), 'E', maxPriority, ignoreDirective);\n\n          // iterate over the attributes\n          for (var attr, name, nName, ngAttrName, value, isNgAttr, nAttrs = node.attributes,\n                   j = 0, jj = nAttrs && nAttrs.length; j < jj; j++) {\n            var attrStartName = false;\n            var attrEndName = false;\n\n            attr = nAttrs[j];\n            name = attr.name;\n            value = attr.value;\n\n            // support ngAttr attribute binding\n            ngAttrName = directiveNormalize(name);\n            isNgAttr = NG_ATTR_BINDING.test(ngAttrName);\n            if (isNgAttr) {\n              name = name.replace(PREFIX_REGEXP, '')\n                .substr(8).replace(/_(.)/g, function(match, letter) {\n                  return letter.toUpperCase();\n                });\n            }\n\n            var multiElementMatch = ngAttrName.match(MULTI_ELEMENT_DIR_RE);\n            if (multiElementMatch && directiveIsMultiElement(multiElementMatch[1])) {\n              attrStartName = name;\n              attrEndName = name.substr(0, name.length - 5) + 'end';\n              name = name.substr(0, name.length - 6);\n            }\n\n            nName = directiveNormalize(name.toLowerCase());\n            attrsMap[nName] = name;\n            if (isNgAttr || !attrs.hasOwnProperty(nName)) {\n                attrs[nName] = value;\n                if (getBooleanAttrName(node, nName)) {\n                  attrs[nName] = true; // presence means true\n                }\n            }\n            addAttrInterpolateDirective(node, directives, value, nName, isNgAttr);\n            addDirective(directives, nName, 'A', maxPriority, ignoreDirective, attrStartName,\n                          attrEndName);\n          }\n\n          if (nodeName === 'input' && node.getAttribute('type') === 'hidden') {\n            // Hidden input elements can have strange behaviour when navigating back to the page\n            // This tells the browser not to try to cache and reinstate previous values\n            node.setAttribute('autocomplete', 'off');\n          }\n\n          // use class as directive\n          if (!cssClassDirectivesEnabled) break;\n          className = node.className;\n          if (isObject(className)) {\n              // Maybe SVGAnimatedString\n              className = className.animVal;\n          }\n          if (isString(className) && className !== '') {\n            while ((match = CLASS_DIRECTIVE_REGEXP.exec(className))) {\n              nName = directiveNormalize(match[2]);\n              if (addDirective(directives, nName, 'C', maxPriority, ignoreDirective)) {\n                attrs[nName] = trim(match[3]);\n              }\n              className = className.substr(match.index + match[0].length);\n            }\n          }\n          break;\n        case NODE_TYPE_TEXT: /* Text Node */\n          addTextInterpolateDirective(directives, node.nodeValue);\n          break;\n        case NODE_TYPE_COMMENT: /* Comment */\n          if (!commentDirectivesEnabled) break;\n          collectCommentDirectives(node, directives, attrs, maxPriority, ignoreDirective);\n          break;\n      }\n\n      directives.sort(byPriority);\n      return directives;\n    }\n\n    function collectCommentDirectives(node, directives, attrs, maxPriority, ignoreDirective) {\n      // function created because of performance, try/catch disables\n      // the optimization of the whole function #14848\n      try {\n        var match = COMMENT_DIRECTIVE_REGEXP.exec(node.nodeValue);\n        if (match) {\n          var nName = directiveNormalize(match[1]);\n          if (addDirective(directives, nName, 'M', maxPriority, ignoreDirective)) {\n            attrs[nName] = trim(match[2]);\n          }\n        }\n      } catch (e) {\n        // turns out that under some circumstances IE9 throws errors when one attempts to read\n        // comment's node value.\n        // Just ignore it and continue. (Can't seem to reproduce in test case.)\n      }\n    }\n\n    /**\n     * Given a node with a directive-start it collects all of the siblings until it finds\n     * directive-end.\n     * @param node\n     * @param attrStart\n     * @param attrEnd\n     * @returns {*}\n     */\n    function groupScan(node, attrStart, attrEnd) {\n      var nodes = [];\n      var depth = 0;\n      if (attrStart && node.hasAttribute && node.hasAttribute(attrStart)) {\n        do {\n          if (!node) {\n            throw $compileMinErr('uterdir',\n                      'Unterminated attribute, found \\'{0}\\' but no matching \\'{1}\\' found.',\n                      attrStart, attrEnd);\n          }\n          if (node.nodeType === NODE_TYPE_ELEMENT) {\n            if (node.hasAttribute(attrStart)) depth++;\n            if (node.hasAttribute(attrEnd)) depth--;\n          }\n          nodes.push(node);\n          node = node.nextSibling;\n        } while (depth > 0);\n      } else {\n        nodes.push(node);\n      }\n\n      return jqLite(nodes);\n    }\n\n    /**\n     * Wrapper for linking function which converts normal linking function into a grouped\n     * linking function.\n     * @param linkFn\n     * @param attrStart\n     * @param attrEnd\n     * @returns {Function}\n     */\n    function groupElementsLinkFnWrapper(linkFn, attrStart, attrEnd) {\n      return function groupedElementsLink(scope, element, attrs, controllers, transcludeFn) {\n        element = groupScan(element[0], attrStart, attrEnd);\n        return linkFn(scope, element, attrs, controllers, transcludeFn);\n      };\n    }\n\n    /**\n     * A function generator that is used to support both eager and lazy compilation\n     * linking function.\n     * @param eager\n     * @param $compileNodes\n     * @param transcludeFn\n     * @param maxPriority\n     * @param ignoreDirective\n     * @param previousCompileContext\n     * @returns {Function}\n     */\n    function compilationGenerator(eager, $compileNodes, transcludeFn, maxPriority, ignoreDirective, previousCompileContext) {\n      var compiled;\n\n      if (eager) {\n        return compile($compileNodes, transcludeFn, maxPriority, ignoreDirective, previousCompileContext);\n      }\n      return /** @this */ function lazyCompilation() {\n        if (!compiled) {\n          compiled = compile($compileNodes, transcludeFn, maxPriority, ignoreDirective, previousCompileContext);\n\n          // Null out all of these references in order to make them eligible for garbage collection\n          // since this is a potentially long lived closure\n          $compileNodes = transcludeFn = previousCompileContext = null;\n        }\n        return compiled.apply(this, arguments);\n      };\n    }\n\n    /**\n     * Once the directives have been collected, their compile functions are executed. This method\n     * is responsible for inlining directive templates as well as terminating the application\n     * of the directives if the terminal directive has been reached.\n     *\n     * @param {Array} directives Array of collected directives to execute their compile function.\n     *        this needs to be pre-sorted by priority order.\n     * @param {Node} compileNode The raw DOM node to apply the compile functions to\n     * @param {Object} templateAttrs The shared attribute function\n     * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the\n     *                                                  scope argument is auto-generated to the new\n     *                                                  child of the transcluded parent scope.\n     * @param {JQLite} jqCollection If we are working on the root of the compile tree then this\n     *                              argument has the root jqLite array so that we can replace nodes\n     *                              on it.\n     * @param {Object=} originalReplaceDirective An optional directive that will be ignored when\n     *                                           compiling the transclusion.\n     * @param {Array.<Function>} preLinkFns\n     * @param {Array.<Function>} postLinkFns\n     * @param {Object} previousCompileContext Context used for previous compilation of the current\n     *                                        node\n     * @returns {Function} linkFn\n     */\n    function applyDirectivesToNode(directives, compileNode, templateAttrs, transcludeFn,\n                                   jqCollection, originalReplaceDirective, preLinkFns, postLinkFns,\n                                   previousCompileContext) {\n      previousCompileContext = previousCompileContext || {};\n\n      var terminalPriority = -Number.MAX_VALUE,\n          newScopeDirective = previousCompileContext.newScopeDirective,\n          controllerDirectives = previousCompileContext.controllerDirectives,\n          newIsolateScopeDirective = previousCompileContext.newIsolateScopeDirective,\n          templateDirective = previousCompileContext.templateDirective,\n          nonTlbTranscludeDirective = previousCompileContext.nonTlbTranscludeDirective,\n          hasTranscludeDirective = false,\n          hasTemplate = false,\n          hasElementTranscludeDirective = previousCompileContext.hasElementTranscludeDirective,\n          $compileNode = templateAttrs.$$element = jqLite(compileNode),\n          directive,\n          directiveName,\n          $template,\n          replaceDirective = originalReplaceDirective,\n          childTranscludeFn = transcludeFn,\n          linkFn,\n          didScanForMultipleTransclusion = false,\n          mightHaveMultipleTransclusionError = false,\n          directiveValue;\n\n      // executes all directives on the current element\n      for (var i = 0, ii = directives.length; i < ii; i++) {\n        directive = directives[i];\n        var attrStart = directive.$$start;\n        var attrEnd = directive.$$end;\n\n        // collect multiblock sections\n        if (attrStart) {\n          $compileNode = groupScan(compileNode, attrStart, attrEnd);\n        }\n        $template = undefined;\n\n        if (terminalPriority > directive.priority) {\n          break; // prevent further processing of directives\n        }\n\n        directiveValue = directive.scope;\n\n        if (directiveValue) {\n\n          // skip the check for directives with async templates, we'll check the derived sync\n          // directive when the template arrives\n          if (!directive.templateUrl) {\n            if (isObject(directiveValue)) {\n              // This directive is trying to add an isolated scope.\n              // Check that there is no scope of any kind already\n              assertNoDuplicate('new/isolated scope', newIsolateScopeDirective || newScopeDirective,\n                                directive, $compileNode);\n              newIsolateScopeDirective = directive;\n            } else {\n              // This directive is trying to add a child scope.\n              // Check that there is no isolated scope already\n              assertNoDuplicate('new/isolated scope', newIsolateScopeDirective, directive,\n                                $compileNode);\n            }\n          }\n\n          newScopeDirective = newScopeDirective || directive;\n        }\n\n        directiveName = directive.name;\n\n        // If we encounter a condition that can result in transclusion on the directive,\n        // then scan ahead in the remaining directives for others that may cause a multiple\n        // transclusion error to be thrown during the compilation process.  If a matching directive\n        // is found, then we know that when we encounter a transcluded directive, we need to eagerly\n        // compile the `transclude` function rather than doing it lazily in order to throw\n        // exceptions at the correct time\n        if (!didScanForMultipleTransclusion && ((directive.replace && (directive.templateUrl || directive.template))\n            || (directive.transclude && !directive.$$tlb))) {\n                var candidateDirective;\n\n                for (var scanningIndex = i + 1; (candidateDirective = directives[scanningIndex++]);) {\n                    if ((candidateDirective.transclude && !candidateDirective.$$tlb)\n                        || (candidateDirective.replace && (candidateDirective.templateUrl || candidateDirective.template))) {\n                        mightHaveMultipleTransclusionError = true;\n                        break;\n                    }\n                }\n\n                didScanForMultipleTransclusion = true;\n        }\n\n        if (!directive.templateUrl && directive.controller) {\n          controllerDirectives = controllerDirectives || createMap();\n          assertNoDuplicate('\\'' + directiveName + '\\' controller',\n              controllerDirectives[directiveName], directive, $compileNode);\n          controllerDirectives[directiveName] = directive;\n        }\n\n        directiveValue = directive.transclude;\n\n        if (directiveValue) {\n          hasTranscludeDirective = true;\n\n          // Special case ngIf and ngRepeat so that we don't complain about duplicate transclusion.\n          // This option should only be used by directives that know how to safely handle element transclusion,\n          // where the transcluded nodes are added or replaced after linking.\n          if (!directive.$$tlb) {\n            assertNoDuplicate('transclusion', nonTlbTranscludeDirective, directive, $compileNode);\n            nonTlbTranscludeDirective = directive;\n          }\n\n          if (directiveValue === 'element') {\n            hasElementTranscludeDirective = true;\n            terminalPriority = directive.priority;\n            $template = $compileNode;\n            $compileNode = templateAttrs.$$element =\n                jqLite(compile.$$createComment(directiveName, templateAttrs[directiveName]));\n            compileNode = $compileNode[0];\n            replaceWith(jqCollection, sliceArgs($template), compileNode);\n\n            // Support: Chrome < 50\n            // https://github.com/angular/angular.js/issues/14041\n\n            // In the versions of V8 prior to Chrome 50, the document fragment that is created\n            // in the `replaceWith` function is improperly garbage collected despite still\n            // being referenced by the `parentNode` property of all of the child nodes.  By adding\n            // a reference to the fragment via a different property, we can avoid that incorrect\n            // behavior.\n            // TODO: remove this line after Chrome 50 has been released\n            $template[0].$$parentNode = $template[0].parentNode;\n\n            childTranscludeFn = compilationGenerator(mightHaveMultipleTransclusionError, $template, transcludeFn, terminalPriority,\n                                        replaceDirective && replaceDirective.name, {\n                                          // Don't pass in:\n                                          // - controllerDirectives - otherwise we'll create duplicates controllers\n                                          // - newIsolateScopeDirective or templateDirective - combining templates with\n                                          //   element transclusion doesn't make sense.\n                                          //\n                                          // We need only nonTlbTranscludeDirective so that we prevent putting transclusion\n                                          // on the same element more than once.\n                                          nonTlbTranscludeDirective: nonTlbTranscludeDirective\n                                        });\n          } else {\n\n            var slots = createMap();\n\n            if (!isObject(directiveValue)) {\n              $template = jqLite(jqLiteClone(compileNode)).contents();\n            } else {\n\n              // We have transclusion slots,\n              // collect them up, compile them and store their transclusion functions\n              $template = [];\n\n              var slotMap = createMap();\n              var filledSlots = createMap();\n\n              // Parse the element selectors\n              forEach(directiveValue, function(elementSelector, slotName) {\n                // If an element selector starts with a ? then it is optional\n                var optional = (elementSelector.charAt(0) === '?');\n                elementSelector = optional ? elementSelector.substring(1) : elementSelector;\n\n                slotMap[elementSelector] = slotName;\n\n                // We explicitly assign `null` since this implies that a slot was defined but not filled.\n                // Later when calling boundTransclusion functions with a slot name we only error if the\n                // slot is `undefined`\n                slots[slotName] = null;\n\n                // filledSlots contains `true` for all slots that are either optional or have been\n                // filled. This is used to check that we have not missed any required slots\n                filledSlots[slotName] = optional;\n              });\n\n              // Add the matching elements into their slot\n              forEach($compileNode.contents(), function(node) {\n                var slotName = slotMap[directiveNormalize(nodeName_(node))];\n                if (slotName) {\n                  filledSlots[slotName] = true;\n                  slots[slotName] = slots[slotName] || [];\n                  slots[slotName].push(node);\n                } else {\n                  $template.push(node);\n                }\n              });\n\n              // Check for required slots that were not filled\n              forEach(filledSlots, function(filled, slotName) {\n                if (!filled) {\n                  throw $compileMinErr('reqslot', 'Required transclusion slot `{0}` was not filled.', slotName);\n                }\n              });\n\n              for (var slotName in slots) {\n                if (slots[slotName]) {\n                  // Only define a transclusion function if the slot was filled\n                  slots[slotName] = compilationGenerator(mightHaveMultipleTransclusionError, slots[slotName], transcludeFn);\n                }\n              }\n            }\n\n            $compileNode.empty(); // clear contents\n            childTranscludeFn = compilationGenerator(mightHaveMultipleTransclusionError, $template, transcludeFn, undefined,\n                undefined, { needsNewScope: directive.$$isolateScope || directive.$$newScope});\n            childTranscludeFn.$$slots = slots;\n          }\n        }\n\n        if (directive.template) {\n          hasTemplate = true;\n          assertNoDuplicate('template', templateDirective, directive, $compileNode);\n          templateDirective = directive;\n\n          directiveValue = (isFunction(directive.template))\n              ? directive.template($compileNode, templateAttrs)\n              : directive.template;\n\n          directiveValue = denormalizeTemplate(directiveValue);\n\n          if (directive.replace) {\n            replaceDirective = directive;\n            if (jqLiteIsTextNode(directiveValue)) {\n              $template = [];\n            } else {\n              $template = removeComments(wrapTemplate(directive.templateNamespace, trim(directiveValue)));\n            }\n            compileNode = $template[0];\n\n            if ($template.length !== 1 || compileNode.nodeType !== NODE_TYPE_ELEMENT) {\n              throw $compileMinErr('tplrt',\n                  'Template for directive \\'{0}\\' must have exactly one root element. {1}',\n                  directiveName, '');\n            }\n\n            replaceWith(jqCollection, $compileNode, compileNode);\n\n            var newTemplateAttrs = {$attr: {}};\n\n            // combine directives from the original node and from the template:\n            // - take the array of directives for this element\n            // - split it into two parts, those that already applied (processed) and those that weren't (unprocessed)\n            // - collect directives from the template and sort them by priority\n            // - combine directives as: processed + template + unprocessed\n            var templateDirectives = collectDirectives(compileNode, [], newTemplateAttrs);\n            var unprocessedDirectives = directives.splice(i + 1, directives.length - (i + 1));\n\n            if (newIsolateScopeDirective || newScopeDirective) {\n              // The original directive caused the current element to be replaced but this element\n              // also needs to have a new scope, so we need to tell the template directives\n              // that they would need to get their scope from further up, if they require transclusion\n              markDirectiveScope(templateDirectives, newIsolateScopeDirective, newScopeDirective);\n            }\n            directives = directives.concat(templateDirectives).concat(unprocessedDirectives);\n            mergeTemplateAttributes(templateAttrs, newTemplateAttrs);\n\n            ii = directives.length;\n          } else {\n            $compileNode.html(directiveValue);\n          }\n        }\n\n        if (directive.templateUrl) {\n          hasTemplate = true;\n          assertNoDuplicate('template', templateDirective, directive, $compileNode);\n          templateDirective = directive;\n\n          if (directive.replace) {\n            replaceDirective = directive;\n          }\n\n          // eslint-disable-next-line no-func-assign\n          nodeLinkFn = compileTemplateUrl(directives.splice(i, directives.length - i), $compileNode,\n              templateAttrs, jqCollection, hasTranscludeDirective && childTranscludeFn, preLinkFns, postLinkFns, {\n                controllerDirectives: controllerDirectives,\n                newScopeDirective: (newScopeDirective !== directive) && newScopeDirective,\n                newIsolateScopeDirective: newIsolateScopeDirective,\n                templateDirective: templateDirective,\n                nonTlbTranscludeDirective: nonTlbTranscludeDirective\n              });\n          ii = directives.length;\n        } else if (directive.compile) {\n          try {\n            linkFn = directive.compile($compileNode, templateAttrs, childTranscludeFn);\n            var context = directive.$$originalDirective || directive;\n            if (isFunction(linkFn)) {\n              addLinkFns(null, bind(context, linkFn), attrStart, attrEnd);\n            } else if (linkFn) {\n              addLinkFns(bind(context, linkFn.pre), bind(context, linkFn.post), attrStart, attrEnd);\n            }\n          } catch (e) {\n            $exceptionHandler(e, startingTag($compileNode));\n          }\n        }\n\n        if (directive.terminal) {\n          nodeLinkFn.terminal = true;\n          terminalPriority = Math.max(terminalPriority, directive.priority);\n        }\n\n      }\n\n      nodeLinkFn.scope = newScopeDirective && newScopeDirective.scope === true;\n      nodeLinkFn.transcludeOnThisElement = hasTranscludeDirective;\n      nodeLinkFn.templateOnThisElement = hasTemplate;\n      nodeLinkFn.transclude = childTranscludeFn;\n\n      previousCompileContext.hasElementTranscludeDirective = hasElementTranscludeDirective;\n\n      // might be normal or delayed nodeLinkFn depending on if templateUrl is present\n      return nodeLinkFn;\n\n      ////////////////////\n\n      function addLinkFns(pre, post, attrStart, attrEnd) {\n        if (pre) {\n          if (attrStart) pre = groupElementsLinkFnWrapper(pre, attrStart, attrEnd);\n          pre.require = directive.require;\n          pre.directiveName = directiveName;\n          if (newIsolateScopeDirective === directive || directive.$$isolateScope) {\n            pre = cloneAndAnnotateFn(pre, {isolateScope: true});\n          }\n          preLinkFns.push(pre);\n        }\n        if (post) {\n          if (attrStart) post = groupElementsLinkFnWrapper(post, attrStart, attrEnd);\n          post.require = directive.require;\n          post.directiveName = directiveName;\n          if (newIsolateScopeDirective === directive || directive.$$isolateScope) {\n            post = cloneAndAnnotateFn(post, {isolateScope: true});\n          }\n          postLinkFns.push(post);\n        }\n      }\n\n      function nodeLinkFn(childLinkFn, scope, linkNode, $rootElement, boundTranscludeFn) {\n        var i, ii, linkFn, isolateScope, controllerScope, elementControllers, transcludeFn, $element,\n            attrs, scopeBindingInfo;\n\n        if (compileNode === linkNode) {\n          attrs = templateAttrs;\n          $element = templateAttrs.$$element;\n        } else {\n          $element = jqLite(linkNode);\n          attrs = new Attributes($element, templateAttrs);\n        }\n\n        controllerScope = scope;\n        if (newIsolateScopeDirective) {\n          isolateScope = scope.$new(true);\n        } else if (newScopeDirective) {\n          controllerScope = scope.$parent;\n        }\n\n        if (boundTranscludeFn) {\n          // track `boundTranscludeFn` so it can be unwrapped if `transcludeFn`\n          // is later passed as `parentBoundTranscludeFn` to `publicLinkFn`\n          transcludeFn = controllersBoundTransclude;\n          transcludeFn.$$boundTransclude = boundTranscludeFn;\n          // expose the slots on the `$transclude` function\n          transcludeFn.isSlotFilled = function(slotName) {\n            return !!boundTranscludeFn.$$slots[slotName];\n          };\n        }\n\n        if (controllerDirectives) {\n          elementControllers = setupControllers($element, attrs, transcludeFn, controllerDirectives, isolateScope, scope, newIsolateScopeDirective);\n        }\n\n        if (newIsolateScopeDirective) {\n          // Initialize isolate scope bindings for new isolate scope directive.\n          compile.$$addScopeInfo($element, isolateScope, true, !(templateDirective && (templateDirective === newIsolateScopeDirective ||\n              templateDirective === newIsolateScopeDirective.$$originalDirective)));\n          compile.$$addScopeClass($element, true);\n          isolateScope.$$isolateBindings =\n              newIsolateScopeDirective.$$isolateBindings;\n          scopeBindingInfo = initializeDirectiveBindings(scope, attrs, isolateScope,\n                                        isolateScope.$$isolateBindings,\n                                        newIsolateScopeDirective);\n          if (scopeBindingInfo.removeWatches) {\n            isolateScope.$on('$destroy', scopeBindingInfo.removeWatches);\n          }\n        }\n\n        // Initialize bindToController bindings\n        for (var name in elementControllers) {\n          var controllerDirective = controllerDirectives[name];\n          var controller = elementControllers[name];\n          var bindings = controllerDirective.$$bindings.bindToController;\n\n          if (preAssignBindingsEnabled) {\n            if (bindings) {\n              controller.bindingInfo =\n                initializeDirectiveBindings(controllerScope, attrs, controller.instance, bindings, controllerDirective);\n            } else {\n              controller.bindingInfo = {};\n            }\n\n            var controllerResult = controller();\n            if (controllerResult !== controller.instance) {\n              // If the controller constructor has a return value, overwrite the instance\n              // from setupControllers\n              controller.instance = controllerResult;\n              $element.data('$' + controllerDirective.name + 'Controller', controllerResult);\n              if (controller.bindingInfo.removeWatches) {\n                controller.bindingInfo.removeWatches();\n              }\n              controller.bindingInfo =\n                initializeDirectiveBindings(controllerScope, attrs, controller.instance, bindings, controllerDirective);\n            }\n          } else {\n            controller.instance = controller();\n            $element.data('$' + controllerDirective.name + 'Controller', controller.instance);\n            controller.bindingInfo =\n              initializeDirectiveBindings(controllerScope, attrs, controller.instance, bindings, controllerDirective);\n          }\n        }\n\n        // Bind the required controllers to the controller, if `require` is an object and `bindToController` is truthy\n        forEach(controllerDirectives, function(controllerDirective, name) {\n          var require = controllerDirective.require;\n          if (controllerDirective.bindToController && !isArray(require) && isObject(require)) {\n            extend(elementControllers[name].instance, getControllers(name, require, $element, elementControllers));\n          }\n        });\n\n        // Handle the init and destroy lifecycle hooks on all controllers that have them\n        forEach(elementControllers, function(controller) {\n          var controllerInstance = controller.instance;\n          if (isFunction(controllerInstance.$onChanges)) {\n            try {\n              controllerInstance.$onChanges(controller.bindingInfo.initialChanges);\n            } catch (e) {\n              $exceptionHandler(e);\n            }\n          }\n          if (isFunction(controllerInstance.$onInit)) {\n            try {\n              controllerInstance.$onInit();\n            } catch (e) {\n              $exceptionHandler(e);\n            }\n          }\n          if (isFunction(controllerInstance.$doCheck)) {\n            controllerScope.$watch(function() { controllerInstance.$doCheck(); });\n            controllerInstance.$doCheck();\n          }\n          if (isFunction(controllerInstance.$onDestroy)) {\n            controllerScope.$on('$destroy', function callOnDestroyHook() {\n              controllerInstance.$onDestroy();\n            });\n          }\n        });\n\n        // PRELINKING\n        for (i = 0, ii = preLinkFns.length; i < ii; i++) {\n          linkFn = preLinkFns[i];\n          invokeLinkFn(linkFn,\n              linkFn.isolateScope ? isolateScope : scope,\n              $element,\n              attrs,\n              linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers),\n              transcludeFn\n          );\n        }\n\n        // RECURSION\n        // We only pass the isolate scope, if the isolate directive has a template,\n        // otherwise the child elements do not belong to the isolate directive.\n        var scopeToChild = scope;\n        if (newIsolateScopeDirective && (newIsolateScopeDirective.template || newIsolateScopeDirective.templateUrl === null)) {\n          scopeToChild = isolateScope;\n        }\n        if (childLinkFn) {\n          childLinkFn(scopeToChild, linkNode.childNodes, undefined, boundTranscludeFn);\n        }\n\n        // POSTLINKING\n        for (i = postLinkFns.length - 1; i >= 0; i--) {\n          linkFn = postLinkFns[i];\n          invokeLinkFn(linkFn,\n              linkFn.isolateScope ? isolateScope : scope,\n              $element,\n              attrs,\n              linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers),\n              transcludeFn\n          );\n        }\n\n        // Trigger $postLink lifecycle hooks\n        forEach(elementControllers, function(controller) {\n          var controllerInstance = controller.instance;\n          if (isFunction(controllerInstance.$postLink)) {\n            controllerInstance.$postLink();\n          }\n        });\n\n        // This is the function that is injected as `$transclude`.\n        // Note: all arguments are optional!\n        function controllersBoundTransclude(scope, cloneAttachFn, futureParentElement, slotName) {\n          var transcludeControllers;\n          // No scope passed in:\n          if (!isScope(scope)) {\n            slotName = futureParentElement;\n            futureParentElement = cloneAttachFn;\n            cloneAttachFn = scope;\n            scope = undefined;\n          }\n\n          if (hasElementTranscludeDirective) {\n            transcludeControllers = elementControllers;\n          }\n          if (!futureParentElement) {\n            futureParentElement = hasElementTranscludeDirective ? $element.parent() : $element;\n          }\n          if (slotName) {\n            // slotTranscludeFn can be one of three things:\n            //  * a transclude function - a filled slot\n            //  * `null` - an optional slot that was not filled\n            //  * `undefined` - a slot that was not declared (i.e. invalid)\n            var slotTranscludeFn = boundTranscludeFn.$$slots[slotName];\n            if (slotTranscludeFn) {\n              return slotTranscludeFn(scope, cloneAttachFn, transcludeControllers, futureParentElement, scopeToChild);\n            } else if (isUndefined(slotTranscludeFn)) {\n              throw $compileMinErr('noslot',\n               'No parent directive that requires a transclusion with slot name \"{0}\". ' +\n               'Element: {1}',\n               slotName, startingTag($element));\n            }\n          } else {\n            return boundTranscludeFn(scope, cloneAttachFn, transcludeControllers, futureParentElement, scopeToChild);\n          }\n        }\n      }\n    }\n\n    function getControllers(directiveName, require, $element, elementControllers) {\n      var value;\n\n      if (isString(require)) {\n        var match = require.match(REQUIRE_PREFIX_REGEXP);\n        var name = require.substring(match[0].length);\n        var inheritType = match[1] || match[3];\n        var optional = match[2] === '?';\n\n        //If only parents then start at the parent element\n        if (inheritType === '^^') {\n          $element = $element.parent();\n        //Otherwise attempt getting the controller from elementControllers in case\n        //the element is transcluded (and has no data) and to avoid .data if possible\n        } else {\n          value = elementControllers && elementControllers[name];\n          value = value && value.instance;\n        }\n\n        if (!value) {\n          var dataName = '$' + name + 'Controller';\n          value = inheritType ? $element.inheritedData(dataName) : $element.data(dataName);\n        }\n\n        if (!value && !optional) {\n          throw $compileMinErr('ctreq',\n              'Controller \\'{0}\\', required by directive \\'{1}\\', can\\'t be found!',\n              name, directiveName);\n        }\n      } else if (isArray(require)) {\n        value = [];\n        for (var i = 0, ii = require.length; i < ii; i++) {\n          value[i] = getControllers(directiveName, require[i], $element, elementControllers);\n        }\n      } else if (isObject(require)) {\n        value = {};\n        forEach(require, function(controller, property) {\n          value[property] = getControllers(directiveName, controller, $element, elementControllers);\n        });\n      }\n\n      return value || null;\n    }\n\n    function setupControllers($element, attrs, transcludeFn, controllerDirectives, isolateScope, scope, newIsolateScopeDirective) {\n      var elementControllers = createMap();\n      for (var controllerKey in controllerDirectives) {\n        var directive = controllerDirectives[controllerKey];\n        var locals = {\n          $scope: directive === newIsolateScopeDirective || directive.$$isolateScope ? isolateScope : scope,\n          $element: $element,\n          $attrs: attrs,\n          $transclude: transcludeFn\n        };\n\n        var controller = directive.controller;\n        if (controller === '@') {\n          controller = attrs[directive.name];\n        }\n\n        var controllerInstance = $controller(controller, locals, true, directive.controllerAs);\n\n        // For directives with element transclusion the element is a comment.\n        // In this case .data will not attach any data.\n        // Instead, we save the controllers for the element in a local hash and attach to .data\n        // later, once we have the actual element.\n        elementControllers[directive.name] = controllerInstance;\n        $element.data('$' + directive.name + 'Controller', controllerInstance.instance);\n      }\n      return elementControllers;\n    }\n\n    // Depending upon the context in which a directive finds itself it might need to have a new isolated\n    // or child scope created. For instance:\n    // * if the directive has been pulled into a template because another directive with a higher priority\n    // asked for element transclusion\n    // * if the directive itself asks for transclusion but it is at the root of a template and the original\n    // element was replaced. See https://github.com/angular/angular.js/issues/12936\n    function markDirectiveScope(directives, isolateScope, newScope) {\n      for (var j = 0, jj = directives.length; j < jj; j++) {\n        directives[j] = inherit(directives[j], {$$isolateScope: isolateScope, $$newScope: newScope});\n      }\n    }\n\n    /**\n     * looks up the directive and decorates it with exception handling and proper parameters. We\n     * call this the boundDirective.\n     *\n     * @param {string} name name of the directive to look up.\n     * @param {string} location The directive must be found in specific format.\n     *   String containing any of theses characters:\n     *\n     *   * `E`: element name\n     *   * `A': attribute\n     *   * `C`: class\n     *   * `M`: comment\n     * @returns {boolean} true if directive was added.\n     */\n    function addDirective(tDirectives, name, location, maxPriority, ignoreDirective, startAttrName,\n                          endAttrName) {\n      if (name === ignoreDirective) return null;\n      var match = null;\n      if (hasDirectives.hasOwnProperty(name)) {\n        for (var directive, directives = $injector.get(name + Suffix),\n            i = 0, ii = directives.length; i < ii; i++) {\n          directive = directives[i];\n          if ((isUndefined(maxPriority) || maxPriority > directive.priority) &&\n               directive.restrict.indexOf(location) !== -1) {\n            if (startAttrName) {\n              directive = inherit(directive, {$$start: startAttrName, $$end: endAttrName});\n            }\n            if (!directive.$$bindings) {\n              var bindings = directive.$$bindings =\n                  parseDirectiveBindings(directive, directive.name);\n              if (isObject(bindings.isolateScope)) {\n                directive.$$isolateBindings = bindings.isolateScope;\n              }\n            }\n            tDirectives.push(directive);\n            match = directive;\n          }\n        }\n      }\n      return match;\n    }\n\n\n    /**\n     * looks up the directive and returns true if it is a multi-element directive,\n     * and therefore requires DOM nodes between -start and -end markers to be grouped\n     * together.\n     *\n     * @param {string} name name of the directive to look up.\n     * @returns true if directive was registered as multi-element.\n     */\n    function directiveIsMultiElement(name) {\n      if (hasDirectives.hasOwnProperty(name)) {\n        for (var directive, directives = $injector.get(name + Suffix),\n            i = 0, ii = directives.length; i < ii; i++) {\n          directive = directives[i];\n          if (directive.multiElement) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    /**\n     * When the element is replaced with HTML template then the new attributes\n     * on the template need to be merged with the existing attributes in the DOM.\n     * The desired effect is to have both of the attributes present.\n     *\n     * @param {object} dst destination attributes (original DOM)\n     * @param {object} src source attributes (from the directive template)\n     */\n    function mergeTemplateAttributes(dst, src) {\n      var srcAttr = src.$attr,\n          dstAttr = dst.$attr;\n\n      // reapply the old attributes to the new element\n      forEach(dst, function(value, key) {\n        if (key.charAt(0) !== '$') {\n          if (src[key] && src[key] !== value) {\n            if (value.length) {\n              value += (key === 'style' ? ';' : ' ') + src[key];\n            } else {\n              value = src[key];\n            }\n          }\n          dst.$set(key, value, true, srcAttr[key]);\n        }\n      });\n\n      // copy the new attributes on the old attrs object\n      forEach(src, function(value, key) {\n        // Check if we already set this attribute in the loop above.\n        // `dst` will never contain hasOwnProperty as DOM parser won't let it.\n        // You will get an \"InvalidCharacterError: DOM Exception 5\" error if you\n        // have an attribute like \"has-own-property\" or \"data-has-own-property\", etc.\n        if (!dst.hasOwnProperty(key) && key.charAt(0) !== '$') {\n          dst[key] = value;\n\n          if (key !== 'class' && key !== 'style') {\n            dstAttr[key] = srcAttr[key];\n          }\n        }\n      });\n    }\n\n\n    function compileTemplateUrl(directives, $compileNode, tAttrs,\n        $rootElement, childTranscludeFn, preLinkFns, postLinkFns, previousCompileContext) {\n      var linkQueue = [],\n          afterTemplateNodeLinkFn,\n          afterTemplateChildLinkFn,\n          beforeTemplateCompileNode = $compileNode[0],\n          origAsyncDirective = directives.shift(),\n          derivedSyncDirective = inherit(origAsyncDirective, {\n            templateUrl: null, transclude: null, replace: null, $$originalDirective: origAsyncDirective\n          }),\n          templateUrl = (isFunction(origAsyncDirective.templateUrl))\n              ? origAsyncDirective.templateUrl($compileNode, tAttrs)\n              : origAsyncDirective.templateUrl,\n          templateNamespace = origAsyncDirective.templateNamespace;\n\n      $compileNode.empty();\n\n      $templateRequest(templateUrl)\n        .then(function(content) {\n          var compileNode, tempTemplateAttrs, $template, childBoundTranscludeFn;\n\n          content = denormalizeTemplate(content);\n\n          if (origAsyncDirective.replace) {\n            if (jqLiteIsTextNode(content)) {\n              $template = [];\n            } else {\n              $template = removeComments(wrapTemplate(templateNamespace, trim(content)));\n            }\n            compileNode = $template[0];\n\n            if ($template.length !== 1 || compileNode.nodeType !== NODE_TYPE_ELEMENT) {\n              throw $compileMinErr('tplrt',\n                  'Template for directive \\'{0}\\' must have exactly one root element. {1}',\n                  origAsyncDirective.name, templateUrl);\n            }\n\n            tempTemplateAttrs = {$attr: {}};\n            replaceWith($rootElement, $compileNode, compileNode);\n            var templateDirectives = collectDirectives(compileNode, [], tempTemplateAttrs);\n\n            if (isObject(origAsyncDirective.scope)) {\n              // the original directive that caused the template to be loaded async required\n              // an isolate scope\n              markDirectiveScope(templateDirectives, true);\n            }\n            directives = templateDirectives.concat(directives);\n            mergeTemplateAttributes(tAttrs, tempTemplateAttrs);\n          } else {\n            compileNode = beforeTemplateCompileNode;\n            $compileNode.html(content);\n          }\n\n          directives.unshift(derivedSyncDirective);\n\n          afterTemplateNodeLinkFn = applyDirectivesToNode(directives, compileNode, tAttrs,\n              childTranscludeFn, $compileNode, origAsyncDirective, preLinkFns, postLinkFns,\n              previousCompileContext);\n          forEach($rootElement, function(node, i) {\n            if (node === compileNode) {\n              $rootElement[i] = $compileNode[0];\n            }\n          });\n          afterTemplateChildLinkFn = compileNodes($compileNode[0].childNodes, childTranscludeFn);\n\n          while (linkQueue.length) {\n            var scope = linkQueue.shift(),\n                beforeTemplateLinkNode = linkQueue.shift(),\n                linkRootElement = linkQueue.shift(),\n                boundTranscludeFn = linkQueue.shift(),\n                linkNode = $compileNode[0];\n\n            if (scope.$$destroyed) continue;\n\n            if (beforeTemplateLinkNode !== beforeTemplateCompileNode) {\n              var oldClasses = beforeTemplateLinkNode.className;\n\n              if (!(previousCompileContext.hasElementTranscludeDirective &&\n                  origAsyncDirective.replace)) {\n                // it was cloned therefore we have to clone as well.\n                linkNode = jqLiteClone(compileNode);\n              }\n              replaceWith(linkRootElement, jqLite(beforeTemplateLinkNode), linkNode);\n\n              // Copy in CSS classes from original node\n              safeAddClass(jqLite(linkNode), oldClasses);\n            }\n            if (afterTemplateNodeLinkFn.transcludeOnThisElement) {\n              childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);\n            } else {\n              childBoundTranscludeFn = boundTranscludeFn;\n            }\n            afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, linkNode, $rootElement,\n              childBoundTranscludeFn);\n          }\n          linkQueue = null;\n        }).catch(function(error) {\n          if (isError(error)) {\n            $exceptionHandler(error);\n          }\n        });\n\n      return function delayedNodeLinkFn(ignoreChildLinkFn, scope, node, rootElement, boundTranscludeFn) {\n        var childBoundTranscludeFn = boundTranscludeFn;\n        if (scope.$$destroyed) return;\n        if (linkQueue) {\n          linkQueue.push(scope,\n                         node,\n                         rootElement,\n                         childBoundTranscludeFn);\n        } else {\n          if (afterTemplateNodeLinkFn.transcludeOnThisElement) {\n            childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);\n          }\n          afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, node, rootElement, childBoundTranscludeFn);\n        }\n      };\n    }\n\n\n    /**\n     * Sorting function for bound directives.\n     */\n    function byPriority(a, b) {\n      var diff = b.priority - a.priority;\n      if (diff !== 0) return diff;\n      if (a.name !== b.name) return (a.name < b.name) ? -1 : 1;\n      return a.index - b.index;\n    }\n\n    function assertNoDuplicate(what, previousDirective, directive, element) {\n\n      function wrapModuleNameIfDefined(moduleName) {\n        return moduleName ?\n          (' (module: ' + moduleName + ')') :\n          '';\n      }\n\n      if (previousDirective) {\n        throw $compileMinErr('multidir', 'Multiple directives [{0}{1}, {2}{3}] asking for {4} on: {5}',\n            previousDirective.name, wrapModuleNameIfDefined(previousDirective.$$moduleName),\n            directive.name, wrapModuleNameIfDefined(directive.$$moduleName), what, startingTag(element));\n      }\n    }\n\n\n    function addTextInterpolateDirective(directives, text) {\n      var interpolateFn = $interpolate(text, true);\n      if (interpolateFn) {\n        directives.push({\n          priority: 0,\n          compile: function textInterpolateCompileFn(templateNode) {\n            var templateNodeParent = templateNode.parent(),\n                hasCompileParent = !!templateNodeParent.length;\n\n            // When transcluding a template that has bindings in the root\n            // we don't have a parent and thus need to add the class during linking fn.\n            if (hasCompileParent) compile.$$addBindingClass(templateNodeParent);\n\n            return function textInterpolateLinkFn(scope, node) {\n              var parent = node.parent();\n              if (!hasCompileParent) compile.$$addBindingClass(parent);\n              compile.$$addBindingInfo(parent, interpolateFn.expressions);\n              scope.$watch(interpolateFn, function interpolateFnWatchAction(value) {\n                node[0].nodeValue = value;\n              });\n            };\n          }\n        });\n      }\n    }\n\n\n    function wrapTemplate(type, template) {\n      type = lowercase(type || 'html');\n      switch (type) {\n      case 'svg':\n      case 'math':\n        var wrapper = window.document.createElement('div');\n        wrapper.innerHTML = '<' + type + '>' + template + '</' + type + '>';\n        return wrapper.childNodes[0].childNodes;\n      default:\n        return template;\n      }\n    }\n\n\n    function getTrustedContext(node, attrNormalizedName) {\n      if (attrNormalizedName === 'srcdoc') {\n        return $sce.HTML;\n      }\n      var tag = nodeName_(node);\n      // All tags with src attributes require a RESOURCE_URL value, except for\n      // img and various html5 media tags.\n      if (attrNormalizedName === 'src' || attrNormalizedName === 'ngSrc') {\n        if (['img', 'video', 'audio', 'source', 'track'].indexOf(tag) === -1) {\n          return $sce.RESOURCE_URL;\n        }\n      // maction[xlink:href] can source SVG.  It's not limited to <maction>.\n      } else if (attrNormalizedName === 'xlinkHref' ||\n          (tag === 'form' && attrNormalizedName === 'action') ||\n          // links can be stylesheets or imports, which can run script in the current origin\n          (tag === 'link' && attrNormalizedName === 'href')\n      ) {\n        return $sce.RESOURCE_URL;\n      }\n    }\n\n\n    function addAttrInterpolateDirective(node, directives, value, name, isNgAttr) {\n      var trustedContext = getTrustedContext(node, name);\n      var mustHaveExpression = !isNgAttr;\n      var allOrNothing = ALL_OR_NOTHING_ATTRS[name] || isNgAttr;\n\n      var interpolateFn = $interpolate(value, mustHaveExpression, trustedContext, allOrNothing);\n\n      // no interpolation found -> ignore\n      if (!interpolateFn) return;\n\n      if (name === 'multiple' && nodeName_(node) === 'select') {\n        throw $compileMinErr('selmulti',\n            'Binding to the \\'multiple\\' attribute is not supported. Element: {0}',\n            startingTag(node));\n      }\n\n      if (EVENT_HANDLER_ATTR_REGEXP.test(name)) {\n        throw $compileMinErr('nodomevents',\n            'Interpolations for HTML DOM event attributes are disallowed.  Please use the ' +\n                'ng- versions (such as ng-click instead of onclick) instead.');\n      }\n\n      directives.push({\n        priority: 100,\n        compile: function() {\n            return {\n              pre: function attrInterpolatePreLinkFn(scope, element, attr) {\n                var $$observers = (attr.$$observers || (attr.$$observers = createMap()));\n\n                // If the attribute has changed since last $interpolate()ed\n                var newValue = attr[name];\n                if (newValue !== value) {\n                  // we need to interpolate again since the attribute value has been updated\n                  // (e.g. by another directive's compile function)\n                  // ensure unset/empty values make interpolateFn falsy\n                  interpolateFn = newValue && $interpolate(newValue, true, trustedContext, allOrNothing);\n                  value = newValue;\n                }\n\n                // if attribute was updated so that there is no interpolation going on we don't want to\n                // register any observers\n                if (!interpolateFn) return;\n\n                // initialize attr object so that it's ready in case we need the value for isolate\n                // scope initialization, otherwise the value would not be available from isolate\n                // directive's linking fn during linking phase\n                attr[name] = interpolateFn(scope);\n\n                ($$observers[name] || ($$observers[name] = [])).$$inter = true;\n                (attr.$$observers && attr.$$observers[name].$$scope || scope).\n                  $watch(interpolateFn, function interpolateFnWatchAction(newValue, oldValue) {\n                    //special case for class attribute addition + removal\n                    //so that class changes can tap into the animation\n                    //hooks provided by the $animate service. Be sure to\n                    //skip animations when the first digest occurs (when\n                    //both the new and the old values are the same) since\n                    //the CSS classes are the non-interpolated values\n                    if (name === 'class' && newValue !== oldValue) {\n                      attr.$updateClass(newValue, oldValue);\n                    } else {\n                      attr.$set(name, newValue);\n                    }\n                  });\n              }\n            };\n          }\n      });\n    }\n\n\n    /**\n     * This is a special jqLite.replaceWith, which can replace items which\n     * have no parents, provided that the containing jqLite collection is provided.\n     *\n     * @param {JqLite=} $rootElement The root of the compile tree. Used so that we can replace nodes\n     *                               in the root of the tree.\n     * @param {JqLite} elementsToRemove The jqLite element which we are going to replace. We keep\n     *                                  the shell, but replace its DOM node reference.\n     * @param {Node} newNode The new DOM node.\n     */\n    function replaceWith($rootElement, elementsToRemove, newNode) {\n      var firstElementToRemove = elementsToRemove[0],\n          removeCount = elementsToRemove.length,\n          parent = firstElementToRemove.parentNode,\n          i, ii;\n\n      if ($rootElement) {\n        for (i = 0, ii = $rootElement.length; i < ii; i++) {\n          if ($rootElement[i] === firstElementToRemove) {\n            $rootElement[i++] = newNode;\n            for (var j = i, j2 = j + removeCount - 1,\n                     jj = $rootElement.length;\n                 j < jj; j++, j2++) {\n              if (j2 < jj) {\n                $rootElement[j] = $rootElement[j2];\n              } else {\n                delete $rootElement[j];\n              }\n            }\n            $rootElement.length -= removeCount - 1;\n\n            // If the replaced element is also the jQuery .context then replace it\n            // .context is a deprecated jQuery api, so we should set it only when jQuery set it\n            // http://api.jquery.com/context/\n            if ($rootElement.context === firstElementToRemove) {\n              $rootElement.context = newNode;\n            }\n            break;\n          }\n        }\n      }\n\n      if (parent) {\n        parent.replaceChild(newNode, firstElementToRemove);\n      }\n\n      // Append all the `elementsToRemove` to a fragment. This will...\n      // - remove them from the DOM\n      // - allow them to still be traversed with .nextSibling\n      // - allow a single fragment.qSA to fetch all elements being removed\n      var fragment = window.document.createDocumentFragment();\n      for (i = 0; i < removeCount; i++) {\n        fragment.appendChild(elementsToRemove[i]);\n      }\n\n      if (jqLite.hasData(firstElementToRemove)) {\n        // Copy over user data (that includes Angular's $scope etc.). Don't copy private\n        // data here because there's no public interface in jQuery to do that and copying over\n        // event listeners (which is the main use of private data) wouldn't work anyway.\n        jqLite.data(newNode, jqLite.data(firstElementToRemove));\n\n        // Remove $destroy event listeners from `firstElementToRemove`\n        jqLite(firstElementToRemove).off('$destroy');\n      }\n\n      // Cleanup any data/listeners on the elements and children.\n      // This includes invoking the $destroy event on any elements with listeners.\n      jqLite.cleanData(fragment.querySelectorAll('*'));\n\n      // Update the jqLite collection to only contain the `newNode`\n      for (i = 1; i < removeCount; i++) {\n        delete elementsToRemove[i];\n      }\n      elementsToRemove[0] = newNode;\n      elementsToRemove.length = 1;\n    }\n\n\n    function cloneAndAnnotateFn(fn, annotation) {\n      return extend(function() { return fn.apply(null, arguments); }, fn, annotation);\n    }\n\n\n    function invokeLinkFn(linkFn, scope, $element, attrs, controllers, transcludeFn) {\n      try {\n        linkFn(scope, $element, attrs, controllers, transcludeFn);\n      } catch (e) {\n        $exceptionHandler(e, startingTag($element));\n      }\n    }\n\n    function strictBindingsCheck(attrName, directiveName) {\n      if (strictComponentBindingsEnabled) {\n        throw $compileMinErr('missingattr',\n          'Attribute \\'{0}\\' of \\'{1}\\' is non-optional and must be set!',\n          attrName, directiveName);\n      }\n    }\n\n    // Set up $watches for isolate scope and controller bindings.\n    function initializeDirectiveBindings(scope, attrs, destination, bindings, directive) {\n      var removeWatchCollection = [];\n      var initialChanges = {};\n      var changes;\n\n      forEach(bindings, function initializeBinding(definition, scopeName) {\n        var attrName = definition.attrName,\n        optional = definition.optional,\n        mode = definition.mode, // @, =, <, or &\n        lastValue,\n        parentGet, parentSet, compare, removeWatch;\n\n        switch (mode) {\n\n          case '@':\n            if (!optional && !hasOwnProperty.call(attrs, attrName)) {\n              strictBindingsCheck(attrName, directive.name);\n              destination[scopeName] = attrs[attrName] = undefined;\n\n            }\n            removeWatch = attrs.$observe(attrName, function(value) {\n              if (isString(value) || isBoolean(value)) {\n                var oldValue = destination[scopeName];\n                recordChanges(scopeName, value, oldValue);\n                destination[scopeName] = value;\n              }\n            });\n            attrs.$$observers[attrName].$$scope = scope;\n            lastValue = attrs[attrName];\n            if (isString(lastValue)) {\n              // If the attribute has been provided then we trigger an interpolation to ensure\n              // the value is there for use in the link fn\n              destination[scopeName] = $interpolate(lastValue)(scope);\n            } else if (isBoolean(lastValue)) {\n              // If the attributes is one of the BOOLEAN_ATTR then Angular will have converted\n              // the value to boolean rather than a string, so we special case this situation\n              destination[scopeName] = lastValue;\n            }\n            initialChanges[scopeName] = new SimpleChange(_UNINITIALIZED_VALUE, destination[scopeName]);\n            removeWatchCollection.push(removeWatch);\n            break;\n\n          case '=':\n            if (!hasOwnProperty.call(attrs, attrName)) {\n              if (optional) break;\n              strictBindingsCheck(attrName, directive.name);\n              attrs[attrName] = undefined;\n            }\n            if (optional && !attrs[attrName]) break;\n\n            parentGet = $parse(attrs[attrName]);\n            if (parentGet.literal) {\n              compare = equals;\n            } else {\n              compare = simpleCompare;\n            }\n            parentSet = parentGet.assign || function() {\n              // reset the change, or we will throw this exception on every $digest\n              lastValue = destination[scopeName] = parentGet(scope);\n              throw $compileMinErr('nonassign',\n                  'Expression \\'{0}\\' in attribute \\'{1}\\' used with directive \\'{2}\\' is non-assignable!',\n                  attrs[attrName], attrName, directive.name);\n            };\n            lastValue = destination[scopeName] = parentGet(scope);\n            var parentValueWatch = function parentValueWatch(parentValue) {\n              if (!compare(parentValue, destination[scopeName])) {\n                // we are out of sync and need to copy\n                if (!compare(parentValue, lastValue)) {\n                  // parent changed and it has precedence\n                  destination[scopeName] = parentValue;\n                } else {\n                  // if the parent can be assigned then do so\n                  parentSet(scope, parentValue = destination[scopeName]);\n                }\n              }\n              lastValue = parentValue;\n              return lastValue;\n            };\n            parentValueWatch.$stateful = true;\n            if (definition.collection) {\n              removeWatch = scope.$watchCollection(attrs[attrName], parentValueWatch);\n            } else {\n              removeWatch = scope.$watch($parse(attrs[attrName], parentValueWatch), null, parentGet.literal);\n            }\n            removeWatchCollection.push(removeWatch);\n            break;\n\n          case '<':\n            if (!hasOwnProperty.call(attrs, attrName)) {\n              if (optional) break;\n              strictBindingsCheck(attrName, directive.name);\n              attrs[attrName] = undefined;\n            }\n            if (optional && !attrs[attrName]) break;\n\n            parentGet = $parse(attrs[attrName]);\n            var deepWatch = parentGet.literal;\n\n            var initialValue = destination[scopeName] = parentGet(scope);\n            initialChanges[scopeName] = new SimpleChange(_UNINITIALIZED_VALUE, destination[scopeName]);\n\n            removeWatch = scope.$watch(parentGet, function parentValueWatchAction(newValue, oldValue) {\n              if (oldValue === newValue) {\n                if (oldValue === initialValue || (deepWatch && equals(oldValue, initialValue))) {\n                  return;\n                }\n                oldValue = initialValue;\n              }\n              recordChanges(scopeName, newValue, oldValue);\n              destination[scopeName] = newValue;\n            }, deepWatch);\n\n            removeWatchCollection.push(removeWatch);\n            break;\n\n          case '&':\n            if (!optional && !hasOwnProperty.call(attrs, attrName)) {\n              strictBindingsCheck(attrName, directive.name);\n            }\n            // Don't assign Object.prototype method to scope\n            parentGet = attrs.hasOwnProperty(attrName) ? $parse(attrs[attrName]) : noop;\n\n            // Don't assign noop to destination if expression is not valid\n            if (parentGet === noop && optional) break;\n\n            destination[scopeName] = function(locals) {\n              return parentGet(scope, locals);\n            };\n            break;\n        }\n      });\n\n      function recordChanges(key, currentValue, previousValue) {\n        if (isFunction(destination.$onChanges) && !simpleCompare(currentValue, previousValue)) {\n          // If we have not already scheduled the top level onChangesQueue handler then do so now\n          if (!onChangesQueue) {\n            scope.$$postDigest(flushOnChangesQueue);\n            onChangesQueue = [];\n          }\n          // If we have not already queued a trigger of onChanges for this controller then do so now\n          if (!changes) {\n            changes = {};\n            onChangesQueue.push(triggerOnChangesHook);\n          }\n          // If the has been a change on this property already then we need to reuse the previous value\n          if (changes[key]) {\n            previousValue = changes[key].previousValue;\n          }\n          // Store this change\n          changes[key] = new SimpleChange(previousValue, currentValue);\n        }\n      }\n\n      function triggerOnChangesHook() {\n        destination.$onChanges(changes);\n        // Now clear the changes so that we schedule onChanges when more changes arrive\n        changes = undefined;\n      }\n\n      return {\n        initialChanges: initialChanges,\n        removeWatches: removeWatchCollection.length && function removeWatches() {\n          for (var i = 0, ii = removeWatchCollection.length; i < ii; ++i) {\n            removeWatchCollection[i]();\n          }\n        }\n      };\n    }\n  }];\n}\n\nfunction SimpleChange(previous, current) {\n  this.previousValue = previous;\n  this.currentValue = current;\n}\nSimpleChange.prototype.isFirstChange = function() { return this.previousValue === _UNINITIALIZED_VALUE; };\n\n\nvar PREFIX_REGEXP = /^((?:x|data)[:\\-_])/i;\nvar SPECIAL_CHARS_REGEXP = /[:\\-_]+(.)/g;\n\n/**\n * Converts all accepted directives format into proper directive name.\n * @param name Name to normalize\n */\nfunction directiveNormalize(name) {\n  return name\n    .replace(PREFIX_REGEXP, '')\n    .replace(SPECIAL_CHARS_REGEXP, function(_, letter, offset) {\n      return offset ? letter.toUpperCase() : letter;\n    });\n}\n\n/**\n * @ngdoc type\n * @name $compile.directive.Attributes\n *\n * @description\n * A shared object between directive compile / linking functions which contains normalized DOM\n * element attributes. The values reflect current binding state `{{ }}`. The normalization is\n * needed since all of these are treated as equivalent in Angular:\n *\n * ```\n *    <span ng:bind=\"a\" ng-bind=\"a\" data-ng-bind=\"a\" x-ng-bind=\"a\">\n * ```\n */\n\n/**\n * @ngdoc property\n * @name $compile.directive.Attributes#$attr\n *\n * @description\n * A map of DOM element attribute names to the normalized name. This is\n * needed to do reverse lookup from normalized name back to actual name.\n */\n\n\n/**\n * @ngdoc method\n * @name $compile.directive.Attributes#$set\n * @kind function\n *\n * @description\n * Set DOM element attribute value.\n *\n *\n * @param {string} name Normalized element attribute name of the property to modify. The name is\n *          reverse-translated using the {@link ng.$compile.directive.Attributes#$attr $attr}\n *          property to the original name.\n * @param {string} value Value to set the attribute to. The value can be an interpolated string.\n */\n\n\n\n/**\n * Closure compiler type information\n */\n\nfunction nodesetLinkingFn(\n  /* angular.Scope */ scope,\n  /* NodeList */ nodeList,\n  /* Element */ rootElement,\n  /* function(Function) */ boundTranscludeFn\n) {}\n\nfunction directiveLinkingFn(\n  /* nodesetLinkingFn */ nodesetLinkingFn,\n  /* angular.Scope */ scope,\n  /* Node */ node,\n  /* Element */ rootElement,\n  /* function(Function) */ boundTranscludeFn\n) {}\n\nfunction tokenDifference(str1, str2) {\n  var values = '',\n      tokens1 = str1.split(/\\s+/),\n      tokens2 = str2.split(/\\s+/);\n\n  outer:\n  for (var i = 0; i < tokens1.length; i++) {\n    var token = tokens1[i];\n    for (var j = 0; j < tokens2.length; j++) {\n      if (token === tokens2[j]) continue outer;\n    }\n    values += (values.length > 0 ? ' ' : '') + token;\n  }\n  return values;\n}\n\nfunction removeComments(jqNodes) {\n  jqNodes = jqLite(jqNodes);\n  var i = jqNodes.length;\n\n  if (i <= 1) {\n    return jqNodes;\n  }\n\n  while (i--) {\n    var node = jqNodes[i];\n    if (node.nodeType === NODE_TYPE_COMMENT ||\n       (node.nodeType === NODE_TYPE_TEXT && node.nodeValue.trim() === '')) {\n         splice.call(jqNodes, i, 1);\n    }\n  }\n  return jqNodes;\n}\n\nvar $controllerMinErr = minErr('$controller');\n\n\nvar CNTRL_REG = /^(\\S+)(\\s+as\\s+([\\w$]+))?$/;\nfunction identifierForController(controller, ident) {\n  if (ident && isString(ident)) return ident;\n  if (isString(controller)) {\n    var match = CNTRL_REG.exec(controller);\n    if (match) return match[3];\n  }\n}\n\n\n/**\n * @ngdoc provider\n * @name $controllerProvider\n * @this\n *\n * @description\n * The {@link ng.$controller $controller service} is used by Angular to create new\n * controllers.\n *\n * This provider allows controller registration via the\n * {@link ng.$controllerProvider#register register} method.\n */\nfunction $ControllerProvider() {\n  var controllers = {},\n      globals = false;\n\n  /**\n   * @ngdoc method\n   * @name $controllerProvider#has\n   * @param {string} name Controller name to check.\n   */\n  this.has = function(name) {\n    return controllers.hasOwnProperty(name);\n  };\n\n  /**\n   * @ngdoc method\n   * @name $controllerProvider#register\n   * @param {string|Object} name Controller name, or an object map of controllers where the keys are\n   *    the names and the values are the constructors.\n   * @param {Function|Array} constructor Controller constructor fn (optionally decorated with DI\n   *    annotations in the array notation).\n   */\n  this.register = function(name, constructor) {\n    assertNotHasOwnProperty(name, 'controller');\n    if (isObject(name)) {\n      extend(controllers, name);\n    } else {\n      controllers[name] = constructor;\n    }\n  };\n\n  /**\n   * @ngdoc method\n   * @name $controllerProvider#allowGlobals\n   * @description If called, allows `$controller` to find controller constructors on `window`\n   *\n   * @deprecated\n   * sinceVersion=\"v1.3.0\"\n   * removeVersion=\"v1.7.0\"\n   * This method of finding controllers has been deprecated.\n   */\n  this.allowGlobals = function() {\n    globals = true;\n  };\n\n\n  this.$get = ['$injector', '$window', function($injector, $window) {\n\n    /**\n     * @ngdoc service\n     * @name $controller\n     * @requires $injector\n     *\n     * @param {Function|string} constructor If called with a function then it's considered to be the\n     *    controller constructor function. Otherwise it's considered to be a string which is used\n     *    to retrieve the controller constructor using the following steps:\n     *\n     *    * check if a controller with given name is registered via `$controllerProvider`\n     *    * check if evaluating the string on the current scope returns a constructor\n     *    * if $controllerProvider#allowGlobals, check `window[constructor]` on the global\n     *      `window` object (deprecated, not recommended)\n     *\n     *    The string can use the `controller as property` syntax, where the controller instance is published\n     *    as the specified property on the `scope`; the `scope` must be injected into `locals` param for this\n     *    to work correctly.\n     *\n     * @param {Object} locals Injection locals for Controller.\n     * @return {Object} Instance of given controller.\n     *\n     * @description\n     * `$controller` service is responsible for instantiating controllers.\n     *\n     * It's just a simple call to {@link auto.$injector $injector}, but extracted into\n     * a service, so that one can override this service with [BC version](https://gist.github.com/1649788).\n     */\n    return function $controller(expression, locals, later, ident) {\n      // PRIVATE API:\n      //   param `later` --- indicates that the controller's constructor is invoked at a later time.\n      //                     If true, $controller will allocate the object with the correct\n      //                     prototype chain, but will not invoke the controller until a returned\n      //                     callback is invoked.\n      //   param `ident` --- An optional label which overrides the label parsed from the controller\n      //                     expression, if any.\n      var instance, match, constructor, identifier;\n      later = later === true;\n      if (ident && isString(ident)) {\n        identifier = ident;\n      }\n\n      if (isString(expression)) {\n        match = expression.match(CNTRL_REG);\n        if (!match) {\n          throw $controllerMinErr('ctrlfmt',\n            'Badly formed controller string \\'{0}\\'. ' +\n            'Must match `__name__ as __id__` or `__name__`.', expression);\n        }\n        constructor = match[1];\n        identifier = identifier || match[3];\n        expression = controllers.hasOwnProperty(constructor)\n            ? controllers[constructor]\n            : getter(locals.$scope, constructor, true) ||\n                (globals ? getter($window, constructor, true) : undefined);\n\n        if (!expression) {\n          throw $controllerMinErr('ctrlreg',\n            'The controller with the name \\'{0}\\' is not registered.', constructor);\n        }\n\n        assertArgFn(expression, constructor, true);\n      }\n\n      if (later) {\n        // Instantiate controller later:\n        // This machinery is used to create an instance of the object before calling the\n        // controller's constructor itself.\n        //\n        // This allows properties to be added to the controller before the constructor is\n        // invoked. Primarily, this is used for isolate scope bindings in $compile.\n        //\n        // This feature is not intended for use by applications, and is thus not documented\n        // publicly.\n        // Object creation: http://jsperf.com/create-constructor/2\n        var controllerPrototype = (isArray(expression) ?\n          expression[expression.length - 1] : expression).prototype;\n        instance = Object.create(controllerPrototype || null);\n\n        if (identifier) {\n          addIdentifier(locals, identifier, instance, constructor || expression.name);\n        }\n\n        return extend(function $controllerInit() {\n          var result = $injector.invoke(expression, instance, locals, constructor);\n          if (result !== instance && (isObject(result) || isFunction(result))) {\n            instance = result;\n            if (identifier) {\n              // If result changed, re-assign controllerAs value to scope.\n              addIdentifier(locals, identifier, instance, constructor || expression.name);\n            }\n          }\n          return instance;\n        }, {\n          instance: instance,\n          identifier: identifier\n        });\n      }\n\n      instance = $injector.instantiate(expression, locals, constructor);\n\n      if (identifier) {\n        addIdentifier(locals, identifier, instance, constructor || expression.name);\n      }\n\n      return instance;\n    };\n\n    function addIdentifier(locals, identifier, instance, name) {\n      if (!(locals && isObject(locals.$scope))) {\n        throw minErr('$controller')('noscp',\n          'Cannot export controller \\'{0}\\' as \\'{1}\\'! No $scope object provided via `locals`.',\n          name, identifier);\n      }\n\n      locals.$scope[identifier] = instance;\n    }\n  }];\n}\n\n/**\n * @ngdoc service\n * @name $document\n * @requires $window\n * @this\n *\n * @description\n * A {@link angular.element jQuery or jqLite} wrapper for the browser's `window.document` object.\n *\n * @example\n   <example module=\"documentExample\" name=\"document\">\n     <file name=\"index.html\">\n       <div ng-controller=\"ExampleController\">\n         <p>$document title: <b ng-bind=\"title\"></b></p>\n         <p>window.document title: <b ng-bind=\"windowTitle\"></b></p>\n       </div>\n     </file>\n     <file name=\"script.js\">\n       angular.module('documentExample', [])\n         .controller('ExampleController', ['$scope', '$document', function($scope, $document) {\n           $scope.title = $document[0].title;\n           $scope.windowTitle = angular.element(window.document)[0].title;\n         }]);\n     </file>\n   </example>\n */\nfunction $DocumentProvider() {\n  this.$get = ['$window', function(window) {\n    return jqLite(window.document);\n  }];\n}\n\n\n/**\n * @private\n * @this\n * Listens for document visibility change and makes the current status accessible.\n */\nfunction $$IsDocumentHiddenProvider() {\n  this.$get = ['$document', '$rootScope', function($document, $rootScope) {\n    var doc = $document[0];\n    var hidden = doc && doc.hidden;\n\n    $document.on('visibilitychange', changeListener);\n\n    $rootScope.$on('$destroy', function() {\n      $document.off('visibilitychange', changeListener);\n    });\n\n    function changeListener() {\n      hidden = doc.hidden;\n    }\n\n    return function() {\n      return hidden;\n    };\n  }];\n}\n\n/**\n * @ngdoc service\n * @name $exceptionHandler\n * @requires ng.$log\n * @this\n *\n * @description\n * Any uncaught exception in angular expressions is delegated to this service.\n * The default implementation simply delegates to `$log.error` which logs it into\n * the browser console.\n *\n * In unit tests, if `angular-mocks.js` is loaded, this service is overridden by\n * {@link ngMock.$exceptionHandler mock $exceptionHandler} which aids in testing.\n *\n * ## Example:\n *\n * The example below will overwrite the default `$exceptionHandler` in order to (a) log uncaught\n * errors to the backend for later inspection by the developers and (b) to use `$log.warn()` instead\n * of `$log.error()`.\n *\n * ```js\n *   angular.\n *     module('exceptionOverwrite', []).\n *     factory('$exceptionHandler', ['$log', 'logErrorsToBackend', function($log, logErrorsToBackend) {\n *       return function myExceptionHandler(exception, cause) {\n *         logErrorsToBackend(exception, cause);\n *         $log.warn(exception, cause);\n *       };\n *     }]);\n * ```\n *\n * <hr />\n * Note, that code executed in event-listeners (even those registered using jqLite's `on`/`bind`\n * methods) does not delegate exceptions to the {@link ng.$exceptionHandler $exceptionHandler}\n * (unless executed during a digest).\n *\n * If you wish, you can manually delegate exceptions, e.g.\n * `try { ... } catch(e) { $exceptionHandler(e); }`\n *\n * @param {Error} exception Exception associated with the error.\n * @param {string=} cause Optional information about the context in which\n *       the error was thrown.\n *\n */\nfunction $ExceptionHandlerProvider() {\n  this.$get = ['$log', function($log) {\n    return function(exception, cause) {\n      $log.error.apply($log, arguments);\n    };\n  }];\n}\n\nvar $$ForceReflowProvider = /** @this */ function() {\n  this.$get = ['$document', function($document) {\n    return function(domNode) {\n      //the line below will force the browser to perform a repaint so\n      //that all the animated elements within the animation frame will\n      //be properly updated and drawn on screen. This is required to\n      //ensure that the preparation animation is properly flushed so that\n      //the active state picks up from there. DO NOT REMOVE THIS LINE.\n      //DO NOT OPTIMIZE THIS LINE. THE MINIFIER WILL REMOVE IT OTHERWISE WHICH\n      //WILL RESULT IN AN UNPREDICTABLE BUG THAT IS VERY HARD TO TRACK DOWN AND\n      //WILL TAKE YEARS AWAY FROM YOUR LIFE.\n      if (domNode) {\n        if (!domNode.nodeType && domNode instanceof jqLite) {\n          domNode = domNode[0];\n        }\n      } else {\n        domNode = $document[0].body;\n      }\n      return domNode.offsetWidth + 1;\n    };\n  }];\n};\n\nvar APPLICATION_JSON = 'application/json';\nvar CONTENT_TYPE_APPLICATION_JSON = {'Content-Type': APPLICATION_JSON + ';charset=utf-8'};\nvar JSON_START = /^\\[|^\\{(?!\\{)/;\nvar JSON_ENDS = {\n  '[': /]$/,\n  '{': /}$/\n};\nvar JSON_PROTECTION_PREFIX = /^\\)]\\}',?\\n/;\nvar $httpMinErr = minErr('$http');\n\nfunction serializeValue(v) {\n  if (isObject(v)) {\n    return isDate(v) ? v.toISOString() : toJson(v);\n  }\n  return v;\n}\n\n\n/** @this */\nfunction $HttpParamSerializerProvider() {\n  /**\n   * @ngdoc service\n   * @name $httpParamSerializer\n   * @description\n   *\n   * Default {@link $http `$http`} params serializer that converts objects to strings\n   * according to the following rules:\n   *\n   * * `{'foo': 'bar'}` results in `foo=bar`\n   * * `{'foo': Date.now()}` results in `foo=2015-04-01T09%3A50%3A49.262Z` (`toISOString()` and encoded representation of a Date object)\n   * * `{'foo': ['bar', 'baz']}` results in `foo=bar&foo=baz` (repeated key for each array element)\n   * * `{'foo': {'bar':'baz'}}` results in `foo=%7B%22bar%22%3A%22baz%22%7D` (stringified and encoded representation of an object)\n   *\n   * Note that serializer will sort the request parameters alphabetically.\n   * */\n\n  this.$get = function() {\n    return function ngParamSerializer(params) {\n      if (!params) return '';\n      var parts = [];\n      forEachSorted(params, function(value, key) {\n        if (value === null || isUndefined(value) || isFunction(value)) return;\n        if (isArray(value)) {\n          forEach(value, function(v) {\n            parts.push(encodeUriQuery(key)  + '=' + encodeUriQuery(serializeValue(v)));\n          });\n        } else {\n          parts.push(encodeUriQuery(key) + '=' + encodeUriQuery(serializeValue(value)));\n        }\n      });\n\n      return parts.join('&');\n    };\n  };\n}\n\n/** @this */\nfunction $HttpParamSerializerJQLikeProvider() {\n  /**\n   * @ngdoc service\n   * @name $httpParamSerializerJQLike\n   *\n   * @description\n   *\n   * Alternative {@link $http `$http`} params serializer that follows\n   * jQuery's [`param()`](http://api.jquery.com/jquery.param/) method logic.\n   * The serializer will also sort the params alphabetically.\n   *\n   * To use it for serializing `$http` request parameters, set it as the `paramSerializer` property:\n   *\n   * ```js\n   * $http({\n   *   url: myUrl,\n   *   method: 'GET',\n   *   params: myParams,\n   *   paramSerializer: '$httpParamSerializerJQLike'\n   * });\n   * ```\n   *\n   * It is also possible to set it as the default `paramSerializer` in the\n   * {@link $httpProvider#defaults `$httpProvider`}.\n   *\n   * Additionally, you can inject the serializer and use it explicitly, for example to serialize\n   * form data for submission:\n   *\n   * ```js\n   * .controller(function($http, $httpParamSerializerJQLike) {\n   *   //...\n   *\n   *   $http({\n   *     url: myUrl,\n   *     method: 'POST',\n   *     data: $httpParamSerializerJQLike(myData),\n   *     headers: {\n   *       'Content-Type': 'application/x-www-form-urlencoded'\n   *     }\n   *   });\n   *\n   * });\n   * ```\n   *\n   * */\n  this.$get = function() {\n    return function jQueryLikeParamSerializer(params) {\n      if (!params) return '';\n      var parts = [];\n      serialize(params, '', true);\n      return parts.join('&');\n\n      function serialize(toSerialize, prefix, topLevel) {\n        if (toSerialize === null || isUndefined(toSerialize)) return;\n        if (isArray(toSerialize)) {\n          forEach(toSerialize, function(value, index) {\n            serialize(value, prefix + '[' + (isObject(value) ? index : '') + ']');\n          });\n        } else if (isObject(toSerialize) && !isDate(toSerialize)) {\n          forEachSorted(toSerialize, function(value, key) {\n            serialize(value, prefix +\n                (topLevel ? '' : '[') +\n                key +\n                (topLevel ? '' : ']'));\n          });\n        } else {\n          parts.push(encodeUriQuery(prefix) + '=' + encodeUriQuery(serializeValue(toSerialize)));\n        }\n      }\n    };\n  };\n}\n\nfunction defaultHttpResponseTransform(data, headers) {\n  if (isString(data)) {\n    // Strip json vulnerability protection prefix and trim whitespace\n    var tempData = data.replace(JSON_PROTECTION_PREFIX, '').trim();\n\n    if (tempData) {\n      var contentType = headers('Content-Type');\n      var hasJsonContentType = contentType && (contentType.indexOf(APPLICATION_JSON) === 0);\n\n      if (hasJsonContentType || isJsonLike(tempData)) {\n        try {\n          data = fromJson(tempData);\n        } catch (e) {\n          if (!hasJsonContentType) {\n            return data;\n          }\n          throw $httpMinErr('baddata', 'Data must be a valid JSON object. Received: \"{0}\". ' +\n          'Parse error: \"{1}\"', data, e);\n        }\n      }\n    }\n  }\n\n  return data;\n}\n\nfunction isJsonLike(str) {\n    var jsonStart = str.match(JSON_START);\n    return jsonStart && JSON_ENDS[jsonStart[0]].test(str);\n}\n\n/**\n * Parse headers into key value object\n *\n * @param {string} headers Raw headers as a string\n * @returns {Object} Parsed headers as key value object\n */\nfunction parseHeaders(headers) {\n  var parsed = createMap(), i;\n\n  function fillInParsed(key, val) {\n    if (key) {\n      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n    }\n  }\n\n  if (isString(headers)) {\n    forEach(headers.split('\\n'), function(line) {\n      i = line.indexOf(':');\n      fillInParsed(lowercase(trim(line.substr(0, i))), trim(line.substr(i + 1)));\n    });\n  } else if (isObject(headers)) {\n    forEach(headers, function(headerVal, headerKey) {\n      fillInParsed(lowercase(headerKey), trim(headerVal));\n    });\n  }\n\n  return parsed;\n}\n\n\n/**\n * Returns a function that provides access to parsed headers.\n *\n * Headers are lazy parsed when first requested.\n * @see parseHeaders\n *\n * @param {(string|Object)} headers Headers to provide access to.\n * @returns {function(string=)} Returns a getter function which if called with:\n *\n *   - if called with an argument returns a single header value or null\n *   - if called with no arguments returns an object containing all headers.\n */\nfunction headersGetter(headers) {\n  var headersObj;\n\n  return function(name) {\n    if (!headersObj) headersObj =  parseHeaders(headers);\n\n    if (name) {\n      var value = headersObj[lowercase(name)];\n      if (value === undefined) {\n        value = null;\n      }\n      return value;\n    }\n\n    return headersObj;\n  };\n}\n\n\n/**\n * Chain all given functions\n *\n * This function is used for both request and response transforming\n *\n * @param {*} data Data to transform.\n * @param {function(string=)} headers HTTP headers getter fn.\n * @param {number} status HTTP status code of the response.\n * @param {(Function|Array.<Function>)} fns Function or an array of functions.\n * @returns {*} Transformed data.\n */\nfunction transformData(data, headers, status, fns) {\n  if (isFunction(fns)) {\n    return fns(data, headers, status);\n  }\n\n  forEach(fns, function(fn) {\n    data = fn(data, headers, status);\n  });\n\n  return data;\n}\n\n\nfunction isSuccess(status) {\n  return 200 <= status && status < 300;\n}\n\n\n/**\n * @ngdoc provider\n * @name $httpProvider\n * @this\n *\n * @description\n * Use `$httpProvider` to change the default behavior of the {@link ng.$http $http} service.\n * */\nfunction $HttpProvider() {\n  /**\n   * @ngdoc property\n   * @name $httpProvider#defaults\n   * @description\n   *\n   * Object containing default values for all {@link ng.$http $http} requests.\n   *\n   * - **`defaults.cache`** - {boolean|Object} - A boolean value or object created with\n   * {@link ng.$cacheFactory `$cacheFactory`} to enable or disable caching of HTTP responses\n   * by default. See {@link $http#caching $http Caching} for more information.\n   *\n   * - **`defaults.headers`** - {Object} - Default headers for all $http requests.\n   * Refer to {@link ng.$http#setting-http-headers $http} for documentation on\n   * setting default headers.\n   *     - **`defaults.headers.common`**\n   *     - **`defaults.headers.post`**\n   *     - **`defaults.headers.put`**\n   *     - **`defaults.headers.patch`**\n   *\n   * - **`defaults.jsonpCallbackParam`** - `{string}` - the name of the query parameter that passes the name of the\n   * callback in a JSONP request. The value of this parameter will be replaced with the expression generated by the\n   * {@link $jsonpCallbacks} service. Defaults to `'callback'`.\n   *\n   * - **`defaults.paramSerializer`** - `{string|function(Object<string,string>):string}` - A function\n   *  used to the prepare string representation of request parameters (specified as an object).\n   *  If specified as string, it is interpreted as a function registered with the {@link auto.$injector $injector}.\n   *  Defaults to {@link ng.$httpParamSerializer $httpParamSerializer}.\n   *\n   * - **`defaults.transformRequest`** -\n   * `{Array<function(data, headersGetter)>|function(data, headersGetter)}` -\n   * An array of functions (or a single function) which are applied to the request data.\n   * By default, this is an array with one request transformation function:\n   *\n   *   - If the `data` property of the request configuration object contains an object, serialize it\n   *     into JSON format.\n   *\n   * - **`defaults.transformResponse`** -\n   * `{Array<function(data, headersGetter, status)>|function(data, headersGetter, status)}` -\n   * An array of functions (or a single function) which are applied to the response data. By default,\n   * this is an array which applies one response transformation function that does two things:\n   *\n   *  - If XSRF prefix is detected, strip it\n   *    (see {@link ng.$http#security-considerations Security Considerations in the $http docs}).\n   *  - If the `Content-Type` is `application/json` or the response looks like JSON,\n   *    deserialize it using a JSON parser.\n   *\n   * - **`defaults.xsrfCookieName`** - {string} - Name of cookie containing the XSRF token.\n   * Defaults value is `'XSRF-TOKEN'`.\n   *\n   * - **`defaults.xsrfHeaderName`** - {string} - Name of HTTP header to populate with the\n   * XSRF token. Defaults value is `'X-XSRF-TOKEN'`.\n   *\n   **/\n  var defaults = this.defaults = {\n    // transform incoming response data\n    transformResponse: [defaultHttpResponseTransform],\n\n    // transform outgoing request data\n    transformRequest: [function(d) {\n      return isObject(d) && !isFile(d) && !isBlob(d) && !isFormData(d) ? toJson(d) : d;\n    }],\n\n    // default headers\n    headers: {\n      common: {\n        'Accept': 'application/json, text/plain, */*'\n      },\n      post:   shallowCopy(CONTENT_TYPE_APPLICATION_JSON),\n      put:    shallowCopy(CONTENT_TYPE_APPLICATION_JSON),\n      patch:  shallowCopy(CONTENT_TYPE_APPLICATION_JSON)\n    },\n\n    xsrfCookieName: 'XSRF-TOKEN',\n    xsrfHeaderName: 'X-XSRF-TOKEN',\n\n    paramSerializer: '$httpParamSerializer',\n\n    jsonpCallbackParam: 'callback'\n  };\n\n  var useApplyAsync = false;\n  /**\n   * @ngdoc method\n   * @name $httpProvider#useApplyAsync\n   * @description\n   *\n   * Configure $http service to combine processing of multiple http responses received at around\n   * the same time via {@link ng.$rootScope.Scope#$applyAsync $rootScope.$applyAsync}. This can result in\n   * significant performance improvement for bigger applications that make many HTTP requests\n   * concurrently (common during application bootstrap).\n   *\n   * Defaults to false. If no value is specified, returns the current configured value.\n   *\n   * @param {boolean=} value If true, when requests are loaded, they will schedule a deferred\n   *    \"apply\" on the next tick, giving time for subsequent requests in a roughly ~10ms window\n   *    to load and share the same digest cycle.\n   *\n   * @returns {boolean|Object} If a value is specified, returns the $httpProvider for chaining.\n   *    otherwise, returns the current configured value.\n   **/\n  this.useApplyAsync = function(value) {\n    if (isDefined(value)) {\n      useApplyAsync = !!value;\n      return this;\n    }\n    return useApplyAsync;\n  };\n\n  /**\n   * @ngdoc property\n   * @name $httpProvider#interceptors\n   * @description\n   *\n   * Array containing service factories for all synchronous or asynchronous {@link ng.$http $http}\n   * pre-processing of request or postprocessing of responses.\n   *\n   * These service factories are ordered by request, i.e. they are applied in the same order as the\n   * array, on request, but reverse order, on response.\n   *\n   * {@link ng.$http#interceptors Interceptors detailed info}\n   **/\n  var interceptorFactories = this.interceptors = [];\n\n  this.$get = ['$browser', '$httpBackend', '$$cookieReader', '$cacheFactory', '$rootScope', '$q', '$injector', '$sce',\n      function($browser, $httpBackend, $$cookieReader, $cacheFactory, $rootScope, $q, $injector, $sce) {\n\n    var defaultCache = $cacheFactory('$http');\n\n    /**\n     * Make sure that default param serializer is exposed as a function\n     */\n    defaults.paramSerializer = isString(defaults.paramSerializer) ?\n      $injector.get(defaults.paramSerializer) : defaults.paramSerializer;\n\n    /**\n     * Interceptors stored in reverse order. Inner interceptors before outer interceptors.\n     * The reversal is needed so that we can build up the interception chain around the\n     * server request.\n     */\n    var reversedInterceptors = [];\n\n    forEach(interceptorFactories, function(interceptorFactory) {\n      reversedInterceptors.unshift(isString(interceptorFactory)\n          ? $injector.get(interceptorFactory) : $injector.invoke(interceptorFactory));\n    });\n\n    /**\n     * @ngdoc service\n     * @kind function\n     * @name $http\n     * @requires ng.$httpBackend\n     * @requires $cacheFactory\n     * @requires $rootScope\n     * @requires $q\n     * @requires $injector\n     *\n     * @description\n     * The `$http` service is a core Angular service that facilitates communication with the remote\n     * HTTP servers via the browser's [XMLHttpRequest](https://developer.mozilla.org/en/xmlhttprequest)\n     * object or via [JSONP](http://en.wikipedia.org/wiki/JSONP).\n     *\n     * For unit testing applications that use `$http` service, see\n     * {@link ngMock.$httpBackend $httpBackend mock}.\n     *\n     * For a higher level of abstraction, please check out the {@link ngResource.$resource\n     * $resource} service.\n     *\n     * The $http API is based on the {@link ng.$q deferred/promise APIs} exposed by\n     * the $q service. While for simple usage patterns this doesn't matter much, for advanced usage\n     * it is important to familiarize yourself with these APIs and the guarantees they provide.\n     *\n     *\n     * ## General usage\n     * The `$http` service is a function which takes a single argument — a {@link $http#usage configuration object} —\n     * that is used to generate an HTTP request and returns  a {@link ng.$q promise}.\n     *\n     * ```js\n     *   // Simple GET request example:\n     *   $http({\n     *     method: 'GET',\n     *     url: '/someUrl'\n     *   }).then(function successCallback(response) {\n     *       // this callback will be called asynchronously\n     *       // when the response is available\n     *     }, function errorCallback(response) {\n     *       // called asynchronously if an error occurs\n     *       // or server returns response with an error status.\n     *     });\n     * ```\n     *\n     * The response object has these properties:\n     *\n     *   - **data** – `{string|Object}` – The response body transformed with the transform\n     *     functions.\n     *   - **status** – `{number}` – HTTP status code of the response.\n     *   - **headers** – `{function([headerName])}` – Header getter function.\n     *   - **config** – `{Object}` – The configuration object that was used to generate the request.\n     *   - **statusText** – `{string}` – HTTP status text of the response.\n     *   - **xhrStatus** – `{string}` – Status of the XMLHttpRequest (`complete`, `error`, `timeout` or `abort`).\n     *\n     * A response status code between 200 and 299 is considered a success status and will result in\n     * the success callback being called. Any response status code outside of that range is\n     * considered an error status and will result in the error callback being called.\n     * Also, status codes less than -1 are normalized to zero. -1 usually means the request was\n     * aborted, e.g. using a `config.timeout`.\n     * Note that if the response is a redirect, XMLHttpRequest will transparently follow it, meaning\n     * that the outcome (success or error) will be determined by the final response status code.\n     *\n     *\n     * ## Shortcut methods\n     *\n     * Shortcut methods are also available. All shortcut methods require passing in the URL, and\n     * request data must be passed in for POST/PUT requests. An optional config can be passed as the\n     * last argument.\n     *\n     * ```js\n     *   $http.get('/someUrl', config).then(successCallback, errorCallback);\n     *   $http.post('/someUrl', data, config).then(successCallback, errorCallback);\n     * ```\n     *\n     * Complete list of shortcut methods:\n     *\n     * - {@link ng.$http#get $http.get}\n     * - {@link ng.$http#head $http.head}\n     * - {@link ng.$http#post $http.post}\n     * - {@link ng.$http#put $http.put}\n     * - {@link ng.$http#delete $http.delete}\n     * - {@link ng.$http#jsonp $http.jsonp}\n     * - {@link ng.$http#patch $http.patch}\n     *\n     *\n     * ## Writing Unit Tests that use $http\n     * When unit testing (using {@link ngMock ngMock}), it is necessary to call\n     * {@link ngMock.$httpBackend#flush $httpBackend.flush()} to flush each pending\n     * request using trained responses.\n     *\n     * ```\n     * $httpBackend.expectGET(...);\n     * $http.get(...);\n     * $httpBackend.flush();\n     * ```\n     *\n     * ## Setting HTTP Headers\n     *\n     * The $http service will automatically add certain HTTP headers to all requests. These defaults\n     * can be fully configured by accessing the `$httpProvider.defaults.headers` configuration\n     * object, which currently contains this default configuration:\n     *\n     * - `$httpProvider.defaults.headers.common` (headers that are common for all requests):\n     *   - <code>Accept: application/json, text/plain, \\*&#65279;/&#65279;\\*</code>\n     * - `$httpProvider.defaults.headers.post`: (header defaults for POST requests)\n     *   - `Content-Type: application/json`\n     * - `$httpProvider.defaults.headers.put` (header defaults for PUT requests)\n     *   - `Content-Type: application/json`\n     *\n     * To add or overwrite these defaults, simply add or remove a property from these configuration\n     * objects. To add headers for an HTTP method other than POST or PUT, simply add a new object\n     * with the lowercased HTTP method name as the key, e.g.\n     * `$httpProvider.defaults.headers.get = { 'My-Header' : 'value' }`.\n     *\n     * The defaults can also be set at runtime via the `$http.defaults` object in the same\n     * fashion. For example:\n     *\n     * ```\n     * module.run(function($http) {\n     *   $http.defaults.headers.common.Authorization = 'Basic YmVlcDpib29w';\n     * });\n     * ```\n     *\n     * In addition, you can supply a `headers` property in the config object passed when\n     * calling `$http(config)`, which overrides the defaults without changing them globally.\n     *\n     * To explicitly remove a header automatically added via $httpProvider.defaults.headers on a per request basis,\n     * Use the `headers` property, setting the desired header to `undefined`. For example:\n     *\n     * ```js\n     * var req = {\n     *  method: 'POST',\n     *  url: 'http://example.com',\n     *  headers: {\n     *    'Content-Type': undefined\n     *  },\n     *  data: { test: 'test' }\n     * }\n     *\n     * $http(req).then(function(){...}, function(){...});\n     * ```\n     *\n     * ## Transforming Requests and Responses\n     *\n     * Both requests and responses can be transformed using transformation functions: `transformRequest`\n     * and `transformResponse`. These properties can be a single function that returns\n     * the transformed value (`function(data, headersGetter, status)`) or an array of such transformation functions,\n     * which allows you to `push` or `unshift` a new transformation function into the transformation chain.\n     *\n     * <div class=\"alert alert-warning\">\n     * **Note:** Angular does not make a copy of the `data` parameter before it is passed into the `transformRequest` pipeline.\n     * That means changes to the properties of `data` are not local to the transform function (since Javascript passes objects by reference).\n     * For example, when calling `$http.get(url, $scope.myObject)`, modifications to the object's properties in a transformRequest\n     * function will be reflected on the scope and in any templates where the object is data-bound.\n     * To prevent this, transform functions should have no side-effects.\n     * If you need to modify properties, it is recommended to make a copy of the data, or create new object to return.\n     * </div>\n     *\n     * ### Default Transformations\n     *\n     * The `$httpProvider` provider and `$http` service expose `defaults.transformRequest` and\n     * `defaults.transformResponse` properties. If a request does not provide its own transformations\n     * then these will be applied.\n     *\n     * You can augment or replace the default transformations by modifying these properties by adding to or\n     * replacing the array.\n     *\n     * Angular provides the following default transformations:\n     *\n     * Request transformations (`$httpProvider.defaults.transformRequest` and `$http.defaults.transformRequest`) is\n     * an array with one function that does the following:\n     *\n     * - If the `data` property of the request configuration object contains an object, serialize it\n     *   into JSON format.\n     *\n     * Response transformations (`$httpProvider.defaults.transformResponse` and `$http.defaults.transformResponse`) is\n     * an array with one function that does the following:\n     *\n     *  - If XSRF prefix is detected, strip it (see Security Considerations section below).\n     *  - If the `Content-Type` is `application/json` or the response looks like JSON,\n   *      deserialize it using a JSON parser.\n     *\n     *\n     * ### Overriding the Default Transformations Per Request\n     *\n     * If you wish to override the request/response transformations only for a single request then provide\n     * `transformRequest` and/or `transformResponse` properties on the configuration object passed\n     * into `$http`.\n     *\n     * Note that if you provide these properties on the config object the default transformations will be\n     * overwritten. If you wish to augment the default transformations then you must include them in your\n     * local transformation array.\n     *\n     * The following code demonstrates adding a new response transformation to be run after the default response\n     * transformations have been run.\n     *\n     * ```js\n     * function appendTransform(defaults, transform) {\n     *\n     *   // We can't guarantee that the default transformation is an array\n     *   defaults = angular.isArray(defaults) ? defaults : [defaults];\n     *\n     *   // Append the new transformation to the defaults\n     *   return defaults.concat(transform);\n     * }\n     *\n     * $http({\n     *   url: '...',\n     *   method: 'GET',\n     *   transformResponse: appendTransform($http.defaults.transformResponse, function(value) {\n     *     return doTransform(value);\n     *   })\n     * });\n     * ```\n     *\n     *\n     * ## Caching\n     *\n     * {@link ng.$http `$http`} responses are not cached by default. To enable caching, you must\n     * set the config.cache value or the default cache value to TRUE or to a cache object (created\n     * with {@link ng.$cacheFactory `$cacheFactory`}). If defined, the value of config.cache takes\n     * precedence over the default cache value.\n     *\n     * In order to:\n     *   * cache all responses - set the default cache value to TRUE or to a cache object\n     *   * cache a specific response - set config.cache value to TRUE or to a cache object\n     *\n     * If caching is enabled, but neither the default cache nor config.cache are set to a cache object,\n     * then the default `$cacheFactory(\"$http\")` object is used.\n     *\n     * The default cache value can be set by updating the\n     * {@link ng.$http#defaults `$http.defaults.cache`} property or the\n     * {@link $httpProvider#defaults `$httpProvider.defaults.cache`} property.\n     *\n     * When caching is enabled, {@link ng.$http `$http`} stores the response from the server using\n     * the relevant cache object. The next time the same request is made, the response is returned\n     * from the cache without sending a request to the server.\n     *\n     * Take note that:\n     *\n     *   * Only GET and JSONP requests are cached.\n     *   * The cache key is the request URL including search parameters; headers are not considered.\n     *   * Cached responses are returned asynchronously, in the same way as responses from the server.\n     *   * If multiple identical requests are made using the same cache, which is not yet populated,\n     *     one request will be made to the server and remaining requests will return the same response.\n     *   * A cache-control header on the response does not affect if or how responses are cached.\n     *\n     *\n     * ## Interceptors\n     *\n     * Before you start creating interceptors, be sure to understand the\n     * {@link ng.$q $q and deferred/promise APIs}.\n     *\n     * For purposes of global error handling, authentication, or any kind of synchronous or\n     * asynchronous pre-processing of request or postprocessing of responses, it is desirable to be\n     * able to intercept requests before they are handed to the server and\n     * responses before they are handed over to the application code that\n     * initiated these requests. The interceptors leverage the {@link ng.$q\n     * promise APIs} to fulfill this need for both synchronous and asynchronous pre-processing.\n     *\n     * The interceptors are service factories that are registered with the `$httpProvider` by\n     * adding them to the `$httpProvider.interceptors` array. The factory is called and\n     * injected with dependencies (if specified) and returns the interceptor.\n     *\n     * There are two kinds of interceptors (and two kinds of rejection interceptors):\n     *\n     *   * `request`: interceptors get called with a http {@link $http#usage config} object. The function is free to\n     *     modify the `config` object or create a new one. The function needs to return the `config`\n     *     object directly, or a promise containing the `config` or a new `config` object.\n     *   * `requestError`: interceptor gets called when a previous interceptor threw an error or\n     *     resolved with a rejection.\n     *   * `response`: interceptors get called with http `response` object. The function is free to\n     *     modify the `response` object or create a new one. The function needs to return the `response`\n     *     object directly, or as a promise containing the `response` or a new `response` object.\n     *   * `responseError`: interceptor gets called when a previous interceptor threw an error or\n     *     resolved with a rejection.\n     *\n     *\n     * ```js\n     *   // register the interceptor as a service\n     *   $provide.factory('myHttpInterceptor', function($q, dependency1, dependency2) {\n     *     return {\n     *       // optional method\n     *       'request': function(config) {\n     *         // do something on success\n     *         return config;\n     *       },\n     *\n     *       // optional method\n     *      'requestError': function(rejection) {\n     *         // do something on error\n     *         if (canRecover(rejection)) {\n     *           return responseOrNewPromise\n     *         }\n     *         return $q.reject(rejection);\n     *       },\n     *\n     *\n     *\n     *       // optional method\n     *       'response': function(response) {\n     *         // do something on success\n     *         return response;\n     *       },\n     *\n     *       // optional method\n     *      'responseError': function(rejection) {\n     *         // do something on error\n     *         if (canRecover(rejection)) {\n     *           return responseOrNewPromise\n     *         }\n     *         return $q.reject(rejection);\n     *       }\n     *     };\n     *   });\n     *\n     *   $httpProvider.interceptors.push('myHttpInterceptor');\n     *\n     *\n     *   // alternatively, register the interceptor via an anonymous factory\n     *   $httpProvider.interceptors.push(function($q, dependency1, dependency2) {\n     *     return {\n     *      'request': function(config) {\n     *          // same as above\n     *       },\n     *\n     *       'response': function(response) {\n     *          // same as above\n     *       }\n     *     };\n     *   });\n     * ```\n     *\n     * ## Security Considerations\n     *\n     * When designing web applications, consider security threats from:\n     *\n     * - [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)\n     * - [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery)\n     *\n     * Both server and the client must cooperate in order to eliminate these threats. Angular comes\n     * pre-configured with strategies that address these issues, but for this to work backend server\n     * cooperation is required.\n     *\n     * ### JSON Vulnerability Protection\n     *\n     * A [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)\n     * allows third party website to turn your JSON resource URL into\n     * [JSONP](http://en.wikipedia.org/wiki/JSONP) request under some conditions. To\n     * counter this your server can prefix all JSON requests with following string `\")]}',\\n\"`.\n     * Angular will automatically strip the prefix before processing it as JSON.\n     *\n     * For example if your server needs to return:\n     * ```js\n     * ['one','two']\n     * ```\n     *\n     * which is vulnerable to attack, your server can return:\n     * ```js\n     * )]}',\n     * ['one','two']\n     * ```\n     *\n     * Angular will strip the prefix, before processing the JSON.\n     *\n     *\n     * ### Cross Site Request Forgery (XSRF) Protection\n     *\n     * [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery) is an attack technique by\n     * which the attacker can trick an authenticated user into unknowingly executing actions on your\n     * website. Angular provides a mechanism to counter XSRF. When performing XHR requests, the\n     * $http service reads a token from a cookie (by default, `XSRF-TOKEN`) and sets it as an HTTP\n     * header (`X-XSRF-TOKEN`). Since only JavaScript that runs on your domain could read the\n     * cookie, your server can be assured that the XHR came from JavaScript running on your domain.\n     * The header will not be set for cross-domain requests.\n     *\n     * To take advantage of this, your server needs to set a token in a JavaScript readable session\n     * cookie called `XSRF-TOKEN` on the first HTTP GET request. On subsequent XHR requests the\n     * server can verify that the cookie matches `X-XSRF-TOKEN` HTTP header, and therefore be sure\n     * that only JavaScript running on your domain could have sent the request. The token must be\n     * unique for each user and must be verifiable by the server (to prevent the JavaScript from\n     * making up its own tokens). We recommend that the token is a digest of your site's\n     * authentication cookie with a [salt](https://en.wikipedia.org/wiki/Salt_(cryptography&#41;)\n     * for added security.\n     *\n     * The name of the headers can be specified using the xsrfHeaderName and xsrfCookieName\n     * properties of either $httpProvider.defaults at config-time, $http.defaults at run-time,\n     * or the per-request config object.\n     *\n     * In order to prevent collisions in environments where multiple Angular apps share the\n     * same domain or subdomain, we recommend that each application uses unique cookie name.\n     *\n     * @param {object} config Object describing the request to be made and how it should be\n     *    processed. The object has following properties:\n     *\n     *    - **method** – `{string}` – HTTP method (e.g. 'GET', 'POST', etc)\n     *    - **url** – `{string|TrustedObject}` – Absolute or relative URL of the resource that is being requested;\n     *      or an object created by a call to `$sce.trustAsResourceUrl(url)`.\n     *    - **params** – `{Object.<string|Object>}` – Map of strings or objects which will be serialized\n     *      with the `paramSerializer` and appended as GET parameters.\n     *    - **data** – `{string|Object}` – Data to be sent as the request message data.\n     *    - **headers** – `{Object}` – Map of strings or functions which return strings representing\n     *      HTTP headers to send to the server. If the return value of a function is null, the\n     *      header will not be sent. Functions accept a config object as an argument.\n     *    - **eventHandlers** - `{Object}` - Event listeners to be bound to the XMLHttpRequest object.\n     *      To bind events to the XMLHttpRequest upload object, use `uploadEventHandlers`.\n     *      The handler will be called in the context of a `$apply` block.\n     *    - **uploadEventHandlers** - `{Object}` - Event listeners to be bound to the XMLHttpRequest upload\n     *      object. To bind events to the XMLHttpRequest object, use `eventHandlers`.\n     *      The handler will be called in the context of a `$apply` block.\n     *    - **xsrfHeaderName** – `{string}` – Name of HTTP header to populate with the XSRF token.\n     *    - **xsrfCookieName** – `{string}` – Name of cookie containing the XSRF token.\n     *    - **transformRequest** –\n     *      `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –\n     *      transform function or an array of such functions. The transform function takes the http\n     *      request body and headers and returns its transformed (typically serialized) version.\n     *      See {@link ng.$http#overriding-the-default-transformations-per-request\n     *      Overriding the Default Transformations}\n     *    - **transformResponse** –\n     *      `{function(data, headersGetter, status)|Array.<function(data, headersGetter, status)>}` –\n     *      transform function or an array of such functions. The transform function takes the http\n     *      response body, headers and status and returns its transformed (typically deserialized) version.\n     *      See {@link ng.$http#overriding-the-default-transformations-per-request\n     *      Overriding the Default Transformations}\n     *    - **paramSerializer** - `{string|function(Object<string,string>):string}` - A function used to\n     *      prepare the string representation of request parameters (specified as an object).\n     *      If specified as string, it is interpreted as function registered with the\n     *      {@link $injector $injector}, which means you can create your own serializer\n     *      by registering it as a {@link auto.$provide#service service}.\n     *      The default serializer is the {@link $httpParamSerializer $httpParamSerializer};\n     *      alternatively, you can use the {@link $httpParamSerializerJQLike $httpParamSerializerJQLike}\n     *    - **cache** – `{boolean|Object}` – A boolean value or object created with\n     *      {@link ng.$cacheFactory `$cacheFactory`} to enable or disable caching of the HTTP response.\n     *      See {@link $http#caching $http Caching} for more information.\n     *    - **timeout** – `{number|Promise}` – timeout in milliseconds, or {@link ng.$q promise}\n     *      that should abort the request when resolved.\n     *    - **withCredentials** - `{boolean}` - whether to set the `withCredentials` flag on the\n     *      XHR object. See [requests with credentials](https://developer.mozilla.org/docs/Web/HTTP/Access_control_CORS#Requests_with_credentials)\n     *      for more information.\n     *    - **responseType** - `{string}` - see\n     *      [XMLHttpRequest.responseType](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#xmlhttprequest-responsetype).\n     *\n     * @returns {HttpPromise} Returns a {@link ng.$q `Promise}` that will be resolved to a response object\n     *                        when the request succeeds or fails.\n     *\n     *\n     * @property {Array.<Object>} pendingRequests Array of config objects for currently pending\n     *   requests. This is primarily meant to be used for debugging purposes.\n     *\n     *\n     * @example\n<example module=\"httpExample\" name=\"http-service\">\n<file name=\"index.html\">\n  <div ng-controller=\"FetchController\">\n    <select ng-model=\"method\" aria-label=\"Request method\">\n      <option>GET</option>\n      <option>JSONP</option>\n    </select>\n    <input type=\"text\" ng-model=\"url\" size=\"80\" aria-label=\"URL\" />\n    <button id=\"fetchbtn\" ng-click=\"fetch()\">fetch</button><br>\n    <button id=\"samplegetbtn\" ng-click=\"updateModel('GET', 'http-hello.html')\">Sample GET</button>\n    <button id=\"samplejsonpbtn\"\n      ng-click=\"updateModel('JSONP',\n                    'https://angularjs.org/greet.php?name=Super%20Hero')\">\n      Sample JSONP\n    </button>\n    <button id=\"invalidjsonpbtn\"\n      ng-click=\"updateModel('JSONP', 'https://angularjs.org/doesntexist')\">\n        Invalid JSONP\n      </button>\n    <pre>http status code: {{status}}</pre>\n    <pre>http response data: {{data}}</pre>\n  </div>\n</file>\n<file name=\"script.js\">\n  angular.module('httpExample', [])\n    .config(['$sceDelegateProvider', function($sceDelegateProvider) {\n      // We must whitelist the JSONP endpoint that we are using to show that we trust it\n      $sceDelegateProvider.resourceUrlWhitelist([\n        'self',\n        'https://angularjs.org/**'\n      ]);\n    }])\n    .controller('FetchController', ['$scope', '$http', '$templateCache',\n      function($scope, $http, $templateCache) {\n        $scope.method = 'GET';\n        $scope.url = 'http-hello.html';\n\n        $scope.fetch = function() {\n          $scope.code = null;\n          $scope.response = null;\n\n          $http({method: $scope.method, url: $scope.url, cache: $templateCache}).\n            then(function(response) {\n              $scope.status = response.status;\n              $scope.data = response.data;\n            }, function(response) {\n              $scope.data = response.data || 'Request failed';\n              $scope.status = response.status;\n          });\n        };\n\n        $scope.updateModel = function(method, url) {\n          $scope.method = method;\n          $scope.url = url;\n        };\n      }]);\n</file>\n<file name=\"http-hello.html\">\n  Hello, $http!\n</file>\n<file name=\"protractor.js\" type=\"protractor\">\n  var status = element(by.binding('status'));\n  var data = element(by.binding('data'));\n  var fetchBtn = element(by.id('fetchbtn'));\n  var sampleGetBtn = element(by.id('samplegetbtn'));\n  var invalidJsonpBtn = element(by.id('invalidjsonpbtn'));\n\n  it('should make an xhr GET request', function() {\n    sampleGetBtn.click();\n    fetchBtn.click();\n    expect(status.getText()).toMatch('200');\n    expect(data.getText()).toMatch(/Hello, \\$http!/);\n  });\n\n// Commented out due to flakes. See https://github.com/angular/angular.js/issues/9185\n// it('should make a JSONP request to angularjs.org', function() {\n//   var sampleJsonpBtn = element(by.id('samplejsonpbtn'));\n//   sampleJsonpBtn.click();\n//   fetchBtn.click();\n//   expect(status.getText()).toMatch('200');\n//   expect(data.getText()).toMatch(/Super Hero!/);\n// });\n\n  it('should make JSONP request to invalid URL and invoke the error handler',\n      function() {\n    invalidJsonpBtn.click();\n    fetchBtn.click();\n    expect(status.getText()).toMatch('0');\n    expect(data.getText()).toMatch('Request failed');\n  });\n</file>\n</example>\n     */\n    function $http(requestConfig) {\n\n      if (!isObject(requestConfig)) {\n        throw minErr('$http')('badreq', 'Http request configuration must be an object.  Received: {0}', requestConfig);\n      }\n\n      if (!isString($sce.valueOf(requestConfig.url))) {\n        throw minErr('$http')('badreq', 'Http request configuration url must be a string or a $sce trusted object.  Received: {0}', requestConfig.url);\n      }\n\n      var config = extend({\n        method: 'get',\n        transformRequest: defaults.transformRequest,\n        transformResponse: defaults.transformResponse,\n        paramSerializer: defaults.paramSerializer,\n        jsonpCallbackParam: defaults.jsonpCallbackParam\n      }, requestConfig);\n\n      config.headers = mergeHeaders(requestConfig);\n      config.method = uppercase(config.method);\n      config.paramSerializer = isString(config.paramSerializer) ?\n          $injector.get(config.paramSerializer) : config.paramSerializer;\n\n      $browser.$$incOutstandingRequestCount();\n\n      var requestInterceptors = [];\n      var responseInterceptors = [];\n      var promise = $q.resolve(config);\n\n      // apply interceptors\n      forEach(reversedInterceptors, function(interceptor) {\n        if (interceptor.request || interceptor.requestError) {\n          requestInterceptors.unshift(interceptor.request, interceptor.requestError);\n        }\n        if (interceptor.response || interceptor.responseError) {\n          responseInterceptors.push(interceptor.response, interceptor.responseError);\n        }\n      });\n\n      promise = chainInterceptors(promise, requestInterceptors);\n      promise = promise.then(serverRequest);\n      promise = chainInterceptors(promise, responseInterceptors);\n      promise = promise.finally(completeOutstandingRequest);\n\n      return promise;\n\n\n      function chainInterceptors(promise, interceptors) {\n        for (var i = 0, ii = interceptors.length; i < ii;) {\n          var thenFn = interceptors[i++];\n          var rejectFn = interceptors[i++];\n\n          promise = promise.then(thenFn, rejectFn);\n        }\n\n        interceptors.length = 0;\n\n        return promise;\n      }\n\n      function completeOutstandingRequest() {\n        $browser.$$completeOutstandingRequest(noop);\n      }\n\n      function executeHeaderFns(headers, config) {\n        var headerContent, processedHeaders = {};\n\n        forEach(headers, function(headerFn, header) {\n          if (isFunction(headerFn)) {\n            headerContent = headerFn(config);\n            if (headerContent != null) {\n              processedHeaders[header] = headerContent;\n            }\n          } else {\n            processedHeaders[header] = headerFn;\n          }\n        });\n\n        return processedHeaders;\n      }\n\n      function mergeHeaders(config) {\n        var defHeaders = defaults.headers,\n            reqHeaders = extend({}, config.headers),\n            defHeaderName, lowercaseDefHeaderName, reqHeaderName;\n\n        defHeaders = extend({}, defHeaders.common, defHeaders[lowercase(config.method)]);\n\n        // using for-in instead of forEach to avoid unnecessary iteration after header has been found\n        defaultHeadersIteration:\n        for (defHeaderName in defHeaders) {\n          lowercaseDefHeaderName = lowercase(defHeaderName);\n\n          for (reqHeaderName in reqHeaders) {\n            if (lowercase(reqHeaderName) === lowercaseDefHeaderName) {\n              continue defaultHeadersIteration;\n            }\n          }\n\n          reqHeaders[defHeaderName] = defHeaders[defHeaderName];\n        }\n\n        // execute if header value is a function for merged headers\n        return executeHeaderFns(reqHeaders, shallowCopy(config));\n      }\n\n      function serverRequest(config) {\n        var headers = config.headers;\n        var reqData = transformData(config.data, headersGetter(headers), undefined, config.transformRequest);\n\n        // strip content-type if data is undefined\n        if (isUndefined(reqData)) {\n          forEach(headers, function(value, header) {\n            if (lowercase(header) === 'content-type') {\n              delete headers[header];\n            }\n          });\n        }\n\n        if (isUndefined(config.withCredentials) && !isUndefined(defaults.withCredentials)) {\n          config.withCredentials = defaults.withCredentials;\n        }\n\n        // send request\n        return sendReq(config, reqData).then(transformResponse, transformResponse);\n      }\n\n      function transformResponse(response) {\n        // make a copy since the response must be cacheable\n        var resp = extend({}, response);\n        resp.data = transformData(response.data, response.headers, response.status,\n                                  config.transformResponse);\n        return (isSuccess(response.status))\n          ? resp\n          : $q.reject(resp);\n      }\n    }\n\n    $http.pendingRequests = [];\n\n    /**\n     * @ngdoc method\n     * @name $http#get\n     *\n     * @description\n     * Shortcut method to perform `GET` request.\n     *\n     * @param {string|TrustedObject} url Absolute or relative URL of the resource that is being requested;\n     *                                   or an object created by a call to `$sce.trustAsResourceUrl(url)`.\n     * @param {Object=} config Optional configuration object. See https://docs.angularjs.org/api/ng/service/$http#usage\n     * @returns {HttpPromise} Future object\n     */\n\n    /**\n     * @ngdoc method\n     * @name $http#delete\n     *\n     * @description\n     * Shortcut method to perform `DELETE` request.\n     *\n     * @param {string|TrustedObject} url Absolute or relative URL of the resource that is being requested;\n     *                                   or an object created by a call to `$sce.trustAsResourceUrl(url)`.\n     * @param {Object=} config Optional configuration object. See https://docs.angularjs.org/api/ng/service/$http#usage\n     * @returns {HttpPromise} Future object\n     */\n\n    /**\n     * @ngdoc method\n     * @name $http#head\n     *\n     * @description\n     * Shortcut method to perform `HEAD` request.\n     *\n     * @param {string|TrustedObject} url Absolute or relative URL of the resource that is being requested;\n     *                                   or an object created by a call to `$sce.trustAsResourceUrl(url)`.\n     * @param {Object=} config Optional configuration object. See https://docs.angularjs.org/api/ng/service/$http#usage\n     * @returns {HttpPromise} Future object\n     */\n\n    /**\n     * @ngdoc method\n     * @name $http#jsonp\n     *\n     * @description\n     * Shortcut method to perform `JSONP` request.\n     *\n     * Note that, since JSONP requests are sensitive because the response is given full access to the browser,\n     * the url must be declared, via {@link $sce} as a trusted resource URL.\n     * You can trust a URL by adding it to the whitelist via\n     * {@link $sceDelegateProvider#resourceUrlWhitelist  `$sceDelegateProvider.resourceUrlWhitelist`} or\n     * by explicitly trusting the URL via {@link $sce#trustAsResourceUrl `$sce.trustAsResourceUrl(url)`}.\n     *\n     * You should avoid generating the URL for the JSONP request from user provided data.\n     * Provide additional query parameters via `params` property of the `config` parameter, rather than\n     * modifying the URL itself.\n     *\n     * JSONP requests must specify a callback to be used in the response from the server. This callback\n     * is passed as a query parameter in the request. You must specify the name of this parameter by\n     * setting the `jsonpCallbackParam` property on the request config object.\n     *\n     * ```\n     * $http.jsonp('some/trusted/url', {jsonpCallbackParam: 'callback'})\n     * ```\n     *\n     * You can also specify a default callback parameter name in `$http.defaults.jsonpCallbackParam`.\n     * Initially this is set to `'callback'`.\n     *\n     * <div class=\"alert alert-danger\">\n     * You can no longer use the `JSON_CALLBACK` string as a placeholder for specifying where the callback\n     * parameter value should go.\n     * </div>\n     *\n     * If you would like to customise where and how the callbacks are stored then try overriding\n     * or decorating the {@link $jsonpCallbacks} service.\n     *\n     * @param {string|TrustedObject} url Absolute or relative URL of the resource that is being requested;\n     *                                   or an object created by a call to `$sce.trustAsResourceUrl(url)`.\n     * @param {Object=} config Optional configuration object. See https://docs.angularjs.org/api/ng/service/$http#usage\n     * @returns {HttpPromise} Future object\n     */\n    createShortMethods('get', 'delete', 'head', 'jsonp');\n\n    /**\n     * @ngdoc method\n     * @name $http#post\n     *\n     * @description\n     * Shortcut method to perform `POST` request.\n     *\n     * @param {string} url Relative or absolute URL specifying the destination of the request\n     * @param {*} data Request content\n     * @param {Object=} config Optional configuration object. See https://docs.angularjs.org/api/ng/service/$http#usage\n     * @returns {HttpPromise} Future object\n     */\n\n    /**\n     * @ngdoc method\n     * @name $http#put\n     *\n     * @description\n     * Shortcut method to perform `PUT` request.\n     *\n     * @param {string} url Relative or absolute URL specifying the destination of the request\n     * @param {*} data Request content\n     * @param {Object=} config Optional configuration object. See https://docs.angularjs.org/api/ng/service/$http#usage\n     * @returns {HttpPromise} Future object\n     */\n\n     /**\n      * @ngdoc method\n      * @name $http#patch\n      *\n      * @description\n      * Shortcut method to perform `PATCH` request.\n      *\n      * @param {string} url Relative or absolute URL specifying the destination of the request\n      * @param {*} data Request content\n      * @param {Object=} config Optional configuration object. See https://docs.angularjs.org/api/ng/service/$http#usage\n      * @returns {HttpPromise} Future object\n      */\n    createShortMethodsWithData('post', 'put', 'patch');\n\n        /**\n         * @ngdoc property\n         * @name $http#defaults\n         *\n         * @description\n         * Runtime equivalent of the `$httpProvider.defaults` property. Allows configuration of\n         * default headers, withCredentials as well as request and response transformations.\n         *\n         * See \"Setting HTTP Headers\" and \"Transforming Requests and Responses\" sections above.\n         */\n    $http.defaults = defaults;\n\n\n    return $http;\n\n\n    function createShortMethods(names) {\n      forEach(arguments, function(name) {\n        $http[name] = function(url, config) {\n          return $http(extend({}, config || {}, {\n            method: name,\n            url: url\n          }));\n        };\n      });\n    }\n\n\n    function createShortMethodsWithData(name) {\n      forEach(arguments, function(name) {\n        $http[name] = function(url, data, config) {\n          return $http(extend({}, config || {}, {\n            method: name,\n            url: url,\n            data: data\n          }));\n        };\n      });\n    }\n\n\n    /**\n     * Makes the request.\n     *\n     * !!! ACCESSES CLOSURE VARS:\n     * $httpBackend, defaults, $log, $rootScope, defaultCache, $http.pendingRequests\n     */\n    function sendReq(config, reqData) {\n      var deferred = $q.defer(),\n          promise = deferred.promise,\n          cache,\n          cachedResp,\n          reqHeaders = config.headers,\n          isJsonp = lowercase(config.method) === 'jsonp',\n          url = config.url;\n\n      if (isJsonp) {\n        // JSONP is a pretty sensitive operation where we're allowing a script to have full access to\n        // our DOM and JS space.  So we require that the URL satisfies SCE.RESOURCE_URL.\n        url = $sce.getTrustedResourceUrl(url);\n      } else if (!isString(url)) {\n        // If it is not a string then the URL must be a $sce trusted object\n        url = $sce.valueOf(url);\n      }\n\n      url = buildUrl(url, config.paramSerializer(config.params));\n\n      if (isJsonp) {\n        // Check the url and add the JSONP callback placeholder\n        url = sanitizeJsonpCallbackParam(url, config.jsonpCallbackParam);\n      }\n\n      $http.pendingRequests.push(config);\n      promise.then(removePendingReq, removePendingReq);\n\n      if ((config.cache || defaults.cache) && config.cache !== false &&\n          (config.method === 'GET' || config.method === 'JSONP')) {\n        cache = isObject(config.cache) ? config.cache\n            : isObject(/** @type {?} */ (defaults).cache)\n              ? /** @type {?} */ (defaults).cache\n              : defaultCache;\n      }\n\n      if (cache) {\n        cachedResp = cache.get(url);\n        if (isDefined(cachedResp)) {\n          if (isPromiseLike(cachedResp)) {\n            // cached request has already been sent, but there is no response yet\n            cachedResp.then(resolvePromiseWithResult, resolvePromiseWithResult);\n          } else {\n            // serving from cache\n            if (isArray(cachedResp)) {\n              resolvePromise(cachedResp[1], cachedResp[0], shallowCopy(cachedResp[2]), cachedResp[3], cachedResp[4]);\n            } else {\n              resolvePromise(cachedResp, 200, {}, 'OK', 'complete');\n            }\n          }\n        } else {\n          // put the promise for the non-transformed response into cache as a placeholder\n          cache.put(url, promise);\n        }\n      }\n\n\n      // if we won't have the response in cache, set the xsrf headers and\n      // send the request to the backend\n      if (isUndefined(cachedResp)) {\n        var xsrfValue = urlIsSameOrigin(config.url)\n            ? $$cookieReader()[config.xsrfCookieName || defaults.xsrfCookieName]\n            : undefined;\n        if (xsrfValue) {\n          reqHeaders[(config.xsrfHeaderName || defaults.xsrfHeaderName)] = xsrfValue;\n        }\n\n        $httpBackend(config.method, url, reqData, done, reqHeaders, config.timeout,\n            config.withCredentials, config.responseType,\n            createApplyHandlers(config.eventHandlers),\n            createApplyHandlers(config.uploadEventHandlers));\n      }\n\n      return promise;\n\n      function createApplyHandlers(eventHandlers) {\n        if (eventHandlers) {\n          var applyHandlers = {};\n          forEach(eventHandlers, function(eventHandler, key) {\n            applyHandlers[key] = function(event) {\n              if (useApplyAsync) {\n                $rootScope.$applyAsync(callEventHandler);\n              } else if ($rootScope.$$phase) {\n                callEventHandler();\n              } else {\n                $rootScope.$apply(callEventHandler);\n              }\n\n              function callEventHandler() {\n                eventHandler(event);\n              }\n            };\n          });\n          return applyHandlers;\n        }\n      }\n\n\n      /**\n       * Callback registered to $httpBackend():\n       *  - caches the response if desired\n       *  - resolves the raw $http promise\n       *  - calls $apply\n       */\n      function done(status, response, headersString, statusText, xhrStatus) {\n        if (cache) {\n          if (isSuccess(status)) {\n            cache.put(url, [status, response, parseHeaders(headersString), statusText, xhrStatus]);\n          } else {\n            // remove promise from the cache\n            cache.remove(url);\n          }\n        }\n\n        function resolveHttpPromise() {\n          resolvePromise(response, status, headersString, statusText, xhrStatus);\n        }\n\n        if (useApplyAsync) {\n          $rootScope.$applyAsync(resolveHttpPromise);\n        } else {\n          resolveHttpPromise();\n          if (!$rootScope.$$phase) $rootScope.$apply();\n        }\n      }\n\n\n      /**\n       * Resolves the raw $http promise.\n       */\n      function resolvePromise(response, status, headers, statusText, xhrStatus) {\n        //status: HTTP response status code, 0, -1 (aborted by timeout / promise)\n        status = status >= -1 ? status : 0;\n\n        (isSuccess(status) ? deferred.resolve : deferred.reject)({\n          data: response,\n          status: status,\n          headers: headersGetter(headers),\n          config: config,\n          statusText: statusText,\n          xhrStatus: xhrStatus\n        });\n      }\n\n      function resolvePromiseWithResult(result) {\n        resolvePromise(result.data, result.status, shallowCopy(result.headers()), result.statusText, result.xhrStatus);\n      }\n\n      function removePendingReq() {\n        var idx = $http.pendingRequests.indexOf(config);\n        if (idx !== -1) $http.pendingRequests.splice(idx, 1);\n      }\n    }\n\n\n    function buildUrl(url, serializedParams) {\n      if (serializedParams.length > 0) {\n        url += ((url.indexOf('?') === -1) ? '?' : '&') + serializedParams;\n      }\n      return url;\n    }\n\n    function sanitizeJsonpCallbackParam(url, cbKey) {\n      var parts = url.split('?');\n      if (parts.length > 2) {\n        // Throw if the url contains more than one `?` query indicator\n        throw $httpMinErr('badjsonp', 'Illegal use more than one \"?\", in url, \"{1}\"', url);\n      }\n      var params = parseKeyValue(parts[1]);\n      forEach(params, function(value, key) {\n        if (value === 'JSON_CALLBACK') {\n          // Throw if the url already contains a reference to JSON_CALLBACK\n          throw $httpMinErr('badjsonp', 'Illegal use of JSON_CALLBACK in url, \"{0}\"', url);\n        }\n        if (key === cbKey) {\n          // Throw if the callback param was already provided\n          throw $httpMinErr('badjsonp', 'Illegal use of callback param, \"{0}\", in url, \"{1}\"', cbKey, url);\n        }\n      });\n\n      // Add in the JSON_CALLBACK callback param value\n      url += ((url.indexOf('?') === -1) ? '?' : '&') + cbKey + '=JSON_CALLBACK';\n\n      return url;\n    }\n  }];\n}\n\n/**\n * @ngdoc service\n * @name $xhrFactory\n * @this\n *\n * @description\n * Factory function used to create XMLHttpRequest objects.\n *\n * Replace or decorate this service to create your own custom XMLHttpRequest objects.\n *\n * ```\n * angular.module('myApp', [])\n * .factory('$xhrFactory', function() {\n *   return function createXhr(method, url) {\n *     return new window.XMLHttpRequest({mozSystem: true});\n *   };\n * });\n * ```\n *\n * @param {string} method HTTP method of the request (GET, POST, PUT, ..)\n * @param {string} url URL of the request.\n */\nfunction $xhrFactoryProvider() {\n  this.$get = function() {\n    return function createXhr() {\n      return new window.XMLHttpRequest();\n    };\n  };\n}\n\n/**\n * @ngdoc service\n * @name $httpBackend\n * @requires $jsonpCallbacks\n * @requires $document\n * @requires $xhrFactory\n * @this\n *\n * @description\n * HTTP backend used by the {@link ng.$http service} that delegates to\n * XMLHttpRequest object or JSONP and deals with browser incompatibilities.\n *\n * You should never need to use this service directly, instead use the higher-level abstractions:\n * {@link ng.$http $http} or {@link ngResource.$resource $resource}.\n *\n * During testing this implementation is swapped with {@link ngMock.$httpBackend mock\n * $httpBackend} which can be trained with responses.\n */\nfunction $HttpBackendProvider() {\n  this.$get = ['$browser', '$jsonpCallbacks', '$document', '$xhrFactory', function($browser, $jsonpCallbacks, $document, $xhrFactory) {\n    return createHttpBackend($browser, $xhrFactory, $browser.defer, $jsonpCallbacks, $document[0]);\n  }];\n}\n\nfunction createHttpBackend($browser, createXhr, $browserDefer, callbacks, rawDocument) {\n  // TODO(vojta): fix the signature\n  return function(method, url, post, callback, headers, timeout, withCredentials, responseType, eventHandlers, uploadEventHandlers) {\n    url = url || $browser.url();\n\n    if (lowercase(method) === 'jsonp') {\n      var callbackPath = callbacks.createCallback(url);\n      var jsonpDone = jsonpReq(url, callbackPath, function(status, text) {\n        // jsonpReq only ever sets status to 200 (OK), 404 (ERROR) or -1 (WAITING)\n        var response = (status === 200) && callbacks.getResponse(callbackPath);\n        completeRequest(callback, status, response, '', text, 'complete');\n        callbacks.removeCallback(callbackPath);\n      });\n    } else {\n\n      var xhr = createXhr(method, url);\n\n      xhr.open(method, url, true);\n      forEach(headers, function(value, key) {\n        if (isDefined(value)) {\n            xhr.setRequestHeader(key, value);\n        }\n      });\n\n      xhr.onload = function requestLoaded() {\n        var statusText = xhr.statusText || '';\n\n        // responseText is the old-school way of retrieving response (supported by IE9)\n        // response/responseType properties were introduced in XHR Level2 spec (supported by IE10)\n        var response = ('response' in xhr) ? xhr.response : xhr.responseText;\n\n        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n        var status = xhr.status === 1223 ? 204 : xhr.status;\n\n        // fix status code when it is 0 (0 status is undocumented).\n        // Occurs when accessing file resources or on Android 4.1 stock browser\n        // while retrieving files from application cache.\n        if (status === 0) {\n          status = response ? 200 : urlResolve(url).protocol === 'file' ? 404 : 0;\n        }\n\n        completeRequest(callback,\n            status,\n            response,\n            xhr.getAllResponseHeaders(),\n            statusText,\n            'complete');\n      };\n\n      var requestError = function() {\n        // The response is always empty\n        // See https://xhr.spec.whatwg.org/#request-error-steps and https://fetch.spec.whatwg.org/#concept-network-error\n        completeRequest(callback, -1, null, null, '', 'error');\n      };\n\n      var requestAborted = function() {\n        completeRequest(callback, -1, null, null, '', 'abort');\n      };\n\n      var requestTimeout = function() {\n        // The response is always empty\n        // See https://xhr.spec.whatwg.org/#request-error-steps and https://fetch.spec.whatwg.org/#concept-network-error\n        completeRequest(callback, -1, null, null, '', 'timeout');\n      };\n\n      xhr.onerror = requestError;\n      xhr.onabort = requestAborted;\n      xhr.ontimeout = requestTimeout;\n\n      forEach(eventHandlers, function(value, key) {\n          xhr.addEventListener(key, value);\n      });\n\n      forEach(uploadEventHandlers, function(value, key) {\n        xhr.upload.addEventListener(key, value);\n      });\n\n      if (withCredentials) {\n        xhr.withCredentials = true;\n      }\n\n      if (responseType) {\n        try {\n          xhr.responseType = responseType;\n        } catch (e) {\n          // WebKit added support for the json responseType value on 09/03/2013\n          // https://bugs.webkit.org/show_bug.cgi?id=73648. Versions of Safari prior to 7 are\n          // known to throw when setting the value \"json\" as the response type. Other older\n          // browsers implementing the responseType\n          //\n          // The json response type can be ignored if not supported, because JSON payloads are\n          // parsed on the client-side regardless.\n          if (responseType !== 'json') {\n            throw e;\n          }\n        }\n      }\n\n      xhr.send(isUndefined(post) ? null : post);\n    }\n\n    if (timeout > 0) {\n      var timeoutId = $browserDefer(timeoutRequest, timeout);\n    } else if (isPromiseLike(timeout)) {\n      timeout.then(timeoutRequest);\n    }\n\n\n    function timeoutRequest() {\n      if (jsonpDone) {\n        jsonpDone();\n      }\n      if (xhr) {\n        xhr.abort();\n      }\n    }\n\n    function completeRequest(callback, status, response, headersString, statusText, xhrStatus) {\n      // cancel timeout and subsequent timeout promise resolution\n      if (isDefined(timeoutId)) {\n        $browserDefer.cancel(timeoutId);\n      }\n      jsonpDone = xhr = null;\n\n      callback(status, response, headersString, statusText, xhrStatus);\n    }\n  };\n\n  function jsonpReq(url, callbackPath, done) {\n    url = url.replace('JSON_CALLBACK', callbackPath);\n    // we can't use jQuery/jqLite here because jQuery does crazy stuff with script elements, e.g.:\n    // - fetches local scripts via XHR and evals them\n    // - adds and immediately removes script elements from the document\n    var script = rawDocument.createElement('script'), callback = null;\n    script.type = 'text/javascript';\n    script.src = url;\n    script.async = true;\n\n    callback = function(event) {\n      script.removeEventListener('load', callback);\n      script.removeEventListener('error', callback);\n      rawDocument.body.removeChild(script);\n      script = null;\n      var status = -1;\n      var text = 'unknown';\n\n      if (event) {\n        if (event.type === 'load' && !callbacks.wasCalled(callbackPath)) {\n          event = { type: 'error' };\n        }\n        text = event.type;\n        status = event.type === 'error' ? 404 : 200;\n      }\n\n      if (done) {\n        done(status, text);\n      }\n    };\n\n    script.addEventListener('load', callback);\n    script.addEventListener('error', callback);\n    rawDocument.body.appendChild(script);\n    return callback;\n  }\n}\n\nvar $interpolateMinErr = angular.$interpolateMinErr = minErr('$interpolate');\n$interpolateMinErr.throwNoconcat = function(text) {\n  throw $interpolateMinErr('noconcat',\n      'Error while interpolating: {0}\\nStrict Contextual Escaping disallows ' +\n      'interpolations that concatenate multiple expressions when a trusted value is ' +\n      'required.  See http://docs.angularjs.org/api/ng.$sce', text);\n};\n\n$interpolateMinErr.interr = function(text, err) {\n  return $interpolateMinErr('interr', 'Can\\'t interpolate: {0}\\n{1}', text, err.toString());\n};\n\n/**\n * @ngdoc provider\n * @name $interpolateProvider\n * @this\n *\n * @description\n *\n * Used for configuring the interpolation markup. Defaults to `{{` and `}}`.\n *\n * <div class=\"alert alert-danger\">\n * This feature is sometimes used to mix different markup languages, e.g. to wrap an Angular\n * template within a Python Jinja template (or any other template language). Mixing templating\n * languages is **very dangerous**. The embedding template language will not safely escape Angular\n * expressions, so any user-controlled values in the template will cause Cross Site Scripting (XSS)\n * security bugs!\n * </div>\n *\n * @example\n<example name=\"custom-interpolation-markup\" module=\"customInterpolationApp\">\n<file name=\"index.html\">\n<script>\n  var customInterpolationApp = angular.module('customInterpolationApp', []);\n\n  customInterpolationApp.config(function($interpolateProvider) {\n    $interpolateProvider.startSymbol('//');\n    $interpolateProvider.endSymbol('//');\n  });\n\n\n  customInterpolationApp.controller('DemoController', function() {\n      this.label = \"This binding is brought you by // interpolation symbols.\";\n  });\n</script>\n<div ng-controller=\"DemoController as demo\">\n    //demo.label//\n</div>\n</file>\n<file name=\"protractor.js\" type=\"protractor\">\n  it('should interpolate binding with custom symbols', function() {\n    expect(element(by.binding('demo.label')).getText()).toBe('This binding is brought you by // interpolation symbols.');\n  });\n</file>\n</example>\n */\nfunction $InterpolateProvider() {\n  var startSymbol = '{{';\n  var endSymbol = '}}';\n\n  /**\n   * @ngdoc method\n   * @name $interpolateProvider#startSymbol\n   * @description\n   * Symbol to denote start of expression in the interpolated string. Defaults to `{{`.\n   *\n   * @param {string=} value new value to set the starting symbol to.\n   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.\n   */\n  this.startSymbol = function(value) {\n    if (value) {\n      startSymbol = value;\n      return this;\n    } else {\n      return startSymbol;\n    }\n  };\n\n  /**\n   * @ngdoc method\n   * @name $interpolateProvider#endSymbol\n   * @description\n   * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.\n   *\n   * @param {string=} value new value to set the ending symbol to.\n   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.\n   */\n  this.endSymbol = function(value) {\n    if (value) {\n      endSymbol = value;\n      return this;\n    } else {\n      return endSymbol;\n    }\n  };\n\n\n  this.$get = ['$parse', '$exceptionHandler', '$sce', function($parse, $exceptionHandler, $sce) {\n    var startSymbolLength = startSymbol.length,\n        endSymbolLength = endSymbol.length,\n        escapedStartRegexp = new RegExp(startSymbol.replace(/./g, escape), 'g'),\n        escapedEndRegexp = new RegExp(endSymbol.replace(/./g, escape), 'g');\n\n    function escape(ch) {\n      return '\\\\\\\\\\\\' + ch;\n    }\n\n    function unescapeText(text) {\n      return text.replace(escapedStartRegexp, startSymbol).\n        replace(escapedEndRegexp, endSymbol);\n    }\n\n    // TODO: this is the same as the constantWatchDelegate in parse.js\n    function constantWatchDelegate(scope, listener, objectEquality, constantInterp) {\n      var unwatch = scope.$watch(function constantInterpolateWatch(scope) {\n        unwatch();\n        return constantInterp(scope);\n      }, listener, objectEquality);\n      return unwatch;\n    }\n\n    /**\n     * @ngdoc service\n     * @name $interpolate\n     * @kind function\n     *\n     * @requires $parse\n     * @requires $sce\n     *\n     * @description\n     *\n     * Compiles a string with markup into an interpolation function. This service is used by the\n     * HTML {@link ng.$compile $compile} service for data binding. See\n     * {@link ng.$interpolateProvider $interpolateProvider} for configuring the\n     * interpolation markup.\n     *\n     *\n     * ```js\n     *   var $interpolate = ...; // injected\n     *   var exp = $interpolate('Hello {{name | uppercase}}!');\n     *   expect(exp({name:'Angular'})).toEqual('Hello ANGULAR!');\n     * ```\n     *\n     * `$interpolate` takes an optional fourth argument, `allOrNothing`. If `allOrNothing` is\n     * `true`, the interpolation function will return `undefined` unless all embedded expressions\n     * evaluate to a value other than `undefined`.\n     *\n     * ```js\n     *   var $interpolate = ...; // injected\n     *   var context = {greeting: 'Hello', name: undefined };\n     *\n     *   // default \"forgiving\" mode\n     *   var exp = $interpolate('{{greeting}} {{name}}!');\n     *   expect(exp(context)).toEqual('Hello !');\n     *\n     *   // \"allOrNothing\" mode\n     *   exp = $interpolate('{{greeting}} {{name}}!', false, null, true);\n     *   expect(exp(context)).toBeUndefined();\n     *   context.name = 'Angular';\n     *   expect(exp(context)).toEqual('Hello Angular!');\n     * ```\n     *\n     * `allOrNothing` is useful for interpolating URLs. `ngSrc` and `ngSrcset` use this behavior.\n     *\n     * #### Escaped Interpolation\n     * $interpolate provides a mechanism for escaping interpolation markers. Start and end markers\n     * can be escaped by preceding each of their characters with a REVERSE SOLIDUS U+005C (backslash).\n     * It will be rendered as a regular start/end marker, and will not be interpreted as an expression\n     * or binding.\n     *\n     * This enables web-servers to prevent script injection attacks and defacing attacks, to some\n     * degree, while also enabling code examples to work without relying on the\n     * {@link ng.directive:ngNonBindable ngNonBindable} directive.\n     *\n     * **For security purposes, it is strongly encouraged that web servers escape user-supplied data,\n     * replacing angle brackets (&lt;, &gt;) with &amp;lt; and &amp;gt; respectively, and replacing all\n     * interpolation start/end markers with their escaped counterparts.**\n     *\n     * Escaped interpolation markers are only replaced with the actual interpolation markers in rendered\n     * output when the $interpolate service processes the text. So, for HTML elements interpolated\n     * by {@link ng.$compile $compile}, or otherwise interpolated with the `mustHaveExpression` parameter\n     * set to `true`, the interpolated text must contain an unescaped interpolation expression. As such,\n     * this is typically useful only when user-data is used in rendering a template from the server, or\n     * when otherwise untrusted data is used by a directive.\n     *\n     * <example name=\"interpolation\">\n     *  <file name=\"index.html\">\n     *    <div ng-init=\"username='A user'\">\n     *      <p ng-init=\"apptitle='Escaping demo'\">{{apptitle}}: \\{\\{ username = \"defaced value\"; \\}\\}\n     *        </p>\n     *      <p><strong>{{username}}</strong> attempts to inject code which will deface the\n     *        application, but fails to accomplish their task, because the server has correctly\n     *        escaped the interpolation start/end markers with REVERSE SOLIDUS U+005C (backslash)\n     *        characters.</p>\n     *      <p>Instead, the result of the attempted script injection is visible, and can be removed\n     *        from the database by an administrator.</p>\n     *    </div>\n     *  </file>\n     * </example>\n     *\n     * @knownIssue\n     * It is currently not possible for an interpolated expression to contain the interpolation end\n     * symbol. For example, `{{ '}}' }}` will be incorrectly interpreted as `{{ ' }}` + `' }}`, i.e.\n     * an interpolated expression consisting of a single-quote (`'`) and the `' }}` string.\n     *\n     * @knownIssue\n     * All directives and components must use the standard `{{` `}}` interpolation symbols\n     * in their templates. If you change the application interpolation symbols the {@link $compile}\n     * service will attempt to denormalize the standard symbols to the custom symbols.\n     * The denormalization process is not clever enough to know not to replace instances of the standard\n     * symbols where they would not normally be treated as interpolation symbols. For example in the following\n     * code snippet the closing braces of the literal object will get incorrectly denormalized:\n     *\n     * ```\n     * <div data-context='{\"context\":{\"id\":3,\"type\":\"page\"}}\">\n     * ```\n     *\n     * The workaround is to ensure that such instances are separated by whitespace:\n     * ```\n     * <div data-context='{\"context\":{\"id\":3,\"type\":\"page\"} }\">\n     * ```\n     *\n     * See https://github.com/angular/angular.js/pull/14610#issuecomment-219401099 for more information.\n     *\n     * @param {string} text The text with markup to interpolate.\n     * @param {boolean=} mustHaveExpression if set to true then the interpolation string must have\n     *    embedded expression in order to return an interpolation function. Strings with no\n     *    embedded expression will return null for the interpolation function.\n     * @param {string=} trustedContext when provided, the returned function passes the interpolated\n     *    result through {@link ng.$sce#getTrusted $sce.getTrusted(interpolatedResult,\n     *    trustedContext)} before returning it.  Refer to the {@link ng.$sce $sce} service that\n     *    provides Strict Contextual Escaping for details.\n     * @param {boolean=} allOrNothing if `true`, then the returned function returns undefined\n     *    unless all embedded expressions evaluate to a value other than `undefined`.\n     * @returns {function(context)} an interpolation function which is used to compute the\n     *    interpolated string. The function has these parameters:\n     *\n     * - `context`: evaluation context for all expressions embedded in the interpolated text\n     */\n    function $interpolate(text, mustHaveExpression, trustedContext, allOrNothing) {\n      // Provide a quick exit and simplified result function for text with no interpolation\n      if (!text.length || text.indexOf(startSymbol) === -1) {\n        var constantInterp;\n        if (!mustHaveExpression) {\n          var unescapedText = unescapeText(text);\n          constantInterp = valueFn(unescapedText);\n          constantInterp.exp = text;\n          constantInterp.expressions = [];\n          constantInterp.$$watchDelegate = constantWatchDelegate;\n        }\n        return constantInterp;\n      }\n\n      allOrNothing = !!allOrNothing;\n      var startIndex,\n          endIndex,\n          index = 0,\n          expressions = [],\n          parseFns = [],\n          textLength = text.length,\n          exp,\n          concat = [],\n          expressionPositions = [];\n\n      while (index < textLength) {\n        if (((startIndex = text.indexOf(startSymbol, index)) !== -1) &&\n             ((endIndex = text.indexOf(endSymbol, startIndex + startSymbolLength)) !== -1)) {\n          if (index !== startIndex) {\n            concat.push(unescapeText(text.substring(index, startIndex)));\n          }\n          exp = text.substring(startIndex + startSymbolLength, endIndex);\n          expressions.push(exp);\n          parseFns.push($parse(exp, parseStringifyInterceptor));\n          index = endIndex + endSymbolLength;\n          expressionPositions.push(concat.length);\n          concat.push('');\n        } else {\n          // we did not find an interpolation, so we have to add the remainder to the separators array\n          if (index !== textLength) {\n            concat.push(unescapeText(text.substring(index)));\n          }\n          break;\n        }\n      }\n\n      // Concatenating expressions makes it hard to reason about whether some combination of\n      // concatenated values are unsafe to use and could easily lead to XSS.  By requiring that a\n      // single expression be used for iframe[src], object[src], etc., we ensure that the value\n      // that's used is assigned or constructed by some JS code somewhere that is more testable or\n      // make it obvious that you bound the value to some user controlled value.  This helps reduce\n      // the load when auditing for XSS issues.\n      if (trustedContext && concat.length > 1) {\n          $interpolateMinErr.throwNoconcat(text);\n      }\n\n      if (!mustHaveExpression || expressions.length) {\n        var compute = function(values) {\n          for (var i = 0, ii = expressions.length; i < ii; i++) {\n            if (allOrNothing && isUndefined(values[i])) return;\n            concat[expressionPositions[i]] = values[i];\n          }\n          return concat.join('');\n        };\n\n        var getValue = function(value) {\n          return trustedContext ?\n            $sce.getTrusted(trustedContext, value) :\n            $sce.valueOf(value);\n        };\n\n        return extend(function interpolationFn(context) {\n            var i = 0;\n            var ii = expressions.length;\n            var values = new Array(ii);\n\n            try {\n              for (; i < ii; i++) {\n                values[i] = parseFns[i](context);\n              }\n\n              return compute(values);\n            } catch (err) {\n              $exceptionHandler($interpolateMinErr.interr(text, err));\n            }\n\n          }, {\n          // all of these properties are undocumented for now\n          exp: text, //just for compatibility with regular watchers created via $watch\n          expressions: expressions,\n          $$watchDelegate: function(scope, listener) {\n            var lastValue;\n            return scope.$watchGroup(parseFns, /** @this */ function interpolateFnWatcher(values, oldValues) {\n              var currValue = compute(values);\n              listener.call(this, currValue, values !== oldValues ? lastValue : currValue, scope);\n              lastValue = currValue;\n            });\n          }\n        });\n      }\n\n      function parseStringifyInterceptor(value) {\n        try {\n          value = getValue(value);\n          return allOrNothing && !isDefined(value) ? value : stringify(value);\n        } catch (err) {\n          $exceptionHandler($interpolateMinErr.interr(text, err));\n        }\n      }\n    }\n\n\n    /**\n     * @ngdoc method\n     * @name $interpolate#startSymbol\n     * @description\n     * Symbol to denote the start of expression in the interpolated string. Defaults to `{{`.\n     *\n     * Use {@link ng.$interpolateProvider#startSymbol `$interpolateProvider.startSymbol`} to change\n     * the symbol.\n     *\n     * @returns {string} start symbol.\n     */\n    $interpolate.startSymbol = function() {\n      return startSymbol;\n    };\n\n\n    /**\n     * @ngdoc method\n     * @name $interpolate#endSymbol\n     * @description\n     * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.\n     *\n     * Use {@link ng.$interpolateProvider#endSymbol `$interpolateProvider.endSymbol`} to change\n     * the symbol.\n     *\n     * @returns {string} end symbol.\n     */\n    $interpolate.endSymbol = function() {\n      return endSymbol;\n    };\n\n    return $interpolate;\n  }];\n}\n\n/** @this */\nfunction $IntervalProvider() {\n  this.$get = ['$rootScope', '$window', '$q', '$$q', '$browser',\n       function($rootScope,   $window,   $q,   $$q,   $browser) {\n    var intervals = {};\n\n\n     /**\n      * @ngdoc service\n      * @name $interval\n      *\n      * @description\n      * Angular's wrapper for `window.setInterval`. The `fn` function is executed every `delay`\n      * milliseconds.\n      *\n      * The return value of registering an interval function is a promise. This promise will be\n      * notified upon each tick of the interval, and will be resolved after `count` iterations, or\n      * run indefinitely if `count` is not defined. The value of the notification will be the\n      * number of iterations that have run.\n      * To cancel an interval, call `$interval.cancel(promise)`.\n      *\n      * In tests you can use {@link ngMock.$interval#flush `$interval.flush(millis)`} to\n      * move forward by `millis` milliseconds and trigger any functions scheduled to run in that\n      * time.\n      *\n      * <div class=\"alert alert-warning\">\n      * **Note**: Intervals created by this service must be explicitly destroyed when you are finished\n      * with them.  In particular they are not automatically destroyed when a controller's scope or a\n      * directive's element are destroyed.\n      * You should take this into consideration and make sure to always cancel the interval at the\n      * appropriate moment.  See the example below for more details on how and when to do this.\n      * </div>\n      *\n      * @param {function()} fn A function that should be called repeatedly. If no additional arguments\n      *   are passed (see below), the function is called with the current iteration count.\n      * @param {number} delay Number of milliseconds between each function call.\n      * @param {number=} [count=0] Number of times to repeat. If not set, or 0, will repeat\n      *   indefinitely.\n      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise\n      *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.\n      * @param {...*=} Pass additional parameters to the executed function.\n      * @returns {promise} A promise which will be notified on each iteration. It will resolve once all iterations of the interval complete.\n      *\n      * @example\n      * <example module=\"intervalExample\" name=\"interval-service\">\n      * <file name=\"index.html\">\n      *   <script>\n      *     angular.module('intervalExample', [])\n      *       .controller('ExampleController', ['$scope', '$interval',\n      *         function($scope, $interval) {\n      *           $scope.format = 'M/d/yy h:mm:ss a';\n      *           $scope.blood_1 = 100;\n      *           $scope.blood_2 = 120;\n      *\n      *           var stop;\n      *           $scope.fight = function() {\n      *             // Don't start a new fight if we are already fighting\n      *             if ( angular.isDefined(stop) ) return;\n      *\n      *             stop = $interval(function() {\n      *               if ($scope.blood_1 > 0 && $scope.blood_2 > 0) {\n      *                 $scope.blood_1 = $scope.blood_1 - 3;\n      *                 $scope.blood_2 = $scope.blood_2 - 4;\n      *               } else {\n      *                 $scope.stopFight();\n      *               }\n      *             }, 100);\n      *           };\n      *\n      *           $scope.stopFight = function() {\n      *             if (angular.isDefined(stop)) {\n      *               $interval.cancel(stop);\n      *               stop = undefined;\n      *             }\n      *           };\n      *\n      *           $scope.resetFight = function() {\n      *             $scope.blood_1 = 100;\n      *             $scope.blood_2 = 120;\n      *           };\n      *\n      *           $scope.$on('$destroy', function() {\n      *             // Make sure that the interval is destroyed too\n      *             $scope.stopFight();\n      *           });\n      *         }])\n      *       // Register the 'myCurrentTime' directive factory method.\n      *       // We inject $interval and dateFilter service since the factory method is DI.\n      *       .directive('myCurrentTime', ['$interval', 'dateFilter',\n      *         function($interval, dateFilter) {\n      *           // return the directive link function. (compile function not needed)\n      *           return function(scope, element, attrs) {\n      *             var format,  // date format\n      *                 stopTime; // so that we can cancel the time updates\n      *\n      *             // used to update the UI\n      *             function updateTime() {\n      *               element.text(dateFilter(new Date(), format));\n      *             }\n      *\n      *             // watch the expression, and update the UI on change.\n      *             scope.$watch(attrs.myCurrentTime, function(value) {\n      *               format = value;\n      *               updateTime();\n      *             });\n      *\n      *             stopTime = $interval(updateTime, 1000);\n      *\n      *             // listen on DOM destroy (removal) event, and cancel the next UI update\n      *             // to prevent updating time after the DOM element was removed.\n      *             element.on('$destroy', function() {\n      *               $interval.cancel(stopTime);\n      *             });\n      *           }\n      *         }]);\n      *   </script>\n      *\n      *   <div>\n      *     <div ng-controller=\"ExampleController\">\n      *       <label>Date format: <input ng-model=\"format\"></label> <hr/>\n      *       Current time is: <span my-current-time=\"format\"></span>\n      *       <hr/>\n      *       Blood 1 : <font color='red'>{{blood_1}}</font>\n      *       Blood 2 : <font color='red'>{{blood_2}}</font>\n      *       <button type=\"button\" data-ng-click=\"fight()\">Fight</button>\n      *       <button type=\"button\" data-ng-click=\"stopFight()\">StopFight</button>\n      *       <button type=\"button\" data-ng-click=\"resetFight()\">resetFight</button>\n      *     </div>\n      *   </div>\n      *\n      * </file>\n      * </example>\n      */\n    function interval(fn, delay, count, invokeApply) {\n      var hasParams = arguments.length > 4,\n          args = hasParams ? sliceArgs(arguments, 4) : [],\n          setInterval = $window.setInterval,\n          clearInterval = $window.clearInterval,\n          iteration = 0,\n          skipApply = (isDefined(invokeApply) && !invokeApply),\n          deferred = (skipApply ? $$q : $q).defer(),\n          promise = deferred.promise;\n\n      count = isDefined(count) ? count : 0;\n\n      promise.$$intervalId = setInterval(function tick() {\n        if (skipApply) {\n          $browser.defer(callback);\n        } else {\n          $rootScope.$evalAsync(callback);\n        }\n        deferred.notify(iteration++);\n\n        if (count > 0 && iteration >= count) {\n          deferred.resolve(iteration);\n          clearInterval(promise.$$intervalId);\n          delete intervals[promise.$$intervalId];\n        }\n\n        if (!skipApply) $rootScope.$apply();\n\n      }, delay);\n\n      intervals[promise.$$intervalId] = deferred;\n\n      return promise;\n\n      function callback() {\n        if (!hasParams) {\n          fn(iteration);\n        } else {\n          fn.apply(null, args);\n        }\n      }\n    }\n\n\n     /**\n      * @ngdoc method\n      * @name $interval#cancel\n      *\n      * @description\n      * Cancels a task associated with the `promise`.\n      *\n      * @param {Promise=} promise returned by the `$interval` function.\n      * @returns {boolean} Returns `true` if the task was successfully canceled.\n      */\n    interval.cancel = function(promise) {\n      if (promise && promise.$$intervalId in intervals) {\n        // Interval cancels should not report as unhandled promise.\n        markQExceptionHandled(intervals[promise.$$intervalId].promise);\n        intervals[promise.$$intervalId].reject('canceled');\n        $window.clearInterval(promise.$$intervalId);\n        delete intervals[promise.$$intervalId];\n        return true;\n      }\n      return false;\n    };\n\n    return interval;\n  }];\n}\n\n/**\n * @ngdoc service\n * @name $jsonpCallbacks\n * @requires $window\n * @description\n * This service handles the lifecycle of callbacks to handle JSONP requests.\n * Override this service if you wish to customise where the callbacks are stored and\n * how they vary compared to the requested url.\n */\nvar $jsonpCallbacksProvider = /** @this */ function() {\n  this.$get = function() {\n    var callbacks = angular.callbacks;\n    var callbackMap = {};\n\n    function createCallback(callbackId) {\n      var callback = function(data) {\n        callback.data = data;\n        callback.called = true;\n      };\n      callback.id = callbackId;\n      return callback;\n    }\n\n    return {\n      /**\n       * @ngdoc method\n       * @name $jsonpCallbacks#createCallback\n       * @param {string} url the url of the JSONP request\n       * @returns {string} the callback path to send to the server as part of the JSONP request\n       * @description\n       * {@link $httpBackend} calls this method to create a callback and get hold of the path to the callback\n       * to pass to the server, which will be used to call the callback with its payload in the JSONP response.\n       */\n      createCallback: function(url) {\n        var callbackId = '_' + (callbacks.$$counter++).toString(36);\n        var callbackPath = 'angular.callbacks.' + callbackId;\n        var callback = createCallback(callbackId);\n        callbackMap[callbackPath] = callbacks[callbackId] = callback;\n        return callbackPath;\n      },\n      /**\n       * @ngdoc method\n       * @name $jsonpCallbacks#wasCalled\n       * @param {string} callbackPath the path to the callback that was sent in the JSONP request\n       * @returns {boolean} whether the callback has been called, as a result of the JSONP response\n       * @description\n       * {@link $httpBackend} calls this method to find out whether the JSONP response actually called the\n       * callback that was passed in the request.\n       */\n      wasCalled: function(callbackPath) {\n        return callbackMap[callbackPath].called;\n      },\n      /**\n       * @ngdoc method\n       * @name $jsonpCallbacks#getResponse\n       * @param {string} callbackPath the path to the callback that was sent in the JSONP request\n       * @returns {*} the data received from the response via the registered callback\n       * @description\n       * {@link $httpBackend} calls this method to get hold of the data that was provided to the callback\n       * in the JSONP response.\n       */\n      getResponse: function(callbackPath) {\n        return callbackMap[callbackPath].data;\n      },\n      /**\n       * @ngdoc method\n       * @name $jsonpCallbacks#removeCallback\n       * @param {string} callbackPath the path to the callback that was sent in the JSONP request\n       * @description\n       * {@link $httpBackend} calls this method to remove the callback after the JSONP request has\n       * completed or timed-out.\n       */\n      removeCallback: function(callbackPath) {\n        var callback = callbackMap[callbackPath];\n        delete callbacks[callback.id];\n        delete callbackMap[callbackPath];\n      }\n    };\n  };\n};\n\n/**\n * @ngdoc service\n * @name $locale\n *\n * @description\n * $locale service provides localization rules for various Angular components. As of right now the\n * only public api is:\n *\n * * `id` – `{string}` – locale id formatted as `languageId-countryId` (e.g. `en-us`)\n */\n\nvar PATH_MATCH = /^([^?#]*)(\\?([^#]*))?(#(.*))?$/,\n    DEFAULT_PORTS = {'http': 80, 'https': 443, 'ftp': 21};\nvar $locationMinErr = minErr('$location');\n\n\n/**\n * Encode path using encodeUriSegment, ignoring forward slashes\n *\n * @param {string} path Path to encode\n * @returns {string}\n */\nfunction encodePath(path) {\n  var segments = path.split('/'),\n      i = segments.length;\n\n  while (i--) {\n    // decode forward slashes to prevent them from being double encoded\n    segments[i] = encodeUriSegment(segments[i].replace(/%2F/g, '/'));\n  }\n\n  return segments.join('/');\n}\n\nfunction decodePath(path, html5Mode) {\n  var segments = path.split('/'),\n      i = segments.length;\n\n  while (i--) {\n    segments[i] = decodeURIComponent(segments[i]);\n    if (html5Mode) {\n      // encode forward slashes to prevent them from being mistaken for path separators\n      segments[i] = segments[i].replace(/\\//g, '%2F');\n    }\n  }\n\n  return segments.join('/');\n}\n\nfunction parseAbsoluteUrl(absoluteUrl, locationObj) {\n  var parsedUrl = urlResolve(absoluteUrl);\n\n  locationObj.$$protocol = parsedUrl.protocol;\n  locationObj.$$host = parsedUrl.hostname;\n  locationObj.$$port = toInt(parsedUrl.port) || DEFAULT_PORTS[parsedUrl.protocol] || null;\n}\n\nvar DOUBLE_SLASH_REGEX = /^\\s*[\\\\/]{2,}/;\nfunction parseAppUrl(url, locationObj, html5Mode) {\n\n  if (DOUBLE_SLASH_REGEX.test(url)) {\n    throw $locationMinErr('badpath', 'Invalid url \"{0}\".', url);\n  }\n\n  var prefixed = (url.charAt(0) !== '/');\n  if (prefixed) {\n    url = '/' + url;\n  }\n  var match = urlResolve(url);\n  var path = prefixed && match.pathname.charAt(0) === '/' ? match.pathname.substring(1) : match.pathname;\n  locationObj.$$path = decodePath(path, html5Mode);\n  locationObj.$$search = parseKeyValue(match.search);\n  locationObj.$$hash = decodeURIComponent(match.hash);\n\n  // make sure path starts with '/';\n  if (locationObj.$$path && locationObj.$$path.charAt(0) !== '/') {\n    locationObj.$$path = '/' + locationObj.$$path;\n  }\n}\n\nfunction startsWith(str, search) {\n  return str.slice(0, search.length) === search;\n}\n\n/**\n *\n * @param {string} base\n * @param {string} url\n * @returns {string} returns text from `url` after `base` or `undefined` if it does not begin with\n *                   the expected string.\n */\nfunction stripBaseUrl(base, url) {\n  if (startsWith(url, base)) {\n    return url.substr(base.length);\n  }\n}\n\n\nfunction stripHash(url) {\n  var index = url.indexOf('#');\n  return index === -1 ? url : url.substr(0, index);\n}\n\nfunction trimEmptyHash(url) {\n  return url.replace(/(#.+)|#$/, '$1');\n}\n\n\nfunction stripFile(url) {\n  return url.substr(0, stripHash(url).lastIndexOf('/') + 1);\n}\n\n/* return the server only (scheme://host:port) */\nfunction serverBase(url) {\n  return url.substring(0, url.indexOf('/', url.indexOf('//') + 2));\n}\n\n\n/**\n * LocationHtml5Url represents a URL\n * This object is exposed as $location service when HTML5 mode is enabled and supported\n *\n * @constructor\n * @param {string} appBase application base URL\n * @param {string} appBaseNoFile application base URL stripped of any filename\n * @param {string} basePrefix URL path prefix\n */\nfunction LocationHtml5Url(appBase, appBaseNoFile, basePrefix) {\n  this.$$html5 = true;\n  basePrefix = basePrefix || '';\n  parseAbsoluteUrl(appBase, this);\n\n\n  /**\n   * Parse given HTML5 (regular) URL string into properties\n   * @param {string} url HTML5 URL\n   * @private\n   */\n  this.$$parse = function(url) {\n    var pathUrl = stripBaseUrl(appBaseNoFile, url);\n    if (!isString(pathUrl)) {\n      throw $locationMinErr('ipthprfx', 'Invalid url \"{0}\", missing path prefix \"{1}\".', url,\n          appBaseNoFile);\n    }\n\n    parseAppUrl(pathUrl, this, true);\n\n    if (!this.$$path) {\n      this.$$path = '/';\n    }\n\n    this.$$compose();\n  };\n\n  /**\n   * Compose url and update `absUrl` property\n   * @private\n   */\n  this.$$compose = function() {\n    var search = toKeyValue(this.$$search),\n        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';\n\n    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;\n    this.$$absUrl = appBaseNoFile + this.$$url.substr(1); // first char is always '/'\n\n    this.$$urlUpdatedByLocation = true;\n  };\n\n  this.$$parseLinkUrl = function(url, relHref) {\n    if (relHref && relHref[0] === '#') {\n      // special case for links to hash fragments:\n      // keep the old url and only replace the hash fragment\n      this.hash(relHref.slice(1));\n      return true;\n    }\n    var appUrl, prevAppUrl;\n    var rewrittenUrl;\n\n\n    if (isDefined(appUrl = stripBaseUrl(appBase, url))) {\n      prevAppUrl = appUrl;\n      if (basePrefix && isDefined(appUrl = stripBaseUrl(basePrefix, appUrl))) {\n        rewrittenUrl = appBaseNoFile + (stripBaseUrl('/', appUrl) || appUrl);\n      } else {\n        rewrittenUrl = appBase + prevAppUrl;\n      }\n    } else if (isDefined(appUrl = stripBaseUrl(appBaseNoFile, url))) {\n      rewrittenUrl = appBaseNoFile + appUrl;\n    } else if (appBaseNoFile === url + '/') {\n      rewrittenUrl = appBaseNoFile;\n    }\n    if (rewrittenUrl) {\n      this.$$parse(rewrittenUrl);\n    }\n    return !!rewrittenUrl;\n  };\n}\n\n\n/**\n * LocationHashbangUrl represents URL\n * This object is exposed as $location service when developer doesn't opt into html5 mode.\n * It also serves as the base class for html5 mode fallback on legacy browsers.\n *\n * @constructor\n * @param {string} appBase application base URL\n * @param {string} appBaseNoFile application base URL stripped of any filename\n * @param {string} hashPrefix hashbang prefix\n */\nfunction LocationHashbangUrl(appBase, appBaseNoFile, hashPrefix) {\n\n  parseAbsoluteUrl(appBase, this);\n\n\n  /**\n   * Parse given hashbang URL into properties\n   * @param {string} url Hashbang URL\n   * @private\n   */\n  this.$$parse = function(url) {\n    var withoutBaseUrl = stripBaseUrl(appBase, url) || stripBaseUrl(appBaseNoFile, url);\n    var withoutHashUrl;\n\n    if (!isUndefined(withoutBaseUrl) && withoutBaseUrl.charAt(0) === '#') {\n\n      // The rest of the URL starts with a hash so we have\n      // got either a hashbang path or a plain hash fragment\n      withoutHashUrl = stripBaseUrl(hashPrefix, withoutBaseUrl);\n      if (isUndefined(withoutHashUrl)) {\n        // There was no hashbang prefix so we just have a hash fragment\n        withoutHashUrl = withoutBaseUrl;\n      }\n\n    } else {\n      // There was no hashbang path nor hash fragment:\n      // If we are in HTML5 mode we use what is left as the path;\n      // Otherwise we ignore what is left\n      if (this.$$html5) {\n        withoutHashUrl = withoutBaseUrl;\n      } else {\n        withoutHashUrl = '';\n        if (isUndefined(withoutBaseUrl)) {\n          appBase = url;\n          /** @type {?} */ (this).replace();\n        }\n      }\n    }\n\n    parseAppUrl(withoutHashUrl, this, false);\n\n    this.$$path = removeWindowsDriveName(this.$$path, withoutHashUrl, appBase);\n\n    this.$$compose();\n\n    /*\n     * In Windows, on an anchor node on documents loaded from\n     * the filesystem, the browser will return a pathname\n     * prefixed with the drive name ('/C:/path') when a\n     * pathname without a drive is set:\n     *  * a.setAttribute('href', '/foo')\n     *   * a.pathname === '/C:/foo' //true\n     *\n     * Inside of Angular, we're always using pathnames that\n     * do not include drive names for routing.\n     */\n    function removeWindowsDriveName(path, url, base) {\n      /*\n      Matches paths for file protocol on windows,\n      such as /C:/foo/bar, and captures only /foo/bar.\n      */\n      var windowsFilePathExp = /^\\/[A-Z]:(\\/.*)/;\n\n      var firstPathSegmentMatch;\n\n      //Get the relative path from the input URL.\n      if (startsWith(url, base)) {\n        url = url.replace(base, '');\n      }\n\n      // The input URL intentionally contains a first path segment that ends with a colon.\n      if (windowsFilePathExp.exec(url)) {\n        return path;\n      }\n\n      firstPathSegmentMatch = windowsFilePathExp.exec(path);\n      return firstPathSegmentMatch ? firstPathSegmentMatch[1] : path;\n    }\n  };\n\n  /**\n   * Compose hashbang URL and update `absUrl` property\n   * @private\n   */\n  this.$$compose = function() {\n    var search = toKeyValue(this.$$search),\n        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';\n\n    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;\n    this.$$absUrl = appBase + (this.$$url ? hashPrefix + this.$$url : '');\n\n    this.$$urlUpdatedByLocation = true;\n  };\n\n  this.$$parseLinkUrl = function(url, relHref) {\n    if (stripHash(appBase) === stripHash(url)) {\n      this.$$parse(url);\n      return true;\n    }\n    return false;\n  };\n}\n\n\n/**\n * LocationHashbangUrl represents URL\n * This object is exposed as $location service when html5 history api is enabled but the browser\n * does not support it.\n *\n * @constructor\n * @param {string} appBase application base URL\n * @param {string} appBaseNoFile application base URL stripped of any filename\n * @param {string} hashPrefix hashbang prefix\n */\nfunction LocationHashbangInHtml5Url(appBase, appBaseNoFile, hashPrefix) {\n  this.$$html5 = true;\n  LocationHashbangUrl.apply(this, arguments);\n\n  this.$$parseLinkUrl = function(url, relHref) {\n    if (relHref && relHref[0] === '#') {\n      // special case for links to hash fragments:\n      // keep the old url and only replace the hash fragment\n      this.hash(relHref.slice(1));\n      return true;\n    }\n\n    var rewrittenUrl;\n    var appUrl;\n\n    if (appBase === stripHash(url)) {\n      rewrittenUrl = url;\n    } else if ((appUrl = stripBaseUrl(appBaseNoFile, url))) {\n      rewrittenUrl = appBase + hashPrefix + appUrl;\n    } else if (appBaseNoFile === url + '/') {\n      rewrittenUrl = appBaseNoFile;\n    }\n    if (rewrittenUrl) {\n      this.$$parse(rewrittenUrl);\n    }\n    return !!rewrittenUrl;\n  };\n\n  this.$$compose = function() {\n    var search = toKeyValue(this.$$search),\n        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';\n\n    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;\n    // include hashPrefix in $$absUrl when $$url is empty so IE9 does not reload page because of removal of '#'\n    this.$$absUrl = appBase + hashPrefix + this.$$url;\n\n    this.$$urlUpdatedByLocation = true;\n  };\n\n}\n\n\nvar locationPrototype = {\n\n  /**\n   * Ensure absolute URL is initialized.\n   * @private\n   */\n  $$absUrl:'',\n\n  /**\n   * Are we in html5 mode?\n   * @private\n   */\n  $$html5: false,\n\n  /**\n   * Has any change been replacing?\n   * @private\n   */\n  $$replace: false,\n\n  /**\n   * @ngdoc method\n   * @name $location#absUrl\n   *\n   * @description\n   * This method is getter only.\n   *\n   * Return full URL representation with all segments encoded according to rules specified in\n   * [RFC 3986](http://www.ietf.org/rfc/rfc3986.txt).\n   *\n   *\n   * ```js\n   * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo\n   * var absUrl = $location.absUrl();\n   * // => \"http://example.com/#/some/path?foo=bar&baz=xoxo\"\n   * ```\n   *\n   * @return {string} full URL\n   */\n  absUrl: locationGetter('$$absUrl'),\n\n  /**\n   * @ngdoc method\n   * @name $location#url\n   *\n   * @description\n   * This method is getter / setter.\n   *\n   * Return URL (e.g. `/path?a=b#hash`) when called without any parameter.\n   *\n   * Change path, search and hash, when called with parameter and return `$location`.\n   *\n   *\n   * ```js\n   * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo\n   * var url = $location.url();\n   * // => \"/some/path?foo=bar&baz=xoxo\"\n   * ```\n   *\n   * @param {string=} url New URL without base prefix (e.g. `/path?a=b#hash`)\n   * @return {string} url\n   */\n  url: function(url) {\n    if (isUndefined(url)) {\n      return this.$$url;\n    }\n\n    var match = PATH_MATCH.exec(url);\n    if (match[1] || url === '') this.path(decodeURIComponent(match[1]));\n    if (match[2] || match[1] || url === '') this.search(match[3] || '');\n    this.hash(match[5] || '');\n\n    return this;\n  },\n\n  /**\n   * @ngdoc method\n   * @name $location#protocol\n   *\n   * @description\n   * This method is getter only.\n   *\n   * Return protocol of current URL.\n   *\n   *\n   * ```js\n   * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo\n   * var protocol = $location.protocol();\n   * // => \"http\"\n   * ```\n   *\n   * @return {string} protocol of current URL\n   */\n  protocol: locationGetter('$$protocol'),\n\n  /**\n   * @ngdoc method\n   * @name $location#host\n   *\n   * @description\n   * This method is getter only.\n   *\n   * Return host of current URL.\n   *\n   * Note: compared to the non-angular version `location.host` which returns `hostname:port`, this returns the `hostname` portion only.\n   *\n   *\n   * ```js\n   * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo\n   * var host = $location.host();\n   * // => \"example.com\"\n   *\n   * // given URL http://user:password@example.com:8080/#/some/path?foo=bar&baz=xoxo\n   * host = $location.host();\n   * // => \"example.com\"\n   * host = location.host;\n   * // => \"example.com:8080\"\n   * ```\n   *\n   * @return {string} host of current URL.\n   */\n  host: locationGetter('$$host'),\n\n  /**\n   * @ngdoc method\n   * @name $location#port\n   *\n   * @description\n   * This method is getter only.\n   *\n   * Return port of current URL.\n   *\n   *\n   * ```js\n   * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo\n   * var port = $location.port();\n   * // => 80\n   * ```\n   *\n   * @return {Number} port\n   */\n  port: locationGetter('$$port'),\n\n  /**\n   * @ngdoc method\n   * @name $location#path\n   *\n   * @description\n   * This method is getter / setter.\n   *\n   * Return path of current URL when called without any parameter.\n   *\n   * Change path when called with parameter and return `$location`.\n   *\n   * Note: Path should always begin with forward slash (/), this method will add the forward slash\n   * if it is missing.\n   *\n   *\n   * ```js\n   * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo\n   * var path = $location.path();\n   * // => \"/some/path\"\n   * ```\n   *\n   * @param {(string|number)=} path New path\n   * @return {(string|object)} path if called with no parameters, or `$location` if called with a parameter\n   */\n  path: locationGetterSetter('$$path', function(path) {\n    path = path !== null ? path.toString() : '';\n    return path.charAt(0) === '/' ? path : '/' + path;\n  }),\n\n  /**\n   * @ngdoc method\n   * @name $location#search\n   *\n   * @description\n   * This method is getter / setter.\n   *\n   * Return search part (as object) of current URL when called without any parameter.\n   *\n   * Change search part when called with parameter and return `$location`.\n   *\n   *\n   * ```js\n   * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo\n   * var searchObject = $location.search();\n   * // => {foo: 'bar', baz: 'xoxo'}\n   *\n   * // set foo to 'yipee'\n   * $location.search('foo', 'yipee');\n   * // $location.search() => {foo: 'yipee', baz: 'xoxo'}\n   * ```\n   *\n   * @param {string|Object.<string>|Object.<Array.<string>>} search New search params - string or\n   * hash object.\n   *\n   * When called with a single argument the method acts as a setter, setting the `search` component\n   * of `$location` to the specified value.\n   *\n   * If the argument is a hash object containing an array of values, these values will be encoded\n   * as duplicate search parameters in the URL.\n   *\n   * @param {(string|Number|Array<string>|boolean)=} paramValue If `search` is a string or number, then `paramValue`\n   * will override only a single search property.\n   *\n   * If `paramValue` is an array, it will override the property of the `search` component of\n   * `$location` specified via the first argument.\n   *\n   * If `paramValue` is `null`, the property specified via the first argument will be deleted.\n   *\n   * If `paramValue` is `true`, the property specified via the first argument will be added with no\n   * value nor trailing equal sign.\n   *\n   * @return {Object} If called with no arguments returns the parsed `search` object. If called with\n   * one or more arguments returns `$location` object itself.\n   */\n  search: function(search, paramValue) {\n    switch (arguments.length) {\n      case 0:\n        return this.$$search;\n      case 1:\n        if (isString(search) || isNumber(search)) {\n          search = search.toString();\n          this.$$search = parseKeyValue(search);\n        } else if (isObject(search)) {\n          search = copy(search, {});\n          // remove object undefined or null properties\n          forEach(search, function(value, key) {\n            if (value == null) delete search[key];\n          });\n\n          this.$$search = search;\n        } else {\n          throw $locationMinErr('isrcharg',\n              'The first argument of the `$location#search()` call must be a string or an object.');\n        }\n        break;\n      default:\n        if (isUndefined(paramValue) || paramValue === null) {\n          delete this.$$search[search];\n        } else {\n          this.$$search[search] = paramValue;\n        }\n    }\n\n    this.$$compose();\n    return this;\n  },\n\n  /**\n   * @ngdoc method\n   * @name $location#hash\n   *\n   * @description\n   * This method is getter / setter.\n   *\n   * Returns the hash fragment when called without any parameters.\n   *\n   * Changes the hash fragment when called with a parameter and returns `$location`.\n   *\n   *\n   * ```js\n   * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo#hashValue\n   * var hash = $location.hash();\n   * // => \"hashValue\"\n   * ```\n   *\n   * @param {(string|number)=} hash New hash fragment\n   * @return {string} hash\n   */\n  hash: locationGetterSetter('$$hash', function(hash) {\n    return hash !== null ? hash.toString() : '';\n  }),\n\n  /**\n   * @ngdoc method\n   * @name $location#replace\n   *\n   * @description\n   * If called, all changes to $location during the current `$digest` will replace the current history\n   * record, instead of adding a new one.\n   */\n  replace: function() {\n    this.$$replace = true;\n    return this;\n  }\n};\n\nforEach([LocationHashbangInHtml5Url, LocationHashbangUrl, LocationHtml5Url], function(Location) {\n  Location.prototype = Object.create(locationPrototype);\n\n  /**\n   * @ngdoc method\n   * @name $location#state\n   *\n   * @description\n   * This method is getter / setter.\n   *\n   * Return the history state object when called without any parameter.\n   *\n   * Change the history state object when called with one parameter and return `$location`.\n   * The state object is later passed to `pushState` or `replaceState`.\n   *\n   * NOTE: This method is supported only in HTML5 mode and only in browsers supporting\n   * the HTML5 History API (i.e. methods `pushState` and `replaceState`). If you need to support\n   * older browsers (like IE9 or Android < 4.0), don't use this method.\n   *\n   * @param {object=} state State object for pushState or replaceState\n   * @return {object} state\n   */\n  Location.prototype.state = function(state) {\n    if (!arguments.length) {\n      return this.$$state;\n    }\n\n    if (Location !== LocationHtml5Url || !this.$$html5) {\n      throw $locationMinErr('nostate', 'History API state support is available only ' +\n        'in HTML5 mode and only in browsers supporting HTML5 History API');\n    }\n    // The user might modify `stateObject` after invoking `$location.state(stateObject)`\n    // but we're changing the $$state reference to $browser.state() during the $digest\n    // so the modification window is narrow.\n    this.$$state = isUndefined(state) ? null : state;\n    this.$$urlUpdatedByLocation = true;\n\n    return this;\n  };\n});\n\n\nfunction locationGetter(property) {\n  return /** @this */ function() {\n    return this[property];\n  };\n}\n\n\nfunction locationGetterSetter(property, preprocess) {\n  return /** @this */ function(value) {\n    if (isUndefined(value)) {\n      return this[property];\n    }\n\n    this[property] = preprocess(value);\n    this.$$compose();\n\n    return this;\n  };\n}\n\n\n/**\n * @ngdoc service\n * @name $location\n *\n * @requires $rootElement\n *\n * @description\n * The $location service parses the URL in the browser address bar (based on the\n * [window.location](https://developer.mozilla.org/en/window.location)) and makes the URL\n * available to your application. Changes to the URL in the address bar are reflected into\n * $location service and changes to $location are reflected into the browser address bar.\n *\n * **The $location service:**\n *\n * - Exposes the current URL in the browser address bar, so you can\n *   - Watch and observe the URL.\n *   - Change the URL.\n * - Synchronizes the URL with the browser when the user\n *   - Changes the address bar.\n *   - Clicks the back or forward button (or clicks a History link).\n *   - Clicks on a link.\n * - Represents the URL object as a set of methods (protocol, host, port, path, search, hash).\n *\n * For more information see {@link guide/$location Developer Guide: Using $location}\n */\n\n/**\n * @ngdoc provider\n * @name $locationProvider\n * @this\n *\n * @description\n * Use the `$locationProvider` to configure how the application deep linking paths are stored.\n */\nfunction $LocationProvider() {\n  var hashPrefix = '!',\n      html5Mode = {\n        enabled: false,\n        requireBase: true,\n        rewriteLinks: true\n      };\n\n  /**\n   * @ngdoc method\n   * @name $locationProvider#hashPrefix\n   * @description\n   * The default value for the prefix is `'!'`.\n   * @param {string=} prefix Prefix for hash part (containing path and search)\n   * @returns {*} current value if used as getter or itself (chaining) if used as setter\n   */\n  this.hashPrefix = function(prefix) {\n    if (isDefined(prefix)) {\n      hashPrefix = prefix;\n      return this;\n    } else {\n      return hashPrefix;\n    }\n  };\n\n  /**\n   * @ngdoc method\n   * @name $locationProvider#html5Mode\n   * @description\n   * @param {(boolean|Object)=} mode If boolean, sets `html5Mode.enabled` to value.\n   *   If object, sets `enabled`, `requireBase` and `rewriteLinks` to respective values. Supported\n   *   properties:\n   *   - **enabled** – `{boolean}` – (default: false) If true, will rely on `history.pushState` to\n   *     change urls where supported. Will fall back to hash-prefixed paths in browsers that do not\n   *     support `pushState`.\n   *   - **requireBase** - `{boolean}` - (default: `true`) When html5Mode is enabled, specifies\n   *     whether or not a <base> tag is required to be present. If `enabled` and `requireBase` are\n   *     true, and a base tag is not present, an error will be thrown when `$location` is injected.\n   *     See the {@link guide/$location $location guide for more information}\n   *   - **rewriteLinks** - `{boolean|string}` - (default: `true`) When html5Mode is enabled,\n   *     enables/disables URL rewriting for relative links. If set to a string, URL rewriting will\n   *     only happen on links with an attribute that matches the given string. For example, if set\n   *     to `'internal-link'`, then the URL will only be rewritten for `<a internal-link>` links.\n   *     Note that [attribute name normalization](guide/directive#normalization) does not apply\n   *     here, so `'internalLink'` will **not** match `'internal-link'`.\n   *\n   * @returns {Object} html5Mode object if used as getter or itself (chaining) if used as setter\n   */\n  this.html5Mode = function(mode) {\n    if (isBoolean(mode)) {\n      html5Mode.enabled = mode;\n      return this;\n    } else if (isObject(mode)) {\n\n      if (isBoolean(mode.enabled)) {\n        html5Mode.enabled = mode.enabled;\n      }\n\n      if (isBoolean(mode.requireBase)) {\n        html5Mode.requireBase = mode.requireBase;\n      }\n\n      if (isBoolean(mode.rewriteLinks) || isString(mode.rewriteLinks)) {\n        html5Mode.rewriteLinks = mode.rewriteLinks;\n      }\n\n      return this;\n    } else {\n      return html5Mode;\n    }\n  };\n\n  /**\n   * @ngdoc event\n   * @name $location#$locationChangeStart\n   * @eventType broadcast on root scope\n   * @description\n   * Broadcasted before a URL will change.\n   *\n   * This change can be prevented by calling\n   * `preventDefault` method of the event. See {@link ng.$rootScope.Scope#$on} for more\n   * details about event object. Upon successful change\n   * {@link ng.$location#$locationChangeSuccess $locationChangeSuccess} is fired.\n   *\n   * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when\n   * the browser supports the HTML5 History API.\n   *\n   * @param {Object} angularEvent Synthetic event object.\n   * @param {string} newUrl New URL\n   * @param {string=} oldUrl URL that was before it was changed.\n   * @param {string=} newState New history state object\n   * @param {string=} oldState History state object that was before it was changed.\n   */\n\n  /**\n   * @ngdoc event\n   * @name $location#$locationChangeSuccess\n   * @eventType broadcast on root scope\n   * @description\n   * Broadcasted after a URL was changed.\n   *\n   * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when\n   * the browser supports the HTML5 History API.\n   *\n   * @param {Object} angularEvent Synthetic event object.\n   * @param {string} newUrl New URL\n   * @param {string=} oldUrl URL that was before it was changed.\n   * @param {string=} newState New history state object\n   * @param {string=} oldState History state object that was before it was changed.\n   */\n\n  this.$get = ['$rootScope', '$browser', '$sniffer', '$rootElement', '$window',\n      function($rootScope, $browser, $sniffer, $rootElement, $window) {\n    var $location,\n        LocationMode,\n        baseHref = $browser.baseHref(), // if base[href] is undefined, it defaults to ''\n        initialUrl = $browser.url(),\n        appBase;\n\n    if (html5Mode.enabled) {\n      if (!baseHref && html5Mode.requireBase) {\n        throw $locationMinErr('nobase',\n          '$location in HTML5 mode requires a <base> tag to be present!');\n      }\n      appBase = serverBase(initialUrl) + (baseHref || '/');\n      LocationMode = $sniffer.history ? LocationHtml5Url : LocationHashbangInHtml5Url;\n    } else {\n      appBase = stripHash(initialUrl);\n      LocationMode = LocationHashbangUrl;\n    }\n    var appBaseNoFile = stripFile(appBase);\n\n    $location = new LocationMode(appBase, appBaseNoFile, '#' + hashPrefix);\n    $location.$$parseLinkUrl(initialUrl, initialUrl);\n\n    $location.$$state = $browser.state();\n\n    var IGNORE_URI_REGEXP = /^\\s*(javascript|mailto):/i;\n\n    function setBrowserUrlWithFallback(url, replace, state) {\n      var oldUrl = $location.url();\n      var oldState = $location.$$state;\n      try {\n        $browser.url(url, replace, state);\n\n        // Make sure $location.state() returns referentially identical (not just deeply equal)\n        // state object; this makes possible quick checking if the state changed in the digest\n        // loop. Checking deep equality would be too expensive.\n        $location.$$state = $browser.state();\n      } catch (e) {\n        // Restore old values if pushState fails\n        $location.url(oldUrl);\n        $location.$$state = oldState;\n\n        throw e;\n      }\n    }\n\n    $rootElement.on('click', function(event) {\n      var rewriteLinks = html5Mode.rewriteLinks;\n      // TODO(vojta): rewrite link when opening in new tab/window (in legacy browser)\n      // currently we open nice url link and redirect then\n\n      if (!rewriteLinks || event.ctrlKey || event.metaKey || event.shiftKey || event.which === 2 || event.button === 2) return;\n\n      var elm = jqLite(event.target);\n\n      // traverse the DOM up to find first A tag\n      while (nodeName_(elm[0]) !== 'a') {\n        // ignore rewriting if no A tag (reached root element, or no parent - removed from document)\n        if (elm[0] === $rootElement[0] || !(elm = elm.parent())[0]) return;\n      }\n\n      if (isString(rewriteLinks) && isUndefined(elm.attr(rewriteLinks))) return;\n\n      var absHref = elm.prop('href');\n      // get the actual href attribute - see\n      // http://msdn.microsoft.com/en-us/library/ie/dd347148(v=vs.85).aspx\n      var relHref = elm.attr('href') || elm.attr('xlink:href');\n\n      if (isObject(absHref) && absHref.toString() === '[object SVGAnimatedString]') {\n        // SVGAnimatedString.animVal should be identical to SVGAnimatedString.baseVal, unless during\n        // an animation.\n        absHref = urlResolve(absHref.animVal).href;\n      }\n\n      // Ignore when url is started with javascript: or mailto:\n      if (IGNORE_URI_REGEXP.test(absHref)) return;\n\n      if (absHref && !elm.attr('target') && !event.isDefaultPrevented()) {\n        if ($location.$$parseLinkUrl(absHref, relHref)) {\n          // We do a preventDefault for all urls that are part of the angular application,\n          // in html5mode and also without, so that we are able to abort navigation without\n          // getting double entries in the location history.\n          event.preventDefault();\n          // update location manually\n          if ($location.absUrl() !== $browser.url()) {\n            $rootScope.$apply();\n            // hack to work around FF6 bug 684208 when scenario runner clicks on links\n            $window.angular['ff-684208-preventDefault'] = true;\n          }\n        }\n      }\n    });\n\n\n    // rewrite hashbang url <> html5 url\n    if (trimEmptyHash($location.absUrl()) !== trimEmptyHash(initialUrl)) {\n      $browser.url($location.absUrl(), true);\n    }\n\n    var initializing = true;\n\n    // update $location when $browser url changes\n    $browser.onUrlChange(function(newUrl, newState) {\n\n      if (!startsWith(newUrl, appBaseNoFile)) {\n        // If we are navigating outside of the app then force a reload\n        $window.location.href = newUrl;\n        return;\n      }\n\n      $rootScope.$evalAsync(function() {\n        var oldUrl = $location.absUrl();\n        var oldState = $location.$$state;\n        var defaultPrevented;\n        newUrl = trimEmptyHash(newUrl);\n        $location.$$parse(newUrl);\n        $location.$$state = newState;\n\n        defaultPrevented = $rootScope.$broadcast('$locationChangeStart', newUrl, oldUrl,\n            newState, oldState).defaultPrevented;\n\n        // if the location was changed by a `$locationChangeStart` handler then stop\n        // processing this location change\n        if ($location.absUrl() !== newUrl) return;\n\n        if (defaultPrevented) {\n          $location.$$parse(oldUrl);\n          $location.$$state = oldState;\n          setBrowserUrlWithFallback(oldUrl, false, oldState);\n        } else {\n          initializing = false;\n          afterLocationChange(oldUrl, oldState);\n        }\n      });\n      if (!$rootScope.$$phase) $rootScope.$digest();\n    });\n\n    // update browser\n    $rootScope.$watch(function $locationWatch() {\n      if (initializing || $location.$$urlUpdatedByLocation) {\n        $location.$$urlUpdatedByLocation = false;\n\n        var oldUrl = trimEmptyHash($browser.url());\n        var newUrl = trimEmptyHash($location.absUrl());\n        var oldState = $browser.state();\n        var currentReplace = $location.$$replace;\n        var urlOrStateChanged = oldUrl !== newUrl ||\n          ($location.$$html5 && $sniffer.history && oldState !== $location.$$state);\n\n        if (initializing || urlOrStateChanged) {\n          initializing = false;\n\n          $rootScope.$evalAsync(function() {\n            var newUrl = $location.absUrl();\n            var defaultPrevented = $rootScope.$broadcast('$locationChangeStart', newUrl, oldUrl,\n                $location.$$state, oldState).defaultPrevented;\n\n            // if the location was changed by a `$locationChangeStart` handler then stop\n            // processing this location change\n            if ($location.absUrl() !== newUrl) return;\n\n            if (defaultPrevented) {\n              $location.$$parse(oldUrl);\n              $location.$$state = oldState;\n            } else {\n              if (urlOrStateChanged) {\n                setBrowserUrlWithFallback(newUrl, currentReplace,\n                                          oldState === $location.$$state ? null : $location.$$state);\n              }\n              afterLocationChange(oldUrl, oldState);\n            }\n          });\n        }\n      }\n\n      $location.$$replace = false;\n\n      // we don't need to return anything because $evalAsync will make the digest loop dirty when\n      // there is a change\n    });\n\n    return $location;\n\n    function afterLocationChange(oldUrl, oldState) {\n      $rootScope.$broadcast('$locationChangeSuccess', $location.absUrl(), oldUrl,\n        $location.$$state, oldState);\n    }\n}];\n}\n\n/**\n * @ngdoc service\n * @name $log\n * @requires $window\n *\n * @description\n * Simple service for logging. Default implementation safely writes the message\n * into the browser's console (if present).\n *\n * The main purpose of this service is to simplify debugging and troubleshooting.\n *\n * To reveal the location of the calls to `$log` in the JavaScript console,\n * you can \"blackbox\" the AngularJS source in your browser:\n *\n * [Mozilla description of blackboxing](https://developer.mozilla.org/en-US/docs/Tools/Debugger/How_to/Black_box_a_source).\n * [Chrome description of blackboxing](https://developer.chrome.com/devtools/docs/blackboxing).\n *\n * Note: Not all browsers support blackboxing.\n *\n * The default is to log `debug` messages. You can use\n * {@link ng.$logProvider ng.$logProvider#debugEnabled} to change this.\n *\n * @example\n   <example module=\"logExample\" name=\"log-service\">\n     <file name=\"script.js\">\n       angular.module('logExample', [])\n         .controller('LogController', ['$scope', '$log', function($scope, $log) {\n           $scope.$log = $log;\n           $scope.message = 'Hello World!';\n         }]);\n     </file>\n     <file name=\"index.html\">\n       <div ng-controller=\"LogController\">\n         <p>Reload this page with open console, enter text and hit the log button...</p>\n         <label>Message:\n         <input type=\"text\" ng-model=\"message\" /></label>\n         <button ng-click=\"$log.log(message)\">log</button>\n         <button ng-click=\"$log.warn(message)\">warn</button>\n         <button ng-click=\"$log.info(message)\">info</button>\n         <button ng-click=\"$log.error(message)\">error</button>\n         <button ng-click=\"$log.debug(message)\">debug</button>\n       </div>\n     </file>\n   </example>\n */\n\n/**\n * @ngdoc provider\n * @name $logProvider\n * @this\n *\n * @description\n * Use the `$logProvider` to configure how the application logs messages\n */\nfunction $LogProvider() {\n  var debug = true,\n      self = this;\n\n  /**\n   * @ngdoc method\n   * @name $logProvider#debugEnabled\n   * @description\n   * @param {boolean=} flag enable or disable debug level messages\n   * @returns {*} current value if used as getter or itself (chaining) if used as setter\n   */\n  this.debugEnabled = function(flag) {\n    if (isDefined(flag)) {\n      debug = flag;\n      return this;\n    } else {\n      return debug;\n    }\n  };\n\n  this.$get = ['$window', function($window) {\n    // Support: IE 9-11, Edge 12-14+\n    // IE/Edge display errors in such a way that it requires the user to click in 4 places\n    // to see the stack trace. There is no way to feature-detect it so there's a chance\n    // of the user agent sniffing to go wrong but since it's only about logging, this shouldn't\n    // break apps. Other browsers display errors in a sensible way and some of them map stack\n    // traces along source maps if available so it makes sense to let browsers display it\n    // as they want.\n    var formatStackTrace = msie || /\\bEdge\\//.test($window.navigator && $window.navigator.userAgent);\n\n    return {\n      /**\n       * @ngdoc method\n       * @name $log#log\n       *\n       * @description\n       * Write a log message\n       */\n      log: consoleLog('log'),\n\n      /**\n       * @ngdoc method\n       * @name $log#info\n       *\n       * @description\n       * Write an information message\n       */\n      info: consoleLog('info'),\n\n      /**\n       * @ngdoc method\n       * @name $log#warn\n       *\n       * @description\n       * Write a warning message\n       */\n      warn: consoleLog('warn'),\n\n      /**\n       * @ngdoc method\n       * @name $log#error\n       *\n       * @description\n       * Write an error message\n       */\n      error: consoleLog('error'),\n\n      /**\n       * @ngdoc method\n       * @name $log#debug\n       *\n       * @description\n       * Write a debug message\n       */\n      debug: (function() {\n        var fn = consoleLog('debug');\n\n        return function() {\n          if (debug) {\n            fn.apply(self, arguments);\n          }\n        };\n      })()\n    };\n\n    function formatError(arg) {\n      if (isError(arg)) {\n        if (arg.stack && formatStackTrace) {\n          arg = (arg.message && arg.stack.indexOf(arg.message) === -1)\n              ? 'Error: ' + arg.message + '\\n' + arg.stack\n              : arg.stack;\n        } else if (arg.sourceURL) {\n          arg = arg.message + '\\n' + arg.sourceURL + ':' + arg.line;\n        }\n      }\n      return arg;\n    }\n\n    function consoleLog(type) {\n      var console = $window.console || {},\n          logFn = console[type] || console.log || noop;\n\n      return function() {\n        var args = [];\n        forEach(arguments, function(arg) {\n          args.push(formatError(arg));\n        });\n        // Support: IE 9 only\n        // console methods don't inherit from Function.prototype in IE 9 so we can't\n        // call `logFn.apply(console, args)` directly.\n        return Function.prototype.apply.call(logFn, console, args);\n      };\n    }\n  }];\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *     Any commits to this file should be reviewed with security in mind.  *\n *   Changes to this file can potentially create security vulnerabilities. *\n *          An approval from 2 Core members with history of modifying      *\n *                         this file is required.                          *\n *                                                                         *\n *  Does the change somehow allow for arbitrary javascript to be executed? *\n *    Or allows for someone to change the prototype of built-in objects?   *\n *     Or gives undesired access to variables likes document or window?    *\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\nvar $parseMinErr = minErr('$parse');\n\nvar objectValueOf = {}.constructor.prototype.valueOf;\n\n// Sandboxing Angular Expressions\n// ------------------------------\n// Angular expressions are no longer sandboxed. So it is now even easier to access arbitrary JS code by\n// various means such as obtaining a reference to native JS functions like the Function constructor.\n//\n// As an example, consider the following Angular expression:\n//\n//   {}.toString.constructor('alert(\"evil JS code\")')\n//\n// It is important to realize that if you create an expression from a string that contains user provided\n// content then it is possible that your application contains a security vulnerability to an XSS style attack.\n//\n// See https://docs.angularjs.org/guide/security\n\n\nfunction getStringValue(name) {\n  // Property names must be strings. This means that non-string objects cannot be used\n  // as keys in an object. Any non-string object, including a number, is typecasted\n  // into a string via the toString method.\n  // -- MDN, https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Property_accessors#Property_names\n  //\n  // So, to ensure that we are checking the same `name` that JavaScript would use, we cast it\n  // to a string. It's not always possible. If `name` is an object and its `toString` method is\n  // 'broken' (doesn't return a string, isn't a function, etc.), an error will be thrown:\n  //\n  // TypeError: Cannot convert object to primitive value\n  //\n  // For performance reasons, we don't catch this error here and allow it to propagate up the call\n  // stack. Note that you'll get the same error in JavaScript if you try to access a property using\n  // such a 'broken' object as a key.\n  return name + '';\n}\n\n\nvar OPERATORS = createMap();\nforEach('+ - * / % === !== == != < > <= >= && || ! = |'.split(' '), function(operator) { OPERATORS[operator] = true; });\nvar ESCAPE = {'n':'\\n', 'f':'\\f', 'r':'\\r', 't':'\\t', 'v':'\\v', '\\'':'\\'', '\"':'\"'};\n\n\n/////////////////////////////////////////\n\n\n/**\n * @constructor\n */\nvar Lexer = function Lexer(options) {\n  this.options = options;\n};\n\nLexer.prototype = {\n  constructor: Lexer,\n\n  lex: function(text) {\n    this.text = text;\n    this.index = 0;\n    this.tokens = [];\n\n    while (this.index < this.text.length) {\n      var ch = this.text.charAt(this.index);\n      if (ch === '\"' || ch === '\\'') {\n        this.readString(ch);\n      } else if (this.isNumber(ch) || ch === '.' && this.isNumber(this.peek())) {\n        this.readNumber();\n      } else if (this.isIdentifierStart(this.peekMultichar())) {\n        this.readIdent();\n      } else if (this.is(ch, '(){}[].,;:?')) {\n        this.tokens.push({index: this.index, text: ch});\n        this.index++;\n      } else if (this.isWhitespace(ch)) {\n        this.index++;\n      } else {\n        var ch2 = ch + this.peek();\n        var ch3 = ch2 + this.peek(2);\n        var op1 = OPERATORS[ch];\n        var op2 = OPERATORS[ch2];\n        var op3 = OPERATORS[ch3];\n        if (op1 || op2 || op3) {\n          var token = op3 ? ch3 : (op2 ? ch2 : ch);\n          this.tokens.push({index: this.index, text: token, operator: true});\n          this.index += token.length;\n        } else {\n          this.throwError('Unexpected next character ', this.index, this.index + 1);\n        }\n      }\n    }\n    return this.tokens;\n  },\n\n  is: function(ch, chars) {\n    return chars.indexOf(ch) !== -1;\n  },\n\n  peek: function(i) {\n    var num = i || 1;\n    return (this.index + num < this.text.length) ? this.text.charAt(this.index + num) : false;\n  },\n\n  isNumber: function(ch) {\n    return ('0' <= ch && ch <= '9') && typeof ch === 'string';\n  },\n\n  isWhitespace: function(ch) {\n    // IE treats non-breaking space as \\u00A0\n    return (ch === ' ' || ch === '\\r' || ch === '\\t' ||\n            ch === '\\n' || ch === '\\v' || ch === '\\u00A0');\n  },\n\n  isIdentifierStart: function(ch) {\n    return this.options.isIdentifierStart ?\n        this.options.isIdentifierStart(ch, this.codePointAt(ch)) :\n        this.isValidIdentifierStart(ch);\n  },\n\n  isValidIdentifierStart: function(ch) {\n    return ('a' <= ch && ch <= 'z' ||\n            'A' <= ch && ch <= 'Z' ||\n            '_' === ch || ch === '$');\n  },\n\n  isIdentifierContinue: function(ch) {\n    return this.options.isIdentifierContinue ?\n        this.options.isIdentifierContinue(ch, this.codePointAt(ch)) :\n        this.isValidIdentifierContinue(ch);\n  },\n\n  isValidIdentifierContinue: function(ch, cp) {\n    return this.isValidIdentifierStart(ch, cp) || this.isNumber(ch);\n  },\n\n  codePointAt: function(ch) {\n    if (ch.length === 1) return ch.charCodeAt(0);\n    // eslint-disable-next-line no-bitwise\n    return (ch.charCodeAt(0) << 10) + ch.charCodeAt(1) - 0x35FDC00;\n  },\n\n  peekMultichar: function() {\n    var ch = this.text.charAt(this.index);\n    var peek = this.peek();\n    if (!peek) {\n      return ch;\n    }\n    var cp1 = ch.charCodeAt(0);\n    var cp2 = peek.charCodeAt(0);\n    if (cp1 >= 0xD800 && cp1 <= 0xDBFF && cp2 >= 0xDC00 && cp2 <= 0xDFFF) {\n      return ch + peek;\n    }\n    return ch;\n  },\n\n  isExpOperator: function(ch) {\n    return (ch === '-' || ch === '+' || this.isNumber(ch));\n  },\n\n  throwError: function(error, start, end) {\n    end = end || this.index;\n    var colStr = (isDefined(start)\n            ? 's ' + start +  '-' + this.index + ' [' + this.text.substring(start, end) + ']'\n            : ' ' + end);\n    throw $parseMinErr('lexerr', 'Lexer Error: {0} at column{1} in expression [{2}].',\n        error, colStr, this.text);\n  },\n\n  readNumber: function() {\n    var number = '';\n    var start = this.index;\n    while (this.index < this.text.length) {\n      var ch = lowercase(this.text.charAt(this.index));\n      if (ch === '.' || this.isNumber(ch)) {\n        number += ch;\n      } else {\n        var peekCh = this.peek();\n        if (ch === 'e' && this.isExpOperator(peekCh)) {\n          number += ch;\n        } else if (this.isExpOperator(ch) &&\n            peekCh && this.isNumber(peekCh) &&\n            number.charAt(number.length - 1) === 'e') {\n          number += ch;\n        } else if (this.isExpOperator(ch) &&\n            (!peekCh || !this.isNumber(peekCh)) &&\n            number.charAt(number.length - 1) === 'e') {\n          this.throwError('Invalid exponent');\n        } else {\n          break;\n        }\n      }\n      this.index++;\n    }\n    this.tokens.push({\n      index: start,\n      text: number,\n      constant: true,\n      value: Number(number)\n    });\n  },\n\n  readIdent: function() {\n    var start = this.index;\n    this.index += this.peekMultichar().length;\n    while (this.index < this.text.length) {\n      var ch = this.peekMultichar();\n      if (!this.isIdentifierContinue(ch)) {\n        break;\n      }\n      this.index += ch.length;\n    }\n    this.tokens.push({\n      index: start,\n      text: this.text.slice(start, this.index),\n      identifier: true\n    });\n  },\n\n  readString: function(quote) {\n    var start = this.index;\n    this.index++;\n    var string = '';\n    var rawString = quote;\n    var escape = false;\n    while (this.index < this.text.length) {\n      var ch = this.text.charAt(this.index);\n      rawString += ch;\n      if (escape) {\n        if (ch === 'u') {\n          var hex = this.text.substring(this.index + 1, this.index + 5);\n          if (!hex.match(/[\\da-f]{4}/i)) {\n            this.throwError('Invalid unicode escape [\\\\u' + hex + ']');\n          }\n          this.index += 4;\n          string += String.fromCharCode(parseInt(hex, 16));\n        } else {\n          var rep = ESCAPE[ch];\n          string = string + (rep || ch);\n        }\n        escape = false;\n      } else if (ch === '\\\\') {\n        escape = true;\n      } else if (ch === quote) {\n        this.index++;\n        this.tokens.push({\n          index: start,\n          text: rawString,\n          constant: true,\n          value: string\n        });\n        return;\n      } else {\n        string += ch;\n      }\n      this.index++;\n    }\n    this.throwError('Unterminated quote', start);\n  }\n};\n\nvar AST = function AST(lexer, options) {\n  this.lexer = lexer;\n  this.options = options;\n};\n\nAST.Program = 'Program';\nAST.ExpressionStatement = 'ExpressionStatement';\nAST.AssignmentExpression = 'AssignmentExpression';\nAST.ConditionalExpression = 'ConditionalExpression';\nAST.LogicalExpression = 'LogicalExpression';\nAST.BinaryExpression = 'BinaryExpression';\nAST.UnaryExpression = 'UnaryExpression';\nAST.CallExpression = 'CallExpression';\nAST.MemberExpression = 'MemberExpression';\nAST.Identifier = 'Identifier';\nAST.Literal = 'Literal';\nAST.ArrayExpression = 'ArrayExpression';\nAST.Property = 'Property';\nAST.ObjectExpression = 'ObjectExpression';\nAST.ThisExpression = 'ThisExpression';\nAST.LocalsExpression = 'LocalsExpression';\n\n// Internal use only\nAST.NGValueParameter = 'NGValueParameter';\n\nAST.prototype = {\n  ast: function(text) {\n    this.text = text;\n    this.tokens = this.lexer.lex(text);\n\n    var value = this.program();\n\n    if (this.tokens.length !== 0) {\n      this.throwError('is an unexpected token', this.tokens[0]);\n    }\n\n    return value;\n  },\n\n  program: function() {\n    var body = [];\n    while (true) {\n      if (this.tokens.length > 0 && !this.peek('}', ')', ';', ']'))\n        body.push(this.expressionStatement());\n      if (!this.expect(';')) {\n        return { type: AST.Program, body: body};\n      }\n    }\n  },\n\n  expressionStatement: function() {\n    return { type: AST.ExpressionStatement, expression: this.filterChain() };\n  },\n\n  filterChain: function() {\n    var left = this.expression();\n    while (this.expect('|')) {\n      left = this.filter(left);\n    }\n    return left;\n  },\n\n  expression: function() {\n    return this.assignment();\n  },\n\n  assignment: function() {\n    var result = this.ternary();\n    if (this.expect('=')) {\n      if (!isAssignable(result)) {\n        throw $parseMinErr('lval', 'Trying to assign a value to a non l-value');\n      }\n\n      result = { type: AST.AssignmentExpression, left: result, right: this.assignment(), operator: '='};\n    }\n    return result;\n  },\n\n  ternary: function() {\n    var test = this.logicalOR();\n    var alternate;\n    var consequent;\n    if (this.expect('?')) {\n      alternate = this.expression();\n      if (this.consume(':')) {\n        consequent = this.expression();\n        return { type: AST.ConditionalExpression, test: test, alternate: alternate, consequent: consequent};\n      }\n    }\n    return test;\n  },\n\n  logicalOR: function() {\n    var left = this.logicalAND();\n    while (this.expect('||')) {\n      left = { type: AST.LogicalExpression, operator: '||', left: left, right: this.logicalAND() };\n    }\n    return left;\n  },\n\n  logicalAND: function() {\n    var left = this.equality();\n    while (this.expect('&&')) {\n      left = { type: AST.LogicalExpression, operator: '&&', left: left, right: this.equality()};\n    }\n    return left;\n  },\n\n  equality: function() {\n    var left = this.relational();\n    var token;\n    while ((token = this.expect('==','!=','===','!=='))) {\n      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.relational() };\n    }\n    return left;\n  },\n\n  relational: function() {\n    var left = this.additive();\n    var token;\n    while ((token = this.expect('<', '>', '<=', '>='))) {\n      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.additive() };\n    }\n    return left;\n  },\n\n  additive: function() {\n    var left = this.multiplicative();\n    var token;\n    while ((token = this.expect('+','-'))) {\n      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.multiplicative() };\n    }\n    return left;\n  },\n\n  multiplicative: function() {\n    var left = this.unary();\n    var token;\n    while ((token = this.expect('*','/','%'))) {\n      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.unary() };\n    }\n    return left;\n  },\n\n  unary: function() {\n    var token;\n    if ((token = this.expect('+', '-', '!'))) {\n      return { type: AST.UnaryExpression, operator: token.text, prefix: true, argument: this.unary() };\n    } else {\n      return this.primary();\n    }\n  },\n\n  primary: function() {\n    var primary;\n    if (this.expect('(')) {\n      primary = this.filterChain();\n      this.consume(')');\n    } else if (this.expect('[')) {\n      primary = this.arrayDeclaration();\n    } else if (this.expect('{')) {\n      primary = this.object();\n    } else if (this.selfReferential.hasOwnProperty(this.peek().text)) {\n      primary = copy(this.selfReferential[this.consume().text]);\n    } else if (this.options.literals.hasOwnProperty(this.peek().text)) {\n      primary = { type: AST.Literal, value: this.options.literals[this.consume().text]};\n    } else if (this.peek().identifier) {\n      primary = this.identifier();\n    } else if (this.peek().constant) {\n      primary = this.constant();\n    } else {\n      this.throwError('not a primary expression', this.peek());\n    }\n\n    var next;\n    while ((next = this.expect('(', '[', '.'))) {\n      if (next.text === '(') {\n        primary = {type: AST.CallExpression, callee: primary, arguments: this.parseArguments() };\n        this.consume(')');\n      } else if (next.text === '[') {\n        primary = { type: AST.MemberExpression, object: primary, property: this.expression(), computed: true };\n        this.consume(']');\n      } else if (next.text === '.') {\n        primary = { type: AST.MemberExpression, object: primary, property: this.identifier(), computed: false };\n      } else {\n        this.throwError('IMPOSSIBLE');\n      }\n    }\n    return primary;\n  },\n\n  filter: function(baseExpression) {\n    var args = [baseExpression];\n    var result = {type: AST.CallExpression, callee: this.identifier(), arguments: args, filter: true};\n\n    while (this.expect(':')) {\n      args.push(this.expression());\n    }\n\n    return result;\n  },\n\n  parseArguments: function() {\n    var args = [];\n    if (this.peekToken().text !== ')') {\n      do {\n        args.push(this.filterChain());\n      } while (this.expect(','));\n    }\n    return args;\n  },\n\n  identifier: function() {\n    var token = this.consume();\n    if (!token.identifier) {\n      this.throwError('is not a valid identifier', token);\n    }\n    return { type: AST.Identifier, name: token.text };\n  },\n\n  constant: function() {\n    // TODO check that it is a constant\n    return { type: AST.Literal, value: this.consume().value };\n  },\n\n  arrayDeclaration: function() {\n    var elements = [];\n    if (this.peekToken().text !== ']') {\n      do {\n        if (this.peek(']')) {\n          // Support trailing commas per ES5.1.\n          break;\n        }\n        elements.push(this.expression());\n      } while (this.expect(','));\n    }\n    this.consume(']');\n\n    return { type: AST.ArrayExpression, elements: elements };\n  },\n\n  object: function() {\n    var properties = [], property;\n    if (this.peekToken().text !== '}') {\n      do {\n        if (this.peek('}')) {\n          // Support trailing commas per ES5.1.\n          break;\n        }\n        property = {type: AST.Property, kind: 'init'};\n        if (this.peek().constant) {\n          property.key = this.constant();\n          property.computed = false;\n          this.consume(':');\n          property.value = this.expression();\n        } else if (this.peek().identifier) {\n          property.key = this.identifier();\n          property.computed = false;\n          if (this.peek(':')) {\n            this.consume(':');\n            property.value = this.expression();\n          } else {\n            property.value = property.key;\n          }\n        } else if (this.peek('[')) {\n          this.consume('[');\n          property.key = this.expression();\n          this.consume(']');\n          property.computed = true;\n          this.consume(':');\n          property.value = this.expression();\n        } else {\n          this.throwError('invalid key', this.peek());\n        }\n        properties.push(property);\n      } while (this.expect(','));\n    }\n    this.consume('}');\n\n    return {type: AST.ObjectExpression, properties: properties };\n  },\n\n  throwError: function(msg, token) {\n    throw $parseMinErr('syntax',\n        'Syntax Error: Token \\'{0}\\' {1} at column {2} of the expression [{3}] starting at [{4}].',\n          token.text, msg, (token.index + 1), this.text, this.text.substring(token.index));\n  },\n\n  consume: function(e1) {\n    if (this.tokens.length === 0) {\n      throw $parseMinErr('ueoe', 'Unexpected end of expression: {0}', this.text);\n    }\n\n    var token = this.expect(e1);\n    if (!token) {\n      this.throwError('is unexpected, expecting [' + e1 + ']', this.peek());\n    }\n    return token;\n  },\n\n  peekToken: function() {\n    if (this.tokens.length === 0) {\n      throw $parseMinErr('ueoe', 'Unexpected end of expression: {0}', this.text);\n    }\n    return this.tokens[0];\n  },\n\n  peek: function(e1, e2, e3, e4) {\n    return this.peekAhead(0, e1, e2, e3, e4);\n  },\n\n  peekAhead: function(i, e1, e2, e3, e4) {\n    if (this.tokens.length > i) {\n      var token = this.tokens[i];\n      var t = token.text;\n      if (t === e1 || t === e2 || t === e3 || t === e4 ||\n          (!e1 && !e2 && !e3 && !e4)) {\n        return token;\n      }\n    }\n    return false;\n  },\n\n  expect: function(e1, e2, e3, e4) {\n    var token = this.peek(e1, e2, e3, e4);\n    if (token) {\n      this.tokens.shift();\n      return token;\n    }\n    return false;\n  },\n\n  selfReferential: {\n    'this': {type: AST.ThisExpression },\n    '$locals': {type: AST.LocalsExpression }\n  }\n};\n\nfunction ifDefined(v, d) {\n  return typeof v !== 'undefined' ? v : d;\n}\n\nfunction plusFn(l, r) {\n  if (typeof l === 'undefined') return r;\n  if (typeof r === 'undefined') return l;\n  return l + r;\n}\n\nfunction isStateless($filter, filterName) {\n  var fn = $filter(filterName);\n  return !fn.$stateful;\n}\n\nvar PURITY_ABSOLUTE = 1;\nvar PURITY_RELATIVE = 2;\n\n// Detect nodes which could depend on non-shallow state of objects\nfunction isPure(node, parentIsPure) {\n  switch (node.type) {\n    // Computed members might invoke a stateful toString()\n    case AST.MemberExpression:\n      if (node.computed) {\n        return false;\n      }\n      break;\n\n    // Unary always convert to primative\n    case AST.UnaryExpression:\n      return PURITY_ABSOLUTE;\n\n    // The binary + operator can invoke a stateful toString().\n    case AST.BinaryExpression:\n      return node.operator !== '+' ? PURITY_ABSOLUTE : false;\n\n    // Functions / filters probably read state from within objects\n    case AST.CallExpression:\n      return false;\n  }\n\n  return (undefined === parentIsPure) ? PURITY_RELATIVE : parentIsPure;\n}\n\nfunction findConstantAndWatchExpressions(ast, $filter, parentIsPure) {\n  var allConstants;\n  var argsToWatch;\n  var isStatelessFilter;\n\n  var astIsPure = ast.isPure = isPure(ast, parentIsPure);\n\n  switch (ast.type) {\n  case AST.Program:\n    allConstants = true;\n    forEach(ast.body, function(expr) {\n      findConstantAndWatchExpressions(expr.expression, $filter, astIsPure);\n      allConstants = allConstants && expr.expression.constant;\n    });\n    ast.constant = allConstants;\n    break;\n  case AST.Literal:\n    ast.constant = true;\n    ast.toWatch = [];\n    break;\n  case AST.UnaryExpression:\n    findConstantAndWatchExpressions(ast.argument, $filter, astIsPure);\n    ast.constant = ast.argument.constant;\n    ast.toWatch = ast.argument.toWatch;\n    break;\n  case AST.BinaryExpression:\n    findConstantAndWatchExpressions(ast.left, $filter, astIsPure);\n    findConstantAndWatchExpressions(ast.right, $filter, astIsPure);\n    ast.constant = ast.left.constant && ast.right.constant;\n    ast.toWatch = ast.left.toWatch.concat(ast.right.toWatch);\n    break;\n  case AST.LogicalExpression:\n    findConstantAndWatchExpressions(ast.left, $filter, astIsPure);\n    findConstantAndWatchExpressions(ast.right, $filter, astIsPure);\n    ast.constant = ast.left.constant && ast.right.constant;\n    ast.toWatch = ast.constant ? [] : [ast];\n    break;\n  case AST.ConditionalExpression:\n    findConstantAndWatchExpressions(ast.test, $filter, astIsPure);\n    findConstantAndWatchExpressions(ast.alternate, $filter, astIsPure);\n    findConstantAndWatchExpressions(ast.consequent, $filter, astIsPure);\n    ast.constant = ast.test.constant && ast.alternate.constant && ast.consequent.constant;\n    ast.toWatch = ast.constant ? [] : [ast];\n    break;\n  case AST.Identifier:\n    ast.constant = false;\n    ast.toWatch = [ast];\n    break;\n  case AST.MemberExpression:\n    findConstantAndWatchExpressions(ast.object, $filter, astIsPure);\n    if (ast.computed) {\n      findConstantAndWatchExpressions(ast.property, $filter, astIsPure);\n    }\n    ast.constant = ast.object.constant && (!ast.computed || ast.property.constant);\n    ast.toWatch = ast.constant ? [] : [ast];\n    break;\n  case AST.CallExpression:\n    isStatelessFilter = ast.filter ? isStateless($filter, ast.callee.name) : false;\n    allConstants = isStatelessFilter;\n    argsToWatch = [];\n    forEach(ast.arguments, function(expr) {\n      findConstantAndWatchExpressions(expr, $filter, astIsPure);\n      allConstants = allConstants && expr.constant;\n      argsToWatch.push.apply(argsToWatch, expr.toWatch);\n    });\n    ast.constant = allConstants;\n    ast.toWatch = isStatelessFilter ? argsToWatch : [ast];\n    break;\n  case AST.AssignmentExpression:\n    findConstantAndWatchExpressions(ast.left, $filter, astIsPure);\n    findConstantAndWatchExpressions(ast.right, $filter, astIsPure);\n    ast.constant = ast.left.constant && ast.right.constant;\n    ast.toWatch = [ast];\n    break;\n  case AST.ArrayExpression:\n    allConstants = true;\n    argsToWatch = [];\n    forEach(ast.elements, function(expr) {\n      findConstantAndWatchExpressions(expr, $filter, astIsPure);\n      allConstants = allConstants && expr.constant;\n      argsToWatch.push.apply(argsToWatch, expr.toWatch);\n    });\n    ast.constant = allConstants;\n    ast.toWatch = argsToWatch;\n    break;\n  case AST.ObjectExpression:\n    allConstants = true;\n    argsToWatch = [];\n    forEach(ast.properties, function(property) {\n      findConstantAndWatchExpressions(property.value, $filter, astIsPure);\n      allConstants = allConstants && property.value.constant;\n      argsToWatch.push.apply(argsToWatch, property.value.toWatch);\n      if (property.computed) {\n        //`{[key]: value}` implicitly does `key.toString()` which may be non-pure\n        findConstantAndWatchExpressions(property.key, $filter, /*parentIsPure=*/false);\n        allConstants = allConstants && property.key.constant;\n        argsToWatch.push.apply(argsToWatch, property.key.toWatch);\n      }\n    });\n    ast.constant = allConstants;\n    ast.toWatch = argsToWatch;\n    break;\n  case AST.ThisExpression:\n    ast.constant = false;\n    ast.toWatch = [];\n    break;\n  case AST.LocalsExpression:\n    ast.constant = false;\n    ast.toWatch = [];\n    break;\n  }\n}\n\nfunction getInputs(body) {\n  if (body.length !== 1) return;\n  var lastExpression = body[0].expression;\n  var candidate = lastExpression.toWatch;\n  if (candidate.length !== 1) return candidate;\n  return candidate[0] !== lastExpression ? candidate : undefined;\n}\n\nfunction isAssignable(ast) {\n  return ast.type === AST.Identifier || ast.type === AST.MemberExpression;\n}\n\nfunction assignableAST(ast) {\n  if (ast.body.length === 1 && isAssignable(ast.body[0].expression)) {\n    return {type: AST.AssignmentExpression, left: ast.body[0].expression, right: {type: AST.NGValueParameter}, operator: '='};\n  }\n}\n\nfunction isLiteral(ast) {\n  return ast.body.length === 0 ||\n      ast.body.length === 1 && (\n      ast.body[0].expression.type === AST.Literal ||\n      ast.body[0].expression.type === AST.ArrayExpression ||\n      ast.body[0].expression.type === AST.ObjectExpression);\n}\n\nfunction isConstant(ast) {\n  return ast.constant;\n}\n\nfunction ASTCompiler($filter) {\n  this.$filter = $filter;\n}\n\nASTCompiler.prototype = {\n  compile: function(ast) {\n    var self = this;\n    this.state = {\n      nextId: 0,\n      filters: {},\n      fn: {vars: [], body: [], own: {}},\n      assign: {vars: [], body: [], own: {}},\n      inputs: []\n    };\n    findConstantAndWatchExpressions(ast, self.$filter);\n    var extra = '';\n    var assignable;\n    this.stage = 'assign';\n    if ((assignable = assignableAST(ast))) {\n      this.state.computing = 'assign';\n      var result = this.nextId();\n      this.recurse(assignable, result);\n      this.return_(result);\n      extra = 'fn.assign=' + this.generateFunction('assign', 's,v,l');\n    }\n    var toWatch = getInputs(ast.body);\n    self.stage = 'inputs';\n    forEach(toWatch, function(watch, key) {\n      var fnKey = 'fn' + key;\n      self.state[fnKey] = {vars: [], body: [], own: {}};\n      self.state.computing = fnKey;\n      var intoId = self.nextId();\n      self.recurse(watch, intoId);\n      self.return_(intoId);\n      self.state.inputs.push({name: fnKey, isPure: watch.isPure});\n      watch.watchId = key;\n    });\n    this.state.computing = 'fn';\n    this.stage = 'main';\n    this.recurse(ast);\n    var fnString =\n      // The build and minification steps remove the string \"use strict\" from the code, but this is done using a regex.\n      // This is a workaround for this until we do a better job at only removing the prefix only when we should.\n      '\"' + this.USE + ' ' + this.STRICT + '\";\\n' +\n      this.filterPrefix() +\n      'var fn=' + this.generateFunction('fn', 's,l,a,i') +\n      extra +\n      this.watchFns() +\n      'return fn;';\n\n    // eslint-disable-next-line no-new-func\n    var fn = (new Function('$filter',\n        'getStringValue',\n        'ifDefined',\n        'plus',\n        fnString))(\n          this.$filter,\n          getStringValue,\n          ifDefined,\n          plusFn);\n    this.state = this.stage = undefined;\n    return fn;\n  },\n\n  USE: 'use',\n\n  STRICT: 'strict',\n\n  watchFns: function() {\n    var result = [];\n    var inputs = this.state.inputs;\n    var self = this;\n    forEach(inputs, function(input) {\n      result.push('var ' + input.name + '=' + self.generateFunction(input.name, 's'));\n      if (input.isPure) {\n        result.push(input.name, '.isPure=' + JSON.stringify(input.isPure) + ';');\n      }\n    });\n    if (inputs.length) {\n      result.push('fn.inputs=[' + inputs.map(function(i) { return i.name; }).join(',') + '];');\n    }\n    return result.join('');\n  },\n\n  generateFunction: function(name, params) {\n    return 'function(' + params + '){' +\n        this.varsPrefix(name) +\n        this.body(name) +\n        '};';\n  },\n\n  filterPrefix: function() {\n    var parts = [];\n    var self = this;\n    forEach(this.state.filters, function(id, filter) {\n      parts.push(id + '=$filter(' + self.escape(filter) + ')');\n    });\n    if (parts.length) return 'var ' + parts.join(',') + ';';\n    return '';\n  },\n\n  varsPrefix: function(section) {\n    return this.state[section].vars.length ? 'var ' + this.state[section].vars.join(',') + ';' : '';\n  },\n\n  body: function(section) {\n    return this.state[section].body.join('');\n  },\n\n  recurse: function(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck) {\n    var left, right, self = this, args, expression, computed;\n    recursionFn = recursionFn || noop;\n    if (!skipWatchIdCheck && isDefined(ast.watchId)) {\n      intoId = intoId || this.nextId();\n      this.if_('i',\n        this.lazyAssign(intoId, this.computedMember('i', ast.watchId)),\n        this.lazyRecurse(ast, intoId, nameId, recursionFn, create, true)\n      );\n      return;\n    }\n    switch (ast.type) {\n    case AST.Program:\n      forEach(ast.body, function(expression, pos) {\n        self.recurse(expression.expression, undefined, undefined, function(expr) { right = expr; });\n        if (pos !== ast.body.length - 1) {\n          self.current().body.push(right, ';');\n        } else {\n          self.return_(right);\n        }\n      });\n      break;\n    case AST.Literal:\n      expression = this.escape(ast.value);\n      this.assign(intoId, expression);\n      recursionFn(intoId || expression);\n      break;\n    case AST.UnaryExpression:\n      this.recurse(ast.argument, undefined, undefined, function(expr) { right = expr; });\n      expression = ast.operator + '(' + this.ifDefined(right, 0) + ')';\n      this.assign(intoId, expression);\n      recursionFn(expression);\n      break;\n    case AST.BinaryExpression:\n      this.recurse(ast.left, undefined, undefined, function(expr) { left = expr; });\n      this.recurse(ast.right, undefined, undefined, function(expr) { right = expr; });\n      if (ast.operator === '+') {\n        expression = this.plus(left, right);\n      } else if (ast.operator === '-') {\n        expression = this.ifDefined(left, 0) + ast.operator + this.ifDefined(right, 0);\n      } else {\n        expression = '(' + left + ')' + ast.operator + '(' + right + ')';\n      }\n      this.assign(intoId, expression);\n      recursionFn(expression);\n      break;\n    case AST.LogicalExpression:\n      intoId = intoId || this.nextId();\n      self.recurse(ast.left, intoId);\n      self.if_(ast.operator === '&&' ? intoId : self.not(intoId), self.lazyRecurse(ast.right, intoId));\n      recursionFn(intoId);\n      break;\n    case AST.ConditionalExpression:\n      intoId = intoId || this.nextId();\n      self.recurse(ast.test, intoId);\n      self.if_(intoId, self.lazyRecurse(ast.alternate, intoId), self.lazyRecurse(ast.consequent, intoId));\n      recursionFn(intoId);\n      break;\n    case AST.Identifier:\n      intoId = intoId || this.nextId();\n      if (nameId) {\n        nameId.context = self.stage === 'inputs' ? 's' : this.assign(this.nextId(), this.getHasOwnProperty('l', ast.name) + '?l:s');\n        nameId.computed = false;\n        nameId.name = ast.name;\n      }\n      self.if_(self.stage === 'inputs' || self.not(self.getHasOwnProperty('l', ast.name)),\n        function() {\n          self.if_(self.stage === 'inputs' || 's', function() {\n            if (create && create !== 1) {\n              self.if_(\n                self.isNull(self.nonComputedMember('s', ast.name)),\n                self.lazyAssign(self.nonComputedMember('s', ast.name), '{}'));\n            }\n            self.assign(intoId, self.nonComputedMember('s', ast.name));\n          });\n        }, intoId && self.lazyAssign(intoId, self.nonComputedMember('l', ast.name))\n        );\n      recursionFn(intoId);\n      break;\n    case AST.MemberExpression:\n      left = nameId && (nameId.context = this.nextId()) || this.nextId();\n      intoId = intoId || this.nextId();\n      self.recurse(ast.object, left, undefined, function() {\n        self.if_(self.notNull(left), function() {\n          if (ast.computed) {\n            right = self.nextId();\n            self.recurse(ast.property, right);\n            self.getStringValue(right);\n            if (create && create !== 1) {\n              self.if_(self.not(self.computedMember(left, right)), self.lazyAssign(self.computedMember(left, right), '{}'));\n            }\n            expression = self.computedMember(left, right);\n            self.assign(intoId, expression);\n            if (nameId) {\n              nameId.computed = true;\n              nameId.name = right;\n            }\n          } else {\n            if (create && create !== 1) {\n              self.if_(self.isNull(self.nonComputedMember(left, ast.property.name)), self.lazyAssign(self.nonComputedMember(left, ast.property.name), '{}'));\n            }\n            expression = self.nonComputedMember(left, ast.property.name);\n            self.assign(intoId, expression);\n            if (nameId) {\n              nameId.computed = false;\n              nameId.name = ast.property.name;\n            }\n          }\n        }, function() {\n          self.assign(intoId, 'undefined');\n        });\n        recursionFn(intoId);\n      }, !!create);\n      break;\n    case AST.CallExpression:\n      intoId = intoId || this.nextId();\n      if (ast.filter) {\n        right = self.filter(ast.callee.name);\n        args = [];\n        forEach(ast.arguments, function(expr) {\n          var argument = self.nextId();\n          self.recurse(expr, argument);\n          args.push(argument);\n        });\n        expression = right + '(' + args.join(',') + ')';\n        self.assign(intoId, expression);\n        recursionFn(intoId);\n      } else {\n        right = self.nextId();\n        left = {};\n        args = [];\n        self.recurse(ast.callee, right, left, function() {\n          self.if_(self.notNull(right), function() {\n            forEach(ast.arguments, function(expr) {\n              self.recurse(expr, ast.constant ? undefined : self.nextId(), undefined, function(argument) {\n                args.push(argument);\n              });\n            });\n            if (left.name) {\n              expression = self.member(left.context, left.name, left.computed) + '(' + args.join(',') + ')';\n            } else {\n              expression = right + '(' + args.join(',') + ')';\n            }\n            self.assign(intoId, expression);\n          }, function() {\n            self.assign(intoId, 'undefined');\n          });\n          recursionFn(intoId);\n        });\n      }\n      break;\n    case AST.AssignmentExpression:\n      right = this.nextId();\n      left = {};\n      this.recurse(ast.left, undefined, left, function() {\n        self.if_(self.notNull(left.context), function() {\n          self.recurse(ast.right, right);\n          expression = self.member(left.context, left.name, left.computed) + ast.operator + right;\n          self.assign(intoId, expression);\n          recursionFn(intoId || expression);\n        });\n      }, 1);\n      break;\n    case AST.ArrayExpression:\n      args = [];\n      forEach(ast.elements, function(expr) {\n        self.recurse(expr, ast.constant ? undefined : self.nextId(), undefined, function(argument) {\n          args.push(argument);\n        });\n      });\n      expression = '[' + args.join(',') + ']';\n      this.assign(intoId, expression);\n      recursionFn(intoId || expression);\n      break;\n    case AST.ObjectExpression:\n      args = [];\n      computed = false;\n      forEach(ast.properties, function(property) {\n        if (property.computed) {\n          computed = true;\n        }\n      });\n      if (computed) {\n        intoId = intoId || this.nextId();\n        this.assign(intoId, '{}');\n        forEach(ast.properties, function(property) {\n          if (property.computed) {\n            left = self.nextId();\n            self.recurse(property.key, left);\n          } else {\n            left = property.key.type === AST.Identifier ?\n                       property.key.name :\n                       ('' + property.key.value);\n          }\n          right = self.nextId();\n          self.recurse(property.value, right);\n          self.assign(self.member(intoId, left, property.computed), right);\n        });\n      } else {\n        forEach(ast.properties, function(property) {\n          self.recurse(property.value, ast.constant ? undefined : self.nextId(), undefined, function(expr) {\n            args.push(self.escape(\n                property.key.type === AST.Identifier ? property.key.name :\n                  ('' + property.key.value)) +\n                ':' + expr);\n          });\n        });\n        expression = '{' + args.join(',') + '}';\n        this.assign(intoId, expression);\n      }\n      recursionFn(intoId || expression);\n      break;\n    case AST.ThisExpression:\n      this.assign(intoId, 's');\n      recursionFn(intoId || 's');\n      break;\n    case AST.LocalsExpression:\n      this.assign(intoId, 'l');\n      recursionFn(intoId || 'l');\n      break;\n    case AST.NGValueParameter:\n      this.assign(intoId, 'v');\n      recursionFn(intoId || 'v');\n      break;\n    }\n  },\n\n  getHasOwnProperty: function(element, property) {\n    var key = element + '.' + property;\n    var own = this.current().own;\n    if (!own.hasOwnProperty(key)) {\n      own[key] = this.nextId(false, element + '&&(' + this.escape(property) + ' in ' + element + ')');\n    }\n    return own[key];\n  },\n\n  assign: function(id, value) {\n    if (!id) return;\n    this.current().body.push(id, '=', value, ';');\n    return id;\n  },\n\n  filter: function(filterName) {\n    if (!this.state.filters.hasOwnProperty(filterName)) {\n      this.state.filters[filterName] = this.nextId(true);\n    }\n    return this.state.filters[filterName];\n  },\n\n  ifDefined: function(id, defaultValue) {\n    return 'ifDefined(' + id + ',' + this.escape(defaultValue) + ')';\n  },\n\n  plus: function(left, right) {\n    return 'plus(' + left + ',' + right + ')';\n  },\n\n  return_: function(id) {\n    this.current().body.push('return ', id, ';');\n  },\n\n  if_: function(test, alternate, consequent) {\n    if (test === true) {\n      alternate();\n    } else {\n      var body = this.current().body;\n      body.push('if(', test, '){');\n      alternate();\n      body.push('}');\n      if (consequent) {\n        body.push('else{');\n        consequent();\n        body.push('}');\n      }\n    }\n  },\n\n  not: function(expression) {\n    return '!(' + expression + ')';\n  },\n\n  isNull: function(expression) {\n    return expression + '==null';\n  },\n\n  notNull: function(expression) {\n    return expression + '!=null';\n  },\n\n  nonComputedMember: function(left, right) {\n    var SAFE_IDENTIFIER = /^[$_a-zA-Z][$_a-zA-Z0-9]*$/;\n    var UNSAFE_CHARACTERS = /[^$_a-zA-Z0-9]/g;\n    if (SAFE_IDENTIFIER.test(right)) {\n      return left + '.' + right;\n    } else {\n      return left  + '[\"' + right.replace(UNSAFE_CHARACTERS, this.stringEscapeFn) + '\"]';\n    }\n  },\n\n  computedMember: function(left, right) {\n    return left + '[' + right + ']';\n  },\n\n  member: function(left, right, computed) {\n    if (computed) return this.computedMember(left, right);\n    return this.nonComputedMember(left, right);\n  },\n\n  getStringValue: function(item) {\n    this.assign(item, 'getStringValue(' + item + ')');\n  },\n\n  lazyRecurse: function(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck) {\n    var self = this;\n    return function() {\n      self.recurse(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck);\n    };\n  },\n\n  lazyAssign: function(id, value) {\n    var self = this;\n    return function() {\n      self.assign(id, value);\n    };\n  },\n\n  stringEscapeRegex: /[^ a-zA-Z0-9]/g,\n\n  stringEscapeFn: function(c) {\n    return '\\\\u' + ('0000' + c.charCodeAt(0).toString(16)).slice(-4);\n  },\n\n  escape: function(value) {\n    if (isString(value)) return '\\'' + value.replace(this.stringEscapeRegex, this.stringEscapeFn) + '\\'';\n    if (isNumber(value)) return value.toString();\n    if (value === true) return 'true';\n    if (value === false) return 'false';\n    if (value === null) return 'null';\n    if (typeof value === 'undefined') return 'undefined';\n\n    throw $parseMinErr('esc', 'IMPOSSIBLE');\n  },\n\n  nextId: function(skip, init) {\n    var id = 'v' + (this.state.nextId++);\n    if (!skip) {\n      this.current().vars.push(id + (init ? '=' + init : ''));\n    }\n    return id;\n  },\n\n  current: function() {\n    return this.state[this.state.computing];\n  }\n};\n\n\nfunction ASTInterpreter($filter) {\n  this.$filter = $filter;\n}\n\nASTInterpreter.prototype = {\n  compile: function(ast) {\n    var self = this;\n    findConstantAndWatchExpressions(ast, self.$filter);\n    var assignable;\n    var assign;\n    if ((assignable = assignableAST(ast))) {\n      assign = this.recurse(assignable);\n    }\n    var toWatch = getInputs(ast.body);\n    var inputs;\n    if (toWatch) {\n      inputs = [];\n      forEach(toWatch, function(watch, key) {\n        var input = self.recurse(watch);\n        input.isPure = watch.isPure;\n        watch.input = input;\n        inputs.push(input);\n        watch.watchId = key;\n      });\n    }\n    var expressions = [];\n    forEach(ast.body, function(expression) {\n      expressions.push(self.recurse(expression.expression));\n    });\n    var fn = ast.body.length === 0 ? noop :\n             ast.body.length === 1 ? expressions[0] :\n             function(scope, locals) {\n               var lastValue;\n               forEach(expressions, function(exp) {\n                 lastValue = exp(scope, locals);\n               });\n               return lastValue;\n             };\n    if (assign) {\n      fn.assign = function(scope, value, locals) {\n        return assign(scope, locals, value);\n      };\n    }\n    if (inputs) {\n      fn.inputs = inputs;\n    }\n    return fn;\n  },\n\n  recurse: function(ast, context, create) {\n    var left, right, self = this, args;\n    if (ast.input) {\n      return this.inputs(ast.input, ast.watchId);\n    }\n    switch (ast.type) {\n    case AST.Literal:\n      return this.value(ast.value, context);\n    case AST.UnaryExpression:\n      right = this.recurse(ast.argument);\n      return this['unary' + ast.operator](right, context);\n    case AST.BinaryExpression:\n      left = this.recurse(ast.left);\n      right = this.recurse(ast.right);\n      return this['binary' + ast.operator](left, right, context);\n    case AST.LogicalExpression:\n      left = this.recurse(ast.left);\n      right = this.recurse(ast.right);\n      return this['binary' + ast.operator](left, right, context);\n    case AST.ConditionalExpression:\n      return this['ternary?:'](\n        this.recurse(ast.test),\n        this.recurse(ast.alternate),\n        this.recurse(ast.consequent),\n        context\n      );\n    case AST.Identifier:\n      return self.identifier(ast.name, context, create);\n    case AST.MemberExpression:\n      left = this.recurse(ast.object, false, !!create);\n      if (!ast.computed) {\n        right = ast.property.name;\n      }\n      if (ast.computed) right = this.recurse(ast.property);\n      return ast.computed ?\n        this.computedMember(left, right, context, create) :\n        this.nonComputedMember(left, right, context, create);\n    case AST.CallExpression:\n      args = [];\n      forEach(ast.arguments, function(expr) {\n        args.push(self.recurse(expr));\n      });\n      if (ast.filter) right = this.$filter(ast.callee.name);\n      if (!ast.filter) right = this.recurse(ast.callee, true);\n      return ast.filter ?\n        function(scope, locals, assign, inputs) {\n          var values = [];\n          for (var i = 0; i < args.length; ++i) {\n            values.push(args[i](scope, locals, assign, inputs));\n          }\n          var value = right.apply(undefined, values, inputs);\n          return context ? {context: undefined, name: undefined, value: value} : value;\n        } :\n        function(scope, locals, assign, inputs) {\n          var rhs = right(scope, locals, assign, inputs);\n          var value;\n          if (rhs.value != null) {\n            var values = [];\n            for (var i = 0; i < args.length; ++i) {\n              values.push(args[i](scope, locals, assign, inputs));\n            }\n            value = rhs.value.apply(rhs.context, values);\n          }\n          return context ? {value: value} : value;\n        };\n    case AST.AssignmentExpression:\n      left = this.recurse(ast.left, true, 1);\n      right = this.recurse(ast.right);\n      return function(scope, locals, assign, inputs) {\n        var lhs = left(scope, locals, assign, inputs);\n        var rhs = right(scope, locals, assign, inputs);\n        lhs.context[lhs.name] = rhs;\n        return context ? {value: rhs} : rhs;\n      };\n    case AST.ArrayExpression:\n      args = [];\n      forEach(ast.elements, function(expr) {\n        args.push(self.recurse(expr));\n      });\n      return function(scope, locals, assign, inputs) {\n        var value = [];\n        for (var i = 0; i < args.length; ++i) {\n          value.push(args[i](scope, locals, assign, inputs));\n        }\n        return context ? {value: value} : value;\n      };\n    case AST.ObjectExpression:\n      args = [];\n      forEach(ast.properties, function(property) {\n        if (property.computed) {\n          args.push({key: self.recurse(property.key),\n                     computed: true,\n                     value: self.recurse(property.value)\n          });\n        } else {\n          args.push({key: property.key.type === AST.Identifier ?\n                          property.key.name :\n                          ('' + property.key.value),\n                     computed: false,\n                     value: self.recurse(property.value)\n          });\n        }\n      });\n      return function(scope, locals, assign, inputs) {\n        var value = {};\n        for (var i = 0; i < args.length; ++i) {\n          if (args[i].computed) {\n            value[args[i].key(scope, locals, assign, inputs)] = args[i].value(scope, locals, assign, inputs);\n          } else {\n            value[args[i].key] = args[i].value(scope, locals, assign, inputs);\n          }\n        }\n        return context ? {value: value} : value;\n      };\n    case AST.ThisExpression:\n      return function(scope) {\n        return context ? {value: scope} : scope;\n      };\n    case AST.LocalsExpression:\n      return function(scope, locals) {\n        return context ? {value: locals} : locals;\n      };\n    case AST.NGValueParameter:\n      return function(scope, locals, assign) {\n        return context ? {value: assign} : assign;\n      };\n    }\n  },\n\n  'unary+': function(argument, context) {\n    return function(scope, locals, assign, inputs) {\n      var arg = argument(scope, locals, assign, inputs);\n      if (isDefined(arg)) {\n        arg = +arg;\n      } else {\n        arg = 0;\n      }\n      return context ? {value: arg} : arg;\n    };\n  },\n  'unary-': function(argument, context) {\n    return function(scope, locals, assign, inputs) {\n      var arg = argument(scope, locals, assign, inputs);\n      if (isDefined(arg)) {\n        arg = -arg;\n      } else {\n        arg = -0;\n      }\n      return context ? {value: arg} : arg;\n    };\n  },\n  'unary!': function(argument, context) {\n    return function(scope, locals, assign, inputs) {\n      var arg = !argument(scope, locals, assign, inputs);\n      return context ? {value: arg} : arg;\n    };\n  },\n  'binary+': function(left, right, context) {\n    return function(scope, locals, assign, inputs) {\n      var lhs = left(scope, locals, assign, inputs);\n      var rhs = right(scope, locals, assign, inputs);\n      var arg = plusFn(lhs, rhs);\n      return context ? {value: arg} : arg;\n    };\n  },\n  'binary-': function(left, right, context) {\n    return function(scope, locals, assign, inputs) {\n      var lhs = left(scope, locals, assign, inputs);\n      var rhs = right(scope, locals, assign, inputs);\n      var arg = (isDefined(lhs) ? lhs : 0) - (isDefined(rhs) ? rhs : 0);\n      return context ? {value: arg} : arg;\n    };\n  },\n  'binary*': function(left, right, context) {\n    return function(scope, locals, assign, inputs) {\n      var arg = left(scope, locals, assign, inputs) * right(scope, locals, assign, inputs);\n      return context ? {value: arg} : arg;\n    };\n  },\n  'binary/': function(left, right, context) {\n    return function(scope, locals, assign, inputs) {\n      var arg = left(scope, locals, assign, inputs) / right(scope, locals, assign, inputs);\n      return context ? {value: arg} : arg;\n    };\n  },\n  'binary%': function(left, right, context) {\n    return function(scope, locals, assign, inputs) {\n      var arg = left(scope, locals, assign, inputs) % right(scope, locals, assign, inputs);\n      return context ? {value: arg} : arg;\n    };\n  },\n  'binary===': function(left, right, context) {\n    return function(scope, locals, assign, inputs) {\n      var arg = left(scope, locals, assign, inputs) === right(scope, locals, assign, inputs);\n      return context ? {value: arg} : arg;\n    };\n  },\n  'binary!==': function(left, right, context) {\n    return function(scope, locals, assign, inputs) {\n      var arg = left(scope, locals, assign, inputs) !== right(scope, locals, assign, inputs);\n      return context ? {value: arg} : arg;\n    };\n  },\n  'binary==': function(left, right, context) {\n    return function(scope, locals, assign, inputs) {\n      // eslint-disable-next-line eqeqeq\n      var arg = left(scope, locals, assign, inputs) == right(scope, locals, assign, inputs);\n      return context ? {value: arg} : arg;\n    };\n  },\n  'binary!=': function(left, right, context) {\n    return function(scope, locals, assign, inputs) {\n      // eslint-disable-next-line eqeqeq\n      var arg = left(scope, locals, assign, inputs) != right(scope, locals, assign, inputs);\n      return context ? {value: arg} : arg;\n    };\n  },\n  'binary<': function(left, right, context) {\n    return function(scope, locals, assign, inputs) {\n      var arg = left(scope, locals, assign, inputs) < right(scope, locals, assign, inputs);\n      return context ? {value: arg} : arg;\n    };\n  },\n  'binary>': function(left, right, context) {\n    return function(scope, locals, assign, inputs) {\n      var arg = left(scope, locals, assign, inputs) > right(scope, locals, assign, inputs);\n      return context ? {value: arg} : arg;\n    };\n  },\n  'binary<=': function(left, right, context) {\n    return function(scope, locals, assign, inputs) {\n      var arg = left(scope, locals, assign, inputs) <= right(scope, locals, assign, inputs);\n      return context ? {value: arg} : arg;\n    };\n  },\n  'binary>=': function(left, right, context) {\n    return function(scope, locals, assign, inputs) {\n      var arg = left(scope, locals, assign, inputs) >= right(scope, locals, assign, inputs);\n      return context ? {value: arg} : arg;\n    };\n  },\n  'binary&&': function(left, right, context) {\n    return function(scope, locals, assign, inputs) {\n      var arg = left(scope, locals, assign, inputs) && right(scope, locals, assign, inputs);\n      return context ? {value: arg} : arg;\n    };\n  },\n  'binary||': function(left, right, context) {\n    return function(scope, locals, assign, inputs) {\n      var arg = left(scope, locals, assign, inputs) || right(scope, locals, assign, inputs);\n      return context ? {value: arg} : arg;\n    };\n  },\n  'ternary?:': function(test, alternate, consequent, context) {\n    return function(scope, locals, assign, inputs) {\n      var arg = test(scope, locals, assign, inputs) ? alternate(scope, locals, assign, inputs) : consequent(scope, locals, assign, inputs);\n      return context ? {value: arg} : arg;\n    };\n  },\n  value: function(value, context) {\n    return function() { return context ? {context: undefined, name: undefined, value: value} : value; };\n  },\n  identifier: function(name, context, create) {\n    return function(scope, locals, assign, inputs) {\n      var base = locals && (name in locals) ? locals : scope;\n      if (create && create !== 1 && base && base[name] == null) {\n        base[name] = {};\n      }\n      var value = base ? base[name] : undefined;\n      if (context) {\n        return {context: base, name: name, value: value};\n      } else {\n        return value;\n      }\n    };\n  },\n  computedMember: function(left, right, context, create) {\n    return function(scope, locals, assign, inputs) {\n      var lhs = left(scope, locals, assign, inputs);\n      var rhs;\n      var value;\n      if (lhs != null) {\n        rhs = right(scope, locals, assign, inputs);\n        rhs = getStringValue(rhs);\n        if (create && create !== 1) {\n          if (lhs && !(lhs[rhs])) {\n            lhs[rhs] = {};\n          }\n        }\n        value = lhs[rhs];\n      }\n      if (context) {\n        return {context: lhs, name: rhs, value: value};\n      } else {\n        return value;\n      }\n    };\n  },\n  nonComputedMember: function(left, right, context, create) {\n    return function(scope, locals, assign, inputs) {\n      var lhs = left(scope, locals, assign, inputs);\n      if (create && create !== 1) {\n        if (lhs && lhs[right] == null) {\n          lhs[right] = {};\n        }\n      }\n      var value = lhs != null ? lhs[right] : undefined;\n      if (context) {\n        return {context: lhs, name: right, value: value};\n      } else {\n        return value;\n      }\n    };\n  },\n  inputs: function(input, watchId) {\n    return function(scope, value, locals, inputs) {\n      if (inputs) return inputs[watchId];\n      return input(scope, value, locals);\n    };\n  }\n};\n\n/**\n * @constructor\n */\nfunction Parser(lexer, $filter, options) {\n  this.ast = new AST(lexer, options);\n  this.astCompiler = options.csp ? new ASTInterpreter($filter) :\n                                   new ASTCompiler($filter);\n}\n\nParser.prototype = {\n  constructor: Parser,\n\n  parse: function(text) {\n    var ast = this.getAst(text);\n    var fn = this.astCompiler.compile(ast.ast);\n    fn.literal = isLiteral(ast.ast);\n    fn.constant = isConstant(ast.ast);\n    fn.oneTime = ast.oneTime;\n    return fn;\n  },\n\n  getAst: function(exp) {\n    var oneTime = false;\n    exp = exp.trim();\n\n    if (exp.charAt(0) === ':' && exp.charAt(1) === ':') {\n      oneTime = true;\n      exp = exp.substring(2);\n    }\n    return {\n      ast: this.ast.ast(exp),\n      oneTime: oneTime\n    };\n  }\n};\n\nfunction getValueOf(value) {\n  return isFunction(value.valueOf) ? value.valueOf() : objectValueOf.call(value);\n}\n\n///////////////////////////////////\n\n/**\n * @ngdoc service\n * @name $parse\n * @kind function\n *\n * @description\n *\n * Converts Angular {@link guide/expression expression} into a function.\n *\n * ```js\n *   var getter = $parse('user.name');\n *   var setter = getter.assign;\n *   var context = {user:{name:'angular'}};\n *   var locals = {user:{name:'local'}};\n *\n *   expect(getter(context)).toEqual('angular');\n *   setter(context, 'newValue');\n *   expect(context.user.name).toEqual('newValue');\n *   expect(getter(context, locals)).toEqual('local');\n * ```\n *\n *\n * @param {string} expression String expression to compile.\n * @returns {function(context, locals)} a function which represents the compiled expression:\n *\n *    * `context` – `{object}` – an object against which any expressions embedded in the strings\n *      are evaluated against (typically a scope object).\n *    * `locals` – `{object=}` – local variables context object, useful for overriding values in\n *      `context`.\n *\n *    The returned function also has the following properties:\n *      * `literal` – `{boolean}` – whether the expression's top-level node is a JavaScript\n *        literal.\n *      * `constant` – `{boolean}` – whether the expression is made entirely of JavaScript\n *        constant literals.\n *      * `assign` – `{?function(context, value)}` – if the expression is assignable, this will be\n *        set to a function to change its value on the given context.\n *\n */\n\n\n/**\n * @ngdoc provider\n * @name $parseProvider\n * @this\n *\n * @description\n * `$parseProvider` can be used for configuring the default behavior of the {@link ng.$parse $parse}\n *  service.\n */\nfunction $ParseProvider() {\n  var cache = createMap();\n  var literals = {\n    'true': true,\n    'false': false,\n    'null': null,\n    'undefined': undefined\n  };\n  var identStart, identContinue;\n\n  /**\n   * @ngdoc method\n   * @name $parseProvider#addLiteral\n   * @description\n   *\n   * Configure $parse service to add literal values that will be present as literal at expressions.\n   *\n   * @param {string} literalName Token for the literal value. The literal name value must be a valid literal name.\n   * @param {*} literalValue Value for this literal. All literal values must be primitives or `undefined`.\n   *\n   **/\n  this.addLiteral = function(literalName, literalValue) {\n    literals[literalName] = literalValue;\n  };\n\n /**\n  * @ngdoc method\n  * @name $parseProvider#setIdentifierFns\n  *\n  * @description\n  *\n  * Allows defining the set of characters that are allowed in Angular expressions. The function\n  * `identifierStart` will get called to know if a given character is a valid character to be the\n  * first character for an identifier. The function `identifierContinue` will get called to know if\n  * a given character is a valid character to be a follow-up identifier character. The functions\n  * `identifierStart` and `identifierContinue` will receive as arguments the single character to be\n  * identifier and the character code point. These arguments will be `string` and `numeric`. Keep in\n  * mind that the `string` parameter can be two characters long depending on the character\n  * representation. It is expected for the function to return `true` or `false`, whether that\n  * character is allowed or not.\n  *\n  * Since this function will be called extensively, keep the implementation of these functions fast,\n  * as the performance of these functions have a direct impact on the expressions parsing speed.\n  *\n  * @param {function=} identifierStart The function that will decide whether the given character is\n  *   a valid identifier start character.\n  * @param {function=} identifierContinue The function that will decide whether the given character is\n  *   a valid identifier continue character.\n  */\n  this.setIdentifierFns = function(identifierStart, identifierContinue) {\n    identStart = identifierStart;\n    identContinue = identifierContinue;\n    return this;\n  };\n\n  this.$get = ['$filter', function($filter) {\n    var noUnsafeEval = csp().noUnsafeEval;\n    var $parseOptions = {\n          csp: noUnsafeEval,\n          literals: copy(literals),\n          isIdentifierStart: isFunction(identStart) && identStart,\n          isIdentifierContinue: isFunction(identContinue) && identContinue\n        };\n    $parse.$$getAst = $$getAst;\n    return $parse;\n\n    function $parse(exp, interceptorFn) {\n      var parsedExpression, cacheKey;\n\n      switch (typeof exp) {\n        case 'string':\n          exp = exp.trim();\n          cacheKey = exp;\n\n          parsedExpression = cache[cacheKey];\n\n          if (!parsedExpression) {\n            var lexer = new Lexer($parseOptions);\n            var parser = new Parser(lexer, $filter, $parseOptions);\n            parsedExpression = parser.parse(exp);\n            if (parsedExpression.constant) {\n              parsedExpression.$$watchDelegate = constantWatchDelegate;\n            } else if (parsedExpression.oneTime) {\n              parsedExpression.$$watchDelegate = parsedExpression.literal ?\n                  oneTimeLiteralWatchDelegate : oneTimeWatchDelegate;\n            } else if (parsedExpression.inputs) {\n              parsedExpression.$$watchDelegate = inputsWatchDelegate;\n            }\n            cache[cacheKey] = parsedExpression;\n          }\n          return addInterceptor(parsedExpression, interceptorFn);\n\n        case 'function':\n          return addInterceptor(exp, interceptorFn);\n\n        default:\n          return addInterceptor(noop, interceptorFn);\n      }\n    }\n\n    function $$getAst(exp) {\n      var lexer = new Lexer($parseOptions);\n      var parser = new Parser(lexer, $filter, $parseOptions);\n      return parser.getAst(exp).ast;\n    }\n\n    function expressionInputDirtyCheck(newValue, oldValueOfValue, compareObjectIdentity) {\n\n      if (newValue == null || oldValueOfValue == null) { // null/undefined\n        return newValue === oldValueOfValue;\n      }\n\n      if (typeof newValue === 'object') {\n\n        // attempt to convert the value to a primitive type\n        // TODO(docs): add a note to docs that by implementing valueOf even objects and arrays can\n        //             be cheaply dirty-checked\n        newValue = getValueOf(newValue);\n\n        if (typeof newValue === 'object' && !compareObjectIdentity) {\n          // objects/arrays are not supported - deep-watching them would be too expensive\n          return false;\n        }\n\n        // fall-through to the primitive equality check\n      }\n\n      //Primitive or NaN\n      // eslint-disable-next-line no-self-compare\n      return newValue === oldValueOfValue || (newValue !== newValue && oldValueOfValue !== oldValueOfValue);\n    }\n\n    function inputsWatchDelegate(scope, listener, objectEquality, parsedExpression, prettyPrintExpression) {\n      var inputExpressions = parsedExpression.inputs;\n      var lastResult;\n\n      if (inputExpressions.length === 1) {\n        var oldInputValueOf = expressionInputDirtyCheck; // init to something unique so that equals check fails\n        inputExpressions = inputExpressions[0];\n        return scope.$watch(function expressionInputWatch(scope) {\n          var newInputValue = inputExpressions(scope);\n          if (!expressionInputDirtyCheck(newInputValue, oldInputValueOf, inputExpressions.isPure)) {\n            lastResult = parsedExpression(scope, undefined, undefined, [newInputValue]);\n            oldInputValueOf = newInputValue && getValueOf(newInputValue);\n          }\n          return lastResult;\n        }, listener, objectEquality, prettyPrintExpression);\n      }\n\n      var oldInputValueOfValues = [];\n      var oldInputValues = [];\n      for (var i = 0, ii = inputExpressions.length; i < ii; i++) {\n        oldInputValueOfValues[i] = expressionInputDirtyCheck; // init to something unique so that equals check fails\n        oldInputValues[i] = null;\n      }\n\n      return scope.$watch(function expressionInputsWatch(scope) {\n        var changed = false;\n\n        for (var i = 0, ii = inputExpressions.length; i < ii; i++) {\n          var newInputValue = inputExpressions[i](scope);\n          if (changed || (changed = !expressionInputDirtyCheck(newInputValue, oldInputValueOfValues[i], inputExpressions[i].isPure))) {\n            oldInputValues[i] = newInputValue;\n            oldInputValueOfValues[i] = newInputValue && getValueOf(newInputValue);\n          }\n        }\n\n        if (changed) {\n          lastResult = parsedExpression(scope, undefined, undefined, oldInputValues);\n        }\n\n        return lastResult;\n      }, listener, objectEquality, prettyPrintExpression);\n    }\n\n    function oneTimeWatchDelegate(scope, listener, objectEquality, parsedExpression, prettyPrintExpression) {\n      var unwatch, lastValue;\n      if (parsedExpression.inputs) {\n        unwatch = inputsWatchDelegate(scope, oneTimeListener, objectEquality, parsedExpression, prettyPrintExpression);\n      } else {\n        unwatch = scope.$watch(oneTimeWatch, oneTimeListener, objectEquality);\n      }\n      return unwatch;\n\n      function oneTimeWatch(scope) {\n        return parsedExpression(scope);\n      }\n      function oneTimeListener(value, old, scope) {\n        lastValue = value;\n        if (isFunction(listener)) {\n          listener(value, old, scope);\n        }\n        if (isDefined(value)) {\n          scope.$$postDigest(function() {\n            if (isDefined(lastValue)) {\n              unwatch();\n            }\n          });\n        }\n      }\n    }\n\n    function oneTimeLiteralWatchDelegate(scope, listener, objectEquality, parsedExpression) {\n      var unwatch, lastValue;\n      unwatch = scope.$watch(function oneTimeWatch(scope) {\n        return parsedExpression(scope);\n      }, function oneTimeListener(value, old, scope) {\n        lastValue = value;\n        if (isFunction(listener)) {\n          listener(value, old, scope);\n        }\n        if (isAllDefined(value)) {\n          scope.$$postDigest(function() {\n            if (isAllDefined(lastValue)) unwatch();\n          });\n        }\n      }, objectEquality);\n\n      return unwatch;\n\n      function isAllDefined(value) {\n        var allDefined = true;\n        forEach(value, function(val) {\n          if (!isDefined(val)) allDefined = false;\n        });\n        return allDefined;\n      }\n    }\n\n    function constantWatchDelegate(scope, listener, objectEquality, parsedExpression) {\n      var unwatch = scope.$watch(function constantWatch(scope) {\n        unwatch();\n        return parsedExpression(scope);\n      }, listener, objectEquality);\n      return unwatch;\n    }\n\n    function addInterceptor(parsedExpression, interceptorFn) {\n      if (!interceptorFn) return parsedExpression;\n      var watchDelegate = parsedExpression.$$watchDelegate;\n      var useInputs = false;\n\n      var regularWatch =\n          watchDelegate !== oneTimeLiteralWatchDelegate &&\n          watchDelegate !== oneTimeWatchDelegate;\n\n      var fn = regularWatch ? function regularInterceptedExpression(scope, locals, assign, inputs) {\n        var value = useInputs && inputs ? inputs[0] : parsedExpression(scope, locals, assign, inputs);\n        return interceptorFn(value, scope, locals);\n      } : function oneTimeInterceptedExpression(scope, locals, assign, inputs) {\n        var value = parsedExpression(scope, locals, assign, inputs);\n        var result = interceptorFn(value, scope, locals);\n        // we only return the interceptor's result if the\n        // initial value is defined (for bind-once)\n        return isDefined(value) ? result : value;\n      };\n\n      // Propagate $$watchDelegates other then inputsWatchDelegate\n      useInputs = !parsedExpression.inputs;\n      if (watchDelegate && watchDelegate !== inputsWatchDelegate) {\n        fn.$$watchDelegate = watchDelegate;\n        fn.inputs = parsedExpression.inputs;\n      } else if (!interceptorFn.$stateful) {\n        // Treat interceptor like filters - assume non-stateful by default and use the inputsWatchDelegate\n        fn.$$watchDelegate = inputsWatchDelegate;\n        fn.inputs = parsedExpression.inputs ? parsedExpression.inputs : [parsedExpression];\n      }\n\n      if (fn.inputs) {\n        fn.inputs = fn.inputs.map(function(e) {\n              // Remove the isPure flag of inputs when it is not absolute because they are now wrapped in a\n              // potentially non-pure interceptor function.\n              if (e.isPure === PURITY_RELATIVE) {\n                return function depurifier(s) { return e(s); };\n              }\n              return e;\n            });\n      }\n\n      return fn;\n    }\n  }];\n}\n\n/**\n * @ngdoc service\n * @name $q\n * @requires $rootScope\n *\n * @description\n * A service that helps you run functions asynchronously, and use their return values (or exceptions)\n * when they are done processing.\n *\n * This is a [Promises/A+](https://promisesaplus.com/)-compliant implementation of promises/deferred\n * objects inspired by [Kris Kowal's Q](https://github.com/kriskowal/q).\n *\n * $q can be used in two fashions --- one which is more similar to Kris Kowal's Q or jQuery's Deferred\n * implementations, and the other which resembles ES6 (ES2015) promises to some degree.\n *\n * ## $q constructor\n *\n * The streamlined ES6 style promise is essentially just using $q as a constructor which takes a `resolver`\n * function as the first argument. This is similar to the native Promise implementation from ES6,\n * see [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).\n *\n * While the constructor-style use is supported, not all of the supporting methods from ES6 promises are\n * available yet.\n *\n * It can be used like so:\n *\n * ```js\n *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`\n *   // are available in the current lexical scope (they could have been injected or passed in).\n *\n *   function asyncGreet(name) {\n *     // perform some asynchronous operation, resolve or reject the promise when appropriate.\n *     return $q(function(resolve, reject) {\n *       setTimeout(function() {\n *         if (okToGreet(name)) {\n *           resolve('Hello, ' + name + '!');\n *         } else {\n *           reject('Greeting ' + name + ' is not allowed.');\n *         }\n *       }, 1000);\n *     });\n *   }\n *\n *   var promise = asyncGreet('Robin Hood');\n *   promise.then(function(greeting) {\n *     alert('Success: ' + greeting);\n *   }, function(reason) {\n *     alert('Failed: ' + reason);\n *   });\n * ```\n *\n * Note: progress/notify callbacks are not currently supported via the ES6-style interface.\n *\n * Note: unlike ES6 behavior, an exception thrown in the constructor function will NOT implicitly reject the promise.\n *\n * However, the more traditional CommonJS-style usage is still available, and documented below.\n *\n * [The CommonJS Promise proposal](http://wiki.commonjs.org/wiki/Promises) describes a promise as an\n * interface for interacting with an object that represents the result of an action that is\n * performed asynchronously, and may or may not be finished at any given point in time.\n *\n * From the perspective of dealing with error handling, deferred and promise APIs are to\n * asynchronous programming what `try`, `catch` and `throw` keywords are to synchronous programming.\n *\n * ```js\n *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`\n *   // are available in the current lexical scope (they could have been injected or passed in).\n *\n *   function asyncGreet(name) {\n *     var deferred = $q.defer();\n *\n *     setTimeout(function() {\n *       deferred.notify('About to greet ' + name + '.');\n *\n *       if (okToGreet(name)) {\n *         deferred.resolve('Hello, ' + name + '!');\n *       } else {\n *         deferred.reject('Greeting ' + name + ' is not allowed.');\n *       }\n *     }, 1000);\n *\n *     return deferred.promise;\n *   }\n *\n *   var promise = asyncGreet('Robin Hood');\n *   promise.then(function(greeting) {\n *     alert('Success: ' + greeting);\n *   }, function(reason) {\n *     alert('Failed: ' + reason);\n *   }, function(update) {\n *     alert('Got notification: ' + update);\n *   });\n * ```\n *\n * At first it might not be obvious why this extra complexity is worth the trouble. The payoff\n * comes in the way of guarantees that promise and deferred APIs make, see\n * https://github.com/kriskowal/uncommonjs/blob/master/promises/specification.md.\n *\n * Additionally the promise api allows for composition that is very hard to do with the\n * traditional callback ([CPS](http://en.wikipedia.org/wiki/Continuation-passing_style)) approach.\n * For more on this please see the [Q documentation](https://github.com/kriskowal/q) especially the\n * section on serial or parallel joining of promises.\n *\n * ## The Deferred API\n *\n * A new instance of deferred is constructed by calling `$q.defer()`.\n *\n * The purpose of the deferred object is to expose the associated Promise instance as well as APIs\n * that can be used for signaling the successful or unsuccessful completion, as well as the status\n * of the task.\n *\n * **Methods**\n *\n * - `resolve(value)` – resolves the derived promise with the `value`. If the value is a rejection\n *   constructed via `$q.reject`, the promise will be rejected instead.\n * - `reject(reason)` – rejects the derived promise with the `reason`. This is equivalent to\n *   resolving it with a rejection constructed via `$q.reject`.\n * - `notify(value)` - provides updates on the status of the promise's execution. This may be called\n *   multiple times before the promise is either resolved or rejected.\n *\n * **Properties**\n *\n * - promise – `{Promise}` – promise object associated with this deferred.\n *\n *\n * ## The Promise API\n *\n * A new promise instance is created when a deferred instance is created and can be retrieved by\n * calling `deferred.promise`.\n *\n * The purpose of the promise object is to allow for interested parties to get access to the result\n * of the deferred task when it completes.\n *\n * **Methods**\n *\n * - `then(successCallback, [errorCallback], [notifyCallback])` – regardless of when the promise was or\n *   will be resolved or rejected, `then` calls one of the success or error callbacks asynchronously\n *   as soon as the result is available. The callbacks are called with a single argument: the result\n *   or rejection reason. Additionally, the notify callback may be called zero or more times to\n *   provide a progress indication, before the promise is resolved or rejected.\n *\n *   This method *returns a new promise* which is resolved or rejected via the return value of the\n *   `successCallback`, `errorCallback` (unless that value is a promise, in which case it is resolved\n *   with the value which is resolved in that promise using\n *   [promise chaining](http://www.html5rocks.com/en/tutorials/es6/promises/#toc-promises-queues)).\n *   It also notifies via the return value of the `notifyCallback` method. The promise cannot be\n *   resolved or rejected from the notifyCallback method. The errorCallback and notifyCallback\n *   arguments are optional.\n *\n * - `catch(errorCallback)` – shorthand for `promise.then(null, errorCallback)`\n *\n * - `finally(callback, notifyCallback)` – allows you to observe either the fulfillment or rejection of a promise,\n *   but to do so without modifying the final value. This is useful to release resources or do some\n *   clean-up that needs to be done whether the promise was rejected or resolved. See the [full\n *   specification](https://github.com/kriskowal/q/wiki/API-Reference#promisefinallycallback) for\n *   more information.\n *\n * ## Chaining promises\n *\n * Because calling the `then` method of a promise returns a new derived promise, it is easily\n * possible to create a chain of promises:\n *\n * ```js\n *   promiseB = promiseA.then(function(result) {\n *     return result + 1;\n *   });\n *\n *   // promiseB will be resolved immediately after promiseA is resolved and its value\n *   // will be the result of promiseA incremented by 1\n * ```\n *\n * It is possible to create chains of any length and since a promise can be resolved with another\n * promise (which will defer its resolution further), it is possible to pause/defer resolution of\n * the promises at any point in the chain. This makes it possible to implement powerful APIs like\n * $http's response interceptors.\n *\n *\n * ## Differences between Kris Kowal's Q and $q\n *\n *  There are two main differences:\n *\n * - $q is integrated with the {@link ng.$rootScope.Scope} Scope model observation\n *   mechanism in angular, which means faster propagation of resolution or rejection into your\n *   models and avoiding unnecessary browser repaints, which would result in flickering UI.\n * - Q has many more features than $q, but that comes at a cost of bytes. $q is tiny, but contains\n *   all the important functionality needed for common async tasks.\n *\n * ## Testing\n *\n *  ```js\n *    it('should simulate promise', inject(function($q, $rootScope) {\n *      var deferred = $q.defer();\n *      var promise = deferred.promise;\n *      var resolvedValue;\n *\n *      promise.then(function(value) { resolvedValue = value; });\n *      expect(resolvedValue).toBeUndefined();\n *\n *      // Simulate resolving of promise\n *      deferred.resolve(123);\n *      // Note that the 'then' function does not get called synchronously.\n *      // This is because we want the promise API to always be async, whether or not\n *      // it got called synchronously or asynchronously.\n *      expect(resolvedValue).toBeUndefined();\n *\n *      // Propagate promise resolution to 'then' functions using $apply().\n *      $rootScope.$apply();\n *      expect(resolvedValue).toEqual(123);\n *    }));\n *  ```\n *\n * @param {function(function, function)} resolver Function which is responsible for resolving or\n *   rejecting the newly created promise. The first parameter is a function which resolves the\n *   promise, the second parameter is a function which rejects the promise.\n *\n * @returns {Promise} The newly created promise.\n */\n/**\n * @ngdoc provider\n * @name $qProvider\n * @this\n *\n * @description\n */\nfunction $QProvider() {\n  var errorOnUnhandledRejections = true;\n  this.$get = ['$rootScope', '$exceptionHandler', function($rootScope, $exceptionHandler) {\n    return qFactory(function(callback) {\n      $rootScope.$evalAsync(callback);\n    }, $exceptionHandler, errorOnUnhandledRejections);\n  }];\n\n  /**\n   * @ngdoc method\n   * @name $qProvider#errorOnUnhandledRejections\n   * @kind function\n   *\n   * @description\n   * Retrieves or overrides whether to generate an error when a rejected promise is not handled.\n   * This feature is enabled by default.\n   *\n   * @param {boolean=} value Whether to generate an error when a rejected promise is not handled.\n   * @returns {boolean|ng.$qProvider} Current value when called without a new value or self for\n   *    chaining otherwise.\n   */\n  this.errorOnUnhandledRejections = function(value) {\n    if (isDefined(value)) {\n      errorOnUnhandledRejections = value;\n      return this;\n    } else {\n      return errorOnUnhandledRejections;\n    }\n  };\n}\n\n/** @this */\nfunction $$QProvider() {\n  var errorOnUnhandledRejections = true;\n  this.$get = ['$browser', '$exceptionHandler', function($browser, $exceptionHandler) {\n    return qFactory(function(callback) {\n      $browser.defer(callback);\n    }, $exceptionHandler, errorOnUnhandledRejections);\n  }];\n\n  this.errorOnUnhandledRejections = function(value) {\n    if (isDefined(value)) {\n      errorOnUnhandledRejections = value;\n      return this;\n    } else {\n      return errorOnUnhandledRejections;\n    }\n  };\n}\n\n/**\n * Constructs a promise manager.\n *\n * @param {function(function)} nextTick Function for executing functions in the next turn.\n * @param {function(...*)} exceptionHandler Function into which unexpected exceptions are passed for\n *     debugging purposes.\n * @param {boolean=} errorOnUnhandledRejections Whether an error should be generated on unhandled\n *     promises rejections.\n * @returns {object} Promise manager.\n */\nfunction qFactory(nextTick, exceptionHandler, errorOnUnhandledRejections) {\n  var $qMinErr = minErr('$q', TypeError);\n  var queueSize = 0;\n  var checkQueue = [];\n\n  /**\n   * @ngdoc method\n   * @name ng.$q#defer\n   * @kind function\n   *\n   * @description\n   * Creates a `Deferred` object which represents a task which will finish in the future.\n   *\n   * @returns {Deferred} Returns a new instance of deferred.\n   */\n  function defer() {\n    return new Deferred();\n  }\n\n  function Deferred() {\n    var promise = this.promise = new Promise();\n    //Non prototype methods necessary to support unbound execution :/\n    this.resolve = function(val) { resolvePromise(promise, val); };\n    this.reject = function(reason) { rejectPromise(promise, reason); };\n    this.notify = function(progress) { notifyPromise(promise, progress); };\n  }\n\n\n  function Promise() {\n    this.$$state = { status: 0 };\n  }\n\n  extend(Promise.prototype, {\n    then: function(onFulfilled, onRejected, progressBack) {\n      if (isUndefined(onFulfilled) && isUndefined(onRejected) && isUndefined(progressBack)) {\n        return this;\n      }\n      var result = new Promise();\n\n      this.$$state.pending = this.$$state.pending || [];\n      this.$$state.pending.push([result, onFulfilled, onRejected, progressBack]);\n      if (this.$$state.status > 0) scheduleProcessQueue(this.$$state);\n\n      return result;\n    },\n\n    'catch': function(callback) {\n      return this.then(null, callback);\n    },\n\n    'finally': function(callback, progressBack) {\n      return this.then(function(value) {\n        return handleCallback(value, resolve, callback);\n      }, function(error) {\n        return handleCallback(error, reject, callback);\n      }, progressBack);\n    }\n  });\n\n  function processQueue(state) {\n    var fn, promise, pending;\n\n    pending = state.pending;\n    state.processScheduled = false;\n    state.pending = undefined;\n    try {\n      for (var i = 0, ii = pending.length; i < ii; ++i) {\n        markQStateExceptionHandled(state);\n        promise = pending[i][0];\n        fn = pending[i][state.status];\n        try {\n          if (isFunction(fn)) {\n            resolvePromise(promise, fn(state.value));\n          } else if (state.status === 1) {\n            resolvePromise(promise, state.value);\n          } else {\n            rejectPromise(promise, state.value);\n          }\n        } catch (e) {\n          rejectPromise(promise, e);\n          // This error is explicitly marked for being passed to the $exceptionHandler\n          if (e && e.$$passToExceptionHandler === true) {\n            exceptionHandler(e);\n          }\n        }\n      }\n    } finally {\n      --queueSize;\n      if (errorOnUnhandledRejections && queueSize === 0) {\n        nextTick(processChecks);\n      }\n    }\n  }\n\n  function processChecks() {\n    // eslint-disable-next-line no-unmodified-loop-condition\n    while (!queueSize && checkQueue.length) {\n      var toCheck = checkQueue.shift();\n      if (!isStateExceptionHandled(toCheck)) {\n        markQStateExceptionHandled(toCheck);\n        var errorMessage = 'Possibly unhandled rejection: ' + toDebugString(toCheck.value);\n        if (isError(toCheck.value)) {\n          exceptionHandler(toCheck.value, errorMessage);\n        } else {\n          exceptionHandler(errorMessage);\n        }\n      }\n    }\n  }\n\n  function scheduleProcessQueue(state) {\n    if (errorOnUnhandledRejections && !state.pending && state.status === 2 && !isStateExceptionHandled(state)) {\n      if (queueSize === 0 && checkQueue.length === 0) {\n        nextTick(processChecks);\n      }\n      checkQueue.push(state);\n    }\n    if (state.processScheduled || !state.pending) return;\n    state.processScheduled = true;\n    ++queueSize;\n    nextTick(function() { processQueue(state); });\n  }\n\n  function resolvePromise(promise, val) {\n    if (promise.$$state.status) return;\n    if (val === promise) {\n      $$reject(promise, $qMinErr(\n        'qcycle',\n        'Expected promise to be resolved with value other than itself \\'{0}\\'',\n        val));\n    } else {\n      $$resolve(promise, val);\n    }\n\n  }\n\n  function $$resolve(promise, val) {\n    var then;\n    var done = false;\n    try {\n      if (isObject(val) || isFunction(val)) then = val.then;\n      if (isFunction(then)) {\n        promise.$$state.status = -1;\n        then.call(val, doResolve, doReject, doNotify);\n      } else {\n        promise.$$state.value = val;\n        promise.$$state.status = 1;\n        scheduleProcessQueue(promise.$$state);\n      }\n    } catch (e) {\n      doReject(e);\n    }\n\n    function doResolve(val) {\n      if (done) return;\n      done = true;\n      $$resolve(promise, val);\n    }\n    function doReject(val) {\n      if (done) return;\n      done = true;\n      $$reject(promise, val);\n    }\n    function doNotify(progress) {\n      notifyPromise(promise, progress);\n    }\n  }\n\n  function rejectPromise(promise, reason) {\n    if (promise.$$state.status) return;\n    $$reject(promise, reason);\n  }\n\n  function $$reject(promise, reason) {\n    promise.$$state.value = reason;\n    promise.$$state.status = 2;\n    scheduleProcessQueue(promise.$$state);\n  }\n\n  function notifyPromise(promise, progress) {\n    var callbacks = promise.$$state.pending;\n\n    if ((promise.$$state.status <= 0) && callbacks && callbacks.length) {\n      nextTick(function() {\n        var callback, result;\n        for (var i = 0, ii = callbacks.length; i < ii; i++) {\n          result = callbacks[i][0];\n          callback = callbacks[i][3];\n          try {\n            notifyPromise(result, isFunction(callback) ? callback(progress) : progress);\n          } catch (e) {\n            exceptionHandler(e);\n          }\n        }\n      });\n    }\n  }\n\n  /**\n   * @ngdoc method\n   * @name $q#reject\n   * @kind function\n   *\n   * @description\n   * Creates a promise that is resolved as rejected with the specified `reason`. This api should be\n   * used to forward rejection in a chain of promises. If you are dealing with the last promise in\n   * a promise chain, you don't need to worry about it.\n   *\n   * When comparing deferreds/promises to the familiar behavior of try/catch/throw, think of\n   * `reject` as the `throw` keyword in JavaScript. This also means that if you \"catch\" an error via\n   * a promise error callback and you want to forward the error to the promise derived from the\n   * current promise, you have to \"rethrow\" the error by returning a rejection constructed via\n   * `reject`.\n   *\n   * ```js\n   *   promiseB = promiseA.then(function(result) {\n   *     // success: do something and resolve promiseB\n   *     //          with the old or a new result\n   *     return result;\n   *   }, function(reason) {\n   *     // error: handle the error if possible and\n   *     //        resolve promiseB with newPromiseOrValue,\n   *     //        otherwise forward the rejection to promiseB\n   *     if (canHandle(reason)) {\n   *      // handle the error and recover\n   *      return newPromiseOrValue;\n   *     }\n   *     return $q.reject(reason);\n   *   });\n   * ```\n   *\n   * @param {*} reason Constant, message, exception or an object representing the rejection reason.\n   * @returns {Promise} Returns a promise that was already resolved as rejected with the `reason`.\n   */\n  function reject(reason) {\n    var result = new Promise();\n    rejectPromise(result, reason);\n    return result;\n  }\n\n  function handleCallback(value, resolver, callback) {\n    var callbackOutput = null;\n    try {\n      if (isFunction(callback)) callbackOutput = callback();\n    } catch (e) {\n      return reject(e);\n    }\n    if (isPromiseLike(callbackOutput)) {\n      return callbackOutput.then(function() {\n        return resolver(value);\n      }, reject);\n    } else {\n      return resolver(value);\n    }\n  }\n\n  /**\n   * @ngdoc method\n   * @name $q#when\n   * @kind function\n   *\n   * @description\n   * Wraps an object that might be a value or a (3rd party) then-able promise into a $q promise.\n   * This is useful when you are dealing with an object that might or might not be a promise, or if\n   * the promise comes from a source that can't be trusted.\n   *\n   * @param {*} value Value or a promise\n   * @param {Function=} successCallback\n   * @param {Function=} errorCallback\n   * @param {Function=} progressCallback\n   * @returns {Promise} Returns a promise of the passed value or promise\n   */\n\n\n  function when(value, callback, errback, progressBack) {\n    var result = new Promise();\n    resolvePromise(result, value);\n    return result.then(callback, errback, progressBack);\n  }\n\n  /**\n   * @ngdoc method\n   * @name $q#resolve\n   * @kind function\n   *\n   * @description\n   * Alias of {@link ng.$q#when when} to maintain naming consistency with ES6.\n   *\n   * @param {*} value Value or a promise\n   * @param {Function=} successCallback\n   * @param {Function=} errorCallback\n   * @param {Function=} progressCallback\n   * @returns {Promise} Returns a promise of the passed value or promise\n   */\n  var resolve = when;\n\n  /**\n   * @ngdoc method\n   * @name $q#all\n   * @kind function\n   *\n   * @description\n   * Combines multiple promises into a single promise that is resolved when all of the input\n   * promises are resolved.\n   *\n   * @param {Array.<Promise>|Object.<Promise>} promises An array or hash of promises.\n   * @returns {Promise} Returns a single promise that will be resolved with an array/hash of values,\n   *   each value corresponding to the promise at the same index/key in the `promises` array/hash.\n   *   If any of the promises is resolved with a rejection, this resulting promise will be rejected\n   *   with the same rejection value.\n   */\n\n  function all(promises) {\n    var result = new Promise(),\n        counter = 0,\n        results = isArray(promises) ? [] : {};\n\n    forEach(promises, function(promise, key) {\n      counter++;\n      when(promise).then(function(value) {\n        results[key] = value;\n        if (!(--counter)) resolvePromise(result, results);\n      }, function(reason) {\n        rejectPromise(result, reason);\n      });\n    });\n\n    if (counter === 0) {\n      resolvePromise(result, results);\n    }\n\n    return result;\n  }\n\n  /**\n   * @ngdoc method\n   * @name $q#race\n   * @kind function\n   *\n   * @description\n   * Returns a promise that resolves or rejects as soon as one of those promises\n   * resolves or rejects, with the value or reason from that promise.\n   *\n   * @param {Array.<Promise>|Object.<Promise>} promises An array or hash of promises.\n   * @returns {Promise} a promise that resolves or rejects as soon as one of the `promises`\n   * resolves or rejects, with the value or reason from that promise.\n   */\n\n  function race(promises) {\n    var deferred = defer();\n\n    forEach(promises, function(promise) {\n      when(promise).then(deferred.resolve, deferred.reject);\n    });\n\n    return deferred.promise;\n  }\n\n  function $Q(resolver) {\n    if (!isFunction(resolver)) {\n      throw $qMinErr('norslvr', 'Expected resolverFn, got \\'{0}\\'', resolver);\n    }\n\n    var promise = new Promise();\n\n    function resolveFn(value) {\n      resolvePromise(promise, value);\n    }\n\n    function rejectFn(reason) {\n      rejectPromise(promise, reason);\n    }\n\n    resolver(resolveFn, rejectFn);\n\n    return promise;\n  }\n\n  // Let's make the instanceof operator work for promises, so that\n  // `new $q(fn) instanceof $q` would evaluate to true.\n  $Q.prototype = Promise.prototype;\n\n  $Q.defer = defer;\n  $Q.reject = reject;\n  $Q.when = when;\n  $Q.resolve = resolve;\n  $Q.all = all;\n  $Q.race = race;\n\n  return $Q;\n}\n\nfunction isStateExceptionHandled(state) {\n  return !!state.pur;\n}\nfunction markQStateExceptionHandled(state) {\n  state.pur = true;\n}\nfunction markQExceptionHandled(q) {\n  markQStateExceptionHandled(q.$$state);\n}\n\n/** @this */\nfunction $$RAFProvider() { //rAF\n  this.$get = ['$window', '$timeout', function($window, $timeout) {\n    var requestAnimationFrame = $window.requestAnimationFrame ||\n                                $window.webkitRequestAnimationFrame;\n\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\n                               $window.webkitCancelAnimationFrame ||\n                               $window.webkitCancelRequestAnimationFrame;\n\n    var rafSupported = !!requestAnimationFrame;\n    var raf = rafSupported\n      ? function(fn) {\n          var id = requestAnimationFrame(fn);\n          return function() {\n            cancelAnimationFrame(id);\n          };\n        }\n      : function(fn) {\n          var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\n          return function() {\n            $timeout.cancel(timer);\n          };\n        };\n\n    raf.supported = rafSupported;\n\n    return raf;\n  }];\n}\n\n/**\n * DESIGN NOTES\n *\n * The design decisions behind the scope are heavily favored for speed and memory consumption.\n *\n * The typical use of scope is to watch the expressions, which most of the time return the same\n * value as last time so we optimize the operation.\n *\n * Closures construction is expensive in terms of speed as well as memory:\n *   - No closures, instead use prototypical inheritance for API\n *   - Internal state needs to be stored on scope directly, which means that private state is\n *     exposed as $$____ properties\n *\n * Loop operations are optimized by using while(count--) { ... }\n *   - This means that in order to keep the same order of execution as addition we have to add\n *     items to the array at the beginning (unshift) instead of at the end (push)\n *\n * Child scopes are created and removed often\n *   - Using an array would be slow since inserts in the middle are expensive; so we use linked lists\n *\n * There are fewer watches than observers. This is why you don't want the observer to be implemented\n * in the same way as watch. Watch requires return of the initialization function which is expensive\n * to construct.\n */\n\n\n/**\n * @ngdoc provider\n * @name $rootScopeProvider\n * @description\n *\n * Provider for the $rootScope service.\n */\n\n/**\n * @ngdoc method\n * @name $rootScopeProvider#digestTtl\n * @description\n *\n * Sets the number of `$digest` iterations the scope should attempt to execute before giving up and\n * assuming that the model is unstable.\n *\n * The current default is 10 iterations.\n *\n * In complex applications it's possible that the dependencies between `$watch`s will result in\n * several digest iterations. However if an application needs more than the default 10 digest\n * iterations for its model to stabilize then you should investigate what is causing the model to\n * continuously change during the digest.\n *\n * Increasing the TTL could have performance implications, so you should not change it without\n * proper justification.\n *\n * @param {number} limit The number of digest iterations.\n */\n\n\n/**\n * @ngdoc service\n * @name $rootScope\n * @this\n *\n * @description\n *\n * Every application has a single root {@link ng.$rootScope.Scope scope}.\n * All other scopes are descendant scopes of the root scope. Scopes provide separation\n * between the model and the view, via a mechanism for watching the model for changes.\n * They also provide event emission/broadcast and subscription facility. See the\n * {@link guide/scope developer guide on scopes}.\n */\nfunction $RootScopeProvider() {\n  var TTL = 10;\n  var $rootScopeMinErr = minErr('$rootScope');\n  var lastDirtyWatch = null;\n  var applyAsyncId = null;\n\n  this.digestTtl = function(value) {\n    if (arguments.length) {\n      TTL = value;\n    }\n    return TTL;\n  };\n\n  function createChildScopeClass(parent) {\n    function ChildScope() {\n      this.$$watchers = this.$$nextSibling =\n          this.$$childHead = this.$$childTail = null;\n      this.$$listeners = {};\n      this.$$listenerCount = {};\n      this.$$watchersCount = 0;\n      this.$id = nextUid();\n      this.$$ChildScope = null;\n    }\n    ChildScope.prototype = parent;\n    return ChildScope;\n  }\n\n  this.$get = ['$exceptionHandler', '$parse', '$browser',\n      function($exceptionHandler, $parse, $browser) {\n\n    function destroyChildScope($event) {\n        $event.currentScope.$$destroyed = true;\n    }\n\n    function cleanUpScope($scope) {\n\n      // Support: IE 9 only\n      if (msie === 9) {\n        // There is a memory leak in IE9 if all child scopes are not disconnected\n        // completely when a scope is destroyed. So this code will recurse up through\n        // all this scopes children\n        //\n        // See issue https://github.com/angular/angular.js/issues/10706\n        if ($scope.$$childHead) {\n          cleanUpScope($scope.$$childHead);\n        }\n        if ($scope.$$nextSibling) {\n          cleanUpScope($scope.$$nextSibling);\n        }\n      }\n\n      // The code below works around IE9 and V8's memory leaks\n      //\n      // See:\n      // - https://code.google.com/p/v8/issues/detail?id=2073#c26\n      // - https://github.com/angular/angular.js/issues/6794#issuecomment-38648909\n      // - https://github.com/angular/angular.js/issues/1313#issuecomment-10378451\n\n      $scope.$parent = $scope.$$nextSibling = $scope.$$prevSibling = $scope.$$childHead =\n          $scope.$$childTail = $scope.$root = $scope.$$watchers = null;\n    }\n\n    /**\n     * @ngdoc type\n     * @name $rootScope.Scope\n     *\n     * @description\n     * A root scope can be retrieved using the {@link ng.$rootScope $rootScope} key from the\n     * {@link auto.$injector $injector}. Child scopes are created using the\n     * {@link ng.$rootScope.Scope#$new $new()} method. (Most scopes are created automatically when\n     * compiled HTML template is executed.) See also the {@link guide/scope Scopes guide} for\n     * an in-depth introduction and usage examples.\n     *\n     *\n     * ## Inheritance\n     * A scope can inherit from a parent scope, as in this example:\n     * ```js\n         var parent = $rootScope;\n         var child = parent.$new();\n\n         parent.salutation = \"Hello\";\n         expect(child.salutation).toEqual('Hello');\n\n         child.salutation = \"Welcome\";\n         expect(child.salutation).toEqual('Welcome');\n         expect(parent.salutation).toEqual('Hello');\n     * ```\n     *\n     * When interacting with `Scope` in tests, additional helper methods are available on the\n     * instances of `Scope` type. See {@link ngMock.$rootScope.Scope ngMock Scope} for additional\n     * details.\n     *\n     *\n     * @param {Object.<string, function()>=} providers Map of service factory which need to be\n     *                                       provided for the current scope. Defaults to {@link ng}.\n     * @param {Object.<string, *>=} instanceCache Provides pre-instantiated services which should\n     *                              append/override services provided by `providers`. This is handy\n     *                              when unit-testing and having the need to override a default\n     *                              service.\n     * @returns {Object} Newly created scope.\n     *\n     */\n    function Scope() {\n      this.$id = nextUid();\n      this.$$phase = this.$parent = this.$$watchers =\n                     this.$$nextSibling = this.$$prevSibling =\n                     this.$$childHead = this.$$childTail = null;\n      this.$root = this;\n      this.$$destroyed = false;\n      this.$$listeners = {};\n      this.$$listenerCount = {};\n      this.$$watchersCount = 0;\n      this.$$isolateBindings = null;\n    }\n\n    /**\n     * @ngdoc property\n     * @name $rootScope.Scope#$id\n     *\n     * @description\n     * Unique scope ID (monotonically increasing) useful for debugging.\n     */\n\n     /**\n      * @ngdoc property\n      * @name $rootScope.Scope#$parent\n      *\n      * @description\n      * Reference to the parent scope.\n      */\n\n      /**\n       * @ngdoc property\n       * @name $rootScope.Scope#$root\n       *\n       * @description\n       * Reference to the root scope.\n       */\n\n    Scope.prototype = {\n      constructor: Scope,\n      /**\n       * @ngdoc method\n       * @name $rootScope.Scope#$new\n       * @kind function\n       *\n       * @description\n       * Creates a new child {@link ng.$rootScope.Scope scope}.\n       *\n       * The parent scope will propagate the {@link ng.$rootScope.Scope#$digest $digest()} event.\n       * The scope can be removed from the scope hierarchy using {@link ng.$rootScope.Scope#$destroy $destroy()}.\n       *\n       * {@link ng.$rootScope.Scope#$destroy $destroy()} must be called on a scope when it is\n       * desired for the scope and its child scopes to be permanently detached from the parent and\n       * thus stop participating in model change detection and listener notification by invoking.\n       *\n       * @param {boolean} isolate If true, then the scope does not prototypically inherit from the\n       *         parent scope. The scope is isolated, as it can not see parent scope properties.\n       *         When creating widgets, it is useful for the widget to not accidentally read parent\n       *         state.\n       *\n       * @param {Scope} [parent=this] The {@link ng.$rootScope.Scope `Scope`} that will be the `$parent`\n       *                              of the newly created scope. Defaults to `this` scope if not provided.\n       *                              This is used when creating a transclude scope to correctly place it\n       *                              in the scope hierarchy while maintaining the correct prototypical\n       *                              inheritance.\n       *\n       * @returns {Object} The newly created child scope.\n       *\n       */\n      $new: function(isolate, parent) {\n        var child;\n\n        parent = parent || this;\n\n        if (isolate) {\n          child = new Scope();\n          child.$root = this.$root;\n        } else {\n          // Only create a child scope class if somebody asks for one,\n          // but cache it to allow the VM to optimize lookups.\n          if (!this.$$ChildScope) {\n            this.$$ChildScope = createChildScopeClass(this);\n          }\n          child = new this.$$ChildScope();\n        }\n        child.$parent = parent;\n        child.$$prevSibling = parent.$$childTail;\n        if (parent.$$childHead) {\n          parent.$$childTail.$$nextSibling = child;\n          parent.$$childTail = child;\n        } else {\n          parent.$$childHead = parent.$$childTail = child;\n        }\n\n        // When the new scope is not isolated or we inherit from `this`, and\n        // the parent scope is destroyed, the property `$$destroyed` is inherited\n        // prototypically. In all other cases, this property needs to be set\n        // when the parent scope is destroyed.\n        // The listener needs to be added after the parent is set\n        if (isolate || parent !== this) child.$on('$destroy', destroyChildScope);\n\n        return child;\n      },\n\n      /**\n       * @ngdoc method\n       * @name $rootScope.Scope#$watch\n       * @kind function\n       *\n       * @description\n       * Registers a `listener` callback to be executed whenever the `watchExpression` changes.\n       *\n       * - The `watchExpression` is called on every call to {@link ng.$rootScope.Scope#$digest\n       *   $digest()} and should return the value that will be watched. (`watchExpression` should not change\n       *   its value when executed multiple times with the same input because it may be executed multiple\n       *   times by {@link ng.$rootScope.Scope#$digest $digest()}. That is, `watchExpression` should be\n       *   [idempotent](http://en.wikipedia.org/wiki/Idempotence).)\n       * - The `listener` is called only when the value from the current `watchExpression` and the\n       *   previous call to `watchExpression` are not equal (with the exception of the initial run,\n       *   see below). Inequality is determined according to reference inequality,\n       *   [strict comparison](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators)\n       *    via the `!==` Javascript operator, unless `objectEquality == true`\n       *   (see next point)\n       * - When `objectEquality == true`, inequality of the `watchExpression` is determined\n       *   according to the {@link angular.equals} function. To save the value of the object for\n       *   later comparison, the {@link angular.copy} function is used. This therefore means that\n       *   watching complex objects will have adverse memory and performance implications.\n       * - This should not be used to watch for changes in objects that are\n       *   or contain [File](https://developer.mozilla.org/docs/Web/API/File) objects due to limitations with {@link angular.copy `angular.copy`}.\n       * - The watch `listener` may change the model, which may trigger other `listener`s to fire.\n       *   This is achieved by rerunning the watchers until no changes are detected. The rerun\n       *   iteration limit is 10 to prevent an infinite loop deadlock.\n       *\n       *\n       * If you want to be notified whenever {@link ng.$rootScope.Scope#$digest $digest} is called,\n       * you can register a `watchExpression` function with no `listener`. (Be prepared for\n       * multiple calls to your `watchExpression` because it will execute multiple times in a\n       * single {@link ng.$rootScope.Scope#$digest $digest} cycle if a change is detected.)\n       *\n       * After a watcher is registered with the scope, the `listener` fn is called asynchronously\n       * (via {@link ng.$rootScope.Scope#$evalAsync $evalAsync}) to initialize the\n       * watcher. In rare cases, this is undesirable because the listener is called when the result\n       * of `watchExpression` didn't change. To detect this scenario within the `listener` fn, you\n       * can compare the `newVal` and `oldVal`. If these two values are identical (`===`) then the\n       * listener was called due to initialization.\n       *\n       *\n       *\n       * @example\n       * ```js\n           // let's assume that scope was dependency injected as the $rootScope\n           var scope = $rootScope;\n           scope.name = 'misko';\n           scope.counter = 0;\n\n           expect(scope.counter).toEqual(0);\n           scope.$watch('name', function(newValue, oldValue) {\n             scope.counter = scope.counter + 1;\n           });\n           expect(scope.counter).toEqual(0);\n\n           scope.$digest();\n           // the listener is always called during the first $digest loop after it was registered\n           expect(scope.counter).toEqual(1);\n\n           scope.$digest();\n           // but now it will not be called unless the value changes\n           expect(scope.counter).toEqual(1);\n\n           scope.name = 'adam';\n           scope.$digest();\n           expect(scope.counter).toEqual(2);\n\n\n\n           // Using a function as a watchExpression\n           var food;\n           scope.foodCounter = 0;\n           expect(scope.foodCounter).toEqual(0);\n           scope.$watch(\n             // This function returns the value being watched. It is called for each turn of the $digest loop\n             function() { return food; },\n             // This is the change listener, called when the value returned from the above function changes\n             function(newValue, oldValue) {\n               if ( newValue !== oldValue ) {\n                 // Only increment the counter if the value changed\n                 scope.foodCounter = scope.foodCounter + 1;\n               }\n             }\n           );\n           // No digest has been run so the counter will be zero\n           expect(scope.foodCounter).toEqual(0);\n\n           // Run the digest but since food has not changed count will still be zero\n           scope.$digest();\n           expect(scope.foodCounter).toEqual(0);\n\n           // Update food and run digest.  Now the counter will increment\n           food = 'cheeseburger';\n           scope.$digest();\n           expect(scope.foodCounter).toEqual(1);\n\n       * ```\n       *\n       *\n       *\n       * @param {(function()|string)} watchExpression Expression that is evaluated on each\n       *    {@link ng.$rootScope.Scope#$digest $digest} cycle. A change in the return value triggers\n       *    a call to the `listener`.\n       *\n       *    - `string`: Evaluated as {@link guide/expression expression}\n       *    - `function(scope)`: called with current `scope` as a parameter.\n       * @param {function(newVal, oldVal, scope)} listener Callback called whenever the value\n       *    of `watchExpression` changes.\n       *\n       *    - `newVal` contains the current value of the `watchExpression`\n       *    - `oldVal` contains the previous value of the `watchExpression`\n       *    - `scope` refers to the current scope\n       * @param {boolean=} [objectEquality=false] Compare for object equality using {@link angular.equals} instead of\n       *     comparing for reference equality.\n       * @returns {function()} Returns a deregistration function for this listener.\n       */\n      $watch: function(watchExp, listener, objectEquality, prettyPrintExpression) {\n        var get = $parse(watchExp);\n        var fn = isFunction(listener) ? listener : noop;\n\n        if (get.$$watchDelegate) {\n          return get.$$watchDelegate(this, fn, objectEquality, get, watchExp);\n        }\n        var scope = this,\n            array = scope.$$watchers,\n            watcher = {\n              fn: fn,\n              last: initWatchVal,\n              get: get,\n              exp: prettyPrintExpression || watchExp,\n              eq: !!objectEquality\n            };\n\n        lastDirtyWatch = null;\n\n        if (!array) {\n          array = scope.$$watchers = [];\n          array.$$digestWatchIndex = -1;\n        }\n        // we use unshift since we use a while loop in $digest for speed.\n        // the while loop reads in reverse order.\n        array.unshift(watcher);\n        array.$$digestWatchIndex++;\n        incrementWatchersCount(this, 1);\n\n        return function deregisterWatch() {\n          var index = arrayRemove(array, watcher);\n          if (index >= 0) {\n            incrementWatchersCount(scope, -1);\n            if (index < array.$$digestWatchIndex) {\n              array.$$digestWatchIndex--;\n            }\n          }\n          lastDirtyWatch = null;\n        };\n      },\n\n      /**\n       * @ngdoc method\n       * @name $rootScope.Scope#$watchGroup\n       * @kind function\n       *\n       * @description\n       * A variant of {@link ng.$rootScope.Scope#$watch $watch()} where it watches an array of `watchExpressions`.\n       * If any one expression in the collection changes the `listener` is executed.\n       *\n       * - The items in the `watchExpressions` array are observed via the standard `$watch` operation. Their return\n       *   values are examined for changes on every call to `$digest`.\n       * - The `listener` is called whenever any expression in the `watchExpressions` array changes.\n       *\n       * `$watchGroup` is more performant than watching each expression individually, and should be\n       * used when the listener does not need to know which expression has changed.\n       * If the listener needs to know which expression has changed,\n       * {@link ng.$rootScope.Scope#$watch $watch()} or\n       * {@link ng.$rootScope.Scope#$watchCollection $watchCollection()} should be used.\n       *\n       * @param {Array.<string|Function(scope)>} watchExpressions Array of expressions that will be individually\n       * watched using {@link ng.$rootScope.Scope#$watch $watch()}\n       *\n       * @param {function(newValues, oldValues, scope)} listener Callback called whenever the return value of any\n       *    expression in `watchExpressions` changes\n       *    The `newValues` array contains the current values of the `watchExpressions`, with the indexes matching\n       *    those of `watchExpression`\n       *    and the `oldValues` array contains the previous values of the `watchExpressions`, with the indexes matching\n       *    those of `watchExpression`.\n       *\n       *    Note that `newValues` and `oldValues` reflect the differences in each **individual**\n       *    expression, and not the difference of the values between each call of the listener.\n       *    That means the difference between `newValues` and `oldValues` cannot be used to determine\n       *    which expression has changed / remained stable:\n       *\n       *    ```js\n       *\n       *    $scope.$watchGroup(['v1', 'v2'], function(newValues, oldValues) {\n       *      console.log(newValues, oldValues);\n       *    });\n       *\n       *    // newValues, oldValues initially\n       *    // [undefined, undefined], [undefined, undefined]\n       *\n       *    $scope.v1 = 'a';\n       *    $scope.v2 = 'a';\n       *\n       *    // ['a', 'a'], [undefined, undefined]\n       *\n       *    $scope.v2 = 'b'\n       *\n       *    // v1 hasn't changed since it became `'a'`, therefore its oldValue is still `undefined`\n       *    // ['a', 'b'], [undefined, 'a']\n       *\n       *    ```\n       *\n       *    The `scope` refers to the current scope.\n       * @returns {function()} Returns a de-registration function for all listeners.\n       */\n      $watchGroup: function(watchExpressions, listener) {\n        var oldValues = new Array(watchExpressions.length);\n        var newValues = new Array(watchExpressions.length);\n        var deregisterFns = [];\n        var self = this;\n        var changeReactionScheduled = false;\n        var firstRun = true;\n\n        if (!watchExpressions.length) {\n          // No expressions means we call the listener ASAP\n          var shouldCall = true;\n          self.$evalAsync(function() {\n            if (shouldCall) listener(newValues, newValues, self);\n          });\n          return function deregisterWatchGroup() {\n            shouldCall = false;\n          };\n        }\n\n        if (watchExpressions.length === 1) {\n          // Special case size of one\n          return this.$watch(watchExpressions[0], function watchGroupAction(value, oldValue, scope) {\n            newValues[0] = value;\n            oldValues[0] = oldValue;\n            listener(newValues, (value === oldValue) ? newValues : oldValues, scope);\n          });\n        }\n\n        forEach(watchExpressions, function(expr, i) {\n          var unwatchFn = self.$watch(expr, function watchGroupSubAction(value, oldValue) {\n            newValues[i] = value;\n            oldValues[i] = oldValue;\n            if (!changeReactionScheduled) {\n              changeReactionScheduled = true;\n              self.$evalAsync(watchGroupAction);\n            }\n          });\n          deregisterFns.push(unwatchFn);\n        });\n\n        function watchGroupAction() {\n          changeReactionScheduled = false;\n\n          if (firstRun) {\n            firstRun = false;\n            listener(newValues, newValues, self);\n          } else {\n            listener(newValues, oldValues, self);\n          }\n        }\n\n        return function deregisterWatchGroup() {\n          while (deregisterFns.length) {\n            deregisterFns.shift()();\n          }\n        };\n      },\n\n\n      /**\n       * @ngdoc method\n       * @name $rootScope.Scope#$watchCollection\n       * @kind function\n       *\n       * @description\n       * Shallow watches the properties of an object and fires whenever any of the properties change\n       * (for arrays, this implies watching the array items; for object maps, this implies watching\n       * the properties). If a change is detected, the `listener` callback is fired.\n       *\n       * - The `obj` collection is observed via standard $watch operation and is examined on every\n       *   call to $digest() to see if any items have been added, removed, or moved.\n       * - The `listener` is called whenever anything within the `obj` has changed. Examples include\n       *   adding, removing, and moving items belonging to an object or array.\n       *\n       *\n       * @example\n       * ```js\n          $scope.names = ['igor', 'matias', 'misko', 'james'];\n          $scope.dataCount = 4;\n\n          $scope.$watchCollection('names', function(newNames, oldNames) {\n            $scope.dataCount = newNames.length;\n          });\n\n          expect($scope.dataCount).toEqual(4);\n          $scope.$digest();\n\n          //still at 4 ... no changes\n          expect($scope.dataCount).toEqual(4);\n\n          $scope.names.pop();\n          $scope.$digest();\n\n          //now there's been a change\n          expect($scope.dataCount).toEqual(3);\n       * ```\n       *\n       *\n       * @param {string|function(scope)} obj Evaluated as {@link guide/expression expression}. The\n       *    expression value should evaluate to an object or an array which is observed on each\n       *    {@link ng.$rootScope.Scope#$digest $digest} cycle. Any shallow change within the\n       *    collection will trigger a call to the `listener`.\n       *\n       * @param {function(newCollection, oldCollection, scope)} listener a callback function called\n       *    when a change is detected.\n       *    - The `newCollection` object is the newly modified data obtained from the `obj` expression\n       *    - The `oldCollection` object is a copy of the former collection data.\n       *      Due to performance considerations, the`oldCollection` value is computed only if the\n       *      `listener` function declares two or more arguments.\n       *    - The `scope` argument refers to the current scope.\n       *\n       * @returns {function()} Returns a de-registration function for this listener. When the\n       *    de-registration function is executed, the internal watch operation is terminated.\n       */\n      $watchCollection: function(obj, listener) {\n        $watchCollectionInterceptor.$stateful = true;\n\n        var self = this;\n        // the current value, updated on each dirty-check run\n        var newValue;\n        // a shallow copy of the newValue from the last dirty-check run,\n        // updated to match newValue during dirty-check run\n        var oldValue;\n        // a shallow copy of the newValue from when the last change happened\n        var veryOldValue;\n        // only track veryOldValue if the listener is asking for it\n        var trackVeryOldValue = (listener.length > 1);\n        var changeDetected = 0;\n        var changeDetector = $parse(obj, $watchCollectionInterceptor);\n        var internalArray = [];\n        var internalObject = {};\n        var initRun = true;\n        var oldLength = 0;\n\n        function $watchCollectionInterceptor(_value) {\n          newValue = _value;\n          var newLength, key, bothNaN, newItem, oldItem;\n\n          // If the new value is undefined, then return undefined as the watch may be a one-time watch\n          if (isUndefined(newValue)) return;\n\n          if (!isObject(newValue)) { // if primitive\n            if (oldValue !== newValue) {\n              oldValue = newValue;\n              changeDetected++;\n            }\n          } else if (isArrayLike(newValue)) {\n            if (oldValue !== internalArray) {\n              // we are transitioning from something which was not an array into array.\n              oldValue = internalArray;\n              oldLength = oldValue.length = 0;\n              changeDetected++;\n            }\n\n            newLength = newValue.length;\n\n            if (oldLength !== newLength) {\n              // if lengths do not match we need to trigger change notification\n              changeDetected++;\n              oldValue.length = oldLength = newLength;\n            }\n            // copy the items to oldValue and look for changes.\n            for (var i = 0; i < newLength; i++) {\n              oldItem = oldValue[i];\n              newItem = newValue[i];\n\n              // eslint-disable-next-line no-self-compare\n              bothNaN = (oldItem !== oldItem) && (newItem !== newItem);\n              if (!bothNaN && (oldItem !== newItem)) {\n                changeDetected++;\n                oldValue[i] = newItem;\n              }\n            }\n          } else {\n            if (oldValue !== internalObject) {\n              // we are transitioning from something which was not an object into object.\n              oldValue = internalObject = {};\n              oldLength = 0;\n              changeDetected++;\n            }\n            // copy the items to oldValue and look for changes.\n            newLength = 0;\n            for (key in newValue) {\n              if (hasOwnProperty.call(newValue, key)) {\n                newLength++;\n                newItem = newValue[key];\n                oldItem = oldValue[key];\n\n                if (key in oldValue) {\n                  // eslint-disable-next-line no-self-compare\n                  bothNaN = (oldItem !== oldItem) && (newItem !== newItem);\n                  if (!bothNaN && (oldItem !== newItem)) {\n                    changeDetected++;\n                    oldValue[key] = newItem;\n                  }\n                } else {\n                  oldLength++;\n                  oldValue[key] = newItem;\n                  changeDetected++;\n                }\n              }\n            }\n            if (oldLength > newLength) {\n              // we used to have more keys, need to find them and destroy them.\n              changeDetected++;\n              for (key in oldValue) {\n                if (!hasOwnProperty.call(newValue, key)) {\n                  oldLength--;\n                  delete oldValue[key];\n                }\n              }\n            }\n          }\n          return changeDetected;\n        }\n\n        function $watchCollectionAction() {\n          if (initRun) {\n            initRun = false;\n            listener(newValue, newValue, self);\n          } else {\n            listener(newValue, veryOldValue, self);\n          }\n\n          // make a copy for the next time a collection is changed\n          if (trackVeryOldValue) {\n            if (!isObject(newValue)) {\n              //primitive\n              veryOldValue = newValue;\n            } else if (isArrayLike(newValue)) {\n              veryOldValue = new Array(newValue.length);\n              for (var i = 0; i < newValue.length; i++) {\n                veryOldValue[i] = newValue[i];\n              }\n            } else { // if object\n              veryOldValue = {};\n              for (var key in newValue) {\n                if (hasOwnProperty.call(newValue, key)) {\n                  veryOldValue[key] = newValue[key];\n                }\n              }\n            }\n          }\n        }\n\n        return this.$watch(changeDetector, $watchCollectionAction);\n      },\n\n      /**\n       * @ngdoc method\n       * @name $rootScope.Scope#$digest\n       * @kind function\n       *\n       * @description\n       * Processes all of the {@link ng.$rootScope.Scope#$watch watchers} of the current scope and\n       * its children. Because a {@link ng.$rootScope.Scope#$watch watcher}'s listener can change\n       * the model, the `$digest()` keeps calling the {@link ng.$rootScope.Scope#$watch watchers}\n       * until no more listeners are firing. This means that it is possible to get into an infinite\n       * loop. This function will throw `'Maximum iteration limit exceeded.'` if the number of\n       * iterations exceeds 10.\n       *\n       * Usually, you don't call `$digest()` directly in\n       * {@link ng.directive:ngController controllers} or in\n       * {@link ng.$compileProvider#directive directives}.\n       * Instead, you should call {@link ng.$rootScope.Scope#$apply $apply()} (typically from within\n       * a {@link ng.$compileProvider#directive directive}), which will force a `$digest()`.\n       *\n       * If you want to be notified whenever `$digest()` is called,\n       * you can register a `watchExpression` function with\n       * {@link ng.$rootScope.Scope#$watch $watch()} with no `listener`.\n       *\n       * In unit tests, you may need to call `$digest()` to simulate the scope life cycle.\n       *\n       * @example\n       * ```js\n           var scope = ...;\n           scope.name = 'misko';\n           scope.counter = 0;\n\n           expect(scope.counter).toEqual(0);\n           scope.$watch('name', function(newValue, oldValue) {\n             scope.counter = scope.counter + 1;\n           });\n           expect(scope.counter).toEqual(0);\n\n           scope.$digest();\n           // the listener is always called during the first $digest loop after it was registered\n           expect(scope.counter).toEqual(1);\n\n           scope.$digest();\n           // but now it will not be called unless the value changes\n           expect(scope.counter).toEqual(1);\n\n           scope.name = 'adam';\n           scope.$digest();\n           expect(scope.counter).toEqual(2);\n       * ```\n       *\n       */\n      $digest: function() {\n        var watch, value, last, fn, get,\n            watchers,\n            dirty, ttl = TTL,\n            next, current, target = this,\n            watchLog = [],\n            logIdx, asyncTask;\n\n        beginPhase('$digest');\n        // Check for changes to browser url that happened in sync before the call to $digest\n        $browser.$$checkUrlChange();\n\n        if (this === $rootScope && applyAsyncId !== null) {\n          // If this is the root scope, and $applyAsync has scheduled a deferred $apply(), then\n          // cancel the scheduled $apply and flush the queue of expressions to be evaluated.\n          $browser.defer.cancel(applyAsyncId);\n          flushApplyAsync();\n        }\n\n        lastDirtyWatch = null;\n\n        do { // \"while dirty\" loop\n          dirty = false;\n          current = target;\n\n          // It's safe for asyncQueuePosition to be a local variable here because this loop can't\n          // be reentered recursively. Calling $digest from a function passed to $evalAsync would\n          // lead to a '$digest already in progress' error.\n          for (var asyncQueuePosition = 0; asyncQueuePosition < asyncQueue.length; asyncQueuePosition++) {\n            try {\n              asyncTask = asyncQueue[asyncQueuePosition];\n              fn = asyncTask.fn;\n              fn(asyncTask.scope, asyncTask.locals);\n            } catch (e) {\n              $exceptionHandler(e);\n            }\n            lastDirtyWatch = null;\n          }\n          asyncQueue.length = 0;\n\n          traverseScopesLoop:\n          do { // \"traverse the scopes\" loop\n            if ((watchers = current.$$watchers)) {\n              // process our watches\n              watchers.$$digestWatchIndex = watchers.length;\n              while (watchers.$$digestWatchIndex--) {\n                try {\n                  watch = watchers[watchers.$$digestWatchIndex];\n                  // Most common watches are on primitives, in which case we can short\n                  // circuit it with === operator, only when === fails do we use .equals\n                  if (watch) {\n                    get = watch.get;\n                    if ((value = get(current)) !== (last = watch.last) &&\n                        !(watch.eq\n                            ? equals(value, last)\n                            : (isNumberNaN(value) && isNumberNaN(last)))) {\n                      dirty = true;\n                      lastDirtyWatch = watch;\n                      watch.last = watch.eq ? copy(value, null) : value;\n                      fn = watch.fn;\n                      fn(value, ((last === initWatchVal) ? value : last), current);\n                      if (ttl < 5) {\n                        logIdx = 4 - ttl;\n                        if (!watchLog[logIdx]) watchLog[logIdx] = [];\n                        watchLog[logIdx].push({\n                          msg: isFunction(watch.exp) ? 'fn: ' + (watch.exp.name || watch.exp.toString()) : watch.exp,\n                          newVal: value,\n                          oldVal: last\n                        });\n                      }\n                    } else if (watch === lastDirtyWatch) {\n                      // If the most recently dirty watcher is now clean, short circuit since the remaining watchers\n                      // have already been tested.\n                      dirty = false;\n                      break traverseScopesLoop;\n                    }\n                  }\n                } catch (e) {\n                  $exceptionHandler(e);\n                }\n              }\n            }\n\n            // Insanity Warning: scope depth-first traversal\n            // yes, this code is a bit crazy, but it works and we have tests to prove it!\n            // this piece should be kept in sync with the traversal in $broadcast\n            if (!(next = ((current.$$watchersCount && current.$$childHead) ||\n                (current !== target && current.$$nextSibling)))) {\n              while (current !== target && !(next = current.$$nextSibling)) {\n                current = current.$parent;\n              }\n            }\n          } while ((current = next));\n\n          // `break traverseScopesLoop;` takes us to here\n\n          if ((dirty || asyncQueue.length) && !(ttl--)) {\n            clearPhase();\n            throw $rootScopeMinErr('infdig',\n                '{0} $digest() iterations reached. Aborting!\\n' +\n                'Watchers fired in the last 5 iterations: {1}',\n                TTL, watchLog);\n          }\n\n        } while (dirty || asyncQueue.length);\n\n        clearPhase();\n\n        // postDigestQueuePosition isn't local here because this loop can be reentered recursively.\n        while (postDigestQueuePosition < postDigestQueue.length) {\n          try {\n            postDigestQueue[postDigestQueuePosition++]();\n          } catch (e) {\n            $exceptionHandler(e);\n          }\n        }\n        postDigestQueue.length = postDigestQueuePosition = 0;\n\n        // Check for changes to browser url that happened during the $digest\n        // (for which no event is fired; e.g. via `history.pushState()`)\n        $browser.$$checkUrlChange();\n      },\n\n\n      /**\n       * @ngdoc event\n       * @name $rootScope.Scope#$destroy\n       * @eventType broadcast on scope being destroyed\n       *\n       * @description\n       * Broadcasted when a scope and its children are being destroyed.\n       *\n       * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to\n       * clean up DOM bindings before an element is removed from the DOM.\n       */\n\n      /**\n       * @ngdoc method\n       * @name $rootScope.Scope#$destroy\n       * @kind function\n       *\n       * @description\n       * Removes the current scope (and all of its children) from the parent scope. Removal implies\n       * that calls to {@link ng.$rootScope.Scope#$digest $digest()} will no longer\n       * propagate to the current scope and its children. Removal also implies that the current\n       * scope is eligible for garbage collection.\n       *\n       * The `$destroy()` is usually used by directives such as\n       * {@link ng.directive:ngRepeat ngRepeat} for managing the\n       * unrolling of the loop.\n       *\n       * Just before a scope is destroyed, a `$destroy` event is broadcasted on this scope.\n       * Application code can register a `$destroy` event handler that will give it a chance to\n       * perform any necessary cleanup.\n       *\n       * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to\n       * clean up DOM bindings before an element is removed from the DOM.\n       */\n      $destroy: function() {\n        // We can't destroy a scope that has been already destroyed.\n        if (this.$$destroyed) return;\n        var parent = this.$parent;\n\n        this.$broadcast('$destroy');\n        this.$$destroyed = true;\n\n        if (this === $rootScope) {\n          //Remove handlers attached to window when $rootScope is removed\n          $browser.$$applicationDestroyed();\n        }\n\n        incrementWatchersCount(this, -this.$$watchersCount);\n        for (var eventName in this.$$listenerCount) {\n          decrementListenerCount(this, this.$$listenerCount[eventName], eventName);\n        }\n\n        // sever all the references to parent scopes (after this cleanup, the current scope should\n        // not be retained by any of our references and should be eligible for garbage collection)\n        if (parent && parent.$$childHead === this) parent.$$childHead = this.$$nextSibling;\n        if (parent && parent.$$childTail === this) parent.$$childTail = this.$$prevSibling;\n        if (this.$$prevSibling) this.$$prevSibling.$$nextSibling = this.$$nextSibling;\n        if (this.$$nextSibling) this.$$nextSibling.$$prevSibling = this.$$prevSibling;\n\n        // Disable listeners, watchers and apply/digest methods\n        this.$destroy = this.$digest = this.$apply = this.$evalAsync = this.$applyAsync = noop;\n        this.$on = this.$watch = this.$watchGroup = function() { return noop; };\n        this.$$listeners = {};\n\n        // Disconnect the next sibling to prevent `cleanUpScope` destroying those too\n        this.$$nextSibling = null;\n        cleanUpScope(this);\n      },\n\n      /**\n       * @ngdoc method\n       * @name $rootScope.Scope#$eval\n       * @kind function\n       *\n       * @description\n       * Executes the `expression` on the current scope and returns the result. Any exceptions in\n       * the expression are propagated (uncaught). This is useful when evaluating Angular\n       * expressions.\n       *\n       * @example\n       * ```js\n           var scope = ng.$rootScope.Scope();\n           scope.a = 1;\n           scope.b = 2;\n\n           expect(scope.$eval('a+b')).toEqual(3);\n           expect(scope.$eval(function(scope){ return scope.a + scope.b; })).toEqual(3);\n       * ```\n       *\n       * @param {(string|function())=} expression An angular expression to be executed.\n       *\n       *    - `string`: execute using the rules as defined in  {@link guide/expression expression}.\n       *    - `function(scope)`: execute the function with the current `scope` parameter.\n       *\n       * @param {(object)=} locals Local variables object, useful for overriding values in scope.\n       * @returns {*} The result of evaluating the expression.\n       */\n      $eval: function(expr, locals) {\n        return $parse(expr)(this, locals);\n      },\n\n      /**\n       * @ngdoc method\n       * @name $rootScope.Scope#$evalAsync\n       * @kind function\n       *\n       * @description\n       * Executes the expression on the current scope at a later point in time.\n       *\n       * The `$evalAsync` makes no guarantees as to when the `expression` will be executed, only\n       * that:\n       *\n       *   - it will execute after the function that scheduled the evaluation (preferably before DOM\n       *     rendering).\n       *   - at least one {@link ng.$rootScope.Scope#$digest $digest cycle} will be performed after\n       *     `expression` execution.\n       *\n       * Any exceptions from the execution of the expression are forwarded to the\n       * {@link ng.$exceptionHandler $exceptionHandler} service.\n       *\n       * __Note:__ if this function is called outside of a `$digest` cycle, a new `$digest` cycle\n       * will be scheduled. However, it is encouraged to always call code that changes the model\n       * from within an `$apply` call. That includes code evaluated via `$evalAsync`.\n       *\n       * @param {(string|function())=} expression An angular expression to be executed.\n       *\n       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.\n       *    - `function(scope)`: execute the function with the current `scope` parameter.\n       *\n       * @param {(object)=} locals Local variables object, useful for overriding values in scope.\n       */\n      $evalAsync: function(expr, locals) {\n        // if we are outside of an $digest loop and this is the first time we are scheduling async\n        // task also schedule async auto-flush\n        if (!$rootScope.$$phase && !asyncQueue.length) {\n          $browser.defer(function() {\n            if (asyncQueue.length) {\n              $rootScope.$digest();\n            }\n          });\n        }\n\n        asyncQueue.push({scope: this, fn: $parse(expr), locals: locals});\n      },\n\n      $$postDigest: function(fn) {\n        postDigestQueue.push(fn);\n      },\n\n      /**\n       * @ngdoc method\n       * @name $rootScope.Scope#$apply\n       * @kind function\n       *\n       * @description\n       * `$apply()` is used to execute an expression in angular from outside of the angular\n       * framework. (For example from browser DOM events, setTimeout, XHR or third party libraries).\n       * Because we are calling into the angular framework we need to perform proper scope life\n       * cycle of {@link ng.$exceptionHandler exception handling},\n       * {@link ng.$rootScope.Scope#$digest executing watches}.\n       *\n       * **Life cycle: Pseudo-Code of `$apply()`**\n       *\n       * ```js\n           function $apply(expr) {\n             try {\n               return $eval(expr);\n             } catch (e) {\n               $exceptionHandler(e);\n             } finally {\n               $root.$digest();\n             }\n           }\n       * ```\n       *\n       *\n       * Scope's `$apply()` method transitions through the following stages:\n       *\n       * 1. The {@link guide/expression expression} is executed using the\n       *    {@link ng.$rootScope.Scope#$eval $eval()} method.\n       * 2. Any exceptions from the execution of the expression are forwarded to the\n       *    {@link ng.$exceptionHandler $exceptionHandler} service.\n       * 3. The {@link ng.$rootScope.Scope#$watch watch} listeners are fired immediately after the\n       *    expression was executed using the {@link ng.$rootScope.Scope#$digest $digest()} method.\n       *\n       *\n       * @param {(string|function())=} exp An angular expression to be executed.\n       *\n       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.\n       *    - `function(scope)`: execute the function with current `scope` parameter.\n       *\n       * @returns {*} The result of evaluating the expression.\n       */\n      $apply: function(expr) {\n        try {\n          beginPhase('$apply');\n          try {\n            return this.$eval(expr);\n          } finally {\n            clearPhase();\n          }\n        } catch (e) {\n          $exceptionHandler(e);\n        } finally {\n          try {\n            $rootScope.$digest();\n          } catch (e) {\n            $exceptionHandler(e);\n            // eslint-disable-next-line no-unsafe-finally\n            throw e;\n          }\n        }\n      },\n\n      /**\n       * @ngdoc method\n       * @name $rootScope.Scope#$applyAsync\n       * @kind function\n       *\n       * @description\n       * Schedule the invocation of $apply to occur at a later time. The actual time difference\n       * varies across browsers, but is typically around ~10 milliseconds.\n       *\n       * This can be used to queue up multiple expressions which need to be evaluated in the same\n       * digest.\n       *\n       * @param {(string|function())=} exp An angular expression to be executed.\n       *\n       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.\n       *    - `function(scope)`: execute the function with current `scope` parameter.\n       */\n      $applyAsync: function(expr) {\n        var scope = this;\n        if (expr) {\n          applyAsyncQueue.push($applyAsyncExpression);\n        }\n        expr = $parse(expr);\n        scheduleApplyAsync();\n\n        function $applyAsyncExpression() {\n          scope.$eval(expr);\n        }\n      },\n\n      /**\n       * @ngdoc method\n       * @name $rootScope.Scope#$on\n       * @kind function\n       *\n       * @description\n       * Listens on events of a given type. See {@link ng.$rootScope.Scope#$emit $emit} for\n       * discussion of event life cycle.\n       *\n       * The event listener function format is: `function(event, args...)`. The `event` object\n       * passed into the listener has the following attributes:\n       *\n       *   - `targetScope` - `{Scope}`: the scope on which the event was `$emit`-ed or\n       *     `$broadcast`-ed.\n       *   - `currentScope` - `{Scope}`: the scope that is currently handling the event. Once the\n       *     event propagates through the scope hierarchy, this property is set to null.\n       *   - `name` - `{string}`: name of the event.\n       *   - `stopPropagation` - `{function=}`: calling `stopPropagation` function will cancel\n       *     further event propagation (available only for events that were `$emit`-ed).\n       *   - `preventDefault` - `{function}`: calling `preventDefault` sets `defaultPrevented` flag\n       *     to true.\n       *   - `defaultPrevented` - `{boolean}`: true if `preventDefault` was called.\n       *\n       * @param {string} name Event name to listen on.\n       * @param {function(event, ...args)} listener Function to call when the event is emitted.\n       * @returns {function()} Returns a deregistration function for this listener.\n       */\n      $on: function(name, listener) {\n        var namedListeners = this.$$listeners[name];\n        if (!namedListeners) {\n          this.$$listeners[name] = namedListeners = [];\n        }\n        namedListeners.push(listener);\n\n        var current = this;\n        do {\n          if (!current.$$listenerCount[name]) {\n            current.$$listenerCount[name] = 0;\n          }\n          current.$$listenerCount[name]++;\n        } while ((current = current.$parent));\n\n        var self = this;\n        return function() {\n          var indexOfListener = namedListeners.indexOf(listener);\n          if (indexOfListener !== -1) {\n            // Use delete in the hope of the browser deallocating the memory for the array entry,\n            // while not shifting the array indexes of other listeners.\n            // See issue https://github.com/angular/angular.js/issues/16135\n            delete namedListeners[indexOfListener];\n            decrementListenerCount(self, 1, name);\n          }\n        };\n      },\n\n\n      /**\n       * @ngdoc method\n       * @name $rootScope.Scope#$emit\n       * @kind function\n       *\n       * @description\n       * Dispatches an event `name` upwards through the scope hierarchy notifying the\n       * registered {@link ng.$rootScope.Scope#$on} listeners.\n       *\n       * The event life cycle starts at the scope on which `$emit` was called. All\n       * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get\n       * notified. Afterwards, the event traverses upwards toward the root scope and calls all\n       * registered listeners along the way. The event will stop propagating if one of the listeners\n       * cancels it.\n       *\n       * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed\n       * onto the {@link ng.$exceptionHandler $exceptionHandler} service.\n       *\n       * @param {string} name Event name to emit.\n       * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.\n       * @return {Object} Event object (see {@link ng.$rootScope.Scope#$on}).\n       */\n      $emit: function(name, args) {\n        var empty = [],\n            namedListeners,\n            scope = this,\n            stopPropagation = false,\n            event = {\n              name: name,\n              targetScope: scope,\n              stopPropagation: function() {stopPropagation = true;},\n              preventDefault: function() {\n                event.defaultPrevented = true;\n              },\n              defaultPrevented: false\n            },\n            listenerArgs = concat([event], arguments, 1),\n            i, length;\n\n        do {\n          namedListeners = scope.$$listeners[name] || empty;\n          event.currentScope = scope;\n          for (i = 0, length = namedListeners.length; i < length; i++) {\n\n            // if listeners were deregistered, defragment the array\n            if (!namedListeners[i]) {\n              namedListeners.splice(i, 1);\n              i--;\n              length--;\n              continue;\n            }\n            try {\n              //allow all listeners attached to the current scope to run\n              namedListeners[i].apply(null, listenerArgs);\n            } catch (e) {\n              $exceptionHandler(e);\n            }\n          }\n          //if any listener on the current scope stops propagation, prevent bubbling\n          if (stopPropagation) {\n            break;\n          }\n          //traverse upwards\n          scope = scope.$parent;\n        } while (scope);\n\n        event.currentScope = null;\n\n        return event;\n      },\n\n\n      /**\n       * @ngdoc method\n       * @name $rootScope.Scope#$broadcast\n       * @kind function\n       *\n       * @description\n       * Dispatches an event `name` downwards to all child scopes (and their children) notifying the\n       * registered {@link ng.$rootScope.Scope#$on} listeners.\n       *\n       * The event life cycle starts at the scope on which `$broadcast` was called. All\n       * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get\n       * notified. Afterwards, the event propagates to all direct and indirect scopes of the current\n       * scope and calls all registered listeners along the way. The event cannot be canceled.\n       *\n       * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed\n       * onto the {@link ng.$exceptionHandler $exceptionHandler} service.\n       *\n       * @param {string} name Event name to broadcast.\n       * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.\n       * @return {Object} Event object, see {@link ng.$rootScope.Scope#$on}\n       */\n      $broadcast: function(name, args) {\n        var target = this,\n            current = target,\n            next = target,\n            event = {\n              name: name,\n              targetScope: target,\n              preventDefault: function() {\n                event.defaultPrevented = true;\n              },\n              defaultPrevented: false\n            };\n\n        if (!target.$$listenerCount[name]) return event;\n\n        var listenerArgs = concat([event], arguments, 1),\n            listeners, i, length;\n\n        //down while you can, then up and next sibling or up and next sibling until back at root\n        while ((current = next)) {\n          event.currentScope = current;\n          listeners = current.$$listeners[name] || [];\n          for (i = 0, length = listeners.length; i < length; i++) {\n            // if listeners were deregistered, defragment the array\n            if (!listeners[i]) {\n              listeners.splice(i, 1);\n              i--;\n              length--;\n              continue;\n            }\n\n            try {\n              listeners[i].apply(null, listenerArgs);\n            } catch (e) {\n              $exceptionHandler(e);\n            }\n          }\n\n          // Insanity Warning: scope depth-first traversal\n          // yes, this code is a bit crazy, but it works and we have tests to prove it!\n          // this piece should be kept in sync with the traversal in $digest\n          // (though it differs due to having the extra check for $$listenerCount)\n          if (!(next = ((current.$$listenerCount[name] && current.$$childHead) ||\n              (current !== target && current.$$nextSibling)))) {\n            while (current !== target && !(next = current.$$nextSibling)) {\n              current = current.$parent;\n            }\n          }\n        }\n\n        event.currentScope = null;\n        return event;\n      }\n    };\n\n    var $rootScope = new Scope();\n\n    //The internal queues. Expose them on the $rootScope for debugging/testing purposes.\n    var asyncQueue = $rootScope.$$asyncQueue = [];\n    var postDigestQueue = $rootScope.$$postDigestQueue = [];\n    var applyAsyncQueue = $rootScope.$$applyAsyncQueue = [];\n\n    var postDigestQueuePosition = 0;\n\n    return $rootScope;\n\n\n    function beginPhase(phase) {\n      if ($rootScope.$$phase) {\n        throw $rootScopeMinErr('inprog', '{0} already in progress', $rootScope.$$phase);\n      }\n\n      $rootScope.$$phase = phase;\n    }\n\n    function clearPhase() {\n      $rootScope.$$phase = null;\n    }\n\n    function incrementWatchersCount(current, count) {\n      do {\n        current.$$watchersCount += count;\n      } while ((current = current.$parent));\n    }\n\n    function decrementListenerCount(current, count, name) {\n      do {\n        current.$$listenerCount[name] -= count;\n\n        if (current.$$listenerCount[name] === 0) {\n          delete current.$$listenerCount[name];\n        }\n      } while ((current = current.$parent));\n    }\n\n    /**\n     * function used as an initial value for watchers.\n     * because it's unique we can easily tell it apart from other values\n     */\n    function initWatchVal() {}\n\n    function flushApplyAsync() {\n      while (applyAsyncQueue.length) {\n        try {\n          applyAsyncQueue.shift()();\n        } catch (e) {\n          $exceptionHandler(e);\n        }\n      }\n      applyAsyncId = null;\n    }\n\n    function scheduleApplyAsync() {\n      if (applyAsyncId === null) {\n        applyAsyncId = $browser.defer(function() {\n          $rootScope.$apply(flushApplyAsync);\n        });\n      }\n    }\n  }];\n}\n\n/**\n * @ngdoc service\n * @name $rootElement\n *\n * @description\n * The root element of Angular application. This is either the element where {@link\n * ng.directive:ngApp ngApp} was declared or the element passed into\n * {@link angular.bootstrap}. The element represents the root element of application. It is also the\n * location where the application's {@link auto.$injector $injector} service gets\n * published, and can be retrieved using `$rootElement.injector()`.\n */\n\n\n// the implementation is in angular.bootstrap\n\n/**\n * @this\n * @description\n * Private service to sanitize uris for links and images. Used by $compile and $sanitize.\n */\nfunction $$SanitizeUriProvider() {\n  var aHrefSanitizationWhitelist = /^\\s*(https?|s?ftp|mailto|tel|file):/,\n    imgSrcSanitizationWhitelist = /^\\s*((https?|ftp|file|blob):|data:image\\/)/;\n\n  /**\n   * @description\n   * Retrieves or overrides the default regular expression that is used for whitelisting of safe\n   * urls during a[href] sanitization.\n   *\n   * The sanitization is a security measure aimed at prevent XSS attacks via html links.\n   *\n   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into\n   * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`\n   * regular expression. If a match is found, the original url is written into the dom. Otherwise,\n   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.\n   *\n   * @param {RegExp=} regexp New regexp to whitelist urls with.\n   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for\n   *    chaining otherwise.\n   */\n  this.aHrefSanitizationWhitelist = function(regexp) {\n    if (isDefined(regexp)) {\n      aHrefSanitizationWhitelist = regexp;\n      return this;\n    }\n    return aHrefSanitizationWhitelist;\n  };\n\n\n  /**\n   * @description\n   * Retrieves or overrides the default regular expression that is used for whitelisting of safe\n   * urls during img[src] sanitization.\n   *\n   * The sanitization is a security measure aimed at prevent XSS attacks via html links.\n   *\n   * Any url about to be assigned to img[src] via data-binding is first normalized and turned into\n   * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`\n   * regular expression. If a match is found, the original url is written into the dom. Otherwise,\n   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.\n   *\n   * @param {RegExp=} regexp New regexp to whitelist urls with.\n   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for\n   *    chaining otherwise.\n   */\n  this.imgSrcSanitizationWhitelist = function(regexp) {\n    if (isDefined(regexp)) {\n      imgSrcSanitizationWhitelist = regexp;\n      return this;\n    }\n    return imgSrcSanitizationWhitelist;\n  };\n\n  this.$get = function() {\n    return function sanitizeUri(uri, isImage) {\n      var regex = isImage ? imgSrcSanitizationWhitelist : aHrefSanitizationWhitelist;\n      var normalizedVal;\n      normalizedVal = urlResolve(uri && uri.trim()).href;\n      if (normalizedVal !== '' && !normalizedVal.match(regex)) {\n        return 'unsafe:' + normalizedVal;\n      }\n      return uri;\n    };\n  };\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *     Any commits to this file should be reviewed with security in mind.  *\n *   Changes to this file can potentially create security vulnerabilities. *\n *          An approval from 2 Core members with history of modifying      *\n *                         this file is required.                          *\n *                                                                         *\n *  Does the change somehow allow for arbitrary javascript to be executed? *\n *    Or allows for someone to change the prototype of built-in objects?   *\n *     Or gives undesired access to variables likes document or window?    *\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\n/* exported $SceProvider, $SceDelegateProvider */\n\nvar $sceMinErr = minErr('$sce');\n\nvar SCE_CONTEXTS = {\n  // HTML is used when there's HTML rendered (e.g. ng-bind-html, iframe srcdoc binding).\n  HTML: 'html',\n\n  // Style statements or stylesheets. Currently unused in AngularJS.\n  CSS: 'css',\n\n  // An URL used in a context where it does not refer to a resource that loads code. Currently\n  // unused in AngularJS.\n  URL: 'url',\n\n  // RESOURCE_URL is a subtype of URL used where the referred-to resource could be interpreted as\n  // code. (e.g. ng-include, script src binding, templateUrl)\n  RESOURCE_URL: 'resourceUrl',\n\n  // Script. Currently unused in AngularJS.\n  JS: 'js'\n};\n\n// Helper functions follow.\n\nvar UNDERSCORE_LOWERCASE_REGEXP = /_([a-z])/g;\n\nfunction snakeToCamel(name) {\n  return name\n    .replace(UNDERSCORE_LOWERCASE_REGEXP, fnCamelCaseReplace);\n}\n\nfunction adjustMatcher(matcher) {\n  if (matcher === 'self') {\n    return matcher;\n  } else if (isString(matcher)) {\n    // Strings match exactly except for 2 wildcards - '*' and '**'.\n    // '*' matches any character except those from the set ':/.?&'.\n    // '**' matches any character (like .* in a RegExp).\n    // More than 2 *'s raises an error as it's ill defined.\n    if (matcher.indexOf('***') > -1) {\n      throw $sceMinErr('iwcard',\n          'Illegal sequence *** in string matcher.  String: {0}', matcher);\n    }\n    matcher = escapeForRegexp(matcher).\n                  replace(/\\\\\\*\\\\\\*/g, '.*').\n                  replace(/\\\\\\*/g, '[^:/.?&;]*');\n    return new RegExp('^' + matcher + '$');\n  } else if (isRegExp(matcher)) {\n    // The only other type of matcher allowed is a Regexp.\n    // Match entire URL / disallow partial matches.\n    // Flags are reset (i.e. no global, ignoreCase or multiline)\n    return new RegExp('^' + matcher.source + '$');\n  } else {\n    throw $sceMinErr('imatcher',\n        'Matchers may only be \"self\", string patterns or RegExp objects');\n  }\n}\n\n\nfunction adjustMatchers(matchers) {\n  var adjustedMatchers = [];\n  if (isDefined(matchers)) {\n    forEach(matchers, function(matcher) {\n      adjustedMatchers.push(adjustMatcher(matcher));\n    });\n  }\n  return adjustedMatchers;\n}\n\n\n/**\n * @ngdoc service\n * @name $sceDelegate\n * @kind function\n *\n * @description\n *\n * `$sceDelegate` is a service that is used by the `$sce` service to provide {@link ng.$sce Strict\n * Contextual Escaping (SCE)} services to AngularJS.\n *\n * For an overview of this service and the functionnality it provides in AngularJS, see the main\n * page for {@link ng.$sce SCE}. The current page is targeted for developers who need to alter how\n * SCE works in their application, which shouldn't be needed in most cases.\n *\n * <div class=\"alert alert-danger\">\n * AngularJS strongly relies on contextual escaping for the security of bindings: disabling or\n * modifying this might cause cross site scripting (XSS) vulnerabilities. For libraries owners,\n * changes to this service will also influence users, so be extra careful and document your changes.\n * </div>\n *\n * Typically, you would configure or override the {@link ng.$sceDelegate $sceDelegate} instead of\n * the `$sce` service to customize the way Strict Contextual Escaping works in AngularJS.  This is\n * because, while the `$sce` provides numerous shorthand methods, etc., you really only need to\n * override 3 core functions (`trustAs`, `getTrusted` and `valueOf`) to replace the way things\n * work because `$sce` delegates to `$sceDelegate` for these operations.\n *\n * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} to configure this service.\n *\n * The default instance of `$sceDelegate` should work out of the box with little pain.  While you\n * can override it completely to change the behavior of `$sce`, the common case would\n * involve configuring the {@link ng.$sceDelegateProvider $sceDelegateProvider} instead by setting\n * your own whitelists and blacklists for trusting URLs used for loading AngularJS resources such as\n * templates.  Refer {@link ng.$sceDelegateProvider#resourceUrlWhitelist\n * $sceDelegateProvider.resourceUrlWhitelist} and {@link\n * ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}\n */\n\n/**\n * @ngdoc provider\n * @name $sceDelegateProvider\n * @this\n *\n * @description\n *\n * The `$sceDelegateProvider` provider allows developers to configure the {@link ng.$sceDelegate\n * $sceDelegate service}, used as a delegate for {@link ng.$sce Strict Contextual Escaping (SCE)}.\n *\n * The `$sceDelegateProvider` allows one to get/set the whitelists and blacklists used to ensure\n * that the URLs used for sourcing AngularJS templates and other script-running URLs are safe (all\n * places that use the `$sce.RESOURCE_URL` context). See\n * {@link ng.$sceDelegateProvider#resourceUrlWhitelist $sceDelegateProvider.resourceUrlWhitelist}\n * and\n * {@link ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist},\n *\n * For the general details about this service in Angular, read the main page for {@link ng.$sce\n * Strict Contextual Escaping (SCE)}.\n *\n * **Example**:  Consider the following case. <a name=\"example\"></a>\n *\n * - your app is hosted at url `http://myapp.example.com/`\n * - but some of your templates are hosted on other domains you control such as\n *   `http://srv01.assets.example.com/`, `http://srv02.assets.example.com/`, etc.\n * - and you have an open redirect at `http://myapp.example.com/clickThru?...`.\n *\n * Here is what a secure configuration for this scenario might look like:\n *\n * ```\n *  angular.module('myApp', []).config(function($sceDelegateProvider) {\n *    $sceDelegateProvider.resourceUrlWhitelist([\n *      // Allow same origin resource loads.\n *      'self',\n *      // Allow loading from our assets domain.  Notice the difference between * and **.\n *      'http://srv*.assets.example.com/**'\n *    ]);\n *\n *    // The blacklist overrides the whitelist so the open redirect here is blocked.\n *    $sceDelegateProvider.resourceUrlBlacklist([\n *      'http://myapp.example.com/clickThru**'\n *    ]);\n *  });\n * ```\n * Note that an empty whitelist will block every resource URL from being loaded, and will require\n * you to manually mark each one as trusted with `$sce.trustAsResourceUrl`. However, templates\n * requested by {@link ng.$templateRequest $templateRequest} that are present in\n * {@link ng.$templateCache $templateCache} will not go through this check. If you have a mechanism\n * to populate your templates in that cache at config time, then it is a good idea to remove 'self'\n * from that whitelist. This helps to mitigate the security impact of certain types of issues, like\n * for instance attacker-controlled `ng-includes`.\n */\n\nfunction $SceDelegateProvider() {\n  this.SCE_CONTEXTS = SCE_CONTEXTS;\n\n  // Resource URLs can also be trusted by policy.\n  var resourceUrlWhitelist = ['self'],\n      resourceUrlBlacklist = [];\n\n  /**\n   * @ngdoc method\n   * @name $sceDelegateProvider#resourceUrlWhitelist\n   * @kind function\n   *\n   * @param {Array=} whitelist When provided, replaces the resourceUrlWhitelist with the value\n   *     provided.  This must be an array or null.  A snapshot of this array is used so further\n   *     changes to the array are ignored.\n   *     Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items\n   *     allowed in this array.\n   *\n   * @return {Array} The currently set whitelist array.\n   *\n   * @description\n   * Sets/Gets the whitelist of trusted resource URLs.\n   *\n   * The **default value** when no whitelist has been explicitly set is `['self']` allowing only\n   * same origin resource requests.\n   *\n   * <div class=\"alert alert-warning\">\n   * **Note:** the default whitelist of 'self' is not recommended if your app shares its origin\n   * with other apps! It is a good idea to limit it to only your application's directory.\n   * </div>\n   */\n  this.resourceUrlWhitelist = function(value) {\n    if (arguments.length) {\n      resourceUrlWhitelist = adjustMatchers(value);\n    }\n    return resourceUrlWhitelist;\n  };\n\n  /**\n   * @ngdoc method\n   * @name $sceDelegateProvider#resourceUrlBlacklist\n   * @kind function\n   *\n   * @param {Array=} blacklist When provided, replaces the resourceUrlBlacklist with the value\n   *     provided.  This must be an array or null.  A snapshot of this array is used so further\n   *     changes to the array are ignored.</p><p>\n   *     Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items\n   *     allowed in this array.</p><p>\n   *     The typical usage for the blacklist is to **block\n   *     [open redirects](http://cwe.mitre.org/data/definitions/601.html)** served by your domain as\n   *     these would otherwise be trusted but actually return content from the redirected domain.\n   *     </p><p>\n   *     Finally, **the blacklist overrides the whitelist** and has the final say.\n   *\n   * @return {Array} The currently set blacklist array.\n   *\n   * @description\n   * Sets/Gets the blacklist of trusted resource URLs.\n   *\n   * The **default value** when no whitelist has been explicitly set is the empty array (i.e. there\n   * is no blacklist.)\n   */\n\n  this.resourceUrlBlacklist = function(value) {\n    if (arguments.length) {\n      resourceUrlBlacklist = adjustMatchers(value);\n    }\n    return resourceUrlBlacklist;\n  };\n\n  this.$get = ['$injector', function($injector) {\n\n    var htmlSanitizer = function htmlSanitizer(html) {\n      throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');\n    };\n\n    if ($injector.has('$sanitize')) {\n      htmlSanitizer = $injector.get('$sanitize');\n    }\n\n\n    function matchUrl(matcher, parsedUrl) {\n      if (matcher === 'self') {\n        return urlIsSameOrigin(parsedUrl);\n      } else {\n        // definitely a regex.  See adjustMatchers()\n        return !!matcher.exec(parsedUrl.href);\n      }\n    }\n\n    function isResourceUrlAllowedByPolicy(url) {\n      var parsedUrl = urlResolve(url.toString());\n      var i, n, allowed = false;\n      // Ensure that at least one item from the whitelist allows this url.\n      for (i = 0, n = resourceUrlWhitelist.length; i < n; i++) {\n        if (matchUrl(resourceUrlWhitelist[i], parsedUrl)) {\n          allowed = true;\n          break;\n        }\n      }\n      if (allowed) {\n        // Ensure that no item from the blacklist blocked this url.\n        for (i = 0, n = resourceUrlBlacklist.length; i < n; i++) {\n          if (matchUrl(resourceUrlBlacklist[i], parsedUrl)) {\n            allowed = false;\n            break;\n          }\n        }\n      }\n      return allowed;\n    }\n\n    function generateHolderType(Base) {\n      var holderType = function TrustedValueHolderType(trustedValue) {\n        this.$$unwrapTrustedValue = function() {\n          return trustedValue;\n        };\n      };\n      if (Base) {\n        holderType.prototype = new Base();\n      }\n      holderType.prototype.valueOf = function sceValueOf() {\n        return this.$$unwrapTrustedValue();\n      };\n      holderType.prototype.toString = function sceToString() {\n        return this.$$unwrapTrustedValue().toString();\n      };\n      return holderType;\n    }\n\n    var trustedValueHolderBase = generateHolderType(),\n        byType = {};\n\n    byType[SCE_CONTEXTS.HTML] = generateHolderType(trustedValueHolderBase);\n    byType[SCE_CONTEXTS.CSS] = generateHolderType(trustedValueHolderBase);\n    byType[SCE_CONTEXTS.URL] = generateHolderType(trustedValueHolderBase);\n    byType[SCE_CONTEXTS.JS] = generateHolderType(trustedValueHolderBase);\n    byType[SCE_CONTEXTS.RESOURCE_URL] = generateHolderType(byType[SCE_CONTEXTS.URL]);\n\n    /**\n     * @ngdoc method\n     * @name $sceDelegate#trustAs\n     *\n     * @description\n     * Returns a trusted representation of the parameter for the specified context. This trusted\n     * object will later on be used as-is, without any security check, by bindings or directives\n     * that require this security context.\n     * For instance, marking a string as trusted for the `$sce.HTML` context will entirely bypass\n     * the potential `$sanitize` call in corresponding `$sce.HTML` bindings or directives, such as\n     * `ng-bind-html`. Note that in most cases you won't need to call this function: if you have the\n     * sanitizer loaded, passing the value itself will render all the HTML that does not pose a\n     * security risk.\n     *\n     * See {@link ng.$sceDelegate#getTrusted getTrusted} for the function that will consume those\n     * trusted values, and {@link ng.$sce $sce} for general documentation about strict contextual\n     * escaping.\n     *\n     * @param {string} type The context in which this value is safe for use, e.g. `$sce.URL`,\n     *     `$sce.RESOURCE_URL`, `$sce.HTML`, `$sce.JS` or `$sce.CSS`.\n     *\n     * @param {*} value The value that should be considered trusted.\n     * @return {*} A trusted representation of value, that can be used in the given context.\n     */\n    function trustAs(type, trustedValue) {\n      var Constructor = (byType.hasOwnProperty(type) ? byType[type] : null);\n      if (!Constructor) {\n        throw $sceMinErr('icontext',\n            'Attempted to trust a value in invalid context. Context: {0}; Value: {1}',\n            type, trustedValue);\n      }\n      if (trustedValue === null || isUndefined(trustedValue) || trustedValue === '') {\n        return trustedValue;\n      }\n      // All the current contexts in SCE_CONTEXTS happen to be strings.  In order to avoid trusting\n      // mutable objects, we ensure here that the value passed in is actually a string.\n      if (typeof trustedValue !== 'string') {\n        throw $sceMinErr('itype',\n            'Attempted to trust a non-string value in a content requiring a string: Context: {0}',\n            type);\n      }\n      return new Constructor(trustedValue);\n    }\n\n    /**\n     * @ngdoc method\n     * @name $sceDelegate#valueOf\n     *\n     * @description\n     * If the passed parameter had been returned by a prior call to {@link ng.$sceDelegate#trustAs\n     * `$sceDelegate.trustAs`}, returns the value that had been passed to {@link\n     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.\n     *\n     * If the passed parameter is not a value that had been returned by {@link\n     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}, it must be returned as-is.\n     *\n     * @param {*} value The result of a prior {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}\n     *     call or anything else.\n     * @return {*} The `value` that was originally provided to {@link ng.$sceDelegate#trustAs\n     *     `$sceDelegate.trustAs`} if `value` is the result of such a call.  Otherwise, returns\n     *     `value` unchanged.\n     */\n    function valueOf(maybeTrusted) {\n      if (maybeTrusted instanceof trustedValueHolderBase) {\n        return maybeTrusted.$$unwrapTrustedValue();\n      } else {\n        return maybeTrusted;\n      }\n    }\n\n    /**\n     * @ngdoc method\n     * @name $sceDelegate#getTrusted\n     *\n     * @description\n     * Takes any input, and either returns a value that's safe to use in the specified context, or\n     * throws an exception.\n     *\n     * In practice, there are several cases. When given a string, this function runs checks\n     * and sanitization to make it safe without prior assumptions. When given the result of a {@link\n     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`} call, it returns the originally supplied\n     * value if that value's context is valid for this call's context. Finally, this function can\n     * also throw when there is no way to turn `maybeTrusted` in a safe value (e.g., no sanitization\n     * is available or possible.)\n     *\n     * @param {string} type The context in which this value is to be used (such as `$sce.HTML`).\n     * @param {*} maybeTrusted The result of a prior {@link ng.$sceDelegate#trustAs\n     *     `$sceDelegate.trustAs`} call, or anything else (which will not be considered trusted.)\n     * @return {*} A version of the value that's safe to use in the given context, or throws an\n     *     exception if this is impossible.\n     */\n    function getTrusted(type, maybeTrusted) {\n      if (maybeTrusted === null || isUndefined(maybeTrusted) || maybeTrusted === '') {\n        return maybeTrusted;\n      }\n      var constructor = (byType.hasOwnProperty(type) ? byType[type] : null);\n      // If maybeTrusted is a trusted class instance or subclass instance, then unwrap and return\n      // as-is.\n      if (constructor && maybeTrusted instanceof constructor) {\n        return maybeTrusted.$$unwrapTrustedValue();\n      }\n      // Otherwise, if we get here, then we may either make it safe, or throw an exception. This\n      // depends on the context: some are sanitizatible (HTML), some use whitelists (RESOURCE_URL),\n      // some are impossible to do (JS). This step isn't implemented for CSS and URL, as AngularJS\n      // has no corresponding sinks.\n      if (type === SCE_CONTEXTS.RESOURCE_URL) {\n        // RESOURCE_URL uses a whitelist.\n        if (isResourceUrlAllowedByPolicy(maybeTrusted)) {\n          return maybeTrusted;\n        } else {\n          throw $sceMinErr('insecurl',\n              'Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}',\n              maybeTrusted.toString());\n        }\n      } else if (type === SCE_CONTEXTS.HTML) {\n        // htmlSanitizer throws its own error when no sanitizer is available.\n        return htmlSanitizer(maybeTrusted);\n      }\n      // Default error when the $sce service has no way to make the input safe.\n      throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');\n    }\n\n    return { trustAs: trustAs,\n             getTrusted: getTrusted,\n             valueOf: valueOf };\n  }];\n}\n\n\n/**\n * @ngdoc provider\n * @name $sceProvider\n * @this\n *\n * @description\n *\n * The $sceProvider provider allows developers to configure the {@link ng.$sce $sce} service.\n * -   enable/disable Strict Contextual Escaping (SCE) in a module\n * -   override the default implementation with a custom delegate\n *\n * Read more about {@link ng.$sce Strict Contextual Escaping (SCE)}.\n */\n\n/**\n * @ngdoc service\n * @name $sce\n * @kind function\n *\n * @description\n *\n * `$sce` is a service that provides Strict Contextual Escaping services to AngularJS.\n *\n * ## Strict Contextual Escaping\n *\n * Strict Contextual Escaping (SCE) is a mode in which AngularJS constrains bindings to only render\n * trusted values. Its goal is to assist in writing code in a way that (a) is secure by default, and\n * (b) makes auditing for security vulnerabilities such as XSS, clickjacking, etc. a lot easier.\n *\n * ### Overview\n *\n * To systematically block XSS security bugs, AngularJS treats all values as untrusted by default in\n * HTML or sensitive URL bindings. When binding untrusted values, AngularJS will automatically\n * run security checks on them (sanitizations, whitelists, depending on context), or throw when it\n * cannot guarantee the security of the result. That behavior depends strongly on contexts: HTML\n * can be sanitized, but template URLs cannot, for instance.\n *\n * To illustrate this, consider the `ng-bind-html` directive. It renders its value directly as HTML:\n * we call that the *context*. When given an untrusted input, AngularJS will attempt to sanitize it\n * before rendering if a sanitizer is available, and throw otherwise. To bypass sanitization and\n * render the input as-is, you will need to mark it as trusted for that context before attempting\n * to bind it.\n *\n * As of version 1.2, AngularJS ships with SCE enabled by default.\n *\n * ### In practice\n *\n * Here's an example of a binding in a privileged context:\n *\n * ```\n * <input ng-model=\"userHtml\" aria-label=\"User input\">\n * <div ng-bind-html=\"userHtml\"></div>\n * ```\n *\n * Notice that `ng-bind-html` is bound to `userHtml` controlled by the user.  With SCE\n * disabled, this application allows the user to render arbitrary HTML into the DIV, which would\n * be an XSS security bug. In a more realistic example, one may be rendering user comments, blog\n * articles, etc. via bindings. (HTML is just one example of a context where rendering user\n * controlled input creates security vulnerabilities.)\n *\n * For the case of HTML, you might use a library, either on the client side, or on the server side,\n * to sanitize unsafe HTML before binding to the value and rendering it in the document.\n *\n * How would you ensure that every place that used these types of bindings was bound to a value that\n * was sanitized by your library (or returned as safe for rendering by your server?)  How can you\n * ensure that you didn't accidentally delete the line that sanitized the value, or renamed some\n * properties/fields and forgot to update the binding to the sanitized value?\n *\n * To be secure by default, AngularJS makes sure bindings go through that sanitization, or\n * any similar validation process, unless there's a good reason to trust the given value in this\n * context.  That trust is formalized with a function call. This means that as a developer, you\n * can assume all untrusted bindings are safe. Then, to audit your code for binding security issues,\n * you just need to ensure the values you mark as trusted indeed are safe - because they were\n * received from your server, sanitized by your library, etc. You can organize your codebase to\n * help with this - perhaps allowing only the files in a specific directory to do this.\n * Ensuring that the internal API exposed by that code doesn't markup arbitrary values as safe then\n * becomes a more manageable task.\n *\n * In the case of AngularJS' SCE service, one uses {@link ng.$sce#trustAs $sce.trustAs}\n * (and shorthand methods such as {@link ng.$sce#trustAsHtml $sce.trustAsHtml}, etc.) to\n * build the trusted versions of your values.\n *\n * ### How does it work?\n *\n * In privileged contexts, directives and code will bind to the result of {@link ng.$sce#getTrusted\n * $sce.getTrusted(context, value)} rather than to the value directly.  Think of this function as\n * a way to enforce the required security context in your data sink. Directives use {@link\n * ng.$sce#parseAs $sce.parseAs} rather than `$parse` to watch attribute bindings, which performs\n * the {@link ng.$sce#getTrusted $sce.getTrusted} behind the scenes on non-constant literals. Also,\n * when binding without directives, AngularJS will understand the context of your bindings\n * automatically.\n *\n * As an example, {@link ng.directive:ngBindHtml ngBindHtml} uses {@link\n * ng.$sce#parseAsHtml $sce.parseAsHtml(binding expression)}.  Here's the actual code (slightly\n * simplified):\n *\n * ```\n * var ngBindHtmlDirective = ['$sce', function($sce) {\n *   return function(scope, element, attr) {\n *     scope.$watch($sce.parseAsHtml(attr.ngBindHtml), function(value) {\n *       element.html(value || '');\n *     });\n *   };\n * }];\n * ```\n *\n * ### Impact on loading templates\n *\n * This applies both to the {@link ng.directive:ngInclude `ng-include`} directive as well as\n * `templateUrl`'s specified by {@link guide/directive directives}.\n *\n * By default, Angular only loads templates from the same domain and protocol as the application\n * document.  This is done by calling {@link ng.$sce#getTrustedResourceUrl\n * $sce.getTrustedResourceUrl} on the template URL.  To load templates from other domains and/or\n * protocols, you may either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist\n * them} or {@link ng.$sce#trustAsResourceUrl wrap it} into a trusted value.\n *\n * *Please note*:\n * The browser's\n * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)\n * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)\n * policy apply in addition to this and may further restrict whether the template is successfully\n * loaded.  This means that without the right CORS policy, loading templates from a different domain\n * won't work on all browsers.  Also, loading templates from `file://` URL does not work on some\n * browsers.\n *\n * ### This feels like too much overhead\n *\n * It's important to remember that SCE only applies to interpolation expressions.\n *\n * If your expressions are constant literals, they're automatically trusted and you don't need to\n * call `$sce.trustAs` on them (e.g.\n * `<div ng-bind-html=\"'<b>implicitly trusted</b>'\"></div>`) just works. The `$sceDelegate` will\n * also use the `$sanitize` service if it is available when binding untrusted values to\n * `$sce.HTML` context. AngularJS provides an implementation in `angular-sanitize.js`, and if you\n * wish to use it, you will also need to depend on the {@link ngSanitize `ngSanitize`} module in\n * your application.\n *\n * The included {@link ng.$sceDelegate $sceDelegate} comes with sane defaults to allow you to load\n * templates in `ng-include` from your application's domain without having to even know about SCE.\n * It blocks loading templates from other domains or loading templates over http from an https\n * served document.  You can change these by setting your own custom {@link\n * ng.$sceDelegateProvider#resourceUrlWhitelist whitelists} and {@link\n * ng.$sceDelegateProvider#resourceUrlBlacklist blacklists} for matching such URLs.\n *\n * This significantly reduces the overhead.  It is far easier to pay the small overhead and have an\n * application that's secure and can be audited to verify that with much more ease than bolting\n * security onto an application later.\n *\n * <a name=\"contexts\"></a>\n * ### What trusted context types are supported?\n *\n * | Context             | Notes          |\n * |---------------------|----------------|\n * | `$sce.HTML`         | For HTML that's safe to source into the application.  The {@link ng.directive:ngBindHtml ngBindHtml} directive uses this context for bindings. If an unsafe value is encountered, and the {@link ngSanitize.$sanitize $sanitize} service is available (implemented by the {@link ngSanitize ngSanitize} module) this will sanitize the value instead of throwing an error. |\n * | `$sce.CSS`          | For CSS that's safe to source into the application.  Currently, no bindings require this context. Feel free to use it in your own directives. |\n * | `$sce.URL`          | For URLs that are safe to follow as links.  Currently unused (`<a href=`, `<img src=`, and some others sanitize their urls and don't constitute an SCE context.) |\n * | `$sce.RESOURCE_URL` | For URLs that are not only safe to follow as links, but whose contents are also safe to include in your application.  Examples include `ng-include`, `src` / `ngSrc` bindings for tags other than `IMG`, `VIDEO`, `AUDIO`, `SOURCE`, and `TRACK` (e.g. `IFRAME`, `OBJECT`, etc.)  <br><br>Note that `$sce.RESOURCE_URL` makes a stronger statement about the URL than `$sce.URL` does (it's not just the URL that matters, but also what is at the end of it), and therefore contexts requiring values trusted for `$sce.RESOURCE_URL` can be used anywhere that values trusted for `$sce.URL` are required. |\n * | `$sce.JS`           | For JavaScript that is safe to execute in your application's context.  Currently, no bindings require this context.  Feel free to use it in your own directives. |\n *\n *\n * Be aware that `a[href]` and `img[src]` automatically sanitize their URLs and do not pass them\n * through {@link ng.$sce#getTrusted $sce.getTrusted}. There's no CSS-, URL-, or JS-context bindings\n * in AngularJS currently, so their corresponding `$sce.trustAs` functions aren't useful yet. This\n * might evolve.\n *\n * ### Format of items in {@link ng.$sceDelegateProvider#resourceUrlWhitelist resourceUrlWhitelist}/{@link ng.$sceDelegateProvider#resourceUrlBlacklist Blacklist} <a name=\"resourceUrlPatternItem\"></a>\n *\n *  Each element in these arrays must be one of the following:\n *\n *  - **'self'**\n *    - The special **string**, `'self'`, can be used to match against all URLs of the **same\n *      domain** as the application document using the **same protocol**.\n *  - **String** (except the special value `'self'`)\n *    - The string is matched against the full *normalized / absolute URL* of the resource\n *      being tested (substring matches are not good enough.)\n *    - There are exactly **two wildcard sequences** - `*` and `**`.  All other characters\n *      match themselves.\n *    - `*`: matches zero or more occurrences of any character other than one of the following 6\n *      characters: '`:`', '`/`', '`.`', '`?`', '`&`' and '`;`'.  It's a useful wildcard for use\n *      in a whitelist.\n *    - `**`: matches zero or more occurrences of *any* character.  As such, it's not\n *      appropriate for use in a scheme, domain, etc. as it would match too much.  (e.g.\n *      http://**.example.com/ would match http://evil.com/?ignore=.example.com/ and that might\n *      not have been the intention.)  Its usage at the very end of the path is ok.  (e.g.\n *      http://foo.example.com/templates/**).\n *  - **RegExp** (*see caveat below*)\n *    - *Caveat*:  While regular expressions are powerful and offer great flexibility,  their syntax\n *      (and all the inevitable escaping) makes them *harder to maintain*.  It's easy to\n *      accidentally introduce a bug when one updates a complex expression (imho, all regexes should\n *      have good test coverage).  For instance, the use of `.` in the regex is correct only in a\n *      small number of cases.  A `.` character in the regex used when matching the scheme or a\n *      subdomain could be matched against a `:` or literal `.` that was likely not intended.   It\n *      is highly recommended to use the string patterns and only fall back to regular expressions\n *      as a last resort.\n *    - The regular expression must be an instance of RegExp (i.e. not a string.)  It is\n *      matched against the **entire** *normalized / absolute URL* of the resource being tested\n *      (even when the RegExp did not have the `^` and `$` codes.)  In addition, any flags\n *      present on the RegExp (such as multiline, global, ignoreCase) are ignored.\n *    - If you are generating your JavaScript from some other templating engine (not\n *      recommended, e.g. in issue [#4006](https://github.com/angular/angular.js/issues/4006)),\n *      remember to escape your regular expression (and be aware that you might need more than\n *      one level of escaping depending on your templating engine and the way you interpolated\n *      the value.)  Do make use of your platform's escaping mechanism as it might be good\n *      enough before coding your own.  E.g. Ruby has\n *      [Regexp.escape(str)](http://www.ruby-doc.org/core-2.0.0/Regexp.html#method-c-escape)\n *      and Python has [re.escape](http://docs.python.org/library/re.html#re.escape).\n *      Javascript lacks a similar built in function for escaping.  Take a look at Google\n *      Closure library's [goog.string.regExpEscape(s)](\n *      http://docs.closure-library.googlecode.com/git/closure_goog_string_string.js.source.html#line962).\n *\n * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} for an example.\n *\n * ### Show me an example using SCE.\n *\n * <example module=\"mySceApp\" deps=\"angular-sanitize.js\" name=\"sce-service\">\n * <file name=\"index.html\">\n *   <div ng-controller=\"AppController as myCtrl\">\n *     <i ng-bind-html=\"myCtrl.explicitlyTrustedHtml\" id=\"explicitlyTrustedHtml\"></i><br><br>\n *     <b>User comments</b><br>\n *     By default, HTML that isn't explicitly trusted (e.g. Alice's comment) is sanitized when\n *     $sanitize is available.  If $sanitize isn't available, this results in an error instead of an\n *     exploit.\n *     <div class=\"well\">\n *       <div ng-repeat=\"userComment in myCtrl.userComments\">\n *         <b>{{userComment.name}}</b>:\n *         <span ng-bind-html=\"userComment.htmlComment\" class=\"htmlComment\"></span>\n *         <br>\n *       </div>\n *     </div>\n *   </div>\n * </file>\n *\n * <file name=\"script.js\">\n *   angular.module('mySceApp', ['ngSanitize'])\n *     .controller('AppController', ['$http', '$templateCache', '$sce',\n *       function AppController($http, $templateCache, $sce) {\n *         var self = this;\n *         $http.get('test_data.json', {cache: $templateCache}).then(function(response) {\n *           self.userComments = response.data;\n *         });\n *         self.explicitlyTrustedHtml = $sce.trustAsHtml(\n *             '<span onmouseover=\"this.textContent=&quot;Explicitly trusted HTML bypasses ' +\n *             'sanitization.&quot;\">Hover over this text.</span>');\n *       }]);\n * </file>\n *\n * <file name=\"test_data.json\">\n * [\n *   { \"name\": \"Alice\",\n *     \"htmlComment\":\n *         \"<span onmouseover='this.textContent=\\\"PWN3D!\\\"'>Is <i>anyone</i> reading this?</span>\"\n *   },\n *   { \"name\": \"Bob\",\n *     \"htmlComment\": \"<i>Yes!</i>  Am I the only other one?\"\n *   }\n * ]\n * </file>\n *\n * <file name=\"protractor.js\" type=\"protractor\">\n *   describe('SCE doc demo', function() {\n *     it('should sanitize untrusted values', function() {\n *       expect(element.all(by.css('.htmlComment')).first().getAttribute('innerHTML'))\n *           .toBe('<span>Is <i>anyone</i> reading this?</span>');\n *     });\n *\n *     it('should NOT sanitize explicitly trusted values', function() {\n *       expect(element(by.id('explicitlyTrustedHtml')).getAttribute('innerHTML')).toBe(\n *           '<span onmouseover=\"this.textContent=&quot;Explicitly trusted HTML bypasses ' +\n *           'sanitization.&quot;\">Hover over this text.</span>');\n *     });\n *   });\n * </file>\n * </example>\n *\n *\n *\n * ## Can I disable SCE completely?\n *\n * Yes, you can.  However, this is strongly discouraged.  SCE gives you a lot of security benefits\n * for little coding overhead.  It will be much harder to take an SCE disabled application and\n * either secure it on your own or enable SCE at a later stage.  It might make sense to disable SCE\n * for cases where you have a lot of existing code that was written before SCE was introduced and\n * you're migrating them a module at a time. Also do note that this is an app-wide setting, so if\n * you are writing a library, you will cause security bugs applications using it.\n *\n * That said, here's how you can completely disable SCE:\n *\n * ```\n * angular.module('myAppWithSceDisabledmyApp', []).config(function($sceProvider) {\n *   // Completely disable SCE.  For demonstration purposes only!\n *   // Do not use in new projects or libraries.\n *   $sceProvider.enabled(false);\n * });\n * ```\n *\n */\n\nfunction $SceProvider() {\n  var enabled = true;\n\n  /**\n   * @ngdoc method\n   * @name $sceProvider#enabled\n   * @kind function\n   *\n   * @param {boolean=} value If provided, then enables/disables SCE application-wide.\n   * @return {boolean} True if SCE is enabled, false otherwise.\n   *\n   * @description\n   * Enables/disables SCE and returns the current value.\n   */\n  this.enabled = function(value) {\n    if (arguments.length) {\n      enabled = !!value;\n    }\n    return enabled;\n  };\n\n\n  /* Design notes on the default implementation for SCE.\n   *\n   * The API contract for the SCE delegate\n   * -------------------------------------\n   * The SCE delegate object must provide the following 3 methods:\n   *\n   * - trustAs(contextEnum, value)\n   *     This method is used to tell the SCE service that the provided value is OK to use in the\n   *     contexts specified by contextEnum.  It must return an object that will be accepted by\n   *     getTrusted() for a compatible contextEnum and return this value.\n   *\n   * - valueOf(value)\n   *     For values that were not produced by trustAs(), return them as is.  For values that were\n   *     produced by trustAs(), return the corresponding input value to trustAs.  Basically, if\n   *     trustAs is wrapping the given values into some type, this operation unwraps it when given\n   *     such a value.\n   *\n   * - getTrusted(contextEnum, value)\n   *     This function should return the a value that is safe to use in the context specified by\n   *     contextEnum or throw and exception otherwise.\n   *\n   * NOTE: This contract deliberately does NOT state that values returned by trustAs() must be\n   * opaque or wrapped in some holder object.  That happens to be an implementation detail.  For\n   * instance, an implementation could maintain a registry of all trusted objects by context.  In\n   * such a case, trustAs() would return the same object that was passed in.  getTrusted() would\n   * return the same object passed in if it was found in the registry under a compatible context or\n   * throw an exception otherwise.  An implementation might only wrap values some of the time based\n   * on some criteria.  getTrusted() might return a value and not throw an exception for special\n   * constants or objects even if not wrapped.  All such implementations fulfill this contract.\n   *\n   *\n   * A note on the inheritance model for SCE contexts\n   * ------------------------------------------------\n   * I've used inheritance and made RESOURCE_URL wrapped types a subtype of URL wrapped types.  This\n   * is purely an implementation details.\n   *\n   * The contract is simply this:\n   *\n   *     getTrusted($sce.RESOURCE_URL, value) succeeding implies that getTrusted($sce.URL, value)\n   *     will also succeed.\n   *\n   * Inheritance happens to capture this in a natural way. In some future, we may not use\n   * inheritance anymore. That is OK because no code outside of sce.js and sceSpecs.js would need to\n   * be aware of this detail.\n   */\n\n  this.$get = ['$parse', '$sceDelegate', function(\n                $parse,   $sceDelegate) {\n    // Support: IE 9-11 only\n    // Prereq: Ensure that we're not running in IE<11 quirks mode.  In that mode, IE < 11 allow\n    // the \"expression(javascript expression)\" syntax which is insecure.\n    if (enabled && msie < 8) {\n      throw $sceMinErr('iequirks',\n        'Strict Contextual Escaping does not support Internet Explorer version < 11 in quirks ' +\n        'mode.  You can fix this by adding the text <!doctype html> to the top of your HTML ' +\n        'document.  See http://docs.angularjs.org/api/ng.$sce for more information.');\n    }\n\n    var sce = shallowCopy(SCE_CONTEXTS);\n\n    /**\n     * @ngdoc method\n     * @name $sce#isEnabled\n     * @kind function\n     *\n     * @return {Boolean} True if SCE is enabled, false otherwise.  If you want to set the value, you\n     *     have to do it at module config time on {@link ng.$sceProvider $sceProvider}.\n     *\n     * @description\n     * Returns a boolean indicating if SCE is enabled.\n     */\n    sce.isEnabled = function() {\n      return enabled;\n    };\n    sce.trustAs = $sceDelegate.trustAs;\n    sce.getTrusted = $sceDelegate.getTrusted;\n    sce.valueOf = $sceDelegate.valueOf;\n\n    if (!enabled) {\n      sce.trustAs = sce.getTrusted = function(type, value) { return value; };\n      sce.valueOf = identity;\n    }\n\n    /**\n     * @ngdoc method\n     * @name $sce#parseAs\n     *\n     * @description\n     * Converts Angular {@link guide/expression expression} into a function.  This is like {@link\n     * ng.$parse $parse} and is identical when the expression is a literal constant.  Otherwise, it\n     * wraps the expression in a call to {@link ng.$sce#getTrusted $sce.getTrusted(*type*,\n     * *result*)}\n     *\n     * @param {string} type The SCE context in which this result will be used.\n     * @param {string} expression String expression to compile.\n     * @return {function(context, locals)} A function which represents the compiled expression:\n     *\n     *    * `context` – `{object}` – an object against which any expressions embedded in the\n     *      strings are evaluated against (typically a scope object).\n     *    * `locals` – `{object=}` – local variables context object, useful for overriding values\n     *      in `context`.\n     */\n    sce.parseAs = function sceParseAs(type, expr) {\n      var parsed = $parse(expr);\n      if (parsed.literal && parsed.constant) {\n        return parsed;\n      } else {\n        return $parse(expr, function(value) {\n          return sce.getTrusted(type, value);\n        });\n      }\n    };\n\n    /**\n     * @ngdoc method\n     * @name $sce#trustAs\n     *\n     * @description\n     * Delegates to {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}. As such, returns a\n     * wrapped object that represents your value, and the trust you have in its safety for the given\n     * context. AngularJS can then use that value as-is in bindings of the specified secure context.\n     * This is used in bindings for `ng-bind-html`, `ng-include`, and most `src` attribute\n     * interpolations. See {@link ng.$sce $sce} for strict contextual escaping.\n     *\n     * @param {string} type The context in which this value is safe for use, e.g. `$sce.URL`,\n     *     `$sce.RESOURCE_URL`, `$sce.HTML`, `$sce.JS` or `$sce.CSS`.\n     *\n     * @param {*} value The value that that should be considered trusted.\n     * @return {*} A wrapped version of value that can be used as a trusted variant of your `value`\n     *     in the context you specified.\n     */\n\n    /**\n     * @ngdoc method\n     * @name $sce#trustAsHtml\n     *\n     * @description\n     * Shorthand method.  `$sce.trustAsHtml(value)` →\n     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.HTML, value)`}\n     *\n     * @param {*} value The value to mark as trusted for `$sce.HTML` context.\n     * @return {*} A wrapped version of value that can be used as a trusted variant of your `value`\n     *     in `$sce.HTML` context (like `ng-bind-html`).\n     */\n\n    /**\n     * @ngdoc method\n     * @name $sce#trustAsCss\n     *\n     * @description\n     * Shorthand method.  `$sce.trustAsCss(value)` →\n     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.CSS, value)`}\n     *\n     * @param {*} value The value to mark as trusted for `$sce.CSS` context.\n     * @return {*} A wrapped version of value that can be used as a trusted variant\n     *     of your `value` in `$sce.CSS` context. This context is currently unused, so there are\n     *     almost no reasons to use this function so far.\n     */\n\n    /**\n     * @ngdoc method\n     * @name $sce#trustAsUrl\n     *\n     * @description\n     * Shorthand method.  `$sce.trustAsUrl(value)` →\n     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.URL, value)`}\n     *\n     * @param {*} value The value to mark as trusted for `$sce.URL` context.\n     * @return {*} A wrapped version of value that can be used as a trusted variant of your `value`\n     *     in `$sce.URL` context. That context is currently unused, so there are almost no reasons\n     *     to use this function so far.\n     */\n\n    /**\n     * @ngdoc method\n     * @name $sce#trustAsResourceUrl\n     *\n     * @description\n     * Shorthand method.  `$sce.trustAsResourceUrl(value)` →\n     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.RESOURCE_URL, value)`}\n     *\n     * @param {*} value The value to mark as trusted for `$sce.RESOURCE_URL` context.\n     * @return {*} A wrapped version of value that can be used as a trusted variant of your `value`\n     *     in `$sce.RESOURCE_URL` context (template URLs in `ng-include`, most `src` attribute\n     *     bindings, ...)\n     */\n\n    /**\n     * @ngdoc method\n     * @name $sce#trustAsJs\n     *\n     * @description\n     * Shorthand method.  `$sce.trustAsJs(value)` →\n     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.JS, value)`}\n     *\n     * @param {*} value The value to mark as trusted for `$sce.JS` context.\n     * @return {*} A wrapped version of value that can be used as a trusted variant of your `value`\n     *     in `$sce.JS` context. That context is currently unused, so there are almost no reasons to\n     *     use this function so far.\n     */\n\n    /**\n     * @ngdoc method\n     * @name $sce#getTrusted\n     *\n     * @description\n     * Delegates to {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted`}.  As such,\n     * takes any input, and either returns a value that's safe to use in the specified context,\n     * or throws an exception. This function is aware of trusted values created by the `trustAs`\n     * function and its shorthands, and when contexts are appropriate, returns the unwrapped value\n     * as-is. Finally, this function can also throw when there is no way to turn `maybeTrusted` in a\n     * safe value (e.g., no sanitization is available or possible.)\n     *\n     * @param {string} type The context in which this value is to be used.\n     * @param {*} maybeTrusted The result of a prior {@link ng.$sce#trustAs\n     *     `$sce.trustAs`} call, or anything else (which will not be considered trusted.)\n     * @return {*} A version of the value that's safe to use in the given context, or throws an\n     *     exception if this is impossible.\n     */\n\n    /**\n     * @ngdoc method\n     * @name $sce#getTrustedHtml\n     *\n     * @description\n     * Shorthand method.  `$sce.getTrustedHtml(value)` →\n     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.HTML, value)`}\n     *\n     * @param {*} value The value to pass to `$sce.getTrusted`.\n     * @return {*} The return value of `$sce.getTrusted($sce.HTML, value)`\n     */\n\n    /**\n     * @ngdoc method\n     * @name $sce#getTrustedCss\n     *\n     * @description\n     * Shorthand method.  `$sce.getTrustedCss(value)` →\n     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.CSS, value)`}\n     *\n     * @param {*} value The value to pass to `$sce.getTrusted`.\n     * @return {*} The return value of `$sce.getTrusted($sce.CSS, value)`\n     */\n\n    /**\n     * @ngdoc method\n     * @name $sce#getTrustedUrl\n     *\n     * @description\n     * Shorthand method.  `$sce.getTrustedUrl(value)` →\n     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.URL, value)`}\n     *\n     * @param {*} value The value to pass to `$sce.getTrusted`.\n     * @return {*} The return value of `$sce.getTrusted($sce.URL, value)`\n     */\n\n    /**\n     * @ngdoc method\n     * @name $sce#getTrustedResourceUrl\n     *\n     * @description\n     * Shorthand method.  `$sce.getTrustedResourceUrl(value)` →\n     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.RESOURCE_URL, value)`}\n     *\n     * @param {*} value The value to pass to `$sceDelegate.getTrusted`.\n     * @return {*} The return value of `$sce.getTrusted($sce.RESOURCE_URL, value)`\n     */\n\n    /**\n     * @ngdoc method\n     * @name $sce#getTrustedJs\n     *\n     * @description\n     * Shorthand method.  `$sce.getTrustedJs(value)` →\n     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.JS, value)`}\n     *\n     * @param {*} value The value to pass to `$sce.getTrusted`.\n     * @return {*} The return value of `$sce.getTrusted($sce.JS, value)`\n     */\n\n    /**\n     * @ngdoc method\n     * @name $sce#parseAsHtml\n     *\n     * @description\n     * Shorthand method.  `$sce.parseAsHtml(expression string)` →\n     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.HTML, value)`}\n     *\n     * @param {string} expression String expression to compile.\n     * @return {function(context, locals)} A function which represents the compiled expression:\n     *\n     *    * `context` – `{object}` – an object against which any expressions embedded in the\n     *      strings are evaluated against (typically a scope object).\n     *    * `locals` – `{object=}` – local variables context object, useful for overriding values\n     *      in `context`.\n     */\n\n    /**\n     * @ngdoc method\n     * @name $sce#parseAsCss\n     *\n     * @description\n     * Shorthand method.  `$sce.parseAsCss(value)` →\n     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.CSS, value)`}\n     *\n     * @param {string} expression String expression to compile.\n     * @return {function(context, locals)} A function which represents the compiled expression:\n     *\n     *    * `context` – `{object}` – an object against which any expressions embedded in the\n     *      strings are evaluated against (typically a scope object).\n     *    * `locals` – `{object=}` – local variables context object, useful for overriding values\n     *      in `context`.\n     */\n\n    /**\n     * @ngdoc method\n     * @name $sce#parseAsUrl\n     *\n     * @description\n     * Shorthand method.  `$sce.parseAsUrl(value)` →\n     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.URL, value)`}\n     *\n     * @param {string} expression String expression to compile.\n     * @return {function(context, locals)} A function which represents the compiled expression:\n     *\n     *    * `context` – `{object}` – an object against which any expressions embedded in the\n     *      strings are evaluated against (typically a scope object).\n     *    * `locals` – `{object=}` – local variables context object, useful for overriding values\n     *      in `context`.\n     */\n\n    /**\n     * @ngdoc method\n     * @name $sce#parseAsResourceUrl\n     *\n     * @description\n     * Shorthand method.  `$sce.parseAsResourceUrl(value)` →\n     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.RESOURCE_URL, value)`}\n     *\n     * @param {string} expression String expression to compile.\n     * @return {function(context, locals)} A function which represents the compiled expression:\n     *\n     *    * `context` – `{object}` – an object against which any expressions embedded in the\n     *      strings are evaluated against (typically a scope object).\n     *    * `locals` – `{object=}` – local variables context object, useful for overriding values\n     *      in `context`.\n     */\n\n    /**\n     * @ngdoc method\n     * @name $sce#parseAsJs\n     *\n     * @description\n     * Shorthand method.  `$sce.parseAsJs(value)` →\n     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.JS, value)`}\n     *\n     * @param {string} expression String expression to compile.\n     * @return {function(context, locals)} A function which represents the compiled expression:\n     *\n     *    * `context` – `{object}` – an object against which any expressions embedded in the\n     *      strings are evaluated against (typically a scope object).\n     *    * `locals` – `{object=}` – local variables context object, useful for overriding values\n     *      in `context`.\n     */\n\n    // Shorthand delegations.\n    var parse = sce.parseAs,\n        getTrusted = sce.getTrusted,\n        trustAs = sce.trustAs;\n\n    forEach(SCE_CONTEXTS, function(enumValue, name) {\n      var lName = lowercase(name);\n      sce[snakeToCamel('parse_as_' + lName)] = function(expr) {\n        return parse(enumValue, expr);\n      };\n      sce[snakeToCamel('get_trusted_' + lName)] = function(value) {\n        return getTrusted(enumValue, value);\n      };\n      sce[snakeToCamel('trust_as_' + lName)] = function(value) {\n        return trustAs(enumValue, value);\n      };\n    });\n\n    return sce;\n  }];\n}\n\n/* exported $SnifferProvider */\n\n/**\n * !!! This is an undocumented \"private\" service !!!\n *\n * @name $sniffer\n * @requires $window\n * @requires $document\n * @this\n *\n * @property {boolean} history Does the browser support html5 history api ?\n * @property {boolean} transitions Does the browser support CSS transition events ?\n * @property {boolean} animations Does the browser support CSS animation events ?\n *\n * @description\n * This is very simple implementation of testing browser's features.\n */\nfunction $SnifferProvider() {\n  this.$get = ['$window', '$document', function($window, $document) {\n    var eventSupport = {},\n        // Chrome Packaged Apps are not allowed to access `history.pushState`.\n        // If not sandboxed, they can be detected by the presence of `chrome.app.runtime`\n        // (see https://developer.chrome.com/apps/api_index). If sandboxed, they can be detected by\n        // the presence of an extension runtime ID and the absence of other Chrome runtime APIs\n        // (see https://developer.chrome.com/apps/manifest/sandbox).\n        // (NW.js apps have access to Chrome APIs, but do support `history`.)\n        isNw = $window.nw && $window.nw.process,\n        isChromePackagedApp =\n            !isNw &&\n            $window.chrome &&\n            ($window.chrome.app && $window.chrome.app.runtime ||\n                !$window.chrome.app && $window.chrome.runtime && $window.chrome.runtime.id),\n        hasHistoryPushState = !isChromePackagedApp && $window.history && $window.history.pushState,\n        android =\n          toInt((/android (\\d+)/.exec(lowercase(($window.navigator || {}).userAgent)) || [])[1]),\n        boxee = /Boxee/i.test(($window.navigator || {}).userAgent),\n        document = $document[0] || {},\n        bodyStyle = document.body && document.body.style,\n        transitions = false,\n        animations = false;\n\n    if (bodyStyle) {\n      // Support: Android <5, Blackberry Browser 10, default Chrome in Android 4.4.x\n      // Mentioned browsers need a -webkit- prefix for transitions & animations.\n      transitions = !!('transition' in bodyStyle || 'webkitTransition' in bodyStyle);\n      animations = !!('animation' in bodyStyle || 'webkitAnimation' in bodyStyle);\n    }\n\n\n    return {\n      // Android has history.pushState, but it does not update location correctly\n      // so let's not use the history API at all.\n      // http://code.google.com/p/android/issues/detail?id=17471\n      // https://github.com/angular/angular.js/issues/904\n\n      // older webkit browser (533.9) on Boxee box has exactly the same problem as Android has\n      // so let's not use the history API also\n      // We are purposefully using `!(android < 4)` to cover the case when `android` is undefined\n      history: !!(hasHistoryPushState && !(android < 4) && !boxee),\n      hasEvent: function(event) {\n        // Support: IE 9-11 only\n        // IE9 implements 'input' event it's so fubared that we rather pretend that it doesn't have\n        // it. In particular the event is not fired when backspace or delete key are pressed or\n        // when cut operation is performed.\n        // IE10+ implements 'input' event but it erroneously fires under various situations,\n        // e.g. when placeholder changes, or a form is focused.\n        if (event === 'input' && msie) return false;\n\n        if (isUndefined(eventSupport[event])) {\n          var divElm = document.createElement('div');\n          eventSupport[event] = 'on' + event in divElm;\n        }\n\n        return eventSupport[event];\n      },\n      csp: csp(),\n      transitions: transitions,\n      animations: animations,\n      android: android\n    };\n  }];\n}\n\nvar $templateRequestMinErr = minErr('$compile');\n\n/**\n * @ngdoc provider\n * @name $templateRequestProvider\n * @this\n *\n * @description\n * Used to configure the options passed to the {@link $http} service when making a template request.\n *\n * For example, it can be used for specifying the \"Accept\" header that is sent to the server, when\n * requesting a template.\n */\nfunction $TemplateRequestProvider() {\n\n  var httpOptions;\n\n  /**\n   * @ngdoc method\n   * @name $templateRequestProvider#httpOptions\n   * @description\n   * The options to be passed to the {@link $http} service when making the request.\n   * You can use this to override options such as the \"Accept\" header for template requests.\n   *\n   * The {@link $templateRequest} will set the `cache` and the `transformResponse` properties of the\n   * options if not overridden here.\n   *\n   * @param {string=} value new value for the {@link $http} options.\n   * @returns {string|self} Returns the {@link $http} options when used as getter and self if used as setter.\n   */\n  this.httpOptions = function(val) {\n    if (val) {\n      httpOptions = val;\n      return this;\n    }\n    return httpOptions;\n  };\n\n  /**\n   * @ngdoc service\n   * @name $templateRequest\n   *\n   * @description\n   * The `$templateRequest` service runs security checks then downloads the provided template using\n   * `$http` and, upon success, stores the contents inside of `$templateCache`. If the HTTP request\n   * fails or the response data of the HTTP request is empty, a `$compile` error will be thrown (the\n   * exception can be thwarted by setting the 2nd parameter of the function to true). Note that the\n   * contents of `$templateCache` are trusted, so the call to `$sce.getTrustedUrl(tpl)` is omitted\n   * when `tpl` is of type string and `$templateCache` has the matching entry.\n   *\n   * If you want to pass custom options to the `$http` service, such as setting the Accept header you\n   * can configure this via {@link $templateRequestProvider#httpOptions}.\n   *\n   * `$templateRequest` is used internally by {@link $compile}, {@link ngRoute.$route}, and directives such\n   * as {@link ngInclude} to download and cache templates.\n   *\n   * 3rd party modules should use `$templateRequest` if their services or directives are loading\n   * templates.\n   *\n   * @param {string|TrustedResourceUrl} tpl The HTTP request template URL\n   * @param {boolean=} ignoreRequestError Whether or not to ignore the exception when the request fails or the template is empty\n   *\n   * @return {Promise} a promise for the HTTP response data of the given URL.\n   *\n   * @property {number} totalPendingRequests total amount of pending template requests being downloaded.\n   */\n  this.$get = ['$exceptionHandler', '$templateCache', '$http', '$q', '$sce',\n    function($exceptionHandler, $templateCache, $http, $q, $sce) {\n\n      function handleRequestFn(tpl, ignoreRequestError) {\n        handleRequestFn.totalPendingRequests++;\n\n        // We consider the template cache holds only trusted templates, so\n        // there's no need to go through whitelisting again for keys that already\n        // are included in there. This also makes Angular accept any script\n        // directive, no matter its name. However, we still need to unwrap trusted\n        // types.\n        if (!isString(tpl) || isUndefined($templateCache.get(tpl))) {\n          tpl = $sce.getTrustedResourceUrl(tpl);\n        }\n\n        var transformResponse = $http.defaults && $http.defaults.transformResponse;\n\n        if (isArray(transformResponse)) {\n          transformResponse = transformResponse.filter(function(transformer) {\n            return transformer !== defaultHttpResponseTransform;\n          });\n        } else if (transformResponse === defaultHttpResponseTransform) {\n          transformResponse = null;\n        }\n\n        return $http.get(tpl, extend({\n            cache: $templateCache,\n            transformResponse: transformResponse\n          }, httpOptions))\n          .finally(function() {\n            handleRequestFn.totalPendingRequests--;\n          })\n          .then(function(response) {\n            $templateCache.put(tpl, response.data);\n            return response.data;\n          }, handleError);\n\n        function handleError(resp) {\n          if (!ignoreRequestError) {\n            resp = $templateRequestMinErr('tpload',\n                'Failed to load template: {0} (HTTP status: {1} {2})',\n                tpl, resp.status, resp.statusText);\n\n            $exceptionHandler(resp);\n          }\n\n          return $q.reject(resp);\n        }\n      }\n\n      handleRequestFn.totalPendingRequests = 0;\n\n      return handleRequestFn;\n    }\n  ];\n}\n\n/** @this */\nfunction $$TestabilityProvider() {\n  this.$get = ['$rootScope', '$browser', '$location',\n       function($rootScope,   $browser,   $location) {\n\n    /**\n     * @name $testability\n     *\n     * @description\n     * The private $$testability service provides a collection of methods for use when debugging\n     * or by automated test and debugging tools.\n     */\n    var testability = {};\n\n    /**\n     * @name $$testability#findBindings\n     *\n     * @description\n     * Returns an array of elements that are bound (via ng-bind or {{}})\n     * to expressions matching the input.\n     *\n     * @param {Element} element The element root to search from.\n     * @param {string} expression The binding expression to match.\n     * @param {boolean} opt_exactMatch If true, only returns exact matches\n     *     for the expression. Filters and whitespace are ignored.\n     */\n    testability.findBindings = function(element, expression, opt_exactMatch) {\n      var bindings = element.getElementsByClassName('ng-binding');\n      var matches = [];\n      forEach(bindings, function(binding) {\n        var dataBinding = angular.element(binding).data('$binding');\n        if (dataBinding) {\n          forEach(dataBinding, function(bindingName) {\n            if (opt_exactMatch) {\n              var matcher = new RegExp('(^|\\\\s)' + escapeForRegexp(expression) + '(\\\\s|\\\\||$)');\n              if (matcher.test(bindingName)) {\n                matches.push(binding);\n              }\n            } else {\n              if (bindingName.indexOf(expression) !== -1) {\n                matches.push(binding);\n              }\n            }\n          });\n        }\n      });\n      return matches;\n    };\n\n    /**\n     * @name $$testability#findModels\n     *\n     * @description\n     * Returns an array of elements that are two-way found via ng-model to\n     * expressions matching the input.\n     *\n     * @param {Element} element The element root to search from.\n     * @param {string} expression The model expression to match.\n     * @param {boolean} opt_exactMatch If true, only returns exact matches\n     *     for the expression.\n     */\n    testability.findModels = function(element, expression, opt_exactMatch) {\n      var prefixes = ['ng-', 'data-ng-', 'ng\\\\:'];\n      for (var p = 0; p < prefixes.length; ++p) {\n        var attributeEquals = opt_exactMatch ? '=' : '*=';\n        var selector = '[' + prefixes[p] + 'model' + attributeEquals + '\"' + expression + '\"]';\n        var elements = element.querySelectorAll(selector);\n        if (elements.length) {\n          return elements;\n        }\n      }\n    };\n\n    /**\n     * @name $$testability#getLocation\n     *\n     * @description\n     * Shortcut for getting the location in a browser agnostic way. Returns\n     *     the path, search, and hash. (e.g. /path?a=b#hash)\n     */\n    testability.getLocation = function() {\n      return $location.url();\n    };\n\n    /**\n     * @name $$testability#setLocation\n     *\n     * @description\n     * Shortcut for navigating to a location without doing a full page reload.\n     *\n     * @param {string} url The location url (path, search and hash,\n     *     e.g. /path?a=b#hash) to go to.\n     */\n    testability.setLocation = function(url) {\n      if (url !== $location.url()) {\n        $location.url(url);\n        $rootScope.$digest();\n      }\n    };\n\n    /**\n     * @name $$testability#whenStable\n     *\n     * @description\n     * Calls the callback when $timeout and $http requests are completed.\n     *\n     * @param {function} callback\n     */\n    testability.whenStable = function(callback) {\n      $browser.notifyWhenNoOutstandingRequests(callback);\n    };\n\n    return testability;\n  }];\n}\n\n/** @this */\nfunction $TimeoutProvider() {\n  this.$get = ['$rootScope', '$browser', '$q', '$$q', '$exceptionHandler',\n       function($rootScope,   $browser,   $q,   $$q,   $exceptionHandler) {\n\n    var deferreds = {};\n\n\n     /**\n      * @ngdoc service\n      * @name $timeout\n      *\n      * @description\n      * Angular's wrapper for `window.setTimeout`. The `fn` function is wrapped into a try/catch\n      * block and delegates any exceptions to\n      * {@link ng.$exceptionHandler $exceptionHandler} service.\n      *\n      * The return value of calling `$timeout` is a promise, which will be resolved when\n      * the delay has passed and the timeout function, if provided, is executed.\n      *\n      * To cancel a timeout request, call `$timeout.cancel(promise)`.\n      *\n      * In tests you can use {@link ngMock.$timeout `$timeout.flush()`} to\n      * synchronously flush the queue of deferred functions.\n      *\n      * If you only want a promise that will be resolved after some specified delay\n      * then you can call `$timeout` without the `fn` function.\n      *\n      * @param {function()=} fn A function, whose execution should be delayed.\n      * @param {number=} [delay=0] Delay in milliseconds.\n      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise\n      *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.\n      * @param {...*=} Pass additional parameters to the executed function.\n      * @returns {Promise} Promise that will be resolved when the timeout is reached. The promise\n      *   will be resolved with the return value of the `fn` function.\n      *\n      */\n    function timeout(fn, delay, invokeApply) {\n      if (!isFunction(fn)) {\n        invokeApply = delay;\n        delay = fn;\n        fn = noop;\n      }\n\n      var args = sliceArgs(arguments, 3),\n          skipApply = (isDefined(invokeApply) && !invokeApply),\n          deferred = (skipApply ? $$q : $q).defer(),\n          promise = deferred.promise,\n          timeoutId;\n\n      timeoutId = $browser.defer(function() {\n        try {\n          deferred.resolve(fn.apply(null, args));\n        } catch (e) {\n          deferred.reject(e);\n          $exceptionHandler(e);\n        } finally {\n          delete deferreds[promise.$$timeoutId];\n        }\n\n        if (!skipApply) $rootScope.$apply();\n      }, delay);\n\n      promise.$$timeoutId = timeoutId;\n      deferreds[timeoutId] = deferred;\n\n      return promise;\n    }\n\n\n     /**\n      * @ngdoc method\n      * @name $timeout#cancel\n      *\n      * @description\n      * Cancels a task associated with the `promise`. As a result of this, the promise will be\n      * resolved with a rejection.\n      *\n      * @param {Promise=} promise Promise returned by the `$timeout` function.\n      * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully\n      *   canceled.\n      */\n    timeout.cancel = function(promise) {\n      if (promise && promise.$$timeoutId in deferreds) {\n        // Timeout cancels should not report an unhandled promise.\n        markQExceptionHandled(deferreds[promise.$$timeoutId].promise);\n        deferreds[promise.$$timeoutId].reject('canceled');\n        delete deferreds[promise.$$timeoutId];\n        return $browser.defer.cancel(promise.$$timeoutId);\n      }\n      return false;\n    };\n\n    return timeout;\n  }];\n}\n\n// NOTE:  The usage of window and document instead of $window and $document here is\n// deliberate.  This service depends on the specific behavior of anchor nodes created by the\n// browser (resolving and parsing URLs) that is unlikely to be provided by mock objects and\n// cause us to break tests.  In addition, when the browser resolves a URL for XHR, it\n// doesn't know about mocked locations and resolves URLs to the real document - which is\n// exactly the behavior needed here.  There is little value is mocking these out for this\n// service.\nvar urlParsingNode = window.document.createElement('a');\nvar originUrl = urlResolve(window.location.href);\n\n\n/**\n *\n * Implementation Notes for non-IE browsers\n * ----------------------------------------\n * Assigning a URL to the href property of an anchor DOM node, even one attached to the DOM,\n * results both in the normalizing and parsing of the URL.  Normalizing means that a relative\n * URL will be resolved into an absolute URL in the context of the application document.\n * Parsing means that the anchor node's host, hostname, protocol, port, pathname and related\n * properties are all populated to reflect the normalized URL.  This approach has wide\n * compatibility - Safari 1+, Mozilla 1+ etc.  See\n * http://www.aptana.com/reference/html/api/HTMLAnchorElement.html\n *\n * Implementation Notes for IE\n * ---------------------------\n * IE <= 10 normalizes the URL when assigned to the anchor node similar to the other\n * browsers.  However, the parsed components will not be set if the URL assigned did not specify\n * them.  (e.g. if you assign a.href = \"foo\", then a.protocol, a.host, etc. will be empty.)  We\n * work around that by performing the parsing in a 2nd step by taking a previously normalized\n * URL (e.g. by assigning to a.href) and assigning it a.href again.  This correctly populates the\n * properties such as protocol, hostname, port, etc.\n *\n * References:\n *   http://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement\n *   http://www.aptana.com/reference/html/api/HTMLAnchorElement.html\n *   http://url.spec.whatwg.org/#urlutils\n *   https://github.com/angular/angular.js/pull/2902\n *   http://james.padolsey.com/javascript/parsing-urls-with-the-dom/\n *\n * @kind function\n * @param {string} url The URL to be parsed.\n * @description Normalizes and parses a URL.\n * @returns {object} Returns the normalized URL as a dictionary.\n *\n *   | member name   | Description    |\n *   |---------------|----------------|\n *   | href          | A normalized version of the provided URL if it was not an absolute URL |\n *   | protocol      | The protocol including the trailing colon                              |\n *   | host          | The host and port (if the port is non-default) of the normalizedUrl    |\n *   | search        | The search params, minus the question mark                             |\n *   | hash          | The hash string, minus the hash symbol\n *   | hostname      | The hostname\n *   | port          | The port, without \":\"\n *   | pathname      | The pathname, beginning with \"/\"\n *\n */\nfunction urlResolve(url) {\n  var href = url;\n\n  // Support: IE 9-11 only\n  if (msie) {\n    // Normalize before parse.  Refer Implementation Notes on why this is\n    // done in two steps on IE.\n    urlParsingNode.setAttribute('href', href);\n    href = urlParsingNode.href;\n  }\n\n  urlParsingNode.setAttribute('href', href);\n\n  // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils\n  return {\n    href: urlParsingNode.href,\n    protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',\n    host: urlParsingNode.host,\n    search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, '') : '',\n    hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',\n    hostname: urlParsingNode.hostname,\n    port: urlParsingNode.port,\n    pathname: (urlParsingNode.pathname.charAt(0) === '/')\n      ? urlParsingNode.pathname\n      : '/' + urlParsingNode.pathname\n  };\n}\n\n/**\n * Parse a request URL and determine whether this is a same-origin request as the application document.\n *\n * @param {string|object} requestUrl The url of the request as a string that will be resolved\n * or a parsed URL object.\n * @returns {boolean} Whether the request is for the same origin as the application document.\n */\nfunction urlIsSameOrigin(requestUrl) {\n  var parsed = (isString(requestUrl)) ? urlResolve(requestUrl) : requestUrl;\n  return (parsed.protocol === originUrl.protocol &&\n          parsed.host === originUrl.host);\n}\n\n/**\n * @ngdoc service\n * @name $window\n * @this\n *\n * @description\n * A reference to the browser's `window` object. While `window`\n * is globally available in JavaScript, it causes testability problems, because\n * it is a global variable. In angular we always refer to it through the\n * `$window` service, so it may be overridden, removed or mocked for testing.\n *\n * Expressions, like the one defined for the `ngClick` directive in the example\n * below, are evaluated with respect to the current scope.  Therefore, there is\n * no risk of inadvertently coding in a dependency on a global value in such an\n * expression.\n *\n * @example\n   <example module=\"windowExample\" name=\"window-service\">\n     <file name=\"index.html\">\n       <script>\n         angular.module('windowExample', [])\n           .controller('ExampleController', ['$scope', '$window', function($scope, $window) {\n             $scope.greeting = 'Hello, World!';\n             $scope.doGreeting = function(greeting) {\n               $window.alert(greeting);\n             };\n           }]);\n       </script>\n       <div ng-controller=\"ExampleController\">\n         <input type=\"text\" ng-model=\"greeting\" aria-label=\"greeting\" />\n         <button ng-click=\"doGreeting(greeting)\">ALERT</button>\n       </div>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n      it('should display the greeting in the input box', function() {\n       element(by.model('greeting')).sendKeys('Hello, E2E Tests');\n       // If we click the button it will block the test runner\n       // element(':button').click();\n      });\n     </file>\n   </example>\n */\nfunction $WindowProvider() {\n  this.$get = valueFn(window);\n}\n\n/**\n * @name $$cookieReader\n * @requires $document\n *\n * @description\n * This is a private service for reading cookies used by $http and ngCookies\n *\n * @return {Object} a key/value map of the current cookies\n */\nfunction $$CookieReader($document) {\n  var rawDocument = $document[0] || {};\n  var lastCookies = {};\n  var lastCookieString = '';\n\n  function safeGetCookie(rawDocument) {\n    try {\n      return rawDocument.cookie || '';\n    } catch (e) {\n      return '';\n    }\n  }\n\n  function safeDecodeURIComponent(str) {\n    try {\n      return decodeURIComponent(str);\n    } catch (e) {\n      return str;\n    }\n  }\n\n  return function() {\n    var cookieArray, cookie, i, index, name;\n    var currentCookieString = safeGetCookie(rawDocument);\n\n    if (currentCookieString !== lastCookieString) {\n      lastCookieString = currentCookieString;\n      cookieArray = lastCookieString.split('; ');\n      lastCookies = {};\n\n      for (i = 0; i < cookieArray.length; i++) {\n        cookie = cookieArray[i];\n        index = cookie.indexOf('=');\n        if (index > 0) { //ignore nameless cookies\n          name = safeDecodeURIComponent(cookie.substring(0, index));\n          // the first value that is seen for a cookie is the most\n          // specific one.  values for the same cookie name that\n          // follow are for less specific paths.\n          if (isUndefined(lastCookies[name])) {\n            lastCookies[name] = safeDecodeURIComponent(cookie.substring(index + 1));\n          }\n        }\n      }\n    }\n    return lastCookies;\n  };\n}\n\n$$CookieReader.$inject = ['$document'];\n\n/** @this */\nfunction $$CookieReaderProvider() {\n  this.$get = $$CookieReader;\n}\n\n/* global currencyFilter: true,\n dateFilter: true,\n filterFilter: true,\n jsonFilter: true,\n limitToFilter: true,\n lowercaseFilter: true,\n numberFilter: true,\n orderByFilter: true,\n uppercaseFilter: true,\n */\n\n/**\n * @ngdoc provider\n * @name $filterProvider\n * @description\n *\n * Filters are just functions which transform input to an output. However filters need to be\n * Dependency Injected. To achieve this a filter definition consists of a factory function which is\n * annotated with dependencies and is responsible for creating a filter function.\n *\n * <div class=\"alert alert-warning\">\n * **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.\n * Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace\n * your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores\n * (`myapp_subsection_filterx`).\n * </div>\n *\n * ```js\n *   // Filter registration\n *   function MyModule($provide, $filterProvider) {\n *     // create a service to demonstrate injection (not always needed)\n *     $provide.value('greet', function(name){\n *       return 'Hello ' + name + '!';\n *     });\n *\n *     // register a filter factory which uses the\n *     // greet service to demonstrate DI.\n *     $filterProvider.register('greet', function(greet){\n *       // return the filter function which uses the greet service\n *       // to generate salutation\n *       return function(text) {\n *         // filters need to be forgiving so check input validity\n *         return text && greet(text) || text;\n *       };\n *     });\n *   }\n * ```\n *\n * The filter function is registered with the `$injector` under the filter name suffix with\n * `Filter`.\n *\n * ```js\n *   it('should be the same instance', inject(\n *     function($filterProvider) {\n *       $filterProvider.register('reverse', function(){\n *         return ...;\n *       });\n *     },\n *     function($filter, reverseFilter) {\n *       expect($filter('reverse')).toBe(reverseFilter);\n *     });\n * ```\n *\n *\n * For more information about how angular filters work, and how to create your own filters, see\n * {@link guide/filter Filters} in the Angular Developer Guide.\n */\n\n/**\n * @ngdoc service\n * @name $filter\n * @kind function\n * @description\n * Filters are used for formatting data displayed to the user.\n *\n * They can be used in view templates, controllers or services.Angular comes\n * with a collection of [built-in filters](api/ng/filter), but it is easy to\n * define your own as well.\n *\n * The general syntax in templates is as follows:\n *\n * ```html\n * {{ expression [| filter_name[:parameter_value] ... ] }}\n * ```\n *\n * @param {String} name Name of the filter function to retrieve\n * @return {Function} the filter function\n * @example\n   <example name=\"$filter\" module=\"filterExample\">\n     <file name=\"index.html\">\n       <div ng-controller=\"MainCtrl\">\n        <h3>{{ originalText }}</h3>\n        <h3>{{ filteredText }}</h3>\n       </div>\n     </file>\n\n     <file name=\"script.js\">\n      angular.module('filterExample', [])\n      .controller('MainCtrl', function($scope, $filter) {\n        $scope.originalText = 'hello';\n        $scope.filteredText = $filter('uppercase')($scope.originalText);\n      });\n     </file>\n   </example>\n  */\n$FilterProvider.$inject = ['$provide'];\n/** @this */\nfunction $FilterProvider($provide) {\n  var suffix = 'Filter';\n\n  /**\n   * @ngdoc method\n   * @name $filterProvider#register\n   * @param {string|Object} name Name of the filter function, or an object map of filters where\n   *    the keys are the filter names and the values are the filter factories.\n   *\n   *    <div class=\"alert alert-warning\">\n   *    **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.\n   *    Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace\n   *    your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores\n   *    (`myapp_subsection_filterx`).\n   *    </div>\n    * @param {Function} factory If the first argument was a string, a factory function for the filter to be registered.\n   * @returns {Object} Registered filter instance, or if a map of filters was provided then a map\n   *    of the registered filter instances.\n   */\n  function register(name, factory) {\n    if (isObject(name)) {\n      var filters = {};\n      forEach(name, function(filter, key) {\n        filters[key] = register(key, filter);\n      });\n      return filters;\n    } else {\n      return $provide.factory(name + suffix, factory);\n    }\n  }\n  this.register = register;\n\n  this.$get = ['$injector', function($injector) {\n    return function(name) {\n      return $injector.get(name + suffix);\n    };\n  }];\n\n  ////////////////////////////////////////\n\n  /* global\n    currencyFilter: false,\n    dateFilter: false,\n    filterFilter: false,\n    jsonFilter: false,\n    limitToFilter: false,\n    lowercaseFilter: false,\n    numberFilter: false,\n    orderByFilter: false,\n    uppercaseFilter: false\n  */\n\n  register('currency', currencyFilter);\n  register('date', dateFilter);\n  register('filter', filterFilter);\n  register('json', jsonFilter);\n  register('limitTo', limitToFilter);\n  register('lowercase', lowercaseFilter);\n  register('number', numberFilter);\n  register('orderBy', orderByFilter);\n  register('uppercase', uppercaseFilter);\n}\n\n/**\n * @ngdoc filter\n * @name filter\n * @kind function\n *\n * @description\n * Selects a subset of items from `array` and returns it as a new array.\n *\n * @param {Array} array The source array.\n * <div class=\"alert alert-info\">\n *   **Note**: If the array contains objects that reference themselves, filtering is not possible.\n * </div>\n * @param {string|Object|function()} expression The predicate to be used for selecting items from\n *   `array`.\n *\n *   Can be one of:\n *\n *   - `string`: The string is used for matching against the contents of the `array`. All strings or\n *     objects with string properties in `array` that match this string will be returned. This also\n *     applies to nested object properties.\n *     The predicate can be negated by prefixing the string with `!`.\n *\n *   - `Object`: A pattern object can be used to filter specific properties on objects contained\n *     by `array`. For example `{name:\"M\", phone:\"1\"}` predicate will return an array of items\n *     which have property `name` containing \"M\" and property `phone` containing \"1\". A special\n *     property name (`$` by default) can be used (e.g. as in `{$: \"text\"}`) to accept a match\n *     against any property of the object or its nested object properties. That's equivalent to the\n *     simple substring match with a `string` as described above. The special property name can be\n *     overwritten, using the `anyPropertyKey` parameter.\n *     The predicate can be negated by prefixing the string with `!`.\n *     For example `{name: \"!M\"}` predicate will return an array of items which have property `name`\n *     not containing \"M\".\n *\n *     Note that a named property will match properties on the same level only, while the special\n *     `$` property will match properties on the same level or deeper. E.g. an array item like\n *     `{name: {first: 'John', last: 'Doe'}}` will **not** be matched by `{name: 'John'}`, but\n *     **will** be matched by `{$: 'John'}`.\n *\n *   - `function(value, index, array)`: A predicate function can be used to write arbitrary filters.\n *     The function is called for each element of the array, with the element, its index, and\n *     the entire array itself as arguments.\n *\n *     The final result is an array of those elements that the predicate returned true for.\n *\n * @param {function(actual, expected)|true|false} [comparator] Comparator which is used in\n *     determining if values retrieved using `expression` (when it is not a function) should be\n *     considered a match based on the expected value (from the filter expression) and actual\n *     value (from the object in the array).\n *\n *   Can be one of:\n *\n *   - `function(actual, expected)`:\n *     The function will be given the object value and the predicate value to compare and\n *     should return true if both values should be considered equal.\n *\n *   - `true`: A shorthand for `function(actual, expected) { return angular.equals(actual, expected)}`.\n *     This is essentially strict comparison of expected and actual.\n *\n *   - `false`: A short hand for a function which will look for a substring match in a case\n *     insensitive way. Primitive values are converted to strings. Objects are not compared against\n *     primitives, unless they have a custom `toString` method (e.g. `Date` objects).\n *\n *\n *   Defaults to `false`.\n *\n * @param {string} [anyPropertyKey] The special property name that matches against any property.\n *     By default `$`.\n *\n * @example\n   <example name=\"filter-filter\">\n     <file name=\"index.html\">\n       <div ng-init=\"friends = [{name:'John', phone:'555-1276'},\n                                {name:'Mary', phone:'800-BIG-MARY'},\n                                {name:'Mike', phone:'555-4321'},\n                                {name:'Adam', phone:'555-5678'},\n                                {name:'Julie', phone:'555-8765'},\n                                {name:'Juliette', phone:'555-5678'}]\"></div>\n\n       <label>Search: <input ng-model=\"searchText\"></label>\n       <table id=\"searchTextResults\">\n         <tr><th>Name</th><th>Phone</th></tr>\n         <tr ng-repeat=\"friend in friends | filter:searchText\">\n           <td>{{friend.name}}</td>\n           <td>{{friend.phone}}</td>\n         </tr>\n       </table>\n       <hr>\n       <label>Any: <input ng-model=\"search.$\"></label> <br>\n       <label>Name only <input ng-model=\"search.name\"></label><br>\n       <label>Phone only <input ng-model=\"search.phone\"></label><br>\n       <label>Equality <input type=\"checkbox\" ng-model=\"strict\"></label><br>\n       <table id=\"searchObjResults\">\n         <tr><th>Name</th><th>Phone</th></tr>\n         <tr ng-repeat=\"friendObj in friends | filter:search:strict\">\n           <td>{{friendObj.name}}</td>\n           <td>{{friendObj.phone}}</td>\n         </tr>\n       </table>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       var expectFriendNames = function(expectedNames, key) {\n         element.all(by.repeater(key + ' in friends').column(key + '.name')).then(function(arr) {\n           arr.forEach(function(wd, i) {\n             expect(wd.getText()).toMatch(expectedNames[i]);\n           });\n         });\n       };\n\n       it('should search across all fields when filtering with a string', function() {\n         var searchText = element(by.model('searchText'));\n         searchText.clear();\n         searchText.sendKeys('m');\n         expectFriendNames(['Mary', 'Mike', 'Adam'], 'friend');\n\n         searchText.clear();\n         searchText.sendKeys('76');\n         expectFriendNames(['John', 'Julie'], 'friend');\n       });\n\n       it('should search in specific fields when filtering with a predicate object', function() {\n         var searchAny = element(by.model('search.$'));\n         searchAny.clear();\n         searchAny.sendKeys('i');\n         expectFriendNames(['Mary', 'Mike', 'Julie', 'Juliette'], 'friendObj');\n       });\n       it('should use a equal comparison when comparator is true', function() {\n         var searchName = element(by.model('search.name'));\n         var strict = element(by.model('strict'));\n         searchName.clear();\n         searchName.sendKeys('Julie');\n         strict.click();\n         expectFriendNames(['Julie'], 'friendObj');\n       });\n     </file>\n   </example>\n */\n\nfunction filterFilter() {\n  return function(array, expression, comparator, anyPropertyKey) {\n    if (!isArrayLike(array)) {\n      if (array == null) {\n        return array;\n      } else {\n        throw minErr('filter')('notarray', 'Expected array but received: {0}', array);\n      }\n    }\n\n    anyPropertyKey = anyPropertyKey || '$';\n    var expressionType = getTypeForFilter(expression);\n    var predicateFn;\n    var matchAgainstAnyProp;\n\n    switch (expressionType) {\n      case 'function':\n        predicateFn = expression;\n        break;\n      case 'boolean':\n      case 'null':\n      case 'number':\n      case 'string':\n        matchAgainstAnyProp = true;\n        // falls through\n      case 'object':\n        predicateFn = createPredicateFn(expression, comparator, anyPropertyKey, matchAgainstAnyProp);\n        break;\n      default:\n        return array;\n    }\n\n    return Array.prototype.filter.call(array, predicateFn);\n  };\n}\n\n// Helper functions for `filterFilter`\nfunction createPredicateFn(expression, comparator, anyPropertyKey, matchAgainstAnyProp) {\n  var shouldMatchPrimitives = isObject(expression) && (anyPropertyKey in expression);\n  var predicateFn;\n\n  if (comparator === true) {\n    comparator = equals;\n  } else if (!isFunction(comparator)) {\n    comparator = function(actual, expected) {\n      if (isUndefined(actual)) {\n        // No substring matching against `undefined`\n        return false;\n      }\n      if ((actual === null) || (expected === null)) {\n        // No substring matching against `null`; only match against `null`\n        return actual === expected;\n      }\n      if (isObject(expected) || (isObject(actual) && !hasCustomToString(actual))) {\n        // Should not compare primitives against objects, unless they have custom `toString` method\n        return false;\n      }\n\n      actual = lowercase('' + actual);\n      expected = lowercase('' + expected);\n      return actual.indexOf(expected) !== -1;\n    };\n  }\n\n  predicateFn = function(item) {\n    if (shouldMatchPrimitives && !isObject(item)) {\n      return deepCompare(item, expression[anyPropertyKey], comparator, anyPropertyKey, false);\n    }\n    return deepCompare(item, expression, comparator, anyPropertyKey, matchAgainstAnyProp);\n  };\n\n  return predicateFn;\n}\n\nfunction deepCompare(actual, expected, comparator, anyPropertyKey, matchAgainstAnyProp, dontMatchWholeObject) {\n  var actualType = getTypeForFilter(actual);\n  var expectedType = getTypeForFilter(expected);\n\n  if ((expectedType === 'string') && (expected.charAt(0) === '!')) {\n    return !deepCompare(actual, expected.substring(1), comparator, anyPropertyKey, matchAgainstAnyProp);\n  } else if (isArray(actual)) {\n    // In case `actual` is an array, consider it a match\n    // if ANY of it's items matches `expected`\n    return actual.some(function(item) {\n      return deepCompare(item, expected, comparator, anyPropertyKey, matchAgainstAnyProp);\n    });\n  }\n\n  switch (actualType) {\n    case 'object':\n      var key;\n      if (matchAgainstAnyProp) {\n        for (key in actual) {\n          // Under certain, rare, circumstances, key may not be a string and `charAt` will be undefined\n          // See: https://github.com/angular/angular.js/issues/15644\n          if (key.charAt && (key.charAt(0) !== '$') &&\n              deepCompare(actual[key], expected, comparator, anyPropertyKey, true)) {\n            return true;\n          }\n        }\n        return dontMatchWholeObject ? false : deepCompare(actual, expected, comparator, anyPropertyKey, false);\n      } else if (expectedType === 'object') {\n        for (key in expected) {\n          var expectedVal = expected[key];\n          if (isFunction(expectedVal) || isUndefined(expectedVal)) {\n            continue;\n          }\n\n          var matchAnyProperty = key === anyPropertyKey;\n          var actualVal = matchAnyProperty ? actual : actual[key];\n          if (!deepCompare(actualVal, expectedVal, comparator, anyPropertyKey, matchAnyProperty, matchAnyProperty)) {\n            return false;\n          }\n        }\n        return true;\n      } else {\n        return comparator(actual, expected);\n      }\n    case 'function':\n      return false;\n    default:\n      return comparator(actual, expected);\n  }\n}\n\n// Used for easily differentiating between `null` and actual `object`\nfunction getTypeForFilter(val) {\n  return (val === null) ? 'null' : typeof val;\n}\n\nvar MAX_DIGITS = 22;\nvar DECIMAL_SEP = '.';\nvar ZERO_CHAR = '0';\n\n/**\n * @ngdoc filter\n * @name currency\n * @kind function\n *\n * @description\n * Formats a number as a currency (ie $1,234.56). When no currency symbol is provided, default\n * symbol for current locale is used.\n *\n * @param {number} amount Input to filter.\n * @param {string=} symbol Currency symbol or identifier to be displayed.\n * @param {number=} fractionSize Number of decimal places to round the amount to, defaults to default max fraction size for current locale\n * @returns {string} Formatted number.\n *\n *\n * @example\n   <example module=\"currencyExample\" name=\"currency-filter\">\n     <file name=\"index.html\">\n       <script>\n         angular.module('currencyExample', [])\n           .controller('ExampleController', ['$scope', function($scope) {\n             $scope.amount = 1234.56;\n           }]);\n       </script>\n       <div ng-controller=\"ExampleController\">\n         <input type=\"number\" ng-model=\"amount\" aria-label=\"amount\"> <br>\n         default currency symbol ($): <span id=\"currency-default\">{{amount | currency}}</span><br>\n         custom currency identifier (USD$): <span id=\"currency-custom\">{{amount | currency:\"USD$\"}}</span><br>\n         no fractions (0): <span id=\"currency-no-fractions\">{{amount | currency:\"USD$\":0}}</span>\n       </div>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should init with 1234.56', function() {\n         expect(element(by.id('currency-default')).getText()).toBe('$1,234.56');\n         expect(element(by.id('currency-custom')).getText()).toBe('USD$1,234.56');\n         expect(element(by.id('currency-no-fractions')).getText()).toBe('USD$1,235');\n       });\n       it('should update', function() {\n         if (browser.params.browser === 'safari') {\n           // Safari does not understand the minus key. See\n           // https://github.com/angular/protractor/issues/481\n           return;\n         }\n         element(by.model('amount')).clear();\n         element(by.model('amount')).sendKeys('-1234');\n         expect(element(by.id('currency-default')).getText()).toBe('-$1,234.00');\n         expect(element(by.id('currency-custom')).getText()).toBe('-USD$1,234.00');\n         expect(element(by.id('currency-no-fractions')).getText()).toBe('-USD$1,234');\n       });\n     </file>\n   </example>\n */\ncurrencyFilter.$inject = ['$locale'];\nfunction currencyFilter($locale) {\n  var formats = $locale.NUMBER_FORMATS;\n  return function(amount, currencySymbol, fractionSize) {\n    if (isUndefined(currencySymbol)) {\n      currencySymbol = formats.CURRENCY_SYM;\n    }\n\n    if (isUndefined(fractionSize)) {\n      fractionSize = formats.PATTERNS[1].maxFrac;\n    }\n\n    // if null or undefined pass it through\n    return (amount == null)\n        ? amount\n        : formatNumber(amount, formats.PATTERNS[1], formats.GROUP_SEP, formats.DECIMAL_SEP, fractionSize).\n            replace(/\\u00A4/g, currencySymbol);\n  };\n}\n\n/**\n * @ngdoc filter\n * @name number\n * @kind function\n *\n * @description\n * Formats a number as text.\n *\n * If the input is null or undefined, it will just be returned.\n * If the input is infinite (Infinity or -Infinity), the Infinity symbol '∞' or '-∞' is returned, respectively.\n * If the input is not a number an empty string is returned.\n *\n *\n * @param {number|string} number Number to format.\n * @param {(number|string)=} fractionSize Number of decimal places to round the number to.\n * If this is not provided then the fraction size is computed from the current locale's number\n * formatting pattern. In the case of the default locale, it will be 3.\n * @returns {string} Number rounded to `fractionSize` appropriately formatted based on the current\n *                   locale (e.g., in the en_US locale it will have \".\" as the decimal separator and\n *                   include \",\" group separators after each third digit).\n *\n * @example\n   <example module=\"numberFilterExample\" name=\"number-filter\">\n     <file name=\"index.html\">\n       <script>\n         angular.module('numberFilterExample', [])\n           .controller('ExampleController', ['$scope', function($scope) {\n             $scope.val = 1234.56789;\n           }]);\n       </script>\n       <div ng-controller=\"ExampleController\">\n         <label>Enter number: <input ng-model='val'></label><br>\n         Default formatting: <span id='number-default'>{{val | number}}</span><br>\n         No fractions: <span>{{val | number:0}}</span><br>\n         Negative number: <span>{{-val | number:4}}</span>\n       </div>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should format numbers', function() {\n         expect(element(by.id('number-default')).getText()).toBe('1,234.568');\n         expect(element(by.binding('val | number:0')).getText()).toBe('1,235');\n         expect(element(by.binding('-val | number:4')).getText()).toBe('-1,234.5679');\n       });\n\n       it('should update', function() {\n         element(by.model('val')).clear();\n         element(by.model('val')).sendKeys('3374.333');\n         expect(element(by.id('number-default')).getText()).toBe('3,374.333');\n         expect(element(by.binding('val | number:0')).getText()).toBe('3,374');\n         expect(element(by.binding('-val | number:4')).getText()).toBe('-3,374.3330');\n      });\n     </file>\n   </example>\n */\nnumberFilter.$inject = ['$locale'];\nfunction numberFilter($locale) {\n  var formats = $locale.NUMBER_FORMATS;\n  return function(number, fractionSize) {\n\n    // if null or undefined pass it through\n    return (number == null)\n        ? number\n        : formatNumber(number, formats.PATTERNS[0], formats.GROUP_SEP, formats.DECIMAL_SEP,\n                       fractionSize);\n  };\n}\n\n/**\n * Parse a number (as a string) into three components that can be used\n * for formatting the number.\n *\n * (Significant bits of this parse algorithm came from https://github.com/MikeMcl/big.js/)\n *\n * @param  {string} numStr The number to parse\n * @return {object} An object describing this number, containing the following keys:\n *  - d : an array of digits containing leading zeros as necessary\n *  - i : the number of the digits in `d` that are to the left of the decimal point\n *  - e : the exponent for numbers that would need more than `MAX_DIGITS` digits in `d`\n *\n */\nfunction parse(numStr) {\n  var exponent = 0, digits, numberOfIntegerDigits;\n  var i, j, zeros;\n\n  // Decimal point?\n  if ((numberOfIntegerDigits = numStr.indexOf(DECIMAL_SEP)) > -1) {\n    numStr = numStr.replace(DECIMAL_SEP, '');\n  }\n\n  // Exponential form?\n  if ((i = numStr.search(/e/i)) > 0) {\n    // Work out the exponent.\n    if (numberOfIntegerDigits < 0) numberOfIntegerDigits = i;\n    numberOfIntegerDigits += +numStr.slice(i + 1);\n    numStr = numStr.substring(0, i);\n  } else if (numberOfIntegerDigits < 0) {\n    // There was no decimal point or exponent so it is an integer.\n    numberOfIntegerDigits = numStr.length;\n  }\n\n  // Count the number of leading zeros.\n  for (i = 0; numStr.charAt(i) === ZERO_CHAR; i++) { /* empty */ }\n\n  if (i === (zeros = numStr.length)) {\n    // The digits are all zero.\n    digits = [0];\n    numberOfIntegerDigits = 1;\n  } else {\n    // Count the number of trailing zeros\n    zeros--;\n    while (numStr.charAt(zeros) === ZERO_CHAR) zeros--;\n\n    // Trailing zeros are insignificant so ignore them\n    numberOfIntegerDigits -= i;\n    digits = [];\n    // Convert string to array of digits without leading/trailing zeros.\n    for (j = 0; i <= zeros; i++, j++) {\n      digits[j] = +numStr.charAt(i);\n    }\n  }\n\n  // If the number overflows the maximum allowed digits then use an exponent.\n  if (numberOfIntegerDigits > MAX_DIGITS) {\n    digits = digits.splice(0, MAX_DIGITS - 1);\n    exponent = numberOfIntegerDigits - 1;\n    numberOfIntegerDigits = 1;\n  }\n\n  return { d: digits, e: exponent, i: numberOfIntegerDigits };\n}\n\n/**\n * Round the parsed number to the specified number of decimal places\n * This function changed the parsedNumber in-place\n */\nfunction roundNumber(parsedNumber, fractionSize, minFrac, maxFrac) {\n    var digits = parsedNumber.d;\n    var fractionLen = digits.length - parsedNumber.i;\n\n    // determine fractionSize if it is not specified; `+fractionSize` converts it to a number\n    fractionSize = (isUndefined(fractionSize)) ? Math.min(Math.max(minFrac, fractionLen), maxFrac) : +fractionSize;\n\n    // The index of the digit to where rounding is to occur\n    var roundAt = fractionSize + parsedNumber.i;\n    var digit = digits[roundAt];\n\n    if (roundAt > 0) {\n      // Drop fractional digits beyond `roundAt`\n      digits.splice(Math.max(parsedNumber.i, roundAt));\n\n      // Set non-fractional digits beyond `roundAt` to 0\n      for (var j = roundAt; j < digits.length; j++) {\n        digits[j] = 0;\n      }\n    } else {\n      // We rounded to zero so reset the parsedNumber\n      fractionLen = Math.max(0, fractionLen);\n      parsedNumber.i = 1;\n      digits.length = Math.max(1, roundAt = fractionSize + 1);\n      digits[0] = 0;\n      for (var i = 1; i < roundAt; i++) digits[i] = 0;\n    }\n\n    if (digit >= 5) {\n      if (roundAt - 1 < 0) {\n        for (var k = 0; k > roundAt; k--) {\n          digits.unshift(0);\n          parsedNumber.i++;\n        }\n        digits.unshift(1);\n        parsedNumber.i++;\n      } else {\n        digits[roundAt - 1]++;\n      }\n    }\n\n    // Pad out with zeros to get the required fraction length\n    for (; fractionLen < Math.max(0, fractionSize); fractionLen++) digits.push(0);\n\n\n    // Do any carrying, e.g. a digit was rounded up to 10\n    var carry = digits.reduceRight(function(carry, d, i, digits) {\n      d = d + carry;\n      digits[i] = d % 10;\n      return Math.floor(d / 10);\n    }, 0);\n    if (carry) {\n      digits.unshift(carry);\n      parsedNumber.i++;\n    }\n}\n\n/**\n * Format a number into a string\n * @param  {number} number       The number to format\n * @param  {{\n *           minFrac, // the minimum number of digits required in the fraction part of the number\n *           maxFrac, // the maximum number of digits required in the fraction part of the number\n *           gSize,   // number of digits in each group of separated digits\n *           lgSize,  // number of digits in the last group of digits before the decimal separator\n *           negPre,  // the string to go in front of a negative number (e.g. `-` or `(`))\n *           posPre,  // the string to go in front of a positive number\n *           negSuf,  // the string to go after a negative number (e.g. `)`)\n *           posSuf   // the string to go after a positive number\n *         }} pattern\n * @param  {string} groupSep     The string to separate groups of number (e.g. `,`)\n * @param  {string} decimalSep   The string to act as the decimal separator (e.g. `.`)\n * @param  {[type]} fractionSize The size of the fractional part of the number\n * @return {string}              The number formatted as a string\n */\nfunction formatNumber(number, pattern, groupSep, decimalSep, fractionSize) {\n\n  if (!(isString(number) || isNumber(number)) || isNaN(number)) return '';\n\n  var isInfinity = !isFinite(number);\n  var isZero = false;\n  var numStr = Math.abs(number) + '',\n      formattedText = '',\n      parsedNumber;\n\n  if (isInfinity) {\n    formattedText = '\\u221e';\n  } else {\n    parsedNumber = parse(numStr);\n\n    roundNumber(parsedNumber, fractionSize, pattern.minFrac, pattern.maxFrac);\n\n    var digits = parsedNumber.d;\n    var integerLen = parsedNumber.i;\n    var exponent = parsedNumber.e;\n    var decimals = [];\n    isZero = digits.reduce(function(isZero, d) { return isZero && !d; }, true);\n\n    // pad zeros for small numbers\n    while (integerLen < 0) {\n      digits.unshift(0);\n      integerLen++;\n    }\n\n    // extract decimals digits\n    if (integerLen > 0) {\n      decimals = digits.splice(integerLen, digits.length);\n    } else {\n      decimals = digits;\n      digits = [0];\n    }\n\n    // format the integer digits with grouping separators\n    var groups = [];\n    if (digits.length >= pattern.lgSize) {\n      groups.unshift(digits.splice(-pattern.lgSize, digits.length).join(''));\n    }\n    while (digits.length > pattern.gSize) {\n      groups.unshift(digits.splice(-pattern.gSize, digits.length).join(''));\n    }\n    if (digits.length) {\n      groups.unshift(digits.join(''));\n    }\n    formattedText = groups.join(groupSep);\n\n    // append the decimal digits\n    if (decimals.length) {\n      formattedText += decimalSep + decimals.join('');\n    }\n\n    if (exponent) {\n      formattedText += 'e+' + exponent;\n    }\n  }\n  if (number < 0 && !isZero) {\n    return pattern.negPre + formattedText + pattern.negSuf;\n  } else {\n    return pattern.posPre + formattedText + pattern.posSuf;\n  }\n}\n\nfunction padNumber(num, digits, trim, negWrap) {\n  var neg = '';\n  if (num < 0 || (negWrap && num <= 0)) {\n    if (negWrap) {\n      num = -num + 1;\n    } else {\n      num = -num;\n      neg = '-';\n    }\n  }\n  num = '' + num;\n  while (num.length < digits) num = ZERO_CHAR + num;\n  if (trim) {\n    num = num.substr(num.length - digits);\n  }\n  return neg + num;\n}\n\n\nfunction dateGetter(name, size, offset, trim, negWrap) {\n  offset = offset || 0;\n  return function(date) {\n    var value = date['get' + name]();\n    if (offset > 0 || value > -offset) {\n      value += offset;\n    }\n    if (value === 0 && offset === -12) value = 12;\n    return padNumber(value, size, trim, negWrap);\n  };\n}\n\nfunction dateStrGetter(name, shortForm, standAlone) {\n  return function(date, formats) {\n    var value = date['get' + name]();\n    var propPrefix = (standAlone ? 'STANDALONE' : '') + (shortForm ? 'SHORT' : '');\n    var get = uppercase(propPrefix + name);\n\n    return formats[get][value];\n  };\n}\n\nfunction timeZoneGetter(date, formats, offset) {\n  var zone = -1 * offset;\n  var paddedZone = (zone >= 0) ? '+' : '';\n\n  paddedZone += padNumber(Math[zone > 0 ? 'floor' : 'ceil'](zone / 60), 2) +\n                padNumber(Math.abs(zone % 60), 2);\n\n  return paddedZone;\n}\n\nfunction getFirstThursdayOfYear(year) {\n    // 0 = index of January\n    var dayOfWeekOnFirst = (new Date(year, 0, 1)).getDay();\n    // 4 = index of Thursday (+1 to account for 1st = 5)\n    // 11 = index of *next* Thursday (+1 account for 1st = 12)\n    return new Date(year, 0, ((dayOfWeekOnFirst <= 4) ? 5 : 12) - dayOfWeekOnFirst);\n}\n\nfunction getThursdayThisWeek(datetime) {\n    return new Date(datetime.getFullYear(), datetime.getMonth(),\n      // 4 = index of Thursday\n      datetime.getDate() + (4 - datetime.getDay()));\n}\n\nfunction weekGetter(size) {\n   return function(date) {\n      var firstThurs = getFirstThursdayOfYear(date.getFullYear()),\n         thisThurs = getThursdayThisWeek(date);\n\n      var diff = +thisThurs - +firstThurs,\n         result = 1 + Math.round(diff / 6.048e8); // 6.048e8 ms per week\n\n      return padNumber(result, size);\n   };\n}\n\nfunction ampmGetter(date, formats) {\n  return date.getHours() < 12 ? formats.AMPMS[0] : formats.AMPMS[1];\n}\n\nfunction eraGetter(date, formats) {\n  return date.getFullYear() <= 0 ? formats.ERAS[0] : formats.ERAS[1];\n}\n\nfunction longEraGetter(date, formats) {\n  return date.getFullYear() <= 0 ? formats.ERANAMES[0] : formats.ERANAMES[1];\n}\n\nvar DATE_FORMATS = {\n  yyyy: dateGetter('FullYear', 4, 0, false, true),\n    yy: dateGetter('FullYear', 2, 0, true, true),\n     y: dateGetter('FullYear', 1, 0, false, true),\n  MMMM: dateStrGetter('Month'),\n   MMM: dateStrGetter('Month', true),\n    MM: dateGetter('Month', 2, 1),\n     M: dateGetter('Month', 1, 1),\n  LLLL: dateStrGetter('Month', false, true),\n    dd: dateGetter('Date', 2),\n     d: dateGetter('Date', 1),\n    HH: dateGetter('Hours', 2),\n     H: dateGetter('Hours', 1),\n    hh: dateGetter('Hours', 2, -12),\n     h: dateGetter('Hours', 1, -12),\n    mm: dateGetter('Minutes', 2),\n     m: dateGetter('Minutes', 1),\n    ss: dateGetter('Seconds', 2),\n     s: dateGetter('Seconds', 1),\n     // while ISO 8601 requires fractions to be prefixed with `.` or `,`\n     // we can be just safely rely on using `sss` since we currently don't support single or two digit fractions\n   sss: dateGetter('Milliseconds', 3),\n  EEEE: dateStrGetter('Day'),\n   EEE: dateStrGetter('Day', true),\n     a: ampmGetter,\n     Z: timeZoneGetter,\n    ww: weekGetter(2),\n     w: weekGetter(1),\n     G: eraGetter,\n     GG: eraGetter,\n     GGG: eraGetter,\n     GGGG: longEraGetter\n};\n\nvar DATE_FORMATS_SPLIT = /((?:[^yMLdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|m+|s+|a|Z|G+|w+))([\\s\\S]*)/,\n    NUMBER_STRING = /^-?\\d+$/;\n\n/**\n * @ngdoc filter\n * @name date\n * @kind function\n *\n * @description\n *   Formats `date` to a string based on the requested `format`.\n *\n *   `format` string can be composed of the following elements:\n *\n *   * `'yyyy'`: 4 digit representation of year (e.g. AD 1 => 0001, AD 2010 => 2010)\n *   * `'yy'`: 2 digit representation of year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)\n *   * `'y'`: 1 digit representation of year, e.g. (AD 1 => 1, AD 199 => 199)\n *   * `'MMMM'`: Month in year (January-December)\n *   * `'MMM'`: Month in year (Jan-Dec)\n *   * `'MM'`: Month in year, padded (01-12)\n *   * `'M'`: Month in year (1-12)\n *   * `'LLLL'`: Stand-alone month in year (January-December)\n *   * `'dd'`: Day in month, padded (01-31)\n *   * `'d'`: Day in month (1-31)\n *   * `'EEEE'`: Day in Week,(Sunday-Saturday)\n *   * `'EEE'`: Day in Week, (Sun-Sat)\n *   * `'HH'`: Hour in day, padded (00-23)\n *   * `'H'`: Hour in day (0-23)\n *   * `'hh'`: Hour in AM/PM, padded (01-12)\n *   * `'h'`: Hour in AM/PM, (1-12)\n *   * `'mm'`: Minute in hour, padded (00-59)\n *   * `'m'`: Minute in hour (0-59)\n *   * `'ss'`: Second in minute, padded (00-59)\n *   * `'s'`: Second in minute (0-59)\n *   * `'sss'`: Millisecond in second, padded (000-999)\n *   * `'a'`: AM/PM marker\n *   * `'Z'`: 4 digit (+sign) representation of the timezone offset (-1200-+1200)\n *   * `'ww'`: Week of year, padded (00-53). Week 01 is the week with the first Thursday of the year\n *   * `'w'`: Week of year (0-53). Week 1 is the week with the first Thursday of the year\n *   * `'G'`, `'GG'`, `'GGG'`: The abbreviated form of the era string (e.g. 'AD')\n *   * `'GGGG'`: The long form of the era string (e.g. 'Anno Domini')\n *\n *   `format` string can also be one of the following predefined\n *   {@link guide/i18n localizable formats}:\n *\n *   * `'medium'`: equivalent to `'MMM d, y h:mm:ss a'` for en_US locale\n *     (e.g. Sep 3, 2010 12:05:08 PM)\n *   * `'short'`: equivalent to `'M/d/yy h:mm a'` for en_US  locale (e.g. 9/3/10 12:05 PM)\n *   * `'fullDate'`: equivalent to `'EEEE, MMMM d, y'` for en_US  locale\n *     (e.g. Friday, September 3, 2010)\n *   * `'longDate'`: equivalent to `'MMMM d, y'` for en_US  locale (e.g. September 3, 2010)\n *   * `'mediumDate'`: equivalent to `'MMM d, y'` for en_US  locale (e.g. Sep 3, 2010)\n *   * `'shortDate'`: equivalent to `'M/d/yy'` for en_US locale (e.g. 9/3/10)\n *   * `'mediumTime'`: equivalent to `'h:mm:ss a'` for en_US locale (e.g. 12:05:08 PM)\n *   * `'shortTime'`: equivalent to `'h:mm a'` for en_US locale (e.g. 12:05 PM)\n *\n *   `format` string can contain literal values. These need to be escaped by surrounding with single quotes (e.g.\n *   `\"h 'in the morning'\"`). In order to output a single quote, escape it - i.e., two single quotes in a sequence\n *   (e.g. `\"h 'o''clock'\"`).\n *\n *   Any other characters in the `format` string will be output as-is.\n *\n * @param {(Date|number|string)} date Date to format either as Date object, milliseconds (string or\n *    number) or various ISO 8601 datetime string formats (e.g. yyyy-MM-ddTHH:mm:ss.sssZ and its\n *    shorter versions like yyyy-MM-ddTHH:mmZ, yyyy-MM-dd or yyyyMMddTHHmmssZ). If no timezone is\n *    specified in the string input, the time is considered to be in the local timezone.\n * @param {string=} format Formatting rules (see Description). If not specified,\n *    `mediumDate` is used.\n * @param {string=} timezone Timezone to be used for formatting. It understands UTC/GMT and the\n *    continental US time zone abbreviations, but for general use, use a time zone offset, for\n *    example, `'+0430'` (4 hours, 30 minutes east of the Greenwich meridian)\n *    If not specified, the timezone of the browser will be used.\n * @returns {string} Formatted string or the input if input is not recognized as date/millis.\n *\n * @example\n   <example name=\"filter-date\">\n     <file name=\"index.html\">\n       <span ng-non-bindable>{{1288323623006 | date:'medium'}}</span>:\n           <span>{{1288323623006 | date:'medium'}}</span><br>\n       <span ng-non-bindable>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span>:\n          <span>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span><br>\n       <span ng-non-bindable>{{1288323623006 | date:'MM/dd/yyyy @ h:mma'}}</span>:\n          <span>{{'1288323623006' | date:'MM/dd/yyyy @ h:mma'}}</span><br>\n       <span ng-non-bindable>{{1288323623006 | date:\"MM/dd/yyyy 'at' h:mma\"}}</span>:\n          <span>{{'1288323623006' | date:\"MM/dd/yyyy 'at' h:mma\"}}</span><br>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should format date', function() {\n         expect(element(by.binding(\"1288323623006 | date:'medium'\")).getText()).\n            toMatch(/Oct 2\\d, 2010 \\d{1,2}:\\d{2}:\\d{2} (AM|PM)/);\n         expect(element(by.binding(\"1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'\")).getText()).\n            toMatch(/2010-10-2\\d \\d{2}:\\d{2}:\\d{2} (-|\\+)?\\d{4}/);\n         expect(element(by.binding(\"'1288323623006' | date:'MM/dd/yyyy @ h:mma'\")).getText()).\n            toMatch(/10\\/2\\d\\/2010 @ \\d{1,2}:\\d{2}(AM|PM)/);\n         expect(element(by.binding(\"'1288323623006' | date:\\\"MM/dd/yyyy 'at' h:mma\\\"\")).getText()).\n            toMatch(/10\\/2\\d\\/2010 at \\d{1,2}:\\d{2}(AM|PM)/);\n       });\n     </file>\n   </example>\n */\ndateFilter.$inject = ['$locale'];\nfunction dateFilter($locale) {\n\n\n  var R_ISO8601_STR = /^(\\d{4})-?(\\d\\d)-?(\\d\\d)(?:T(\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(?:\\.(\\d+))?)?)?(Z|([+-])(\\d\\d):?(\\d\\d))?)?$/;\n                     // 1        2       3         4          5          6          7          8  9     10      11\n  function jsonStringToDate(string) {\n    var match;\n    if ((match = string.match(R_ISO8601_STR))) {\n      var date = new Date(0),\n          tzHour = 0,\n          tzMin  = 0,\n          dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear,\n          timeSetter = match[8] ? date.setUTCHours : date.setHours;\n\n      if (match[9]) {\n        tzHour = toInt(match[9] + match[10]);\n        tzMin = toInt(match[9] + match[11]);\n      }\n      dateSetter.call(date, toInt(match[1]), toInt(match[2]) - 1, toInt(match[3]));\n      var h = toInt(match[4] || 0) - tzHour;\n      var m = toInt(match[5] || 0) - tzMin;\n      var s = toInt(match[6] || 0);\n      var ms = Math.round(parseFloat('0.' + (match[7] || 0)) * 1000);\n      timeSetter.call(date, h, m, s, ms);\n      return date;\n    }\n    return string;\n  }\n\n\n  return function(date, format, timezone) {\n    var text = '',\n        parts = [],\n        fn, match;\n\n    format = format || 'mediumDate';\n    format = $locale.DATETIME_FORMATS[format] || format;\n    if (isString(date)) {\n      date = NUMBER_STRING.test(date) ? toInt(date) : jsonStringToDate(date);\n    }\n\n    if (isNumber(date)) {\n      date = new Date(date);\n    }\n\n    if (!isDate(date) || !isFinite(date.getTime())) {\n      return date;\n    }\n\n    while (format) {\n      match = DATE_FORMATS_SPLIT.exec(format);\n      if (match) {\n        parts = concat(parts, match, 1);\n        format = parts.pop();\n      } else {\n        parts.push(format);\n        format = null;\n      }\n    }\n\n    var dateTimezoneOffset = date.getTimezoneOffset();\n    if (timezone) {\n      dateTimezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);\n      date = convertTimezoneToLocal(date, timezone, true);\n    }\n    forEach(parts, function(value) {\n      fn = DATE_FORMATS[value];\n      text += fn ? fn(date, $locale.DATETIME_FORMATS, dateTimezoneOffset)\n                 : value === '\\'\\'' ? '\\'' : value.replace(/(^'|'$)/g, '').replace(/''/g, '\\'');\n    });\n\n    return text;\n  };\n}\n\n\n/**\n * @ngdoc filter\n * @name json\n * @kind function\n *\n * @description\n *   Allows you to convert a JavaScript object into JSON string.\n *\n *   This filter is mostly useful for debugging. When using the double curly {{value}} notation\n *   the binding is automatically converted to JSON.\n *\n * @param {*} object Any JavaScript object (including arrays and primitive types) to filter.\n * @param {number=} spacing The number of spaces to use per indentation, defaults to 2.\n * @returns {string} JSON string.\n *\n *\n * @example\n   <example name=\"filter-json\">\n     <file name=\"index.html\">\n       <pre id=\"default-spacing\">{{ {'name':'value'} | json }}</pre>\n       <pre id=\"custom-spacing\">{{ {'name':'value'} | json:4 }}</pre>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should jsonify filtered objects', function() {\n         expect(element(by.id('default-spacing')).getText()).toMatch(/\\{\\n {2}\"name\": ?\"value\"\\n}/);\n         expect(element(by.id('custom-spacing')).getText()).toMatch(/\\{\\n {4}\"name\": ?\"value\"\\n}/);\n       });\n     </file>\n   </example>\n *\n */\nfunction jsonFilter() {\n  return function(object, spacing) {\n    if (isUndefined(spacing)) {\n        spacing = 2;\n    }\n    return toJson(object, spacing);\n  };\n}\n\n\n/**\n * @ngdoc filter\n * @name lowercase\n * @kind function\n * @description\n * Converts string to lowercase.\n *\n * See the {@link ng.uppercase uppercase filter documentation} for a functionally identical example.\n *\n * @see angular.lowercase\n */\nvar lowercaseFilter = valueFn(lowercase);\n\n\n/**\n * @ngdoc filter\n * @name uppercase\n * @kind function\n * @description\n * Converts string to uppercase.\n * @example\n   <example module=\"uppercaseFilterExample\" name=\"filter-uppercase\">\n     <file name=\"index.html\">\n       <script>\n         angular.module('uppercaseFilterExample', [])\n           .controller('ExampleController', ['$scope', function($scope) {\n             $scope.title = 'This is a title';\n           }]);\n       </script>\n       <div ng-controller=\"ExampleController\">\n         <!-- This title should be formatted normally -->\n         <h1>{{title}}</h1>\n         <!-- This title should be capitalized -->\n         <h1>{{title | uppercase}}</h1>\n       </div>\n     </file>\n   </example>\n */\nvar uppercaseFilter = valueFn(uppercase);\n\n/**\n * @ngdoc filter\n * @name limitTo\n * @kind function\n *\n * @description\n * Creates a new array or string containing only a specified number of elements. The elements are\n * taken from either the beginning or the end of the source array, string or number, as specified by\n * the value and sign (positive or negative) of `limit`. Other array-like objects are also supported\n * (e.g. array subclasses, NodeLists, jqLite/jQuery collections etc). If a number is used as input,\n * it is converted to a string.\n *\n * @param {Array|ArrayLike|string|number} input - Array/array-like, string or number to be limited.\n * @param {string|number} limit - The length of the returned array or string. If the `limit` number\n *     is positive, `limit` number of items from the beginning of the source array/string are copied.\n *     If the number is negative, `limit` number  of items from the end of the source array/string\n *     are copied. The `limit` will be trimmed if it exceeds `array.length`. If `limit` is undefined,\n *     the input will be returned unchanged.\n * @param {(string|number)=} begin - Index at which to begin limitation. As a negative index,\n *     `begin` indicates an offset from the end of `input`. Defaults to `0`.\n * @returns {Array|string} A new sub-array or substring of length `limit` or less if the input had\n *     less than `limit` elements.\n *\n * @example\n   <example module=\"limitToExample\" name=\"limit-to-filter\">\n     <file name=\"index.html\">\n       <script>\n         angular.module('limitToExample', [])\n           .controller('ExampleController', ['$scope', function($scope) {\n             $scope.numbers = [1,2,3,4,5,6,7,8,9];\n             $scope.letters = \"abcdefghi\";\n             $scope.longNumber = 2345432342;\n             $scope.numLimit = 3;\n             $scope.letterLimit = 3;\n             $scope.longNumberLimit = 3;\n           }]);\n       </script>\n       <div ng-controller=\"ExampleController\">\n         <label>\n            Limit {{numbers}} to:\n            <input type=\"number\" step=\"1\" ng-model=\"numLimit\">\n         </label>\n         <p>Output numbers: {{ numbers | limitTo:numLimit }}</p>\n         <label>\n            Limit {{letters}} to:\n            <input type=\"number\" step=\"1\" ng-model=\"letterLimit\">\n         </label>\n         <p>Output letters: {{ letters | limitTo:letterLimit }}</p>\n         <label>\n            Limit {{longNumber}} to:\n            <input type=\"number\" step=\"1\" ng-model=\"longNumberLimit\">\n         </label>\n         <p>Output long number: {{ longNumber | limitTo:longNumberLimit }}</p>\n       </div>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       var numLimitInput = element(by.model('numLimit'));\n       var letterLimitInput = element(by.model('letterLimit'));\n       var longNumberLimitInput = element(by.model('longNumberLimit'));\n       var limitedNumbers = element(by.binding('numbers | limitTo:numLimit'));\n       var limitedLetters = element(by.binding('letters | limitTo:letterLimit'));\n       var limitedLongNumber = element(by.binding('longNumber | limitTo:longNumberLimit'));\n\n       it('should limit the number array to first three items', function() {\n         expect(numLimitInput.getAttribute('value')).toBe('3');\n         expect(letterLimitInput.getAttribute('value')).toBe('3');\n         expect(longNumberLimitInput.getAttribute('value')).toBe('3');\n         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3]');\n         expect(limitedLetters.getText()).toEqual('Output letters: abc');\n         expect(limitedLongNumber.getText()).toEqual('Output long number: 234');\n       });\n\n       // There is a bug in safari and protractor that doesn't like the minus key\n       // it('should update the output when -3 is entered', function() {\n       //   numLimitInput.clear();\n       //   numLimitInput.sendKeys('-3');\n       //   letterLimitInput.clear();\n       //   letterLimitInput.sendKeys('-3');\n       //   longNumberLimitInput.clear();\n       //   longNumberLimitInput.sendKeys('-3');\n       //   expect(limitedNumbers.getText()).toEqual('Output numbers: [7,8,9]');\n       //   expect(limitedLetters.getText()).toEqual('Output letters: ghi');\n       //   expect(limitedLongNumber.getText()).toEqual('Output long number: 342');\n       // });\n\n       it('should not exceed the maximum size of input array', function() {\n         numLimitInput.clear();\n         numLimitInput.sendKeys('100');\n         letterLimitInput.clear();\n         letterLimitInput.sendKeys('100');\n         longNumberLimitInput.clear();\n         longNumberLimitInput.sendKeys('100');\n         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3,4,5,6,7,8,9]');\n         expect(limitedLetters.getText()).toEqual('Output letters: abcdefghi');\n         expect(limitedLongNumber.getText()).toEqual('Output long number: 2345432342');\n       });\n     </file>\n   </example>\n*/\nfunction limitToFilter() {\n  return function(input, limit, begin) {\n    if (Math.abs(Number(limit)) === Infinity) {\n      limit = Number(limit);\n    } else {\n      limit = toInt(limit);\n    }\n    if (isNumberNaN(limit)) return input;\n\n    if (isNumber(input)) input = input.toString();\n    if (!isArrayLike(input)) return input;\n\n    begin = (!begin || isNaN(begin)) ? 0 : toInt(begin);\n    begin = (begin < 0) ? Math.max(0, input.length + begin) : begin;\n\n    if (limit >= 0) {\n      return sliceFn(input, begin, begin + limit);\n    } else {\n      if (begin === 0) {\n        return sliceFn(input, limit, input.length);\n      } else {\n        return sliceFn(input, Math.max(0, begin + limit), begin);\n      }\n    }\n  };\n}\n\nfunction sliceFn(input, begin, end) {\n  if (isString(input)) return input.slice(begin, end);\n\n  return slice.call(input, begin, end);\n}\n\n/**\n * @ngdoc filter\n * @name orderBy\n * @kind function\n *\n * @description\n * Returns an array containing the items from the specified `collection`, ordered by a `comparator`\n * function based on the values computed using the `expression` predicate.\n *\n * For example, `[{id: 'foo'}, {id: 'bar'}] | orderBy:'id'` would result in\n * `[{id: 'bar'}, {id: 'foo'}]`.\n *\n * The `collection` can be an Array or array-like object (e.g. NodeList, jQuery object, TypedArray,\n * String, etc).\n *\n * The `expression` can be a single predicate, or a list of predicates each serving as a tie-breaker\n * for the preceding one. The `expression` is evaluated against each item and the output is used\n * for comparing with other items.\n *\n * You can change the sorting order by setting `reverse` to `true`. By default, items are sorted in\n * ascending order.\n *\n * The comparison is done using the `comparator` function. If none is specified, a default, built-in\n * comparator is used (see below for details - in a nutshell, it compares numbers numerically and\n * strings alphabetically).\n *\n * ### Under the hood\n *\n * Ordering the specified `collection` happens in two phases:\n *\n * 1. All items are passed through the predicate (or predicates), and the returned values are saved\n *    along with their type (`string`, `number` etc). For example, an item `{label: 'foo'}`, passed\n *    through a predicate that extracts the value of the `label` property, would be transformed to:\n *    ```\n *    {\n *      value: 'foo',\n *      type: 'string',\n *      index: ...\n *    }\n *    ```\n * 2. The comparator function is used to sort the items, based on the derived values, types and\n *    indices.\n *\n * If you use a custom comparator, it will be called with pairs of objects of the form\n * `{value: ..., type: '...', index: ...}` and is expected to return `0` if the objects are equal\n * (as far as the comparator is concerned), `-1` if the 1st one should be ranked higher than the\n * second, or `1` otherwise.\n *\n * In order to ensure that the sorting will be deterministic across platforms, if none of the\n * specified predicates can distinguish between two items, `orderBy` will automatically introduce a\n * dummy predicate that returns the item's index as `value`.\n * (If you are using a custom comparator, make sure it can handle this predicate as well.)\n *\n * If a custom comparator still can't distinguish between two items, then they will be sorted based\n * on their index using the built-in comparator.\n *\n * Finally, in an attempt to simplify things, if a predicate returns an object as the extracted\n * value for an item, `orderBy` will try to convert that object to a primitive value, before passing\n * it to the comparator. The following rules govern the conversion:\n *\n * 1. If the object has a `valueOf()` method that returns a primitive, its return value will be\n *    used instead.<br />\n *    (If the object has a `valueOf()` method that returns another object, then the returned object\n *    will be used in subsequent steps.)\n * 2. If the object has a custom `toString()` method (i.e. not the one inherited from `Object`) that\n *    returns a primitive, its return value will be used instead.<br />\n *    (If the object has a `toString()` method that returns another object, then the returned object\n *    will be used in subsequent steps.)\n * 3. No conversion; the object itself is used.\n *\n * ### The default comparator\n *\n * The default, built-in comparator should be sufficient for most usecases. In short, it compares\n * numbers numerically, strings alphabetically (and case-insensitively), for objects falls back to\n * using their index in the original collection, and sorts values of different types by type.\n *\n * More specifically, it follows these steps to determine the relative order of items:\n *\n * 1. If the compared values are of different types, compare the types themselves alphabetically.\n * 2. If both values are of type `string`, compare them alphabetically in a case- and\n *    locale-insensitive way.\n * 3. If both values are objects, compare their indices instead.\n * 4. Otherwise, return:\n *    -  `0`, if the values are equal (by strict equality comparison, i.e. using `===`).\n *    - `-1`, if the 1st value is \"less than\" the 2nd value (compared using the `<` operator).\n *    -  `1`, otherwise.\n *\n * **Note:** If you notice numbers not being sorted as expected, make sure they are actually being\n *           saved as numbers and not strings.\n * **Note:** For the purpose of sorting, `null` values are treated as the string `'null'` (i.e.\n *           `type: 'string'`, `value: 'null'`). This may cause unexpected sort order relative to\n *           other values.\n *\n * @param {Array|ArrayLike} collection - The collection (array or array-like object) to sort.\n * @param {(Function|string|Array.<Function|string>)=} expression - A predicate (or list of\n *    predicates) to be used by the comparator to determine the order of elements.\n *\n *    Can be one of:\n *\n *    - `Function`: A getter function. This function will be called with each item as argument and\n *      the return value will be used for sorting.\n *    - `string`: An Angular expression. This expression will be evaluated against each item and the\n *      result will be used for sorting. For example, use `'label'` to sort by a property called\n *      `label` or `'label.substring(0, 3)'` to sort by the first 3 characters of the `label`\n *      property.<br />\n *      (The result of a constant expression is interpreted as a property name to be used for\n *      comparison. For example, use `'\"special name\"'` (note the extra pair of quotes) to sort by a\n *      property called `special name`.)<br />\n *      An expression can be optionally prefixed with `+` or `-` to control the sorting direction,\n *      ascending or descending. For example, `'+label'` or `'-label'`. If no property is provided,\n *      (e.g. `'+'` or `'-'`), the collection element itself is used in comparisons.\n *    - `Array`: An array of function and/or string predicates. If a predicate cannot determine the\n *      relative order of two items, the next predicate is used as a tie-breaker.\n *\n * **Note:** If the predicate is missing or empty then it defaults to `'+'`.\n *\n * @param {boolean=} reverse - If `true`, reverse the sorting order.\n * @param {(Function)=} comparator - The comparator function used to determine the relative order of\n *    value pairs. If omitted, the built-in comparator will be used.\n *\n * @returns {Array} - The sorted array.\n *\n *\n * @example\n * ### Ordering a table with `ngRepeat`\n *\n * The example below demonstrates a simple {@link ngRepeat ngRepeat}, where the data is sorted by\n * age in descending order (expression is set to `'-age'`). The `comparator` is not set, which means\n * it defaults to the built-in comparator.\n *\n   <example name=\"orderBy-static\" module=\"orderByExample1\">\n     <file name=\"index.html\">\n       <div ng-controller=\"ExampleController\">\n         <table class=\"friends\">\n           <tr>\n             <th>Name</th>\n             <th>Phone Number</th>\n             <th>Age</th>\n           </tr>\n           <tr ng-repeat=\"friend in friends | orderBy:'-age'\">\n             <td>{{friend.name}}</td>\n             <td>{{friend.phone}}</td>\n             <td>{{friend.age}}</td>\n           </tr>\n         </table>\n       </div>\n     </file>\n     <file name=\"script.js\">\n       angular.module('orderByExample1', [])\n         .controller('ExampleController', ['$scope', function($scope) {\n           $scope.friends = [\n             {name: 'John',   phone: '555-1212',  age: 10},\n             {name: 'Mary',   phone: '555-9876',  age: 19},\n             {name: 'Mike',   phone: '555-4321',  age: 21},\n             {name: 'Adam',   phone: '555-5678',  age: 35},\n             {name: 'Julie',  phone: '555-8765',  age: 29}\n           ];\n         }]);\n     </file>\n     <file name=\"style.css\">\n       .friends {\n         border-collapse: collapse;\n       }\n\n       .friends th {\n         border-bottom: 1px solid;\n       }\n       .friends td, .friends th {\n         border-left: 1px solid;\n         padding: 5px 10px;\n       }\n       .friends td:first-child, .friends th:first-child {\n         border-left: none;\n       }\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       // Element locators\n       var names = element.all(by.repeater('friends').column('friend.name'));\n\n       it('should sort friends by age in reverse order', function() {\n         expect(names.get(0).getText()).toBe('Adam');\n         expect(names.get(1).getText()).toBe('Julie');\n         expect(names.get(2).getText()).toBe('Mike');\n         expect(names.get(3).getText()).toBe('Mary');\n         expect(names.get(4).getText()).toBe('John');\n       });\n     </file>\n   </example>\n * <hr />\n *\n * @example\n * ### Changing parameters dynamically\n *\n * All parameters can be changed dynamically. The next example shows how you can make the columns of\n * a table sortable, by binding the `expression` and `reverse` parameters to scope properties.\n *\n   <example name=\"orderBy-dynamic\" module=\"orderByExample2\">\n     <file name=\"index.html\">\n       <div ng-controller=\"ExampleController\">\n         <pre>Sort by = {{propertyName}}; reverse = {{reverse}}</pre>\n         <hr/>\n         <button ng-click=\"propertyName = null; reverse = false\">Set to unsorted</button>\n         <hr/>\n         <table class=\"friends\">\n           <tr>\n             <th>\n               <button ng-click=\"sortBy('name')\">Name</button>\n               <span class=\"sortorder\" ng-show=\"propertyName === 'name'\" ng-class=\"{reverse: reverse}\"></span>\n             </th>\n             <th>\n               <button ng-click=\"sortBy('phone')\">Phone Number</button>\n               <span class=\"sortorder\" ng-show=\"propertyName === 'phone'\" ng-class=\"{reverse: reverse}\"></span>\n             </th>\n             <th>\n               <button ng-click=\"sortBy('age')\">Age</button>\n               <span class=\"sortorder\" ng-show=\"propertyName === 'age'\" ng-class=\"{reverse: reverse}\"></span>\n             </th>\n           </tr>\n           <tr ng-repeat=\"friend in friends | orderBy:propertyName:reverse\">\n             <td>{{friend.name}}</td>\n             <td>{{friend.phone}}</td>\n             <td>{{friend.age}}</td>\n           </tr>\n         </table>\n       </div>\n     </file>\n     <file name=\"script.js\">\n       angular.module('orderByExample2', [])\n         .controller('ExampleController', ['$scope', function($scope) {\n           var friends = [\n             {name: 'John',   phone: '555-1212',  age: 10},\n             {name: 'Mary',   phone: '555-9876',  age: 19},\n             {name: 'Mike',   phone: '555-4321',  age: 21},\n             {name: 'Adam',   phone: '555-5678',  age: 35},\n             {name: 'Julie',  phone: '555-8765',  age: 29}\n           ];\n\n           $scope.propertyName = 'age';\n           $scope.reverse = true;\n           $scope.friends = friends;\n\n           $scope.sortBy = function(propertyName) {\n             $scope.reverse = ($scope.propertyName === propertyName) ? !$scope.reverse : false;\n             $scope.propertyName = propertyName;\n           };\n         }]);\n     </file>\n     <file name=\"style.css\">\n       .friends {\n         border-collapse: collapse;\n       }\n\n       .friends th {\n         border-bottom: 1px solid;\n       }\n       .friends td, .friends th {\n         border-left: 1px solid;\n         padding: 5px 10px;\n       }\n       .friends td:first-child, .friends th:first-child {\n         border-left: none;\n       }\n\n       .sortorder:after {\n         content: '\\25b2';   // BLACK UP-POINTING TRIANGLE\n       }\n       .sortorder.reverse:after {\n         content: '\\25bc';   // BLACK DOWN-POINTING TRIANGLE\n       }\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       // Element locators\n       var unsortButton = element(by.partialButtonText('unsorted'));\n       var nameHeader = element(by.partialButtonText('Name'));\n       var phoneHeader = element(by.partialButtonText('Phone'));\n       var ageHeader = element(by.partialButtonText('Age'));\n       var firstName = element(by.repeater('friends').column('friend.name').row(0));\n       var lastName = element(by.repeater('friends').column('friend.name').row(4));\n\n       it('should sort friends by some property, when clicking on the column header', function() {\n         expect(firstName.getText()).toBe('Adam');\n         expect(lastName.getText()).toBe('John');\n\n         phoneHeader.click();\n         expect(firstName.getText()).toBe('John');\n         expect(lastName.getText()).toBe('Mary');\n\n         nameHeader.click();\n         expect(firstName.getText()).toBe('Adam');\n         expect(lastName.getText()).toBe('Mike');\n\n         ageHeader.click();\n         expect(firstName.getText()).toBe('John');\n         expect(lastName.getText()).toBe('Adam');\n       });\n\n       it('should sort friends in reverse order, when clicking on the same column', function() {\n         expect(firstName.getText()).toBe('Adam');\n         expect(lastName.getText()).toBe('John');\n\n         ageHeader.click();\n         expect(firstName.getText()).toBe('John');\n         expect(lastName.getText()).toBe('Adam');\n\n         ageHeader.click();\n         expect(firstName.getText()).toBe('Adam');\n         expect(lastName.getText()).toBe('John');\n       });\n\n       it('should restore the original order, when clicking \"Set to unsorted\"', function() {\n         expect(firstName.getText()).toBe('Adam');\n         expect(lastName.getText()).toBe('John');\n\n         unsortButton.click();\n         expect(firstName.getText()).toBe('John');\n         expect(lastName.getText()).toBe('Julie');\n       });\n     </file>\n   </example>\n * <hr />\n *\n * @example\n * ### Using `orderBy` inside a controller\n *\n * It is also possible to call the `orderBy` filter manually, by injecting `orderByFilter`, and\n * calling it with the desired parameters. (Alternatively, you could inject the `$filter` factory\n * and retrieve the `orderBy` filter with `$filter('orderBy')`.)\n *\n   <example name=\"orderBy-call-manually\" module=\"orderByExample3\">\n     <file name=\"index.html\">\n       <div ng-controller=\"ExampleController\">\n         <pre>Sort by = {{propertyName}}; reverse = {{reverse}}</pre>\n         <hr/>\n         <button ng-click=\"sortBy(null)\">Set to unsorted</button>\n         <hr/>\n         <table class=\"friends\">\n           <tr>\n             <th>\n               <button ng-click=\"sortBy('name')\">Name</button>\n               <span class=\"sortorder\" ng-show=\"propertyName === 'name'\" ng-class=\"{reverse: reverse}\"></span>\n             </th>\n             <th>\n               <button ng-click=\"sortBy('phone')\">Phone Number</button>\n               <span class=\"sortorder\" ng-show=\"propertyName === 'phone'\" ng-class=\"{reverse: reverse}\"></span>\n             </th>\n             <th>\n               <button ng-click=\"sortBy('age')\">Age</button>\n               <span class=\"sortorder\" ng-show=\"propertyName === 'age'\" ng-class=\"{reverse: reverse}\"></span>\n             </th>\n           </tr>\n           <tr ng-repeat=\"friend in friends\">\n             <td>{{friend.name}}</td>\n             <td>{{friend.phone}}</td>\n             <td>{{friend.age}}</td>\n           </tr>\n         </table>\n       </div>\n     </file>\n     <file name=\"script.js\">\n       angular.module('orderByExample3', [])\n         .controller('ExampleController', ['$scope', 'orderByFilter', function($scope, orderBy) {\n           var friends = [\n             {name: 'John',   phone: '555-1212',  age: 10},\n             {name: 'Mary',   phone: '555-9876',  age: 19},\n             {name: 'Mike',   phone: '555-4321',  age: 21},\n             {name: 'Adam',   phone: '555-5678',  age: 35},\n             {name: 'Julie',  phone: '555-8765',  age: 29}\n           ];\n\n           $scope.propertyName = 'age';\n           $scope.reverse = true;\n           $scope.friends = orderBy(friends, $scope.propertyName, $scope.reverse);\n\n           $scope.sortBy = function(propertyName) {\n             $scope.reverse = (propertyName !== null && $scope.propertyName === propertyName)\n                 ? !$scope.reverse : false;\n             $scope.propertyName = propertyName;\n             $scope.friends = orderBy(friends, $scope.propertyName, $scope.reverse);\n           };\n         }]);\n     </file>\n     <file name=\"style.css\">\n       .friends {\n         border-collapse: collapse;\n       }\n\n       .friends th {\n         border-bottom: 1px solid;\n       }\n       .friends td, .friends th {\n         border-left: 1px solid;\n         padding: 5px 10px;\n       }\n       .friends td:first-child, .friends th:first-child {\n         border-left: none;\n       }\n\n       .sortorder:after {\n         content: '\\25b2';   // BLACK UP-POINTING TRIANGLE\n       }\n       .sortorder.reverse:after {\n         content: '\\25bc';   // BLACK DOWN-POINTING TRIANGLE\n       }\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       // Element locators\n       var unsortButton = element(by.partialButtonText('unsorted'));\n       var nameHeader = element(by.partialButtonText('Name'));\n       var phoneHeader = element(by.partialButtonText('Phone'));\n       var ageHeader = element(by.partialButtonText('Age'));\n       var firstName = element(by.repeater('friends').column('friend.name').row(0));\n       var lastName = element(by.repeater('friends').column('friend.name').row(4));\n\n       it('should sort friends by some property, when clicking on the column header', function() {\n         expect(firstName.getText()).toBe('Adam');\n         expect(lastName.getText()).toBe('John');\n\n         phoneHeader.click();\n         expect(firstName.getText()).toBe('John');\n         expect(lastName.getText()).toBe('Mary');\n\n         nameHeader.click();\n         expect(firstName.getText()).toBe('Adam');\n         expect(lastName.getText()).toBe('Mike');\n\n         ageHeader.click();\n         expect(firstName.getText()).toBe('John');\n         expect(lastName.getText()).toBe('Adam');\n       });\n\n       it('should sort friends in reverse order, when clicking on the same column', function() {\n         expect(firstName.getText()).toBe('Adam');\n         expect(lastName.getText()).toBe('John');\n\n         ageHeader.click();\n         expect(firstName.getText()).toBe('John');\n         expect(lastName.getText()).toBe('Adam');\n\n         ageHeader.click();\n         expect(firstName.getText()).toBe('Adam');\n         expect(lastName.getText()).toBe('John');\n       });\n\n       it('should restore the original order, when clicking \"Set to unsorted\"', function() {\n         expect(firstName.getText()).toBe('Adam');\n         expect(lastName.getText()).toBe('John');\n\n         unsortButton.click();\n         expect(firstName.getText()).toBe('John');\n         expect(lastName.getText()).toBe('Julie');\n       });\n     </file>\n   </example>\n * <hr />\n *\n * @example\n * ### Using a custom comparator\n *\n * If you have very specific requirements about the way items are sorted, you can pass your own\n * comparator function. For example, you might need to compare some strings in a locale-sensitive\n * way. (When specifying a custom comparator, you also need to pass a value for the `reverse`\n * argument - passing `false` retains the default sorting order, i.e. ascending.)\n *\n   <example name=\"orderBy-custom-comparator\" module=\"orderByExample4\">\n     <file name=\"index.html\">\n       <div ng-controller=\"ExampleController\">\n         <div class=\"friends-container custom-comparator\">\n           <h3>Locale-sensitive Comparator</h3>\n           <table class=\"friends\">\n             <tr>\n               <th>Name</th>\n               <th>Favorite Letter</th>\n             </tr>\n             <tr ng-repeat=\"friend in friends | orderBy:'favoriteLetter':false:localeSensitiveComparator\">\n               <td>{{friend.name}}</td>\n               <td>{{friend.favoriteLetter}}</td>\n             </tr>\n           </table>\n         </div>\n         <div class=\"friends-container default-comparator\">\n           <h3>Default Comparator</h3>\n           <table class=\"friends\">\n             <tr>\n               <th>Name</th>\n               <th>Favorite Letter</th>\n             </tr>\n             <tr ng-repeat=\"friend in friends | orderBy:'favoriteLetter'\">\n               <td>{{friend.name}}</td>\n               <td>{{friend.favoriteLetter}}</td>\n             </tr>\n           </table>\n         </div>\n       </div>\n     </file>\n     <file name=\"script.js\">\n       angular.module('orderByExample4', [])\n         .controller('ExampleController', ['$scope', function($scope) {\n           $scope.friends = [\n             {name: 'John',   favoriteLetter: 'Ä'},\n             {name: 'Mary',   favoriteLetter: 'Ü'},\n             {name: 'Mike',   favoriteLetter: 'Ö'},\n             {name: 'Adam',   favoriteLetter: 'H'},\n             {name: 'Julie',  favoriteLetter: 'Z'}\n           ];\n\n           $scope.localeSensitiveComparator = function(v1, v2) {\n             // If we don't get strings, just compare by index\n             if (v1.type !== 'string' || v2.type !== 'string') {\n               return (v1.index < v2.index) ? -1 : 1;\n             }\n\n             // Compare strings alphabetically, taking locale into account\n             return v1.value.localeCompare(v2.value);\n           };\n         }]);\n     </file>\n     <file name=\"style.css\">\n       .friends-container {\n         display: inline-block;\n         margin: 0 30px;\n       }\n\n       .friends {\n         border-collapse: collapse;\n       }\n\n       .friends th {\n         border-bottom: 1px solid;\n       }\n       .friends td, .friends th {\n         border-left: 1px solid;\n         padding: 5px 10px;\n       }\n       .friends td:first-child, .friends th:first-child {\n         border-left: none;\n       }\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       // Element locators\n       var container = element(by.css('.custom-comparator'));\n       var names = container.all(by.repeater('friends').column('friend.name'));\n\n       it('should sort friends by favorite letter (in correct alphabetical order)', function() {\n         expect(names.get(0).getText()).toBe('John');\n         expect(names.get(1).getText()).toBe('Adam');\n         expect(names.get(2).getText()).toBe('Mike');\n         expect(names.get(3).getText()).toBe('Mary');\n         expect(names.get(4).getText()).toBe('Julie');\n       });\n     </file>\n   </example>\n *\n */\norderByFilter.$inject = ['$parse'];\nfunction orderByFilter($parse) {\n  return function(array, sortPredicate, reverseOrder, compareFn) {\n\n    if (array == null) return array;\n    if (!isArrayLike(array)) {\n      throw minErr('orderBy')('notarray', 'Expected array but received: {0}', array);\n    }\n\n    if (!isArray(sortPredicate)) { sortPredicate = [sortPredicate]; }\n    if (sortPredicate.length === 0) { sortPredicate = ['+']; }\n\n    var predicates = processPredicates(sortPredicate);\n\n    var descending = reverseOrder ? -1 : 1;\n\n    // Define the `compare()` function. Use a default comparator if none is specified.\n    var compare = isFunction(compareFn) ? compareFn : defaultCompare;\n\n    // The next three lines are a version of a Swartzian Transform idiom from Perl\n    // (sometimes called the Decorate-Sort-Undecorate idiom)\n    // See https://en.wikipedia.org/wiki/Schwartzian_transform\n    var compareValues = Array.prototype.map.call(array, getComparisonObject);\n    compareValues.sort(doComparison);\n    array = compareValues.map(function(item) { return item.value; });\n\n    return array;\n\n    function getComparisonObject(value, index) {\n      // NOTE: We are adding an extra `tieBreaker` value based on the element's index.\n      // This will be used to keep the sort stable when none of the input predicates can\n      // distinguish between two elements.\n      return {\n        value: value,\n        tieBreaker: {value: index, type: 'number', index: index},\n        predicateValues: predicates.map(function(predicate) {\n          return getPredicateValue(predicate.get(value), index);\n        })\n      };\n    }\n\n    function doComparison(v1, v2) {\n      for (var i = 0, ii = predicates.length; i < ii; i++) {\n        var result = compare(v1.predicateValues[i], v2.predicateValues[i]);\n        if (result) {\n          return result * predicates[i].descending * descending;\n        }\n      }\n\n      return (compare(v1.tieBreaker, v2.tieBreaker) || defaultCompare(v1.tieBreaker, v2.tieBreaker)) * descending;\n    }\n  };\n\n  function processPredicates(sortPredicates) {\n    return sortPredicates.map(function(predicate) {\n      var descending = 1, get = identity;\n\n      if (isFunction(predicate)) {\n        get = predicate;\n      } else if (isString(predicate)) {\n        if ((predicate.charAt(0) === '+' || predicate.charAt(0) === '-')) {\n          descending = predicate.charAt(0) === '-' ? -1 : 1;\n          predicate = predicate.substring(1);\n        }\n        if (predicate !== '') {\n          get = $parse(predicate);\n          if (get.constant) {\n            var key = get();\n            get = function(value) { return value[key]; };\n          }\n        }\n      }\n      return {get: get, descending: descending};\n    });\n  }\n\n  function isPrimitive(value) {\n    switch (typeof value) {\n      case 'number': /* falls through */\n      case 'boolean': /* falls through */\n      case 'string':\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  function objectValue(value) {\n    // If `valueOf` is a valid function use that\n    if (isFunction(value.valueOf)) {\n      value = value.valueOf();\n      if (isPrimitive(value)) return value;\n    }\n    // If `toString` is a valid function and not the one from `Object.prototype` use that\n    if (hasCustomToString(value)) {\n      value = value.toString();\n      if (isPrimitive(value)) return value;\n    }\n\n    return value;\n  }\n\n  function getPredicateValue(value, index) {\n    var type = typeof value;\n    if (value === null) {\n      type = 'string';\n      value = 'null';\n    } else if (type === 'object') {\n      value = objectValue(value);\n    }\n    return {value: value, type: type, index: index};\n  }\n\n  function defaultCompare(v1, v2) {\n    var result = 0;\n    var type1 = v1.type;\n    var type2 = v2.type;\n\n    if (type1 === type2) {\n      var value1 = v1.value;\n      var value2 = v2.value;\n\n      if (type1 === 'string') {\n        // Compare strings case-insensitively\n        value1 = value1.toLowerCase();\n        value2 = value2.toLowerCase();\n      } else if (type1 === 'object') {\n        // For basic objects, use the position of the object\n        // in the collection instead of the value\n        if (isObject(value1)) value1 = v1.index;\n        if (isObject(value2)) value2 = v2.index;\n      }\n\n      if (value1 !== value2) {\n        result = value1 < value2 ? -1 : 1;\n      }\n    } else {\n      result = type1 < type2 ? -1 : 1;\n    }\n\n    return result;\n  }\n}\n\nfunction ngDirective(directive) {\n  if (isFunction(directive)) {\n    directive = {\n      link: directive\n    };\n  }\n  directive.restrict = directive.restrict || 'AC';\n  return valueFn(directive);\n}\n\n/**\n * @ngdoc directive\n * @name a\n * @restrict E\n *\n * @description\n * Modifies the default behavior of the html a tag so that the default action is prevented when\n * the href attribute is empty.\n *\n * For dynamically creating `href` attributes for a tags, see the {@link ng.ngHref `ngHref`} directive.\n */\nvar htmlAnchorDirective = valueFn({\n  restrict: 'E',\n  compile: function(element, attr) {\n    if (!attr.href && !attr.xlinkHref) {\n      return function(scope, element) {\n        // If the linked element is not an anchor tag anymore, do nothing\n        if (element[0].nodeName.toLowerCase() !== 'a') return;\n\n        // SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.\n        var href = toString.call(element.prop('href')) === '[object SVGAnimatedString]' ?\n                   'xlink:href' : 'href';\n        element.on('click', function(event) {\n          // if we have no href url, then don't navigate anywhere.\n          if (!element.attr(href)) {\n            event.preventDefault();\n          }\n        });\n      };\n    }\n  }\n});\n\n/**\n * @ngdoc directive\n * @name ngHref\n * @restrict A\n * @priority 99\n *\n * @description\n * Using Angular markup like `{{hash}}` in an href attribute will\n * make the link go to the wrong URL if the user clicks it before\n * Angular has a chance to replace the `{{hash}}` markup with its\n * value. Until Angular replaces the markup the link will be broken\n * and will most likely return a 404 error. The `ngHref` directive\n * solves this problem.\n *\n * The wrong way to write it:\n * ```html\n * <a href=\"http://www.gravatar.com/avatar/{{hash}}\">link1</a>\n * ```\n *\n * The correct way to write it:\n * ```html\n * <a ng-href=\"http://www.gravatar.com/avatar/{{hash}}\">link1</a>\n * ```\n *\n * @element A\n * @param {template} ngHref any string which can contain `{{}}` markup.\n *\n * @example\n * This example shows various combinations of `href`, `ng-href` and `ng-click` attributes\n * in links and their different behaviors:\n    <example name=\"ng-href\">\n      <file name=\"index.html\">\n        <input ng-model=\"value\" /><br />\n        <a id=\"link-1\" href ng-click=\"value = 1\">link 1</a> (link, don't reload)<br />\n        <a id=\"link-2\" href=\"\" ng-click=\"value = 2\">link 2</a> (link, don't reload)<br />\n        <a id=\"link-3\" ng-href=\"/{{'123'}}\">link 3</a> (link, reload!)<br />\n        <a id=\"link-4\" href=\"\" name=\"xx\" ng-click=\"value = 4\">anchor</a> (link, don't reload)<br />\n        <a id=\"link-5\" name=\"xxx\" ng-click=\"value = 5\">anchor</a> (no link)<br />\n        <a id=\"link-6\" ng-href=\"{{value}}\">link</a> (link, change location)\n      </file>\n      <file name=\"protractor.js\" type=\"protractor\">\n        it('should execute ng-click but not reload when href without value', function() {\n          element(by.id('link-1')).click();\n          expect(element(by.model('value')).getAttribute('value')).toEqual('1');\n          expect(element(by.id('link-1')).getAttribute('href')).toBe('');\n        });\n\n        it('should execute ng-click but not reload when href empty string', function() {\n          element(by.id('link-2')).click();\n          expect(element(by.model('value')).getAttribute('value')).toEqual('2');\n          expect(element(by.id('link-2')).getAttribute('href')).toBe('');\n        });\n\n        it('should execute ng-click and change url when ng-href specified', function() {\n          expect(element(by.id('link-3')).getAttribute('href')).toMatch(/\\/123$/);\n\n          element(by.id('link-3')).click();\n\n          // At this point, we navigate away from an Angular page, so we need\n          // to use browser.driver to get the base webdriver.\n\n          browser.wait(function() {\n            return browser.driver.getCurrentUrl().then(function(url) {\n              return url.match(/\\/123$/);\n            });\n          }, 5000, 'page should navigate to /123');\n        });\n\n        it('should execute ng-click but not reload when href empty string and name specified', function() {\n          element(by.id('link-4')).click();\n          expect(element(by.model('value')).getAttribute('value')).toEqual('4');\n          expect(element(by.id('link-4')).getAttribute('href')).toBe('');\n        });\n\n        it('should execute ng-click but not reload when no href but name specified', function() {\n          element(by.id('link-5')).click();\n          expect(element(by.model('value')).getAttribute('value')).toEqual('5');\n          expect(element(by.id('link-5')).getAttribute('href')).toBe(null);\n        });\n\n        it('should only change url when only ng-href', function() {\n          element(by.model('value')).clear();\n          element(by.model('value')).sendKeys('6');\n          expect(element(by.id('link-6')).getAttribute('href')).toMatch(/\\/6$/);\n\n          element(by.id('link-6')).click();\n\n          // At this point, we navigate away from an Angular page, so we need\n          // to use browser.driver to get the base webdriver.\n          browser.wait(function() {\n            return browser.driver.getCurrentUrl().then(function(url) {\n              return url.match(/\\/6$/);\n            });\n          }, 5000, 'page should navigate to /6');\n        });\n      </file>\n    </example>\n */\n\n/**\n * @ngdoc directive\n * @name ngSrc\n * @restrict A\n * @priority 99\n *\n * @description\n * Using Angular markup like `{{hash}}` in a `src` attribute doesn't\n * work right: The browser will fetch from the URL with the literal\n * text `{{hash}}` until Angular replaces the expression inside\n * `{{hash}}`. The `ngSrc` directive solves this problem.\n *\n * The buggy way to write it:\n * ```html\n * <img src=\"http://www.gravatar.com/avatar/{{hash}}\" alt=\"Description\"/>\n * ```\n *\n * The correct way to write it:\n * ```html\n * <img ng-src=\"http://www.gravatar.com/avatar/{{hash}}\" alt=\"Description\" />\n * ```\n *\n * @element IMG\n * @param {template} ngSrc any string which can contain `{{}}` markup.\n */\n\n/**\n * @ngdoc directive\n * @name ngSrcset\n * @restrict A\n * @priority 99\n *\n * @description\n * Using Angular markup like `{{hash}}` in a `srcset` attribute doesn't\n * work right: The browser will fetch from the URL with the literal\n * text `{{hash}}` until Angular replaces the expression inside\n * `{{hash}}`. The `ngSrcset` directive solves this problem.\n *\n * The buggy way to write it:\n * ```html\n * <img srcset=\"http://www.gravatar.com/avatar/{{hash}} 2x\" alt=\"Description\"/>\n * ```\n *\n * The correct way to write it:\n * ```html\n * <img ng-srcset=\"http://www.gravatar.com/avatar/{{hash}} 2x\" alt=\"Description\" />\n * ```\n *\n * @element IMG\n * @param {template} ngSrcset any string which can contain `{{}}` markup.\n */\n\n/**\n * @ngdoc directive\n * @name ngDisabled\n * @restrict A\n * @priority 100\n *\n * @description\n *\n * This directive sets the `disabled` attribute on the element (typically a form control,\n * e.g. `input`, `button`, `select` etc.) if the\n * {@link guide/expression expression} inside `ngDisabled` evaluates to truthy.\n *\n * A special directive is necessary because we cannot use interpolation inside the `disabled`\n * attribute. See the {@link guide/interpolation interpolation guide} for more info.\n *\n * @example\n    <example name=\"ng-disabled\">\n      <file name=\"index.html\">\n        <label>Click me to toggle: <input type=\"checkbox\" ng-model=\"checked\"></label><br/>\n        <button ng-model=\"button\" ng-disabled=\"checked\">Button</button>\n      </file>\n      <file name=\"protractor.js\" type=\"protractor\">\n        it('should toggle button', function() {\n          expect(element(by.css('button')).getAttribute('disabled')).toBeFalsy();\n          element(by.model('checked')).click();\n          expect(element(by.css('button')).getAttribute('disabled')).toBeTruthy();\n        });\n      </file>\n    </example>\n *\n * @element INPUT\n * @param {expression} ngDisabled If the {@link guide/expression expression} is truthy,\n *     then the `disabled` attribute will be set on the element\n */\n\n\n/**\n * @ngdoc directive\n * @name ngChecked\n * @restrict A\n * @priority 100\n *\n * @description\n * Sets the `checked` attribute on the element, if the expression inside `ngChecked` is truthy.\n *\n * Note that this directive should not be used together with {@link ngModel `ngModel`},\n * as this can lead to unexpected behavior.\n *\n * A special directive is necessary because we cannot use interpolation inside the `checked`\n * attribute. See the {@link guide/interpolation interpolation guide} for more info.\n *\n * @example\n    <example name=\"ng-checked\">\n      <file name=\"index.html\">\n        <label>Check me to check both: <input type=\"checkbox\" ng-model=\"leader\"></label><br/>\n        <input id=\"checkFollower\" type=\"checkbox\" ng-checked=\"leader\" aria-label=\"Follower input\">\n      </file>\n      <file name=\"protractor.js\" type=\"protractor\">\n        it('should check both checkBoxes', function() {\n          expect(element(by.id('checkFollower')).getAttribute('checked')).toBeFalsy();\n          element(by.model('leader')).click();\n          expect(element(by.id('checkFollower')).getAttribute('checked')).toBeTruthy();\n        });\n      </file>\n    </example>\n *\n * @element INPUT\n * @param {expression} ngChecked If the {@link guide/expression expression} is truthy,\n *     then the `checked` attribute will be set on the element\n */\n\n\n/**\n * @ngdoc directive\n * @name ngReadonly\n * @restrict A\n * @priority 100\n *\n * @description\n *\n * Sets the `readonly` attribute on the element, if the expression inside `ngReadonly` is truthy.\n * Note that `readonly` applies only to `input` elements with specific types. [See the input docs on\n * MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) for more information.\n *\n * A special directive is necessary because we cannot use interpolation inside the `readonly`\n * attribute. See the {@link guide/interpolation interpolation guide} for more info.\n *\n * @example\n    <example name=\"ng-readonly\">\n      <file name=\"index.html\">\n        <label>Check me to make text readonly: <input type=\"checkbox\" ng-model=\"checked\"></label><br/>\n        <input type=\"text\" ng-readonly=\"checked\" value=\"I'm Angular\" aria-label=\"Readonly field\" />\n      </file>\n      <file name=\"protractor.js\" type=\"protractor\">\n        it('should toggle readonly attr', function() {\n          expect(element(by.css('[type=\"text\"]')).getAttribute('readonly')).toBeFalsy();\n          element(by.model('checked')).click();\n          expect(element(by.css('[type=\"text\"]')).getAttribute('readonly')).toBeTruthy();\n        });\n      </file>\n    </example>\n *\n * @element INPUT\n * @param {expression} ngReadonly If the {@link guide/expression expression} is truthy,\n *     then special attribute \"readonly\" will be set on the element\n */\n\n\n/**\n * @ngdoc directive\n * @name ngSelected\n * @restrict A\n * @priority 100\n *\n * @description\n *\n * Sets the `selected` attribute on the element, if the expression inside `ngSelected` is truthy.\n *\n * A special directive is necessary because we cannot use interpolation inside the `selected`\n * attribute. See the {@link guide/interpolation interpolation guide} for more info.\n *\n * <div class=\"alert alert-warning\">\n *   **Note:** `ngSelected` does not interact with the `select` and `ngModel` directives, it only\n *   sets the `selected` attribute on the element. If you are using `ngModel` on the select, you\n *   should not use `ngSelected` on the options, as `ngModel` will set the select value and\n *   selected options.\n * </div>\n *\n * @example\n    <example name=\"ng-selected\">\n      <file name=\"index.html\">\n        <label>Check me to select: <input type=\"checkbox\" ng-model=\"selected\"></label><br/>\n        <select aria-label=\"ngSelected demo\">\n          <option>Hello!</option>\n          <option id=\"greet\" ng-selected=\"selected\">Greetings!</option>\n        </select>\n      </file>\n      <file name=\"protractor.js\" type=\"protractor\">\n        it('should select Greetings!', function() {\n          expect(element(by.id('greet')).getAttribute('selected')).toBeFalsy();\n          element(by.model('selected')).click();\n          expect(element(by.id('greet')).getAttribute('selected')).toBeTruthy();\n        });\n      </file>\n    </example>\n *\n * @element OPTION\n * @param {expression} ngSelected If the {@link guide/expression expression} is truthy,\n *     then special attribute \"selected\" will be set on the element\n */\n\n/**\n * @ngdoc directive\n * @name ngOpen\n * @restrict A\n * @priority 100\n *\n * @description\n *\n * Sets the `open` attribute on the element, if the expression inside `ngOpen` is truthy.\n *\n * A special directive is necessary because we cannot use interpolation inside the `open`\n * attribute. See the {@link guide/interpolation interpolation guide} for more info.\n *\n * ## A note about browser compatibility\n *\n * Internet Explorer and Edge do not support the `details` element, it is\n * recommended to use {@link ng.ngShow} and {@link ng.ngHide} instead.\n *\n * @example\n     <example name=\"ng-open\">\n       <file name=\"index.html\">\n         <label>Toggle details: <input type=\"checkbox\" ng-model=\"open\"></label><br/>\n         <details id=\"details\" ng-open=\"open\">\n            <summary>List</summary>\n            <ul>\n              <li>Apple</li>\n              <li>Orange</li>\n              <li>Durian</li>\n            </ul>\n         </details>\n       </file>\n       <file name=\"protractor.js\" type=\"protractor\">\n         it('should toggle open', function() {\n           expect(element(by.id('details')).getAttribute('open')).toBeFalsy();\n           element(by.model('open')).click();\n           expect(element(by.id('details')).getAttribute('open')).toBeTruthy();\n         });\n       </file>\n     </example>\n *\n * @element DETAILS\n * @param {expression} ngOpen If the {@link guide/expression expression} is truthy,\n *     then special attribute \"open\" will be set on the element\n */\n\nvar ngAttributeAliasDirectives = {};\n\n// boolean attrs are evaluated\nforEach(BOOLEAN_ATTR, function(propName, attrName) {\n  // binding to multiple is not supported\n  if (propName === 'multiple') return;\n\n  function defaultLinkFn(scope, element, attr) {\n    scope.$watch(attr[normalized], function ngBooleanAttrWatchAction(value) {\n      attr.$set(attrName, !!value);\n    });\n  }\n\n  var normalized = directiveNormalize('ng-' + attrName);\n  var linkFn = defaultLinkFn;\n\n  if (propName === 'checked') {\n    linkFn = function(scope, element, attr) {\n      // ensuring ngChecked doesn't interfere with ngModel when both are set on the same input\n      if (attr.ngModel !== attr[normalized]) {\n        defaultLinkFn(scope, element, attr);\n      }\n    };\n  }\n\n  ngAttributeAliasDirectives[normalized] = function() {\n    return {\n      restrict: 'A',\n      priority: 100,\n      link: linkFn\n    };\n  };\n});\n\n// aliased input attrs are evaluated\nforEach(ALIASED_ATTR, function(htmlAttr, ngAttr) {\n  ngAttributeAliasDirectives[ngAttr] = function() {\n    return {\n      priority: 100,\n      link: function(scope, element, attr) {\n        //special case ngPattern when a literal regular expression value\n        //is used as the expression (this way we don't have to watch anything).\n        if (ngAttr === 'ngPattern' && attr.ngPattern.charAt(0) === '/') {\n          var match = attr.ngPattern.match(REGEX_STRING_REGEXP);\n          if (match) {\n            attr.$set('ngPattern', new RegExp(match[1], match[2]));\n            return;\n          }\n        }\n\n        scope.$watch(attr[ngAttr], function ngAttrAliasWatchAction(value) {\n          attr.$set(ngAttr, value);\n        });\n      }\n    };\n  };\n});\n\n// ng-src, ng-srcset, ng-href are interpolated\nforEach(['src', 'srcset', 'href'], function(attrName) {\n  var normalized = directiveNormalize('ng-' + attrName);\n  ngAttributeAliasDirectives[normalized] = function() {\n    return {\n      priority: 99, // it needs to run after the attributes are interpolated\n      link: function(scope, element, attr) {\n        var propName = attrName,\n            name = attrName;\n\n        if (attrName === 'href' &&\n            toString.call(element.prop('href')) === '[object SVGAnimatedString]') {\n          name = 'xlinkHref';\n          attr.$attr[name] = 'xlink:href';\n          propName = null;\n        }\n\n        attr.$observe(normalized, function(value) {\n          if (!value) {\n            if (attrName === 'href') {\n              attr.$set(name, null);\n            }\n            return;\n          }\n\n          attr.$set(name, value);\n\n          // Support: IE 9-11 only\n          // On IE, if \"ng:src\" directive declaration is used and \"src\" attribute doesn't exist\n          // then calling element.setAttribute('src', 'foo') doesn't do anything, so we need\n          // to set the property as well to achieve the desired effect.\n          // We use attr[attrName] value since $set can sanitize the url.\n          if (msie && propName) element.prop(propName, attr[name]);\n        });\n      }\n    };\n  };\n});\n\n/* global -nullFormCtrl, -PENDING_CLASS, -SUBMITTED_CLASS\n */\nvar nullFormCtrl = {\n  $addControl: noop,\n  $$renameControl: nullFormRenameControl,\n  $removeControl: noop,\n  $setValidity: noop,\n  $setDirty: noop,\n  $setPristine: noop,\n  $setSubmitted: noop\n},\nPENDING_CLASS = 'ng-pending',\nSUBMITTED_CLASS = 'ng-submitted';\n\nfunction nullFormRenameControl(control, name) {\n  control.$name = name;\n}\n\n/**\n * @ngdoc type\n * @name form.FormController\n *\n * @property {boolean} $pristine True if user has not interacted with the form yet.\n * @property {boolean} $dirty True if user has already interacted with the form.\n * @property {boolean} $valid True if all of the containing forms and controls are valid.\n * @property {boolean} $invalid True if at least one containing control or form is invalid.\n * @property {boolean} $submitted True if user has submitted the form even if its invalid.\n *\n * @property {Object} $pending An object hash, containing references to controls or forms with\n *  pending validators, where:\n *\n *  - keys are validations tokens (error names).\n *  - values are arrays of controls or forms that have a pending validator for the given error name.\n *\n * See {@link form.FormController#$error $error} for a list of built-in validation tokens.\n *\n * @property {Object} $error An object hash, containing references to controls or forms with failing\n *  validators, where:\n *\n *  - keys are validation tokens (error names),\n *  - values are arrays of controls or forms that have a failing validator for the given error name.\n *\n *  Built-in validation tokens:\n *  - `email`\n *  - `max`\n *  - `maxlength`\n *  - `min`\n *  - `minlength`\n *  - `number`\n *  - `pattern`\n *  - `required`\n *  - `url`\n *  - `date`\n *  - `datetimelocal`\n *  - `time`\n *  - `week`\n *  - `month`\n *\n * @description\n * `FormController` keeps track of all its controls and nested forms as well as the state of them,\n * such as being valid/invalid or dirty/pristine.\n *\n * Each {@link ng.directive:form form} directive creates an instance\n * of `FormController`.\n *\n */\n//asks for $scope to fool the BC controller module\nFormController.$inject = ['$element', '$attrs', '$scope', '$animate', '$interpolate'];\nfunction FormController($element, $attrs, $scope, $animate, $interpolate) {\n  this.$$controls = [];\n\n  // init state\n  this.$error = {};\n  this.$$success = {};\n  this.$pending = undefined;\n  this.$name = $interpolate($attrs.name || $attrs.ngForm || '')($scope);\n  this.$dirty = false;\n  this.$pristine = true;\n  this.$valid = true;\n  this.$invalid = false;\n  this.$submitted = false;\n  this.$$parentForm = nullFormCtrl;\n\n  this.$$element = $element;\n  this.$$animate = $animate;\n\n  setupValidity(this);\n}\n\nFormController.prototype = {\n  /**\n   * @ngdoc method\n   * @name form.FormController#$rollbackViewValue\n   *\n   * @description\n   * Rollback all form controls pending updates to the `$modelValue`.\n   *\n   * Updates may be pending by a debounced event or because the input is waiting for a some future\n   * event defined in `ng-model-options`. This method is typically needed by the reset button of\n   * a form that uses `ng-model-options` to pend updates.\n   */\n  $rollbackViewValue: function() {\n    forEach(this.$$controls, function(control) {\n      control.$rollbackViewValue();\n    });\n  },\n\n  /**\n   * @ngdoc method\n   * @name form.FormController#$commitViewValue\n   *\n   * @description\n   * Commit all form controls pending updates to the `$modelValue`.\n   *\n   * Updates may be pending by a debounced event or because the input is waiting for a some future\n   * event defined in `ng-model-options`. This method is rarely needed as `NgModelController`\n   * usually handles calling this in response to input events.\n   */\n  $commitViewValue: function() {\n    forEach(this.$$controls, function(control) {\n      control.$commitViewValue();\n    });\n  },\n\n  /**\n   * @ngdoc method\n   * @name form.FormController#$addControl\n   * @param {object} control control object, either a {@link form.FormController} or an\n   * {@link ngModel.NgModelController}\n   *\n   * @description\n   * Register a control with the form. Input elements using ngModelController do this automatically\n   * when they are linked.\n   *\n   * Note that the current state of the control will not be reflected on the new parent form. This\n   * is not an issue with normal use, as freshly compiled and linked controls are in a `$pristine`\n   * state.\n   *\n   * However, if the method is used programmatically, for example by adding dynamically created controls,\n   * or controls that have been previously removed without destroying their corresponding DOM element,\n   * it's the developers responsibility to make sure the current state propagates to the parent form.\n   *\n   * For example, if an input control is added that is already `$dirty` and has `$error` properties,\n   * calling `$setDirty()` and `$validate()` afterwards will propagate the state to the parent form.\n   */\n  $addControl: function(control) {\n    // Breaking change - before, inputs whose name was \"hasOwnProperty\" were quietly ignored\n    // and not added to the scope.  Now we throw an error.\n    assertNotHasOwnProperty(control.$name, 'input');\n    this.$$controls.push(control);\n\n    if (control.$name) {\n      this[control.$name] = control;\n    }\n\n    control.$$parentForm = this;\n  },\n\n  // Private API: rename a form control\n  $$renameControl: function(control, newName) {\n    var oldName = control.$name;\n\n    if (this[oldName] === control) {\n      delete this[oldName];\n    }\n    this[newName] = control;\n    control.$name = newName;\n  },\n\n  /**\n   * @ngdoc method\n   * @name form.FormController#$removeControl\n   * @param {object} control control object, either a {@link form.FormController} or an\n   * {@link ngModel.NgModelController}\n   *\n   * @description\n   * Deregister a control from the form.\n   *\n   * Input elements using ngModelController do this automatically when they are destroyed.\n   *\n   * Note that only the removed control's validation state (`$errors`etc.) will be removed from the\n   * form. `$dirty`, `$submitted` states will not be changed, because the expected behavior can be\n   * different from case to case. For example, removing the only `$dirty` control from a form may or\n   * may not mean that the form is still `$dirty`.\n   */\n  $removeControl: function(control) {\n    if (control.$name && this[control.$name] === control) {\n      delete this[control.$name];\n    }\n    forEach(this.$pending, function(value, name) {\n      // eslint-disable-next-line no-invalid-this\n      this.$setValidity(name, null, control);\n    }, this);\n    forEach(this.$error, function(value, name) {\n      // eslint-disable-next-line no-invalid-this\n      this.$setValidity(name, null, control);\n    }, this);\n    forEach(this.$$success, function(value, name) {\n      // eslint-disable-next-line no-invalid-this\n      this.$setValidity(name, null, control);\n    }, this);\n\n    arrayRemove(this.$$controls, control);\n    control.$$parentForm = nullFormCtrl;\n  },\n\n  /**\n   * @ngdoc method\n   * @name form.FormController#$setDirty\n   *\n   * @description\n   * Sets the form to a dirty state.\n   *\n   * This method can be called to add the 'ng-dirty' class and set the form to a dirty\n   * state (ng-dirty class). This method will also propagate to parent forms.\n   */\n  $setDirty: function() {\n    this.$$animate.removeClass(this.$$element, PRISTINE_CLASS);\n    this.$$animate.addClass(this.$$element, DIRTY_CLASS);\n    this.$dirty = true;\n    this.$pristine = false;\n    this.$$parentForm.$setDirty();\n  },\n\n  /**\n   * @ngdoc method\n   * @name form.FormController#$setPristine\n   *\n   * @description\n   * Sets the form to its pristine state.\n   *\n   * This method sets the form's `$pristine` state to true, the `$dirty` state to false, removes\n   * the `ng-dirty` class and adds the `ng-pristine` class. Additionally, it sets the `$submitted`\n   * state to false.\n   *\n   * This method will also propagate to all the controls contained in this form.\n   *\n   * Setting a form back to a pristine state is often useful when we want to 'reuse' a form after\n   * saving or resetting it.\n   */\n  $setPristine: function() {\n    this.$$animate.setClass(this.$$element, PRISTINE_CLASS, DIRTY_CLASS + ' ' + SUBMITTED_CLASS);\n    this.$dirty = false;\n    this.$pristine = true;\n    this.$submitted = false;\n    forEach(this.$$controls, function(control) {\n      control.$setPristine();\n    });\n  },\n\n  /**\n   * @ngdoc method\n   * @name form.FormController#$setUntouched\n   *\n   * @description\n   * Sets the form to its untouched state.\n   *\n   * This method can be called to remove the 'ng-touched' class and set the form controls to their\n   * untouched state (ng-untouched class).\n   *\n   * Setting a form controls back to their untouched state is often useful when setting the form\n   * back to its pristine state.\n   */\n  $setUntouched: function() {\n    forEach(this.$$controls, function(control) {\n      control.$setUntouched();\n    });\n  },\n\n  /**\n   * @ngdoc method\n   * @name form.FormController#$setSubmitted\n   *\n   * @description\n   * Sets the form to its submitted state.\n   */\n  $setSubmitted: function() {\n    this.$$animate.addClass(this.$$element, SUBMITTED_CLASS);\n    this.$submitted = true;\n    this.$$parentForm.$setSubmitted();\n  }\n};\n\n/**\n * @ngdoc method\n * @name form.FormController#$setValidity\n *\n * @description\n * Change the validity state of the form, and notify the parent form (if any).\n *\n * Application developers will rarely need to call this method directly. It is used internally, by\n * {@link ngModel.NgModelController#$setValidity NgModelController.$setValidity()}, to propagate a\n * control's validity state to the parent `FormController`.\n *\n * @param {string} validationErrorKey Name of the validator. The `validationErrorKey` will be\n *        assigned to either `$error[validationErrorKey]` or `$pending[validationErrorKey]` (for\n *        unfulfilled `$asyncValidators`), so that it is available for data-binding. The\n *        `validationErrorKey` should be in camelCase and will get converted into dash-case for\n *        class name. Example: `myError` will result in `ng-valid-my-error` and\n *        `ng-invalid-my-error` classes and can be bound to as `{{ someForm.$error.myError }}`.\n * @param {boolean} isValid Whether the current state is valid (true), invalid (false), pending\n *        (undefined),  or skipped (null). Pending is used for unfulfilled `$asyncValidators`.\n *        Skipped is used by AngularJS when validators do not run because of parse errors and when\n *        `$asyncValidators` do not run because any of the `$validators` failed.\n * @param {NgModelController | FormController} controller - The controller whose validity state is\n *        triggering the change.\n */\naddSetValidityMethod({\n  clazz: FormController,\n  set: function(object, property, controller) {\n    var list = object[property];\n    if (!list) {\n      object[property] = [controller];\n    } else {\n      var index = list.indexOf(controller);\n      if (index === -1) {\n        list.push(controller);\n      }\n    }\n  },\n  unset: function(object, property, controller) {\n    var list = object[property];\n    if (!list) {\n      return;\n    }\n    arrayRemove(list, controller);\n    if (list.length === 0) {\n      delete object[property];\n    }\n  }\n});\n\n/**\n * @ngdoc directive\n * @name ngForm\n * @restrict EAC\n *\n * @description\n * Nestable alias of {@link ng.directive:form `form`} directive. HTML\n * does not allow nesting of form elements. It is useful to nest forms, for example if the validity of a\n * sub-group of controls needs to be determined.\n *\n * Note: the purpose of `ngForm` is to group controls,\n * but not to be a replacement for the `<form>` tag with all of its capabilities\n * (e.g. posting to the server, ...).\n *\n * @param {string=} ngForm|name Name of the form. If specified, the form controller will be published into\n *                       related scope, under this name.\n *\n */\n\n /**\n * @ngdoc directive\n * @name form\n * @restrict E\n *\n * @description\n * Directive that instantiates\n * {@link form.FormController FormController}.\n *\n * If the `name` attribute is specified, the form controller is published onto the current scope under\n * this name.\n *\n * ## Alias: {@link ng.directive:ngForm `ngForm`}\n *\n * In Angular, forms can be nested. This means that the outer form is valid when all of the child\n * forms are valid as well. However, browsers do not allow nesting of `<form>` elements, so\n * Angular provides the {@link ng.directive:ngForm `ngForm`} directive, which behaves identically to\n * `form` but can be nested. Nested forms can be useful, for example, if the validity of a sub-group\n * of controls needs to be determined.\n *\n * ## CSS classes\n *  - `ng-valid` is set if the form is valid.\n *  - `ng-invalid` is set if the form is invalid.\n *  - `ng-pending` is set if the form is pending.\n *  - `ng-pristine` is set if the form is pristine.\n *  - `ng-dirty` is set if the form is dirty.\n *  - `ng-submitted` is set if the form was submitted.\n *\n * Keep in mind that ngAnimate can detect each of these classes when added and removed.\n *\n *\n * ## Submitting a form and preventing the default action\n *\n * Since the role of forms in client-side Angular applications is different than in classical\n * roundtrip apps, it is desirable for the browser not to translate the form submission into a full\n * page reload that sends the data to the server. Instead some javascript logic should be triggered\n * to handle the form submission in an application-specific way.\n *\n * For this reason, Angular prevents the default action (form submission to the server) unless the\n * `<form>` element has an `action` attribute specified.\n *\n * You can use one of the following two ways to specify what javascript method should be called when\n * a form is submitted:\n *\n * - {@link ng.directive:ngSubmit ngSubmit} directive on the form element\n * - {@link ng.directive:ngClick ngClick} directive on the first\n  *  button or input field of type submit (input[type=submit])\n *\n * To prevent double execution of the handler, use only one of the {@link ng.directive:ngSubmit ngSubmit}\n * or {@link ng.directive:ngClick ngClick} directives.\n * This is because of the following form submission rules in the HTML specification:\n *\n * - If a form has only one input field then hitting enter in this field triggers form submit\n * (`ngSubmit`)\n * - if a form has 2+ input fields and no buttons or input[type=submit] then hitting enter\n * doesn't trigger submit\n * - if a form has one or more input fields and one or more buttons or input[type=submit] then\n * hitting enter in any of the input fields will trigger the click handler on the *first* button or\n * input[type=submit] (`ngClick`) *and* a submit handler on the enclosing form (`ngSubmit`)\n *\n * Any pending `ngModelOptions` changes will take place immediately when an enclosing form is\n * submitted. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`\n * to have access to the updated model.\n *\n * @animations\n * Animations in ngForm are triggered when any of the associated CSS classes are added and removed.\n * These classes are: `.ng-pristine`, `.ng-dirty`, `.ng-invalid` and `.ng-valid` as well as any\n * other validations that are performed within the form. Animations in ngForm are similar to how\n * they work in ngClass and animations can be hooked into using CSS transitions, keyframes as well\n * as JS animations.\n *\n * The following example shows a simple way to utilize CSS transitions to style a form element\n * that has been rendered as invalid after it has been validated:\n *\n * <pre>\n * //be sure to include ngAnimate as a module to hook into more\n * //advanced animations\n * .my-form {\n *   transition:0.5s linear all;\n *   background: white;\n * }\n * .my-form.ng-invalid {\n *   background: red;\n *   color:white;\n * }\n * </pre>\n *\n * @example\n    <example name=\"ng-form\" deps=\"angular-animate.js\" animations=\"true\" fixBase=\"true\" module=\"formExample\">\n      <file name=\"index.html\">\n       <script>\n         angular.module('formExample', [])\n           .controller('FormController', ['$scope', function($scope) {\n             $scope.userType = 'guest';\n           }]);\n       </script>\n       <style>\n        .my-form {\n          transition:all linear 0.5s;\n          background: transparent;\n        }\n        .my-form.ng-invalid {\n          background: red;\n        }\n       </style>\n       <form name=\"myForm\" ng-controller=\"FormController\" class=\"my-form\">\n         userType: <input name=\"input\" ng-model=\"userType\" required>\n         <span class=\"error\" ng-show=\"myForm.input.$error.required\">Required!</span><br>\n         <code>userType = {{userType}}</code><br>\n         <code>myForm.input.$valid = {{myForm.input.$valid}}</code><br>\n         <code>myForm.input.$error = {{myForm.input.$error}}</code><br>\n         <code>myForm.$valid = {{myForm.$valid}}</code><br>\n         <code>myForm.$error.required = {{!!myForm.$error.required}}</code><br>\n        </form>\n      </file>\n      <file name=\"protractor.js\" type=\"protractor\">\n        it('should initialize to model', function() {\n          var userType = element(by.binding('userType'));\n          var valid = element(by.binding('myForm.input.$valid'));\n\n          expect(userType.getText()).toContain('guest');\n          expect(valid.getText()).toContain('true');\n        });\n\n        it('should be invalid if empty', function() {\n          var userType = element(by.binding('userType'));\n          var valid = element(by.binding('myForm.input.$valid'));\n          var userInput = element(by.model('userType'));\n\n          userInput.clear();\n          userInput.sendKeys('');\n\n          expect(userType.getText()).toEqual('userType =');\n          expect(valid.getText()).toContain('false');\n        });\n      </file>\n    </example>\n *\n * @param {string=} name Name of the form. If specified, the form controller will be published into\n *                       related scope, under this name.\n */\nvar formDirectiveFactory = function(isNgForm) {\n  return ['$timeout', '$parse', function($timeout, $parse) {\n    var formDirective = {\n      name: 'form',\n      restrict: isNgForm ? 'EAC' : 'E',\n      require: ['form', '^^?form'], //first is the form's own ctrl, second is an optional parent form\n      controller: FormController,\n      compile: function ngFormCompile(formElement, attr) {\n        // Setup initial state of the control\n        formElement.addClass(PRISTINE_CLASS).addClass(VALID_CLASS);\n\n        var nameAttr = attr.name ? 'name' : (isNgForm && attr.ngForm ? 'ngForm' : false);\n\n        return {\n          pre: function ngFormPreLink(scope, formElement, attr, ctrls) {\n            var controller = ctrls[0];\n\n            // if `action` attr is not present on the form, prevent the default action (submission)\n            if (!('action' in attr)) {\n              // we can't use jq events because if a form is destroyed during submission the default\n              // action is not prevented. see #1238\n              //\n              // IE 9 is not affected because it doesn't fire a submit event and try to do a full\n              // page reload if the form was destroyed by submission of the form via a click handler\n              // on a button in the form. Looks like an IE9 specific bug.\n              var handleFormSubmission = function(event) {\n                scope.$apply(function() {\n                  controller.$commitViewValue();\n                  controller.$setSubmitted();\n                });\n\n                event.preventDefault();\n              };\n\n              formElement[0].addEventListener('submit', handleFormSubmission);\n\n              // unregister the preventDefault listener so that we don't not leak memory but in a\n              // way that will achieve the prevention of the default action.\n              formElement.on('$destroy', function() {\n                $timeout(function() {\n                  formElement[0].removeEventListener('submit', handleFormSubmission);\n                }, 0, false);\n              });\n            }\n\n            var parentFormCtrl = ctrls[1] || controller.$$parentForm;\n            parentFormCtrl.$addControl(controller);\n\n            var setter = nameAttr ? getSetter(controller.$name) : noop;\n\n            if (nameAttr) {\n              setter(scope, controller);\n              attr.$observe(nameAttr, function(newValue) {\n                if (controller.$name === newValue) return;\n                setter(scope, undefined);\n                controller.$$parentForm.$$renameControl(controller, newValue);\n                setter = getSetter(controller.$name);\n                setter(scope, controller);\n              });\n            }\n            formElement.on('$destroy', function() {\n              controller.$$parentForm.$removeControl(controller);\n              setter(scope, undefined);\n              extend(controller, nullFormCtrl); //stop propagating child destruction handlers upwards\n            });\n          }\n        };\n      }\n    };\n\n    return formDirective;\n\n    function getSetter(expression) {\n      if (expression === '') {\n        //create an assignable expression, so forms with an empty name can be renamed later\n        return $parse('this[\"\"]').assign;\n      }\n      return $parse(expression).assign || noop;\n    }\n  }];\n};\n\nvar formDirective = formDirectiveFactory();\nvar ngFormDirective = formDirectiveFactory(true);\n\n\n\n// helper methods\nfunction setupValidity(instance) {\n  instance.$$classCache = {};\n  instance.$$classCache[INVALID_CLASS] = !(instance.$$classCache[VALID_CLASS] = instance.$$element.hasClass(VALID_CLASS));\n}\nfunction addSetValidityMethod(context) {\n  var clazz = context.clazz,\n      set = context.set,\n      unset = context.unset;\n\n  clazz.prototype.$setValidity = function(validationErrorKey, state, controller) {\n    if (isUndefined(state)) {\n      createAndSet(this, '$pending', validationErrorKey, controller);\n    } else {\n      unsetAndCleanup(this, '$pending', validationErrorKey, controller);\n    }\n    if (!isBoolean(state)) {\n      unset(this.$error, validationErrorKey, controller);\n      unset(this.$$success, validationErrorKey, controller);\n    } else {\n      if (state) {\n        unset(this.$error, validationErrorKey, controller);\n        set(this.$$success, validationErrorKey, controller);\n      } else {\n        set(this.$error, validationErrorKey, controller);\n        unset(this.$$success, validationErrorKey, controller);\n      }\n    }\n    if (this.$pending) {\n      cachedToggleClass(this, PENDING_CLASS, true);\n      this.$valid = this.$invalid = undefined;\n      toggleValidationCss(this, '', null);\n    } else {\n      cachedToggleClass(this, PENDING_CLASS, false);\n      this.$valid = isObjectEmpty(this.$error);\n      this.$invalid = !this.$valid;\n      toggleValidationCss(this, '', this.$valid);\n    }\n\n    // re-read the state as the set/unset methods could have\n    // combined state in this.$error[validationError] (used for forms),\n    // where setting/unsetting only increments/decrements the value,\n    // and does not replace it.\n    var combinedState;\n    if (this.$pending && this.$pending[validationErrorKey]) {\n      combinedState = undefined;\n    } else if (this.$error[validationErrorKey]) {\n      combinedState = false;\n    } else if (this.$$success[validationErrorKey]) {\n      combinedState = true;\n    } else {\n      combinedState = null;\n    }\n\n    toggleValidationCss(this, validationErrorKey, combinedState);\n    this.$$parentForm.$setValidity(validationErrorKey, combinedState, this);\n  };\n\n  function createAndSet(ctrl, name, value, controller) {\n    if (!ctrl[name]) {\n      ctrl[name] = {};\n    }\n    set(ctrl[name], value, controller);\n  }\n\n  function unsetAndCleanup(ctrl, name, value, controller) {\n    if (ctrl[name]) {\n      unset(ctrl[name], value, controller);\n    }\n    if (isObjectEmpty(ctrl[name])) {\n      ctrl[name] = undefined;\n    }\n  }\n\n  function cachedToggleClass(ctrl, className, switchValue) {\n    if (switchValue && !ctrl.$$classCache[className]) {\n      ctrl.$$animate.addClass(ctrl.$$element, className);\n      ctrl.$$classCache[className] = true;\n    } else if (!switchValue && ctrl.$$classCache[className]) {\n      ctrl.$$animate.removeClass(ctrl.$$element, className);\n      ctrl.$$classCache[className] = false;\n    }\n  }\n\n  function toggleValidationCss(ctrl, validationErrorKey, isValid) {\n    validationErrorKey = validationErrorKey ? '-' + snake_case(validationErrorKey, '-') : '';\n\n    cachedToggleClass(ctrl, VALID_CLASS + validationErrorKey, isValid === true);\n    cachedToggleClass(ctrl, INVALID_CLASS + validationErrorKey, isValid === false);\n  }\n}\n\nfunction isObjectEmpty(obj) {\n  if (obj) {\n    for (var prop in obj) {\n      if (obj.hasOwnProperty(prop)) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/* global\n  VALID_CLASS: false,\n  INVALID_CLASS: false,\n  PRISTINE_CLASS: false,\n  DIRTY_CLASS: false,\n  ngModelMinErr: false\n*/\n\n// Regex code was initially obtained from SO prior to modification: https://stackoverflow.com/questions/3143070/javascript-regex-iso-datetime#answer-3143231\nvar ISO_DATE_REGEXP = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/;\n// See valid URLs in RFC3987 (http://tools.ietf.org/html/rfc3987)\n// Note: We are being more lenient, because browsers are too.\n//   1. Scheme\n//   2. Slashes\n//   3. Username\n//   4. Password\n//   5. Hostname\n//   6. Port\n//   7. Path\n//   8. Query\n//   9. Fragment\n//                 1111111111111111 222   333333    44444        55555555555555555555555     666     77777777     8888888     999\nvar URL_REGEXP = /^[a-z][a-z\\d.+-]*:\\/*(?:[^:@]+(?::[^@]+)?@)?(?:[^\\s:/?#]+|\\[[a-f\\d:]+])(?::\\d+)?(?:\\/[^?#]*)?(?:\\?[^#]*)?(?:#.*)?$/i;\n// eslint-disable-next-line max-len\nvar EMAIL_REGEXP = /^(?=.{1,254}$)(?=.{1,64}@)[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+(\\.[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/;\nvar NUMBER_REGEXP = /^\\s*(-|\\+)?(\\d+|(\\d*(\\.\\d*)))([eE][+-]?\\d+)?\\s*$/;\nvar DATE_REGEXP = /^(\\d{4,})-(\\d{2})-(\\d{2})$/;\nvar DATETIMELOCAL_REGEXP = /^(\\d{4,})-(\\d\\d)-(\\d\\d)T(\\d\\d):(\\d\\d)(?::(\\d\\d)(\\.\\d{1,3})?)?$/;\nvar WEEK_REGEXP = /^(\\d{4,})-W(\\d\\d)$/;\nvar MONTH_REGEXP = /^(\\d{4,})-(\\d\\d)$/;\nvar TIME_REGEXP = /^(\\d\\d):(\\d\\d)(?::(\\d\\d)(\\.\\d{1,3})?)?$/;\n\nvar PARTIAL_VALIDATION_EVENTS = 'keydown wheel mousedown';\nvar PARTIAL_VALIDATION_TYPES = createMap();\nforEach('date,datetime-local,month,time,week'.split(','), function(type) {\n  PARTIAL_VALIDATION_TYPES[type] = true;\n});\n\nvar inputType = {\n\n  /**\n   * @ngdoc input\n   * @name input[text]\n   *\n   * @description\n   * Standard HTML text input with angular data binding, inherited by most of the `input` elements.\n   *\n   *\n   * @param {string} ngModel Assignable angular expression to data-bind to.\n   * @param {string=} name Property name of the form under which the control is published.\n   * @param {string=} required Adds `required` validation error key if the value is not entered.\n   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to\n   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of\n   *    `required` when you want to data-bind to the `required` attribute.\n   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than\n   *    minlength.\n   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than\n   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of\n   *    any length.\n   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string\n   *    that contains the regular expression body that will be converted to a regular expression\n   *    as in the ngPattern directive.\n   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}\n   *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.\n   *    If the expression evaluates to a RegExp object, then this is used directly.\n   *    If the expression evaluates to a string, then it will be converted to a RegExp\n   *    after wrapping it in `^` and `$` characters. For instance, `\"abc\"` will be converted to\n   *    `new RegExp('^abc$')`.<br />\n   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to\n   *    start at the index of the last search's match, thus not taking the whole input value into\n   *    account.\n   * @param {string=} ngChange Angular expression to be executed when input changes due to user\n   *    interaction with the input element.\n   * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.\n   *    This parameter is ignored for input[type=password] controls, which will never trim the\n   *    input.\n   *\n   * @example\n      <example name=\"text-input-directive\" module=\"textInputExample\">\n        <file name=\"index.html\">\n         <script>\n           angular.module('textInputExample', [])\n             .controller('ExampleController', ['$scope', function($scope) {\n               $scope.example = {\n                 text: 'guest',\n                 word: /^\\s*\\w*\\s*$/\n               };\n             }]);\n         </script>\n         <form name=\"myForm\" ng-controller=\"ExampleController\">\n           <label>Single word:\n             <input type=\"text\" name=\"input\" ng-model=\"example.text\"\n                    ng-pattern=\"example.word\" required ng-trim=\"false\">\n           </label>\n           <div role=\"alert\">\n             <span class=\"error\" ng-show=\"myForm.input.$error.required\">\n               Required!</span>\n             <span class=\"error\" ng-show=\"myForm.input.$error.pattern\">\n               Single word only!</span>\n           </div>\n           <code>text = {{example.text}}</code><br/>\n           <code>myForm.input.$valid = {{myForm.input.$valid}}</code><br/>\n           <code>myForm.input.$error = {{myForm.input.$error}}</code><br/>\n           <code>myForm.$valid = {{myForm.$valid}}</code><br/>\n           <code>myForm.$error.required = {{!!myForm.$error.required}}</code><br/>\n          </form>\n        </file>\n        <file name=\"protractor.js\" type=\"protractor\">\n          var text = element(by.binding('example.text'));\n          var valid = element(by.binding('myForm.input.$valid'));\n          var input = element(by.model('example.text'));\n\n          it('should initialize to model', function() {\n            expect(text.getText()).toContain('guest');\n            expect(valid.getText()).toContain('true');\n          });\n\n          it('should be invalid if empty', function() {\n            input.clear();\n            input.sendKeys('');\n\n            expect(text.getText()).toEqual('text =');\n            expect(valid.getText()).toContain('false');\n          });\n\n          it('should be invalid if multi word', function() {\n            input.clear();\n            input.sendKeys('hello world');\n\n            expect(valid.getText()).toContain('false');\n          });\n        </file>\n      </example>\n   */\n  'text': textInputType,\n\n    /**\n     * @ngdoc input\n     * @name input[date]\n     *\n     * @description\n     * Input with date validation and transformation. In browsers that do not yet support\n     * the HTML5 date input, a text element will be used. In that case, text must be entered in a valid ISO-8601\n     * date format (yyyy-MM-dd), for example: `2009-01-06`. Since many\n     * modern browsers do not yet support this input type, it is important to provide cues to users on the\n     * expected input format via a placeholder or label.\n     *\n     * The model must always be a Date object, otherwise Angular will throw an error.\n     * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.\n     *\n     * The timezone to be used to read/write the `Date` instance in the model can be defined using\n     * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.\n     *\n     * @param {string} ngModel Assignable angular expression to data-bind to.\n     * @param {string=} name Property name of the form under which the control is published.\n     * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be a\n     *   valid ISO date string (yyyy-MM-dd). You can also use interpolation inside this attribute\n     *   (e.g. `min=\"{{minDate | date:'yyyy-MM-dd'}}\"`). Note that `min` will also add native HTML5\n     *   constraint validation.\n     * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must be\n     *   a valid ISO date string (yyyy-MM-dd). You can also use interpolation inside this attribute\n     *   (e.g. `max=\"{{maxDate | date:'yyyy-MM-dd'}}\"`). Note that `max` will also add native HTML5\n     *   constraint validation.\n     * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO date string\n     *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.\n     * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO date string\n     *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.\n     * @param {string=} required Sets `required` validation error key if the value is not entered.\n     * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to\n     *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of\n     *    `required` when you want to data-bind to the `required` attribute.\n     * @param {string=} ngChange Angular expression to be executed when input changes due to user\n     *    interaction with the input element.\n     *\n     * @example\n     <example name=\"date-input-directive\" module=\"dateInputExample\">\n     <file name=\"index.html\">\n       <script>\n          angular.module('dateInputExample', [])\n            .controller('DateController', ['$scope', function($scope) {\n              $scope.example = {\n                value: new Date(2013, 9, 22)\n              };\n            }]);\n       </script>\n       <form name=\"myForm\" ng-controller=\"DateController as dateCtrl\">\n          <label for=\"exampleInput\">Pick a date in 2013:</label>\n          <input type=\"date\" id=\"exampleInput\" name=\"input\" ng-model=\"example.value\"\n              placeholder=\"yyyy-MM-dd\" min=\"2013-01-01\" max=\"2013-12-31\" required />\n          <div role=\"alert\">\n            <span class=\"error\" ng-show=\"myForm.input.$error.required\">\n                Required!</span>\n            <span class=\"error\" ng-show=\"myForm.input.$error.date\">\n                Not a valid date!</span>\n           </div>\n           <tt>value = {{example.value | date: \"yyyy-MM-dd\"}}</tt><br/>\n           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>\n           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>\n           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>\n           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>\n       </form>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n        var value = element(by.binding('example.value | date: \"yyyy-MM-dd\"'));\n        var valid = element(by.binding('myForm.input.$valid'));\n\n        // currently protractor/webdriver does not support\n        // sending keys to all known HTML5 input controls\n        // for various browsers (see https://github.com/angular/protractor/issues/562).\n        function setInput(val) {\n          // set the value of the element and force validation.\n          var scr = \"var ipt = document.getElementById('exampleInput'); \" +\n          \"ipt.value = '\" + val + \"';\" +\n          \"angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('\" + val + \"'); });\";\n          browser.executeScript(scr);\n        }\n\n        it('should initialize to model', function() {\n          expect(value.getText()).toContain('2013-10-22');\n          expect(valid.getText()).toContain('myForm.input.$valid = true');\n        });\n\n        it('should be invalid if empty', function() {\n          setInput('');\n          expect(value.getText()).toEqual('value =');\n          expect(valid.getText()).toContain('myForm.input.$valid = false');\n        });\n\n        it('should be invalid if over max', function() {\n          setInput('2015-01-01');\n          expect(value.getText()).toContain('');\n          expect(valid.getText()).toContain('myForm.input.$valid = false');\n        });\n     </file>\n     </example>\n     */\n  'date': createDateInputType('date', DATE_REGEXP,\n         createDateParser(DATE_REGEXP, ['yyyy', 'MM', 'dd']),\n         'yyyy-MM-dd'),\n\n   /**\n    * @ngdoc input\n    * @name input[datetime-local]\n    *\n    * @description\n    * Input with datetime validation and transformation. In browsers that do not yet support\n    * the HTML5 date input, a text element will be used. In that case, the text must be entered in a valid ISO-8601\n    * local datetime format (yyyy-MM-ddTHH:mm:ss), for example: `2010-12-28T14:57:00`.\n    *\n    * The model must always be a Date object, otherwise Angular will throw an error.\n    * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.\n    *\n    * The timezone to be used to read/write the `Date` instance in the model can be defined using\n    * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.\n    *\n    * @param {string} ngModel Assignable angular expression to data-bind to.\n    * @param {string=} name Property name of the form under which the control is published.\n    * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.\n    *   This must be a valid ISO datetime format (yyyy-MM-ddTHH:mm:ss). You can also use interpolation\n    *   inside this attribute (e.g. `min=\"{{minDatetimeLocal | date:'yyyy-MM-ddTHH:mm:ss'}}\"`).\n    *   Note that `min` will also add native HTML5 constraint validation.\n    * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.\n    *   This must be a valid ISO datetime format (yyyy-MM-ddTHH:mm:ss). You can also use interpolation\n    *   inside this attribute (e.g. `max=\"{{maxDatetimeLocal | date:'yyyy-MM-ddTHH:mm:ss'}}\"`).\n    *   Note that `max` will also add native HTML5 constraint validation.\n    * @param {(date|string)=} ngMin Sets the `min` validation error key to the Date / ISO datetime string\n    *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.\n    * @param {(date|string)=} ngMax Sets the `max` validation error key to the Date / ISO datetime string\n    *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.\n    * @param {string=} required Sets `required` validation error key if the value is not entered.\n    * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to\n    *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of\n    *    `required` when you want to data-bind to the `required` attribute.\n    * @param {string=} ngChange Angular expression to be executed when input changes due to user\n    *    interaction with the input element.\n    *\n    * @example\n    <example name=\"datetimelocal-input-directive\" module=\"dateExample\">\n    <file name=\"index.html\">\n      <script>\n        angular.module('dateExample', [])\n          .controller('DateController', ['$scope', function($scope) {\n            $scope.example = {\n              value: new Date(2010, 11, 28, 14, 57)\n            };\n          }]);\n      </script>\n      <form name=\"myForm\" ng-controller=\"DateController as dateCtrl\">\n        <label for=\"exampleInput\">Pick a date between in 2013:</label>\n        <input type=\"datetime-local\" id=\"exampleInput\" name=\"input\" ng-model=\"example.value\"\n            placeholder=\"yyyy-MM-ddTHH:mm:ss\" min=\"2001-01-01T00:00:00\" max=\"2013-12-31T00:00:00\" required />\n        <div role=\"alert\">\n          <span class=\"error\" ng-show=\"myForm.input.$error.required\">\n              Required!</span>\n          <span class=\"error\" ng-show=\"myForm.input.$error.datetimelocal\">\n              Not a valid date!</span>\n        </div>\n        <tt>value = {{example.value | date: \"yyyy-MM-ddTHH:mm:ss\"}}</tt><br/>\n        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>\n        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>\n        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>\n        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>\n      </form>\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n      var value = element(by.binding('example.value | date: \"yyyy-MM-ddTHH:mm:ss\"'));\n      var valid = element(by.binding('myForm.input.$valid'));\n\n      // currently protractor/webdriver does not support\n      // sending keys to all known HTML5 input controls\n      // for various browsers (https://github.com/angular/protractor/issues/562).\n      function setInput(val) {\n        // set the value of the element and force validation.\n        var scr = \"var ipt = document.getElementById('exampleInput'); \" +\n        \"ipt.value = '\" + val + \"';\" +\n        \"angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('\" + val + \"'); });\";\n        browser.executeScript(scr);\n      }\n\n      it('should initialize to model', function() {\n        expect(value.getText()).toContain('2010-12-28T14:57:00');\n        expect(valid.getText()).toContain('myForm.input.$valid = true');\n      });\n\n      it('should be invalid if empty', function() {\n        setInput('');\n        expect(value.getText()).toEqual('value =');\n        expect(valid.getText()).toContain('myForm.input.$valid = false');\n      });\n\n      it('should be invalid if over max', function() {\n        setInput('2015-01-01T23:59:00');\n        expect(value.getText()).toContain('');\n        expect(valid.getText()).toContain('myForm.input.$valid = false');\n      });\n    </file>\n    </example>\n    */\n  'datetime-local': createDateInputType('datetimelocal', DATETIMELOCAL_REGEXP,\n      createDateParser(DATETIMELOCAL_REGEXP, ['yyyy', 'MM', 'dd', 'HH', 'mm', 'ss', 'sss']),\n      'yyyy-MM-ddTHH:mm:ss.sss'),\n\n  /**\n   * @ngdoc input\n   * @name input[time]\n   *\n   * @description\n   * Input with time validation and transformation. In browsers that do not yet support\n   * the HTML5 time input, a text element will be used. In that case, the text must be entered in a valid ISO-8601\n   * local time format (HH:mm:ss), for example: `14:57:00`. Model must be a Date object. This binding will always output a\n   * Date object to the model of January 1, 1970, or local date `new Date(1970, 0, 1, HH, mm, ss)`.\n   *\n   * The model must always be a Date object, otherwise Angular will throw an error.\n   * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.\n   *\n   * The timezone to be used to read/write the `Date` instance in the model can be defined using\n   * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.\n   *\n   * @param {string} ngModel Assignable angular expression to data-bind to.\n   * @param {string=} name Property name of the form under which the control is published.\n   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.\n   *   This must be a valid ISO time format (HH:mm:ss). You can also use interpolation inside this\n   *   attribute (e.g. `min=\"{{minTime | date:'HH:mm:ss'}}\"`). Note that `min` will also add\n   *   native HTML5 constraint validation.\n   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.\n   *   This must be a valid ISO time format (HH:mm:ss). You can also use interpolation inside this\n   *   attribute (e.g. `max=\"{{maxTime | date:'HH:mm:ss'}}\"`). Note that `max` will also add\n   *   native HTML5 constraint validation.\n   * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO time string the\n   *   `ngMin` expression evaluates to. Note that it does not set the `min` attribute.\n   * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO time string the\n   *   `ngMax` expression evaluates to. Note that it does not set the `max` attribute.\n   * @param {string=} required Sets `required` validation error key if the value is not entered.\n   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to\n   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of\n   *    `required` when you want to data-bind to the `required` attribute.\n   * @param {string=} ngChange Angular expression to be executed when input changes due to user\n   *    interaction with the input element.\n   *\n   * @example\n   <example name=\"time-input-directive\" module=\"timeExample\">\n   <file name=\"index.html\">\n     <script>\n      angular.module('timeExample', [])\n        .controller('DateController', ['$scope', function($scope) {\n          $scope.example = {\n            value: new Date(1970, 0, 1, 14, 57, 0)\n          };\n        }]);\n     </script>\n     <form name=\"myForm\" ng-controller=\"DateController as dateCtrl\">\n        <label for=\"exampleInput\">Pick a time between 8am and 5pm:</label>\n        <input type=\"time\" id=\"exampleInput\" name=\"input\" ng-model=\"example.value\"\n            placeholder=\"HH:mm:ss\" min=\"08:00:00\" max=\"17:00:00\" required />\n        <div role=\"alert\">\n          <span class=\"error\" ng-show=\"myForm.input.$error.required\">\n              Required!</span>\n          <span class=\"error\" ng-show=\"myForm.input.$error.time\">\n              Not a valid date!</span>\n        </div>\n        <tt>value = {{example.value | date: \"HH:mm:ss\"}}</tt><br/>\n        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>\n        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>\n        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>\n        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>\n     </form>\n   </file>\n   <file name=\"protractor.js\" type=\"protractor\">\n      var value = element(by.binding('example.value | date: \"HH:mm:ss\"'));\n      var valid = element(by.binding('myForm.input.$valid'));\n\n      // currently protractor/webdriver does not support\n      // sending keys to all known HTML5 input controls\n      // for various browsers (https://github.com/angular/protractor/issues/562).\n      function setInput(val) {\n        // set the value of the element and force validation.\n        var scr = \"var ipt = document.getElementById('exampleInput'); \" +\n        \"ipt.value = '\" + val + \"';\" +\n        \"angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('\" + val + \"'); });\";\n        browser.executeScript(scr);\n      }\n\n      it('should initialize to model', function() {\n        expect(value.getText()).toContain('14:57:00');\n        expect(valid.getText()).toContain('myForm.input.$valid = true');\n      });\n\n      it('should be invalid if empty', function() {\n        setInput('');\n        expect(value.getText()).toEqual('value =');\n        expect(valid.getText()).toContain('myForm.input.$valid = false');\n      });\n\n      it('should be invalid if over max', function() {\n        setInput('23:59:00');\n        expect(value.getText()).toContain('');\n        expect(valid.getText()).toContain('myForm.input.$valid = false');\n      });\n   </file>\n   </example>\n   */\n  'time': createDateInputType('time', TIME_REGEXP,\n      createDateParser(TIME_REGEXP, ['HH', 'mm', 'ss', 'sss']),\n     'HH:mm:ss.sss'),\n\n   /**\n    * @ngdoc input\n    * @name input[week]\n    *\n    * @description\n    * Input with week-of-the-year validation and transformation to Date. In browsers that do not yet support\n    * the HTML5 week input, a text element will be used. In that case, the text must be entered in a valid ISO-8601\n    * week format (yyyy-W##), for example: `2013-W02`.\n    *\n    * The model must always be a Date object, otherwise Angular will throw an error.\n    * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.\n    *\n    * The timezone to be used to read/write the `Date` instance in the model can be defined using\n    * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.\n    *\n    * @param {string} ngModel Assignable angular expression to data-bind to.\n    * @param {string=} name Property name of the form under which the control is published.\n    * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.\n    *   This must be a valid ISO week format (yyyy-W##). You can also use interpolation inside this\n    *   attribute (e.g. `min=\"{{minWeek | date:'yyyy-Www'}}\"`). Note that `min` will also add\n    *   native HTML5 constraint validation.\n    * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.\n    *   This must be a valid ISO week format (yyyy-W##). You can also use interpolation inside this\n    *   attribute (e.g. `max=\"{{maxWeek | date:'yyyy-Www'}}\"`). Note that `max` will also add\n    *   native HTML5 constraint validation.\n    * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO week string\n    *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.\n    * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO week string\n    *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.\n    * @param {string=} required Sets `required` validation error key if the value is not entered.\n    * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to\n    *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of\n    *    `required` when you want to data-bind to the `required` attribute.\n    * @param {string=} ngChange Angular expression to be executed when input changes due to user\n    *    interaction with the input element.\n    *\n    * @example\n    <example name=\"week-input-directive\" module=\"weekExample\">\n    <file name=\"index.html\">\n      <script>\n      angular.module('weekExample', [])\n        .controller('DateController', ['$scope', function($scope) {\n          $scope.example = {\n            value: new Date(2013, 0, 3)\n          };\n        }]);\n      </script>\n      <form name=\"myForm\" ng-controller=\"DateController as dateCtrl\">\n        <label>Pick a date between in 2013:\n          <input id=\"exampleInput\" type=\"week\" name=\"input\" ng-model=\"example.value\"\n                 placeholder=\"YYYY-W##\" min=\"2012-W32\"\n                 max=\"2013-W52\" required />\n        </label>\n        <div role=\"alert\">\n          <span class=\"error\" ng-show=\"myForm.input.$error.required\">\n              Required!</span>\n          <span class=\"error\" ng-show=\"myForm.input.$error.week\">\n              Not a valid date!</span>\n        </div>\n        <tt>value = {{example.value | date: \"yyyy-Www\"}}</tt><br/>\n        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>\n        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>\n        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>\n        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>\n      </form>\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n      var value = element(by.binding('example.value | date: \"yyyy-Www\"'));\n      var valid = element(by.binding('myForm.input.$valid'));\n\n      // currently protractor/webdriver does not support\n      // sending keys to all known HTML5 input controls\n      // for various browsers (https://github.com/angular/protractor/issues/562).\n      function setInput(val) {\n        // set the value of the element and force validation.\n        var scr = \"var ipt = document.getElementById('exampleInput'); \" +\n        \"ipt.value = '\" + val + \"';\" +\n        \"angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('\" + val + \"'); });\";\n        browser.executeScript(scr);\n      }\n\n      it('should initialize to model', function() {\n        expect(value.getText()).toContain('2013-W01');\n        expect(valid.getText()).toContain('myForm.input.$valid = true');\n      });\n\n      it('should be invalid if empty', function() {\n        setInput('');\n        expect(value.getText()).toEqual('value =');\n        expect(valid.getText()).toContain('myForm.input.$valid = false');\n      });\n\n      it('should be invalid if over max', function() {\n        setInput('2015-W01');\n        expect(value.getText()).toContain('');\n        expect(valid.getText()).toContain('myForm.input.$valid = false');\n      });\n    </file>\n    </example>\n    */\n  'week': createDateInputType('week', WEEK_REGEXP, weekParser, 'yyyy-Www'),\n\n  /**\n   * @ngdoc input\n   * @name input[month]\n   *\n   * @description\n   * Input with month validation and transformation. In browsers that do not yet support\n   * the HTML5 month input, a text element will be used. In that case, the text must be entered in a valid ISO-8601\n   * month format (yyyy-MM), for example: `2009-01`.\n   *\n   * The model must always be a Date object, otherwise Angular will throw an error.\n   * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.\n   * If the model is not set to the first of the month, the next view to model update will set it\n   * to the first of the month.\n   *\n   * The timezone to be used to read/write the `Date` instance in the model can be defined using\n   * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.\n   *\n   * @param {string} ngModel Assignable angular expression to data-bind to.\n   * @param {string=} name Property name of the form under which the control is published.\n   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.\n   *   This must be a valid ISO month format (yyyy-MM). You can also use interpolation inside this\n   *   attribute (e.g. `min=\"{{minMonth | date:'yyyy-MM'}}\"`). Note that `min` will also add\n   *   native HTML5 constraint validation.\n   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.\n   *   This must be a valid ISO month format (yyyy-MM). You can also use interpolation inside this\n   *   attribute (e.g. `max=\"{{maxMonth | date:'yyyy-MM'}}\"`). Note that `max` will also add\n   *   native HTML5 constraint validation.\n   * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO week string\n   *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.\n   * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO week string\n   *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.\n\n   * @param {string=} required Sets `required` validation error key if the value is not entered.\n   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to\n   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of\n   *    `required` when you want to data-bind to the `required` attribute.\n   * @param {string=} ngChange Angular expression to be executed when input changes due to user\n   *    interaction with the input element.\n   *\n   * @example\n   <example name=\"month-input-directive\" module=\"monthExample\">\n   <file name=\"index.html\">\n     <script>\n      angular.module('monthExample', [])\n        .controller('DateController', ['$scope', function($scope) {\n          $scope.example = {\n            value: new Date(2013, 9, 1)\n          };\n        }]);\n     </script>\n     <form name=\"myForm\" ng-controller=\"DateController as dateCtrl\">\n       <label for=\"exampleInput\">Pick a month in 2013:</label>\n       <input id=\"exampleInput\" type=\"month\" name=\"input\" ng-model=\"example.value\"\n          placeholder=\"yyyy-MM\" min=\"2013-01\" max=\"2013-12\" required />\n       <div role=\"alert\">\n         <span class=\"error\" ng-show=\"myForm.input.$error.required\">\n            Required!</span>\n         <span class=\"error\" ng-show=\"myForm.input.$error.month\">\n            Not a valid month!</span>\n       </div>\n       <tt>value = {{example.value | date: \"yyyy-MM\"}}</tt><br/>\n       <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>\n       <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>\n       <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>\n       <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>\n     </form>\n   </file>\n   <file name=\"protractor.js\" type=\"protractor\">\n      var value = element(by.binding('example.value | date: \"yyyy-MM\"'));\n      var valid = element(by.binding('myForm.input.$valid'));\n\n      // currently protractor/webdriver does not support\n      // sending keys to all known HTML5 input controls\n      // for various browsers (https://github.com/angular/protractor/issues/562).\n      function setInput(val) {\n        // set the value of the element and force validation.\n        var scr = \"var ipt = document.getElementById('exampleInput'); \" +\n        \"ipt.value = '\" + val + \"';\" +\n        \"angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('\" + val + \"'); });\";\n        browser.executeScript(scr);\n      }\n\n      it('should initialize to model', function() {\n        expect(value.getText()).toContain('2013-10');\n        expect(valid.getText()).toContain('myForm.input.$valid = true');\n      });\n\n      it('should be invalid if empty', function() {\n        setInput('');\n        expect(value.getText()).toEqual('value =');\n        expect(valid.getText()).toContain('myForm.input.$valid = false');\n      });\n\n      it('should be invalid if over max', function() {\n        setInput('2015-01');\n        expect(value.getText()).toContain('');\n        expect(valid.getText()).toContain('myForm.input.$valid = false');\n      });\n   </file>\n   </example>\n   */\n  'month': createDateInputType('month', MONTH_REGEXP,\n     createDateParser(MONTH_REGEXP, ['yyyy', 'MM']),\n     'yyyy-MM'),\n\n  /**\n   * @ngdoc input\n   * @name input[number]\n   *\n   * @description\n   * Text input with number validation and transformation. Sets the `number` validation\n   * error if not a valid number.\n   *\n   * <div class=\"alert alert-warning\">\n   * The model must always be of type `number` otherwise Angular will throw an error.\n   * Be aware that a string containing a number is not enough. See the {@link ngModel:numfmt}\n   * error docs for more information and an example of how to convert your model if necessary.\n   * </div>\n   *\n   * ## Issues with HTML5 constraint validation\n   *\n   * In browsers that follow the\n   * [HTML5 specification](https://html.spec.whatwg.org/multipage/forms.html#number-state-%28type=number%29),\n   * `input[number]` does not work as expected with {@link ngModelOptions `ngModelOptions.allowInvalid`}.\n   * If a non-number is entered in the input, the browser will report the value as an empty string,\n   * which means the view / model values in `ngModel` and subsequently the scope value\n   * will also be an empty string.\n   *\n   *\n   * @param {string} ngModel Assignable angular expression to data-bind to.\n   * @param {string=} name Property name of the form under which the control is published.\n   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.\n   *    Can be interpolated.\n   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.\n   *    Can be interpolated.\n   * @param {string=} ngMin Like `min`, sets the `min` validation error key if the value entered is less than `ngMin`,\n   *    but does not trigger HTML5 native validation. Takes an expression.\n   * @param {string=} ngMax Like `max`, sets the `max` validation error key if the value entered is greater than `ngMax`,\n   *    but does not trigger HTML5 native validation. Takes an expression.\n   * @param {string=} step Sets the `step` validation error key if the value entered does not fit the `step` constraint.\n   *    Can be interpolated.\n   * @param {string=} ngStep Like `step`, sets the `step` validation error key if the value entered does not fit the `ngStep` constraint,\n   *    but does not trigger HTML5 native validation. Takes an expression.\n   * @param {string=} required Sets `required` validation error key if the value is not entered.\n   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to\n   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of\n   *    `required` when you want to data-bind to the `required` attribute.\n   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than\n   *    minlength.\n   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than\n   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of\n   *    any length.\n   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string\n   *    that contains the regular expression body that will be converted to a regular expression\n   *    as in the ngPattern directive.\n   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}\n   *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.\n   *    If the expression evaluates to a RegExp object, then this is used directly.\n   *    If the expression evaluates to a string, then it will be converted to a RegExp\n   *    after wrapping it in `^` and `$` characters. For instance, `\"abc\"` will be converted to\n   *    `new RegExp('^abc$')`.<br />\n   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to\n   *    start at the index of the last search's match, thus not taking the whole input value into\n   *    account.\n   * @param {string=} ngChange Angular expression to be executed when input changes due to user\n   *    interaction with the input element.\n   *\n   * @example\n      <example name=\"number-input-directive\" module=\"numberExample\">\n        <file name=\"index.html\">\n         <script>\n           angular.module('numberExample', [])\n             .controller('ExampleController', ['$scope', function($scope) {\n               $scope.example = {\n                 value: 12\n               };\n             }]);\n         </script>\n         <form name=\"myForm\" ng-controller=\"ExampleController\">\n           <label>Number:\n             <input type=\"number\" name=\"input\" ng-model=\"example.value\"\n                    min=\"0\" max=\"99\" required>\n          </label>\n           <div role=\"alert\">\n             <span class=\"error\" ng-show=\"myForm.input.$error.required\">\n               Required!</span>\n             <span class=\"error\" ng-show=\"myForm.input.$error.number\">\n               Not valid number!</span>\n           </div>\n           <tt>value = {{example.value}}</tt><br/>\n           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>\n           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>\n           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>\n           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>\n          </form>\n        </file>\n        <file name=\"protractor.js\" type=\"protractor\">\n          var value = element(by.binding('example.value'));\n          var valid = element(by.binding('myForm.input.$valid'));\n          var input = element(by.model('example.value'));\n\n          it('should initialize to model', function() {\n            expect(value.getText()).toContain('12');\n            expect(valid.getText()).toContain('true');\n          });\n\n          it('should be invalid if empty', function() {\n            input.clear();\n            input.sendKeys('');\n            expect(value.getText()).toEqual('value =');\n            expect(valid.getText()).toContain('false');\n          });\n\n          it('should be invalid if over max', function() {\n            input.clear();\n            input.sendKeys('123');\n            expect(value.getText()).toEqual('value =');\n            expect(valid.getText()).toContain('false');\n          });\n        </file>\n      </example>\n   */\n  'number': numberInputType,\n\n\n  /**\n   * @ngdoc input\n   * @name input[url]\n   *\n   * @description\n   * Text input with URL validation. Sets the `url` validation error key if the content is not a\n   * valid URL.\n   *\n   * <div class=\"alert alert-warning\">\n   * **Note:** `input[url]` uses a regex to validate urls that is derived from the regex\n   * used in Chromium. If you need stricter validation, you can use `ng-pattern` or modify\n   * the built-in validators (see the {@link guide/forms Forms guide})\n   * </div>\n   *\n   * @param {string} ngModel Assignable angular expression to data-bind to.\n   * @param {string=} name Property name of the form under which the control is published.\n   * @param {string=} required Sets `required` validation error key if the value is not entered.\n   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to\n   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of\n   *    `required` when you want to data-bind to the `required` attribute.\n   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than\n   *    minlength.\n   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than\n   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of\n   *    any length.\n   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string\n   *    that contains the regular expression body that will be converted to a regular expression\n   *    as in the ngPattern directive.\n   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}\n   *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.\n   *    If the expression evaluates to a RegExp object, then this is used directly.\n   *    If the expression evaluates to a string, then it will be converted to a RegExp\n   *    after wrapping it in `^` and `$` characters. For instance, `\"abc\"` will be converted to\n   *    `new RegExp('^abc$')`.<br />\n   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to\n   *    start at the index of the last search's match, thus not taking the whole input value into\n   *    account.\n   * @param {string=} ngChange Angular expression to be executed when input changes due to user\n   *    interaction with the input element.\n   *\n   * @example\n      <example name=\"url-input-directive\" module=\"urlExample\">\n        <file name=\"index.html\">\n         <script>\n           angular.module('urlExample', [])\n             .controller('ExampleController', ['$scope', function($scope) {\n               $scope.url = {\n                 text: 'http://google.com'\n               };\n             }]);\n         </script>\n         <form name=\"myForm\" ng-controller=\"ExampleController\">\n           <label>URL:\n             <input type=\"url\" name=\"input\" ng-model=\"url.text\" required>\n           <label>\n           <div role=\"alert\">\n             <span class=\"error\" ng-show=\"myForm.input.$error.required\">\n               Required!</span>\n             <span class=\"error\" ng-show=\"myForm.input.$error.url\">\n               Not valid url!</span>\n           </div>\n           <tt>text = {{url.text}}</tt><br/>\n           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>\n           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>\n           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>\n           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>\n           <tt>myForm.$error.url = {{!!myForm.$error.url}}</tt><br/>\n          </form>\n        </file>\n        <file name=\"protractor.js\" type=\"protractor\">\n          var text = element(by.binding('url.text'));\n          var valid = element(by.binding('myForm.input.$valid'));\n          var input = element(by.model('url.text'));\n\n          it('should initialize to model', function() {\n            expect(text.getText()).toContain('http://google.com');\n            expect(valid.getText()).toContain('true');\n          });\n\n          it('should be invalid if empty', function() {\n            input.clear();\n            input.sendKeys('');\n\n            expect(text.getText()).toEqual('text =');\n            expect(valid.getText()).toContain('false');\n          });\n\n          it('should be invalid if not url', function() {\n            input.clear();\n            input.sendKeys('box');\n\n            expect(valid.getText()).toContain('false');\n          });\n        </file>\n      </example>\n   */\n  'url': urlInputType,\n\n\n  /**\n   * @ngdoc input\n   * @name input[email]\n   *\n   * @description\n   * Text input with email validation. Sets the `email` validation error key if not a valid email\n   * address.\n   *\n   * <div class=\"alert alert-warning\">\n   * **Note:** `input[email]` uses a regex to validate email addresses that is derived from the regex\n   * used in Chromium. If you need stricter validation (e.g. requiring a top-level domain), you can\n   * use `ng-pattern` or modify the built-in validators (see the {@link guide/forms Forms guide})\n   * </div>\n   *\n   * @param {string} ngModel Assignable angular expression to data-bind to.\n   * @param {string=} name Property name of the form under which the control is published.\n   * @param {string=} required Sets `required` validation error key if the value is not entered.\n   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to\n   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of\n   *    `required` when you want to data-bind to the `required` attribute.\n   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than\n   *    minlength.\n   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than\n   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of\n   *    any length.\n   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string\n   *    that contains the regular expression body that will be converted to a regular expression\n   *    as in the ngPattern directive.\n   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}\n   *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.\n   *    If the expression evaluates to a RegExp object, then this is used directly.\n   *    If the expression evaluates to a string, then it will be converted to a RegExp\n   *    after wrapping it in `^` and `$` characters. For instance, `\"abc\"` will be converted to\n   *    `new RegExp('^abc$')`.<br />\n   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to\n   *    start at the index of the last search's match, thus not taking the whole input value into\n   *    account.\n   * @param {string=} ngChange Angular expression to be executed when input changes due to user\n   *    interaction with the input element.\n   *\n   * @example\n      <example name=\"email-input-directive\" module=\"emailExample\">\n        <file name=\"index.html\">\n         <script>\n           angular.module('emailExample', [])\n             .controller('ExampleController', ['$scope', function($scope) {\n               $scope.email = {\n                 text: 'me@example.com'\n               };\n             }]);\n         </script>\n           <form name=\"myForm\" ng-controller=\"ExampleController\">\n             <label>Email:\n               <input type=\"email\" name=\"input\" ng-model=\"email.text\" required>\n             </label>\n             <div role=\"alert\">\n               <span class=\"error\" ng-show=\"myForm.input.$error.required\">\n                 Required!</span>\n               <span class=\"error\" ng-show=\"myForm.input.$error.email\">\n                 Not valid email!</span>\n             </div>\n             <tt>text = {{email.text}}</tt><br/>\n             <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>\n             <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>\n             <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>\n             <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>\n             <tt>myForm.$error.email = {{!!myForm.$error.email}}</tt><br/>\n           </form>\n         </file>\n        <file name=\"protractor.js\" type=\"protractor\">\n          var text = element(by.binding('email.text'));\n          var valid = element(by.binding('myForm.input.$valid'));\n          var input = element(by.model('email.text'));\n\n          it('should initialize to model', function() {\n            expect(text.getText()).toContain('me@example.com');\n            expect(valid.getText()).toContain('true');\n          });\n\n          it('should be invalid if empty', function() {\n            input.clear();\n            input.sendKeys('');\n            expect(text.getText()).toEqual('text =');\n            expect(valid.getText()).toContain('false');\n          });\n\n          it('should be invalid if not email', function() {\n            input.clear();\n            input.sendKeys('xxx');\n\n            expect(valid.getText()).toContain('false');\n          });\n        </file>\n      </example>\n   */\n  'email': emailInputType,\n\n\n  /**\n   * @ngdoc input\n   * @name input[radio]\n   *\n   * @description\n   * HTML radio button.\n   *\n   * @param {string} ngModel Assignable angular expression to data-bind to.\n   * @param {string} value The value to which the `ngModel` expression should be set when selected.\n   *    Note that `value` only supports `string` values, i.e. the scope model needs to be a string,\n   *    too. Use `ngValue` if you need complex models (`number`, `object`, ...).\n   * @param {string=} name Property name of the form under which the control is published.\n   * @param {string=} ngChange Angular expression to be executed when input changes due to user\n   *    interaction with the input element.\n   * @param {string} ngValue Angular expression to which `ngModel` will be be set when the radio\n   *    is selected. Should be used instead of the `value` attribute if you need\n   *    a non-string `ngModel` (`boolean`, `array`, ...).\n   *\n   * @example\n      <example name=\"radio-input-directive\" module=\"radioExample\">\n        <file name=\"index.html\">\n         <script>\n           angular.module('radioExample', [])\n             .controller('ExampleController', ['$scope', function($scope) {\n               $scope.color = {\n                 name: 'blue'\n               };\n               $scope.specialValue = {\n                 \"id\": \"12345\",\n                 \"value\": \"green\"\n               };\n             }]);\n         </script>\n         <form name=\"myForm\" ng-controller=\"ExampleController\">\n           <label>\n             <input type=\"radio\" ng-model=\"color.name\" value=\"red\">\n             Red\n           </label><br/>\n           <label>\n             <input type=\"radio\" ng-model=\"color.name\" ng-value=\"specialValue\">\n             Green\n           </label><br/>\n           <label>\n             <input type=\"radio\" ng-model=\"color.name\" value=\"blue\">\n             Blue\n           </label><br/>\n           <tt>color = {{color.name | json}}</tt><br/>\n          </form>\n          Note that `ng-value=\"specialValue\"` sets radio item's value to be the value of `$scope.specialValue`.\n        </file>\n        <file name=\"protractor.js\" type=\"protractor\">\n          it('should change state', function() {\n            var inputs = element.all(by.model('color.name'));\n            var color = element(by.binding('color.name'));\n\n            expect(color.getText()).toContain('blue');\n\n            inputs.get(0).click();\n            expect(color.getText()).toContain('red');\n\n            inputs.get(1).click();\n            expect(color.getText()).toContain('green');\n          });\n        </file>\n      </example>\n   */\n  'radio': radioInputType,\n\n  /**\n   * @ngdoc input\n   * @name input[range]\n   *\n   * @description\n   * Native range input with validation and transformation.\n   *\n   * The model for the range input must always be a `Number`.\n   *\n   * IE9 and other browsers that do not support the `range` type fall back\n   * to a text input without any default values for `min`, `max` and `step`. Model binding,\n   * validation and number parsing are nevertheless supported.\n   *\n   * Browsers that support range (latest Chrome, Safari, Firefox, Edge) treat `input[range]`\n   * in a way that never allows the input to hold an invalid value. That means:\n   * - any non-numerical value is set to `(max + min) / 2`.\n   * - any numerical value that is less than the current min val, or greater than the current max val\n   * is set to the min / max val respectively.\n   * - additionally, the current `step` is respected, so the nearest value that satisfies a step\n   * is used.\n   *\n   * See the [HTML Spec on input[type=range]](https://www.w3.org/TR/html5/forms.html#range-state-(type=range))\n   * for more info.\n   *\n   * This has the following consequences for Angular:\n   *\n   * Since the element value should always reflect the current model value, a range input\n   * will set the bound ngModel expression to the value that the browser has set for the\n   * input element. For example, in the following input `<input type=\"range\" ng-model=\"model.value\">`,\n   * if the application sets `model.value = null`, the browser will set the input to `'50'`.\n   * Angular will then set the model to `50`, to prevent input and model value being out of sync.\n   *\n   * That means the model for range will immediately be set to `50` after `ngModel` has been\n   * initialized. It also means a range input can never have the required error.\n   *\n   * This does not only affect changes to the model value, but also to the values of the `min`,\n   * `max`, and `step` attributes. When these change in a way that will cause the browser to modify\n   * the input value, Angular will also update the model value.\n   *\n   * Automatic value adjustment also means that a range input element can never have the `required`,\n   * `min`, or `max` errors.\n   *\n   * However, `step` is currently only fully implemented by Firefox. Other browsers have problems\n   * when the step value changes dynamically - they do not adjust the element value correctly, but\n   * instead may set the `stepMismatch` error. If that's the case, the Angular will set the `step`\n   * error on the input, and set the model to `undefined`.\n   *\n   * Note that `input[range]` is not compatible with`ngMax`, `ngMin`, and `ngStep`, because they do\n   * not set the `min` and `max` attributes, which means that the browser won't automatically adjust\n   * the input value based on their values, and will always assume min = 0, max = 100, and step = 1.\n   *\n   * @param {string}  ngModel Assignable angular expression to data-bind to.\n   * @param {string=} name Property name of the form under which the control is published.\n   * @param {string=} min Sets the `min` validation to ensure that the value entered is greater\n   *                  than `min`. Can be interpolated.\n   * @param {string=} max Sets the `max` validation to ensure that the value entered is less than `max`.\n   *                  Can be interpolated.\n   * @param {string=} step Sets the `step` validation to ensure that the value entered matches the `step`\n   *                  Can be interpolated.\n   * @param {expression=} ngChange AngularJS expression to be executed when the ngModel value changes due\n   *                      to user interaction with the input element.\n   * @param {expression=} ngChecked If the expression is truthy, then the `checked` attribute will be set on the\n   *                      element. **Note** : `ngChecked` should not be used alongside `ngModel`.\n   *                      Checkout {@link ng.directive:ngChecked ngChecked} for usage.\n   *\n   * @example\n      <example name=\"range-input-directive\" module=\"rangeExample\">\n        <file name=\"index.html\">\n          <script>\n            angular.module('rangeExample', [])\n              .controller('ExampleController', ['$scope', function($scope) {\n                $scope.value = 75;\n                $scope.min = 10;\n                $scope.max = 90;\n              }]);\n          </script>\n          <form name=\"myForm\" ng-controller=\"ExampleController\">\n\n            Model as range: <input type=\"range\" name=\"range\" ng-model=\"value\" min=\"{{min}}\"  max=\"{{max}}\">\n            <hr>\n            Model as number: <input type=\"number\" ng-model=\"value\"><br>\n            Min: <input type=\"number\" ng-model=\"min\"><br>\n            Max: <input type=\"number\" ng-model=\"max\"><br>\n            value = <code>{{value}}</code><br/>\n            myForm.range.$valid = <code>{{myForm.range.$valid}}</code><br/>\n            myForm.range.$error = <code>{{myForm.range.$error}}</code>\n          </form>\n        </file>\n      </example>\n\n   * ## Range Input with ngMin & ngMax attributes\n\n   * @example\n      <example name=\"range-input-directive-ng\" module=\"rangeExample\">\n        <file name=\"index.html\">\n          <script>\n            angular.module('rangeExample', [])\n              .controller('ExampleController', ['$scope', function($scope) {\n                $scope.value = 75;\n                $scope.min = 10;\n                $scope.max = 90;\n              }]);\n          </script>\n          <form name=\"myForm\" ng-controller=\"ExampleController\">\n            Model as range: <input type=\"range\" name=\"range\" ng-model=\"value\" ng-min=\"min\" ng-max=\"max\">\n            <hr>\n            Model as number: <input type=\"number\" ng-model=\"value\"><br>\n            Min: <input type=\"number\" ng-model=\"min\"><br>\n            Max: <input type=\"number\" ng-model=\"max\"><br>\n            value = <code>{{value}}</code><br/>\n            myForm.range.$valid = <code>{{myForm.range.$valid}}</code><br/>\n            myForm.range.$error = <code>{{myForm.range.$error}}</code>\n          </form>\n        </file>\n      </example>\n\n   */\n  'range': rangeInputType,\n\n  /**\n   * @ngdoc input\n   * @name input[checkbox]\n   *\n   * @description\n   * HTML checkbox.\n   *\n   * @param {string} ngModel Assignable angular expression to data-bind to.\n   * @param {string=} name Property name of the form under which the control is published.\n   * @param {expression=} ngTrueValue The value to which the expression should be set when selected.\n   * @param {expression=} ngFalseValue The value to which the expression should be set when not selected.\n   * @param {string=} ngChange Angular expression to be executed when input changes due to user\n   *    interaction with the input element.\n   *\n   * @example\n      <example name=\"checkbox-input-directive\" module=\"checkboxExample\">\n        <file name=\"index.html\">\n         <script>\n           angular.module('checkboxExample', [])\n             .controller('ExampleController', ['$scope', function($scope) {\n               $scope.checkboxModel = {\n                value1 : true,\n                value2 : 'YES'\n              };\n             }]);\n         </script>\n         <form name=\"myForm\" ng-controller=\"ExampleController\">\n           <label>Value1:\n             <input type=\"checkbox\" ng-model=\"checkboxModel.value1\">\n           </label><br/>\n           <label>Value2:\n             <input type=\"checkbox\" ng-model=\"checkboxModel.value2\"\n                    ng-true-value=\"'YES'\" ng-false-value=\"'NO'\">\n            </label><br/>\n           <tt>value1 = {{checkboxModel.value1}}</tt><br/>\n           <tt>value2 = {{checkboxModel.value2}}</tt><br/>\n          </form>\n        </file>\n        <file name=\"protractor.js\" type=\"protractor\">\n          it('should change state', function() {\n            var value1 = element(by.binding('checkboxModel.value1'));\n            var value2 = element(by.binding('checkboxModel.value2'));\n\n            expect(value1.getText()).toContain('true');\n            expect(value2.getText()).toContain('YES');\n\n            element(by.model('checkboxModel.value1')).click();\n            element(by.model('checkboxModel.value2')).click();\n\n            expect(value1.getText()).toContain('false');\n            expect(value2.getText()).toContain('NO');\n          });\n        </file>\n      </example>\n   */\n  'checkbox': checkboxInputType,\n\n  'hidden': noop,\n  'button': noop,\n  'submit': noop,\n  'reset': noop,\n  'file': noop\n};\n\nfunction stringBasedInputType(ctrl) {\n  ctrl.$formatters.push(function(value) {\n    return ctrl.$isEmpty(value) ? value : value.toString();\n  });\n}\n\nfunction textInputType(scope, element, attr, ctrl, $sniffer, $browser) {\n  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);\n  stringBasedInputType(ctrl);\n}\n\nfunction baseInputType(scope, element, attr, ctrl, $sniffer, $browser) {\n  var type = lowercase(element[0].type);\n\n  // In composition mode, users are still inputting intermediate text buffer,\n  // hold the listener until composition is done.\n  // More about composition events: https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent\n  if (!$sniffer.android) {\n    var composing = false;\n\n    element.on('compositionstart', function() {\n      composing = true;\n    });\n\n    element.on('compositionend', function() {\n      composing = false;\n      listener();\n    });\n  }\n\n  var timeout;\n\n  var listener = function(ev) {\n    if (timeout) {\n      $browser.defer.cancel(timeout);\n      timeout = null;\n    }\n    if (composing) return;\n    var value = element.val(),\n        event = ev && ev.type;\n\n    // By default we will trim the value\n    // If the attribute ng-trim exists we will avoid trimming\n    // If input type is 'password', the value is never trimmed\n    if (type !== 'password' && (!attr.ngTrim || attr.ngTrim !== 'false')) {\n      value = trim(value);\n    }\n\n    // If a control is suffering from bad input (due to native validators), browsers discard its\n    // value, so it may be necessary to revalidate (by calling $setViewValue again) even if the\n    // control's value is the same empty value twice in a row.\n    if (ctrl.$viewValue !== value || (value === '' && ctrl.$$hasNativeValidators)) {\n      ctrl.$setViewValue(value, event);\n    }\n  };\n\n  // if the browser does support \"input\" event, we are fine - except on IE9 which doesn't fire the\n  // input event on backspace, delete or cut\n  if ($sniffer.hasEvent('input')) {\n    element.on('input', listener);\n  } else {\n    var deferListener = function(ev, input, origValue) {\n      if (!timeout) {\n        timeout = $browser.defer(function() {\n          timeout = null;\n          if (!input || input.value !== origValue) {\n            listener(ev);\n          }\n        });\n      }\n    };\n\n    element.on('keydown', /** @this */ function(event) {\n      var key = event.keyCode;\n\n      // ignore\n      //    command            modifiers                   arrows\n      if (key === 91 || (15 < key && key < 19) || (37 <= key && key <= 40)) return;\n\n      deferListener(event, this, this.value);\n    });\n\n    // if user modifies input value using context menu in IE, we need \"paste\" and \"cut\" events to catch it\n    if ($sniffer.hasEvent('paste')) {\n      element.on('paste cut', deferListener);\n    }\n  }\n\n  // if user paste into input using mouse on older browser\n  // or form autocomplete on newer browser, we need \"change\" event to catch it\n  element.on('change', listener);\n\n  // Some native input types (date-family) have the ability to change validity without\n  // firing any input/change events.\n  // For these event types, when native validators are present and the browser supports the type,\n  // check for validity changes on various DOM events.\n  if (PARTIAL_VALIDATION_TYPES[type] && ctrl.$$hasNativeValidators && type === attr.type) {\n    element.on(PARTIAL_VALIDATION_EVENTS, /** @this */ function(ev) {\n      if (!timeout) {\n        var validity = this[VALIDITY_STATE_PROPERTY];\n        var origBadInput = validity.badInput;\n        var origTypeMismatch = validity.typeMismatch;\n        timeout = $browser.defer(function() {\n          timeout = null;\n          if (validity.badInput !== origBadInput || validity.typeMismatch !== origTypeMismatch) {\n            listener(ev);\n          }\n        });\n      }\n    });\n  }\n\n  ctrl.$render = function() {\n    // Workaround for Firefox validation #12102.\n    var value = ctrl.$isEmpty(ctrl.$viewValue) ? '' : ctrl.$viewValue;\n    if (element.val() !== value) {\n      element.val(value);\n    }\n  };\n}\n\nfunction weekParser(isoWeek, existingDate) {\n  if (isDate(isoWeek)) {\n    return isoWeek;\n  }\n\n  if (isString(isoWeek)) {\n    WEEK_REGEXP.lastIndex = 0;\n    var parts = WEEK_REGEXP.exec(isoWeek);\n    if (parts) {\n      var year = +parts[1],\n          week = +parts[2],\n          hours = 0,\n          minutes = 0,\n          seconds = 0,\n          milliseconds = 0,\n          firstThurs = getFirstThursdayOfYear(year),\n          addDays = (week - 1) * 7;\n\n      if (existingDate) {\n        hours = existingDate.getHours();\n        minutes = existingDate.getMinutes();\n        seconds = existingDate.getSeconds();\n        milliseconds = existingDate.getMilliseconds();\n      }\n\n      return new Date(year, 0, firstThurs.getDate() + addDays, hours, minutes, seconds, milliseconds);\n    }\n  }\n\n  return NaN;\n}\n\nfunction createDateParser(regexp, mapping) {\n  return function(iso, date) {\n    var parts, map;\n\n    if (isDate(iso)) {\n      return iso;\n    }\n\n    if (isString(iso)) {\n      // When a date is JSON'ified to wraps itself inside of an extra\n      // set of double quotes. This makes the date parsing code unable\n      // to match the date string and parse it as a date.\n      if (iso.charAt(0) === '\"' && iso.charAt(iso.length - 1) === '\"') {\n        iso = iso.substring(1, iso.length - 1);\n      }\n      if (ISO_DATE_REGEXP.test(iso)) {\n        return new Date(iso);\n      }\n      regexp.lastIndex = 0;\n      parts = regexp.exec(iso);\n\n      if (parts) {\n        parts.shift();\n        if (date) {\n          map = {\n            yyyy: date.getFullYear(),\n            MM: date.getMonth() + 1,\n            dd: date.getDate(),\n            HH: date.getHours(),\n            mm: date.getMinutes(),\n            ss: date.getSeconds(),\n            sss: date.getMilliseconds() / 1000\n          };\n        } else {\n          map = { yyyy: 1970, MM: 1, dd: 1, HH: 0, mm: 0, ss: 0, sss: 0 };\n        }\n\n        forEach(parts, function(part, index) {\n          if (index < mapping.length) {\n            map[mapping[index]] = +part;\n          }\n        });\n        return new Date(map.yyyy, map.MM - 1, map.dd, map.HH, map.mm, map.ss || 0, map.sss * 1000 || 0);\n      }\n    }\n\n    return NaN;\n  };\n}\n\nfunction createDateInputType(type, regexp, parseDate, format) {\n  return function dynamicDateInputType(scope, element, attr, ctrl, $sniffer, $browser, $filter) {\n    badInputChecker(scope, element, attr, ctrl);\n    baseInputType(scope, element, attr, ctrl, $sniffer, $browser);\n    var timezone = ctrl && ctrl.$options.getOption('timezone');\n    var previousDate;\n\n    ctrl.$$parserName = type;\n    ctrl.$parsers.push(function(value) {\n      if (ctrl.$isEmpty(value)) return null;\n      if (regexp.test(value)) {\n        // Note: We cannot read ctrl.$modelValue, as there might be a different\n        // parser/formatter in the processing chain so that the model\n        // contains some different data format!\n        var parsedDate = parseDate(value, previousDate);\n        if (timezone) {\n          parsedDate = convertTimezoneToLocal(parsedDate, timezone);\n        }\n        return parsedDate;\n      }\n      return undefined;\n    });\n\n    ctrl.$formatters.push(function(value) {\n      if (value && !isDate(value)) {\n        throw ngModelMinErr('datefmt', 'Expected `{0}` to be a date', value);\n      }\n      if (isValidDate(value)) {\n        previousDate = value;\n        if (previousDate && timezone) {\n          previousDate = convertTimezoneToLocal(previousDate, timezone, true);\n        }\n        return $filter('date')(value, format, timezone);\n      } else {\n        previousDate = null;\n        return '';\n      }\n    });\n\n    if (isDefined(attr.min) || attr.ngMin) {\n      var minVal;\n      ctrl.$validators.min = function(value) {\n        return !isValidDate(value) || isUndefined(minVal) || parseDate(value) >= minVal;\n      };\n      attr.$observe('min', function(val) {\n        minVal = parseObservedDateValue(val);\n        ctrl.$validate();\n      });\n    }\n\n    if (isDefined(attr.max) || attr.ngMax) {\n      var maxVal;\n      ctrl.$validators.max = function(value) {\n        return !isValidDate(value) || isUndefined(maxVal) || parseDate(value) <= maxVal;\n      };\n      attr.$observe('max', function(val) {\n        maxVal = parseObservedDateValue(val);\n        ctrl.$validate();\n      });\n    }\n\n    function isValidDate(value) {\n      // Invalid Date: getTime() returns NaN\n      return value && !(value.getTime && value.getTime() !== value.getTime());\n    }\n\n    function parseObservedDateValue(val) {\n      return isDefined(val) && !isDate(val) ? parseDate(val) || undefined : val;\n    }\n  };\n}\n\nfunction badInputChecker(scope, element, attr, ctrl) {\n  var node = element[0];\n  var nativeValidation = ctrl.$$hasNativeValidators = isObject(node.validity);\n  if (nativeValidation) {\n    ctrl.$parsers.push(function(value) {\n      var validity = element.prop(VALIDITY_STATE_PROPERTY) || {};\n      return validity.badInput || validity.typeMismatch ? undefined : value;\n    });\n  }\n}\n\nfunction numberFormatterParser(ctrl) {\n  ctrl.$$parserName = 'number';\n  ctrl.$parsers.push(function(value) {\n    if (ctrl.$isEmpty(value))      return null;\n    if (NUMBER_REGEXP.test(value)) return parseFloat(value);\n    return undefined;\n  });\n\n  ctrl.$formatters.push(function(value) {\n    if (!ctrl.$isEmpty(value)) {\n      if (!isNumber(value)) {\n        throw ngModelMinErr('numfmt', 'Expected `{0}` to be a number', value);\n      }\n      value = value.toString();\n    }\n    return value;\n  });\n}\n\nfunction parseNumberAttrVal(val) {\n  if (isDefined(val) && !isNumber(val)) {\n    val = parseFloat(val);\n  }\n  return !isNumberNaN(val) ? val : undefined;\n}\n\nfunction isNumberInteger(num) {\n  // See http://stackoverflow.com/questions/14636536/how-to-check-if-a-variable-is-an-integer-in-javascript#14794066\n  // (minus the assumption that `num` is a number)\n\n  // eslint-disable-next-line no-bitwise\n  return (num | 0) === num;\n}\n\nfunction countDecimals(num) {\n  var numString = num.toString();\n  var decimalSymbolIndex = numString.indexOf('.');\n\n  if (decimalSymbolIndex === -1) {\n    if (-1 < num && num < 1) {\n      // It may be in the exponential notation format (`1e-X`)\n      var match = /e-(\\d+)$/.exec(numString);\n\n      if (match) {\n        return Number(match[1]);\n      }\n    }\n\n    return 0;\n  }\n\n  return numString.length - decimalSymbolIndex - 1;\n}\n\nfunction isValidForStep(viewValue, stepBase, step) {\n  // At this point `stepBase` and `step` are expected to be non-NaN values\n  // and `viewValue` is expected to be a valid stringified number.\n  var value = Number(viewValue);\n\n  var isNonIntegerValue = !isNumberInteger(value);\n  var isNonIntegerStepBase = !isNumberInteger(stepBase);\n  var isNonIntegerStep = !isNumberInteger(step);\n\n  // Due to limitations in Floating Point Arithmetic (e.g. `0.3 - 0.2 !== 0.1` or\n  // `0.5 % 0.1 !== 0`), we need to convert all numbers to integers.\n  if (isNonIntegerValue || isNonIntegerStepBase || isNonIntegerStep) {\n    var valueDecimals = isNonIntegerValue ? countDecimals(value) : 0;\n    var stepBaseDecimals = isNonIntegerStepBase ? countDecimals(stepBase) : 0;\n    var stepDecimals = isNonIntegerStep ? countDecimals(step) : 0;\n\n    var decimalCount = Math.max(valueDecimals, stepBaseDecimals, stepDecimals);\n    var multiplier = Math.pow(10, decimalCount);\n\n    value = value * multiplier;\n    stepBase = stepBase * multiplier;\n    step = step * multiplier;\n\n    if (isNonIntegerValue) value = Math.round(value);\n    if (isNonIntegerStepBase) stepBase = Math.round(stepBase);\n    if (isNonIntegerStep) step = Math.round(step);\n  }\n\n  return (value - stepBase) % step === 0;\n}\n\nfunction numberInputType(scope, element, attr, ctrl, $sniffer, $browser) {\n  badInputChecker(scope, element, attr, ctrl);\n  numberFormatterParser(ctrl);\n  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);\n\n  var minVal;\n  var maxVal;\n\n  if (isDefined(attr.min) || attr.ngMin) {\n    ctrl.$validators.min = function(value) {\n      return ctrl.$isEmpty(value) || isUndefined(minVal) || value >= minVal;\n    };\n\n    attr.$observe('min', function(val) {\n      minVal = parseNumberAttrVal(val);\n      // TODO(matsko): implement validateLater to reduce number of validations\n      ctrl.$validate();\n    });\n  }\n\n  if (isDefined(attr.max) || attr.ngMax) {\n    ctrl.$validators.max = function(value) {\n      return ctrl.$isEmpty(value) || isUndefined(maxVal) || value <= maxVal;\n    };\n\n    attr.$observe('max', function(val) {\n      maxVal = parseNumberAttrVal(val);\n      // TODO(matsko): implement validateLater to reduce number of validations\n      ctrl.$validate();\n    });\n  }\n\n  if (isDefined(attr.step) || attr.ngStep) {\n    var stepVal;\n    ctrl.$validators.step = function(modelValue, viewValue) {\n      return ctrl.$isEmpty(viewValue) || isUndefined(stepVal) ||\n             isValidForStep(viewValue, minVal || 0, stepVal);\n    };\n\n    attr.$observe('step', function(val) {\n      stepVal = parseNumberAttrVal(val);\n      // TODO(matsko): implement validateLater to reduce number of validations\n      ctrl.$validate();\n    });\n  }\n}\n\nfunction rangeInputType(scope, element, attr, ctrl, $sniffer, $browser) {\n  badInputChecker(scope, element, attr, ctrl);\n  numberFormatterParser(ctrl);\n  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);\n\n  var supportsRange = ctrl.$$hasNativeValidators && element[0].type === 'range',\n      minVal = supportsRange ? 0 : undefined,\n      maxVal = supportsRange ? 100 : undefined,\n      stepVal = supportsRange ? 1 : undefined,\n      validity = element[0].validity,\n      hasMinAttr = isDefined(attr.min),\n      hasMaxAttr = isDefined(attr.max),\n      hasStepAttr = isDefined(attr.step);\n\n  var originalRender = ctrl.$render;\n\n  ctrl.$render = supportsRange && isDefined(validity.rangeUnderflow) && isDefined(validity.rangeOverflow) ?\n    //Browsers that implement range will set these values automatically, but reading the adjusted values after\n    //$render would cause the min / max validators to be applied with the wrong value\n    function rangeRender() {\n      originalRender();\n      ctrl.$setViewValue(element.val());\n    } :\n    originalRender;\n\n  if (hasMinAttr) {\n    ctrl.$validators.min = supportsRange ?\n      // Since all browsers set the input to a valid value, we don't need to check validity\n      function noopMinValidator() { return true; } :\n      // non-support browsers validate the min val\n      function minValidator(modelValue, viewValue) {\n        return ctrl.$isEmpty(viewValue) || isUndefined(minVal) || viewValue >= minVal;\n      };\n\n    setInitialValueAndObserver('min', minChange);\n  }\n\n  if (hasMaxAttr) {\n    ctrl.$validators.max = supportsRange ?\n      // Since all browsers set the input to a valid value, we don't need to check validity\n      function noopMaxValidator() { return true; } :\n      // non-support browsers validate the max val\n      function maxValidator(modelValue, viewValue) {\n        return ctrl.$isEmpty(viewValue) || isUndefined(maxVal) || viewValue <= maxVal;\n      };\n\n    setInitialValueAndObserver('max', maxChange);\n  }\n\n  if (hasStepAttr) {\n    ctrl.$validators.step = supportsRange ?\n      function nativeStepValidator() {\n        // Currently, only FF implements the spec on step change correctly (i.e. adjusting the\n        // input element value to a valid value). It's possible that other browsers set the stepMismatch\n        // validity error instead, so we can at least report an error in that case.\n        return !validity.stepMismatch;\n      } :\n      // ngStep doesn't set the setp attr, so the browser doesn't adjust the input value as setting step would\n      function stepValidator(modelValue, viewValue) {\n        return ctrl.$isEmpty(viewValue) || isUndefined(stepVal) ||\n               isValidForStep(viewValue, minVal || 0, stepVal);\n      };\n\n    setInitialValueAndObserver('step', stepChange);\n  }\n\n  function setInitialValueAndObserver(htmlAttrName, changeFn) {\n    // interpolated attributes set the attribute value only after a digest, but we need the\n    // attribute value when the input is first rendered, so that the browser can adjust the\n    // input value based on the min/max value\n    element.attr(htmlAttrName, attr[htmlAttrName]);\n    attr.$observe(htmlAttrName, changeFn);\n  }\n\n  function minChange(val) {\n    minVal = parseNumberAttrVal(val);\n    // ignore changes before model is initialized\n    if (isNumberNaN(ctrl.$modelValue)) {\n      return;\n    }\n\n    if (supportsRange) {\n      var elVal = element.val();\n      // IE11 doesn't set the el val correctly if the minVal is greater than the element value\n      if (minVal > elVal) {\n        elVal = minVal;\n        element.val(elVal);\n      }\n      ctrl.$setViewValue(elVal);\n    } else {\n      // TODO(matsko): implement validateLater to reduce number of validations\n      ctrl.$validate();\n    }\n  }\n\n  function maxChange(val) {\n    maxVal = parseNumberAttrVal(val);\n    // ignore changes before model is initialized\n    if (isNumberNaN(ctrl.$modelValue)) {\n      return;\n    }\n\n    if (supportsRange) {\n      var elVal = element.val();\n      // IE11 doesn't set the el val correctly if the maxVal is less than the element value\n      if (maxVal < elVal) {\n        element.val(maxVal);\n        // IE11 and Chrome don't set the value to the minVal when max < min\n        elVal = maxVal < minVal ? minVal : maxVal;\n      }\n      ctrl.$setViewValue(elVal);\n    } else {\n      // TODO(matsko): implement validateLater to reduce number of validations\n      ctrl.$validate();\n    }\n  }\n\n  function stepChange(val) {\n    stepVal = parseNumberAttrVal(val);\n    // ignore changes before model is initialized\n    if (isNumberNaN(ctrl.$modelValue)) {\n      return;\n    }\n\n    // Some browsers don't adjust the input value correctly, but set the stepMismatch error\n    if (supportsRange && ctrl.$viewValue !== element.val()) {\n      ctrl.$setViewValue(element.val());\n    } else {\n      // TODO(matsko): implement validateLater to reduce number of validations\n      ctrl.$validate();\n    }\n  }\n}\n\nfunction urlInputType(scope, element, attr, ctrl, $sniffer, $browser) {\n  // Note: no badInputChecker here by purpose as `url` is only a validation\n  // in browsers, i.e. we can always read out input.value even if it is not valid!\n  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);\n  stringBasedInputType(ctrl);\n\n  ctrl.$$parserName = 'url';\n  ctrl.$validators.url = function(modelValue, viewValue) {\n    var value = modelValue || viewValue;\n    return ctrl.$isEmpty(value) || URL_REGEXP.test(value);\n  };\n}\n\nfunction emailInputType(scope, element, attr, ctrl, $sniffer, $browser) {\n  // Note: no badInputChecker here by purpose as `url` is only a validation\n  // in browsers, i.e. we can always read out input.value even if it is not valid!\n  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);\n  stringBasedInputType(ctrl);\n\n  ctrl.$$parserName = 'email';\n  ctrl.$validators.email = function(modelValue, viewValue) {\n    var value = modelValue || viewValue;\n    return ctrl.$isEmpty(value) || EMAIL_REGEXP.test(value);\n  };\n}\n\nfunction radioInputType(scope, element, attr, ctrl) {\n  var doTrim = !attr.ngTrim || trim(attr.ngTrim) !== 'false';\n  // make the name unique, if not defined\n  if (isUndefined(attr.name)) {\n    element.attr('name', nextUid());\n  }\n\n  var listener = function(ev) {\n    var value;\n    if (element[0].checked) {\n      value = attr.value;\n      if (doTrim) {\n        value = trim(value);\n      }\n      ctrl.$setViewValue(value, ev && ev.type);\n    }\n  };\n\n  element.on('click', listener);\n\n  ctrl.$render = function() {\n    var value = attr.value;\n    if (doTrim) {\n      value = trim(value);\n    }\n    element[0].checked = (value === ctrl.$viewValue);\n  };\n\n  attr.$observe('value', ctrl.$render);\n}\n\nfunction parseConstantExpr($parse, context, name, expression, fallback) {\n  var parseFn;\n  if (isDefined(expression)) {\n    parseFn = $parse(expression);\n    if (!parseFn.constant) {\n      throw ngModelMinErr('constexpr', 'Expected constant expression for `{0}`, but saw ' +\n                                   '`{1}`.', name, expression);\n    }\n    return parseFn(context);\n  }\n  return fallback;\n}\n\nfunction checkboxInputType(scope, element, attr, ctrl, $sniffer, $browser, $filter, $parse) {\n  var trueValue = parseConstantExpr($parse, scope, 'ngTrueValue', attr.ngTrueValue, true);\n  var falseValue = parseConstantExpr($parse, scope, 'ngFalseValue', attr.ngFalseValue, false);\n\n  var listener = function(ev) {\n    ctrl.$setViewValue(element[0].checked, ev && ev.type);\n  };\n\n  element.on('click', listener);\n\n  ctrl.$render = function() {\n    element[0].checked = ctrl.$viewValue;\n  };\n\n  // Override the standard `$isEmpty` because the $viewValue of an empty checkbox is always set to `false`\n  // This is because of the parser below, which compares the `$modelValue` with `trueValue` to convert\n  // it to a boolean.\n  ctrl.$isEmpty = function(value) {\n    return value === false;\n  };\n\n  ctrl.$formatters.push(function(value) {\n    return equals(value, trueValue);\n  });\n\n  ctrl.$parsers.push(function(value) {\n    return value ? trueValue : falseValue;\n  });\n}\n\n\n/**\n * @ngdoc directive\n * @name textarea\n * @restrict E\n *\n * @description\n * HTML textarea element control with angular data-binding. The data-binding and validation\n * properties of this element are exactly the same as those of the\n * {@link ng.directive:input input element}.\n *\n * @param {string} ngModel Assignable angular expression to data-bind to.\n * @param {string=} name Property name of the form under which the control is published.\n * @param {string=} required Sets `required` validation error key if the value is not entered.\n * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to\n *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of\n *    `required` when you want to data-bind to the `required` attribute.\n * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than\n *    minlength.\n * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than\n *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any\n *    length.\n * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}\n *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.\n *    If the expression evaluates to a RegExp object, then this is used directly.\n *    If the expression evaluates to a string, then it will be converted to a RegExp\n *    after wrapping it in `^` and `$` characters. For instance, `\"abc\"` will be converted to\n *    `new RegExp('^abc$')`.<br />\n *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to\n *    start at the index of the last search's match, thus not taking the whole input value into\n *    account.\n * @param {string=} ngChange Angular expression to be executed when input changes due to user\n *    interaction with the input element.\n * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.\n *\n * @knownIssue\n *\n * When specifying the `placeholder` attribute of `<textarea>`, Internet Explorer will temporarily\n * insert the placeholder value as the textarea's content. If the placeholder value contains\n * interpolation (`{{ ... }}`), an error will be logged in the console when Angular tries to update\n * the value of the by-then-removed text node. This doesn't affect the functionality of the\n * textarea, but can be undesirable.\n *\n * You can work around this Internet Explorer issue by using `ng-attr-placeholder` instead of\n * `placeholder` on textareas, whenever you need interpolation in the placeholder value. You can\n * find more details on `ngAttr` in the\n * [Interpolation](guide/interpolation#-ngattr-for-binding-to-arbitrary-attributes) section of the\n * Developer Guide.\n */\n\n\n/**\n * @ngdoc directive\n * @name input\n * @restrict E\n *\n * @description\n * HTML input element control. When used together with {@link ngModel `ngModel`}, it provides data-binding,\n * input state control, and validation.\n * Input control follows HTML5 input types and polyfills the HTML5 validation behavior for older browsers.\n *\n * <div class=\"alert alert-warning\">\n * **Note:** Not every feature offered is available for all input types.\n * Specifically, data binding and event handling via `ng-model` is unsupported for `input[file]`.\n * </div>\n *\n * @param {string} ngModel Assignable angular expression to data-bind to.\n * @param {string=} name Property name of the form under which the control is published.\n * @param {string=} required Sets `required` validation error key if the value is not entered.\n * @param {boolean=} ngRequired Sets `required` attribute if set to true\n * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than\n *    minlength.\n * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than\n *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any\n *    length.\n * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}\n *    value does not match a RegExp found by evaluating the Angular expression given in the attribute value.\n *    If the expression evaluates to a RegExp object, then this is used directly.\n *    If the expression evaluates to a string, then it will be converted to a RegExp\n *    after wrapping it in `^` and `$` characters. For instance, `\"abc\"` will be converted to\n *    `new RegExp('^abc$')`.<br />\n *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to\n *    start at the index of the last search's match, thus not taking the whole input value into\n *    account.\n * @param {string=} ngChange Angular expression to be executed when input changes due to user\n *    interaction with the input element.\n * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.\n *    This parameter is ignored for input[type=password] controls, which will never trim the\n *    input.\n *\n * @example\n    <example name=\"input-directive\" module=\"inputExample\">\n      <file name=\"index.html\">\n       <script>\n          angular.module('inputExample', [])\n            .controller('ExampleController', ['$scope', function($scope) {\n              $scope.user = {name: 'guest', last: 'visitor'};\n            }]);\n       </script>\n       <div ng-controller=\"ExampleController\">\n         <form name=\"myForm\">\n           <label>\n              User name:\n              <input type=\"text\" name=\"userName\" ng-model=\"user.name\" required>\n           </label>\n           <div role=\"alert\">\n             <span class=\"error\" ng-show=\"myForm.userName.$error.required\">\n              Required!</span>\n           </div>\n           <label>\n              Last name:\n              <input type=\"text\" name=\"lastName\" ng-model=\"user.last\"\n              ng-minlength=\"3\" ng-maxlength=\"10\">\n           </label>\n           <div role=\"alert\">\n             <span class=\"error\" ng-show=\"myForm.lastName.$error.minlength\">\n               Too short!</span>\n             <span class=\"error\" ng-show=\"myForm.lastName.$error.maxlength\">\n               Too long!</span>\n           </div>\n         </form>\n         <hr>\n         <tt>user = {{user}}</tt><br/>\n         <tt>myForm.userName.$valid = {{myForm.userName.$valid}}</tt><br/>\n         <tt>myForm.userName.$error = {{myForm.userName.$error}}</tt><br/>\n         <tt>myForm.lastName.$valid = {{myForm.lastName.$valid}}</tt><br/>\n         <tt>myForm.lastName.$error = {{myForm.lastName.$error}}</tt><br/>\n         <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>\n         <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>\n         <tt>myForm.$error.minlength = {{!!myForm.$error.minlength}}</tt><br/>\n         <tt>myForm.$error.maxlength = {{!!myForm.$error.maxlength}}</tt><br/>\n       </div>\n      </file>\n      <file name=\"protractor.js\" type=\"protractor\">\n        var user = element(by.exactBinding('user'));\n        var userNameValid = element(by.binding('myForm.userName.$valid'));\n        var lastNameValid = element(by.binding('myForm.lastName.$valid'));\n        var lastNameError = element(by.binding('myForm.lastName.$error'));\n        var formValid = element(by.binding('myForm.$valid'));\n        var userNameInput = element(by.model('user.name'));\n        var userLastInput = element(by.model('user.last'));\n\n        it('should initialize to model', function() {\n          expect(user.getText()).toContain('{\"name\":\"guest\",\"last\":\"visitor\"}');\n          expect(userNameValid.getText()).toContain('true');\n          expect(formValid.getText()).toContain('true');\n        });\n\n        it('should be invalid if empty when required', function() {\n          userNameInput.clear();\n          userNameInput.sendKeys('');\n\n          expect(user.getText()).toContain('{\"last\":\"visitor\"}');\n          expect(userNameValid.getText()).toContain('false');\n          expect(formValid.getText()).toContain('false');\n        });\n\n        it('should be valid if empty when min length is set', function() {\n          userLastInput.clear();\n          userLastInput.sendKeys('');\n\n          expect(user.getText()).toContain('{\"name\":\"guest\",\"last\":\"\"}');\n          expect(lastNameValid.getText()).toContain('true');\n          expect(formValid.getText()).toContain('true');\n        });\n\n        it('should be invalid if less than required min length', function() {\n          userLastInput.clear();\n          userLastInput.sendKeys('xx');\n\n          expect(user.getText()).toContain('{\"name\":\"guest\"}');\n          expect(lastNameValid.getText()).toContain('false');\n          expect(lastNameError.getText()).toContain('minlength');\n          expect(formValid.getText()).toContain('false');\n        });\n\n        it('should be invalid if longer than max length', function() {\n          userLastInput.clear();\n          userLastInput.sendKeys('some ridiculously long name');\n\n          expect(user.getText()).toContain('{\"name\":\"guest\"}');\n          expect(lastNameValid.getText()).toContain('false');\n          expect(lastNameError.getText()).toContain('maxlength');\n          expect(formValid.getText()).toContain('false');\n        });\n      </file>\n    </example>\n */\nvar inputDirective = ['$browser', '$sniffer', '$filter', '$parse',\n    function($browser, $sniffer, $filter, $parse) {\n  return {\n    restrict: 'E',\n    require: ['?ngModel'],\n    link: {\n      pre: function(scope, element, attr, ctrls) {\n        if (ctrls[0]) {\n          (inputType[lowercase(attr.type)] || inputType.text)(scope, element, attr, ctrls[0], $sniffer,\n                                                              $browser, $filter, $parse);\n        }\n      }\n    }\n  };\n}];\n\n\n\nvar CONSTANT_VALUE_REGEXP = /^(true|false|\\d+)$/;\n/**\n * @ngdoc directive\n * @name ngValue\n * @restrict A\n * @priority 100\n *\n * @description\n * Binds the given expression to the value of the element.\n *\n * It is mainly used on {@link input[radio] `input[radio]`} and option elements,\n * so that when the element is selected, the {@link ngModel `ngModel`} of that element (or its\n * {@link select `select`} parent element) is set to the bound value. It is especially useful\n * for dynamically generated lists using {@link ngRepeat `ngRepeat`}, as shown below.\n *\n * It can also be used to achieve one-way binding of a given expression to an input element\n * such as an `input[text]` or a `textarea`, when that element does not use ngModel.\n *\n * @element ANY\n * @param {string=} ngValue AngularJS expression, whose value will be bound to the `value` attribute\n * and `value` property of the element.\n *\n * @example\n    <example name=\"ngValue-directive\" module=\"valueExample\">\n      <file name=\"index.html\">\n       <script>\n          angular.module('valueExample', [])\n            .controller('ExampleController', ['$scope', function($scope) {\n              $scope.names = ['pizza', 'unicorns', 'robots'];\n              $scope.my = { favorite: 'unicorns' };\n            }]);\n       </script>\n        <form ng-controller=\"ExampleController\">\n          <h2>Which is your favorite?</h2>\n            <label ng-repeat=\"name in names\" for=\"{{name}}\">\n              {{name}}\n              <input type=\"radio\"\n                     ng-model=\"my.favorite\"\n                     ng-value=\"name\"\n                     id=\"{{name}}\"\n                     name=\"favorite\">\n            </label>\n          <div>You chose {{my.favorite}}</div>\n        </form>\n      </file>\n      <file name=\"protractor.js\" type=\"protractor\">\n        var favorite = element(by.binding('my.favorite'));\n\n        it('should initialize to model', function() {\n          expect(favorite.getText()).toContain('unicorns');\n        });\n        it('should bind the values to the inputs', function() {\n          element.all(by.model('my.favorite')).get(0).click();\n          expect(favorite.getText()).toContain('pizza');\n        });\n      </file>\n    </example>\n */\nvar ngValueDirective = function() {\n  /**\n   *  inputs use the value attribute as their default value if the value property is not set.\n   *  Once the value property has been set (by adding input), it will not react to changes to\n   *  the value attribute anymore. Setting both attribute and property fixes this behavior, and\n   *  makes it possible to use ngValue as a sort of one-way bind.\n   */\n  function updateElementValue(element, attr, value) {\n    // Support: IE9 only\n    // In IE9 values are converted to string (e.g. `input.value = null` results in `input.value === 'null'`).\n    var propValue = isDefined(value) ? value : (msie === 9) ? '' : null;\n    element.prop('value', propValue);\n    attr.$set('value', value);\n  }\n\n  return {\n    restrict: 'A',\n    priority: 100,\n    compile: function(tpl, tplAttr) {\n      if (CONSTANT_VALUE_REGEXP.test(tplAttr.ngValue)) {\n        return function ngValueConstantLink(scope, elm, attr) {\n          var value = scope.$eval(attr.ngValue);\n          updateElementValue(elm, attr, value);\n        };\n      } else {\n        return function ngValueLink(scope, elm, attr) {\n          scope.$watch(attr.ngValue, function valueWatchAction(value) {\n            updateElementValue(elm, attr, value);\n          });\n        };\n      }\n    }\n  };\n};\n\n/**\n * @ngdoc directive\n * @name ngBind\n * @restrict AC\n *\n * @description\n * The `ngBind` attribute tells Angular to replace the text content of the specified HTML element\n * with the value of a given expression, and to update the text content when the value of that\n * expression changes.\n *\n * Typically, you don't use `ngBind` directly, but instead you use the double curly markup like\n * `{{ expression }}` which is similar but less verbose.\n *\n * It is preferable to use `ngBind` instead of `{{ expression }}` if a template is momentarily\n * displayed by the browser in its raw state before Angular compiles it. Since `ngBind` is an\n * element attribute, it makes the bindings invisible to the user while the page is loading.\n *\n * An alternative solution to this problem would be using the\n * {@link ng.directive:ngCloak ngCloak} directive.\n *\n *\n * @element ANY\n * @param {expression} ngBind {@link guide/expression Expression} to evaluate.\n *\n * @example\n * Enter a name in the Live Preview text box; the greeting below the text box changes instantly.\n   <example module=\"bindExample\" name=\"ng-bind\">\n     <file name=\"index.html\">\n       <script>\n         angular.module('bindExample', [])\n           .controller('ExampleController', ['$scope', function($scope) {\n             $scope.name = 'Whirled';\n           }]);\n       </script>\n       <div ng-controller=\"ExampleController\">\n         <label>Enter name: <input type=\"text\" ng-model=\"name\"></label><br>\n         Hello <span ng-bind=\"name\"></span>!\n       </div>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should check ng-bind', function() {\n         var nameInput = element(by.model('name'));\n\n         expect(element(by.binding('name')).getText()).toBe('Whirled');\n         nameInput.clear();\n         nameInput.sendKeys('world');\n         expect(element(by.binding('name')).getText()).toBe('world');\n       });\n     </file>\n   </example>\n */\nvar ngBindDirective = ['$compile', function($compile) {\n  return {\n    restrict: 'AC',\n    compile: function ngBindCompile(templateElement) {\n      $compile.$$addBindingClass(templateElement);\n      return function ngBindLink(scope, element, attr) {\n        $compile.$$addBindingInfo(element, attr.ngBind);\n        element = element[0];\n        scope.$watch(attr.ngBind, function ngBindWatchAction(value) {\n          element.textContent = stringify(value);\n        });\n      };\n    }\n  };\n}];\n\n\n/**\n * @ngdoc directive\n * @name ngBindTemplate\n *\n * @description\n * The `ngBindTemplate` directive specifies that the element\n * text content should be replaced with the interpolation of the template\n * in the `ngBindTemplate` attribute.\n * Unlike `ngBind`, the `ngBindTemplate` can contain multiple `{{` `}}`\n * expressions. This directive is needed since some HTML elements\n * (such as TITLE and OPTION) cannot contain SPAN elements.\n *\n * @element ANY\n * @param {string} ngBindTemplate template of form\n *   <tt>{{</tt> <tt>expression</tt> <tt>}}</tt> to eval.\n *\n * @example\n * Try it here: enter text in text box and watch the greeting change.\n   <example module=\"bindExample\" name=\"ng-bind-template\">\n     <file name=\"index.html\">\n       <script>\n         angular.module('bindExample', [])\n           .controller('ExampleController', ['$scope', function($scope) {\n             $scope.salutation = 'Hello';\n             $scope.name = 'World';\n           }]);\n       </script>\n       <div ng-controller=\"ExampleController\">\n        <label>Salutation: <input type=\"text\" ng-model=\"salutation\"></label><br>\n        <label>Name: <input type=\"text\" ng-model=\"name\"></label><br>\n        <pre ng-bind-template=\"{{salutation}} {{name}}!\"></pre>\n       </div>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should check ng-bind', function() {\n         var salutationElem = element(by.binding('salutation'));\n         var salutationInput = element(by.model('salutation'));\n         var nameInput = element(by.model('name'));\n\n         expect(salutationElem.getText()).toBe('Hello World!');\n\n         salutationInput.clear();\n         salutationInput.sendKeys('Greetings');\n         nameInput.clear();\n         nameInput.sendKeys('user');\n\n         expect(salutationElem.getText()).toBe('Greetings user!');\n       });\n     </file>\n   </example>\n */\nvar ngBindTemplateDirective = ['$interpolate', '$compile', function($interpolate, $compile) {\n  return {\n    compile: function ngBindTemplateCompile(templateElement) {\n      $compile.$$addBindingClass(templateElement);\n      return function ngBindTemplateLink(scope, element, attr) {\n        var interpolateFn = $interpolate(element.attr(attr.$attr.ngBindTemplate));\n        $compile.$$addBindingInfo(element, interpolateFn.expressions);\n        element = element[0];\n        attr.$observe('ngBindTemplate', function(value) {\n          element.textContent = isUndefined(value) ? '' : value;\n        });\n      };\n    }\n  };\n}];\n\n\n/**\n * @ngdoc directive\n * @name ngBindHtml\n *\n * @description\n * Evaluates the expression and inserts the resulting HTML into the element in a secure way. By default,\n * the resulting HTML content will be sanitized using the {@link ngSanitize.$sanitize $sanitize} service.\n * To utilize this functionality, ensure that `$sanitize` is available, for example, by including {@link\n * ngSanitize} in your module's dependencies (not in core Angular). In order to use {@link ngSanitize}\n * in your module's dependencies, you need to include \"angular-sanitize.js\" in your application.\n *\n * You may also bypass sanitization for values you know are safe. To do so, bind to\n * an explicitly trusted value via {@link ng.$sce#trustAsHtml $sce.trustAsHtml}.  See the example\n * under {@link ng.$sce#show-me-an-example-using-sce- Strict Contextual Escaping (SCE)}.\n *\n * Note: If a `$sanitize` service is unavailable and the bound value isn't explicitly trusted, you\n * will have an exception (instead of an exploit.)\n *\n * @element ANY\n * @param {expression} ngBindHtml {@link guide/expression Expression} to evaluate.\n *\n * @example\n\n   <example module=\"bindHtmlExample\" deps=\"angular-sanitize.js\" name=\"ng-bind-html\">\n     <file name=\"index.html\">\n       <div ng-controller=\"ExampleController\">\n        <p ng-bind-html=\"myHTML\"></p>\n       </div>\n     </file>\n\n     <file name=\"script.js\">\n       angular.module('bindHtmlExample', ['ngSanitize'])\n         .controller('ExampleController', ['$scope', function($scope) {\n           $scope.myHTML =\n              'I am an <code>HTML</code>string with ' +\n              '<a href=\"#\">links!</a> and other <em>stuff</em>';\n         }]);\n     </file>\n\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should check ng-bind-html', function() {\n         expect(element(by.binding('myHTML')).getText()).toBe(\n             'I am an HTMLstring with links! and other stuff');\n       });\n     </file>\n   </example>\n */\nvar ngBindHtmlDirective = ['$sce', '$parse', '$compile', function($sce, $parse, $compile) {\n  return {\n    restrict: 'A',\n    compile: function ngBindHtmlCompile(tElement, tAttrs) {\n      var ngBindHtmlGetter = $parse(tAttrs.ngBindHtml);\n      var ngBindHtmlWatch = $parse(tAttrs.ngBindHtml, function sceValueOf(val) {\n        // Unwrap the value to compare the actual inner safe value, not the wrapper object.\n        return $sce.valueOf(val);\n      });\n      $compile.$$addBindingClass(tElement);\n\n      return function ngBindHtmlLink(scope, element, attr) {\n        $compile.$$addBindingInfo(element, attr.ngBindHtml);\n\n        scope.$watch(ngBindHtmlWatch, function ngBindHtmlWatchAction() {\n          // The watched value is the unwrapped value. To avoid re-escaping, use the direct getter.\n          var value = ngBindHtmlGetter(scope);\n          element.html($sce.getTrustedHtml(value) || '');\n        });\n      };\n    }\n  };\n}];\n\n/**\n * @ngdoc directive\n * @name ngChange\n * @restrict A\n *\n * @description\n * Evaluate the given expression when the user changes the input.\n * The expression is evaluated immediately, unlike the JavaScript onchange event\n * which only triggers at the end of a change (usually, when the user leaves the\n * form element or presses the return key).\n *\n * The `ngChange` expression is only evaluated when a change in the input value causes\n * a new value to be committed to the model.\n *\n * It will not be evaluated:\n * * if the value returned from the `$parsers` transformation pipeline has not changed\n * * if the input has continued to be invalid since the model will stay `null`\n * * if the model is changed programmatically and not by a change to the input value\n *\n *\n * Note, this directive requires `ngModel` to be present.\n *\n * @element ANY\n * @param {expression} ngChange {@link guide/expression Expression} to evaluate upon change\n * in input value.\n *\n * @example\n * <example name=\"ngChange-directive\" module=\"changeExample\">\n *   <file name=\"index.html\">\n *     <script>\n *       angular.module('changeExample', [])\n *         .controller('ExampleController', ['$scope', function($scope) {\n *           $scope.counter = 0;\n *           $scope.change = function() {\n *             $scope.counter++;\n *           };\n *         }]);\n *     </script>\n *     <div ng-controller=\"ExampleController\">\n *       <input type=\"checkbox\" ng-model=\"confirmed\" ng-change=\"change()\" id=\"ng-change-example1\" />\n *       <input type=\"checkbox\" ng-model=\"confirmed\" id=\"ng-change-example2\" />\n *       <label for=\"ng-change-example2\">Confirmed</label><br />\n *       <tt>debug = {{confirmed}}</tt><br/>\n *       <tt>counter = {{counter}}</tt><br/>\n *     </div>\n *   </file>\n *   <file name=\"protractor.js\" type=\"protractor\">\n *     var counter = element(by.binding('counter'));\n *     var debug = element(by.binding('confirmed'));\n *\n *     it('should evaluate the expression if changing from view', function() {\n *       expect(counter.getText()).toContain('0');\n *\n *       element(by.id('ng-change-example1')).click();\n *\n *       expect(counter.getText()).toContain('1');\n *       expect(debug.getText()).toContain('true');\n *     });\n *\n *     it('should not evaluate the expression if changing from model', function() {\n *       element(by.id('ng-change-example2')).click();\n\n *       expect(counter.getText()).toContain('0');\n *       expect(debug.getText()).toContain('true');\n *     });\n *   </file>\n * </example>\n */\nvar ngChangeDirective = valueFn({\n  restrict: 'A',\n  require: 'ngModel',\n  link: function(scope, element, attr, ctrl) {\n    ctrl.$viewChangeListeners.push(function() {\n      scope.$eval(attr.ngChange);\n    });\n  }\n});\n\n/* exported\n  ngClassDirective,\n  ngClassEvenDirective,\n  ngClassOddDirective\n*/\n\nfunction classDirective(name, selector) {\n  name = 'ngClass' + name;\n  var indexWatchExpression;\n\n  return ['$parse', function($parse) {\n    return {\n      restrict: 'AC',\n      link: function(scope, element, attr) {\n        var expression = attr[name].trim();\n        var isOneTime = (expression.charAt(0) === ':') && (expression.charAt(1) === ':');\n\n        var watchInterceptor = isOneTime ? toFlatValue : toClassString;\n        var watchExpression = $parse(expression, watchInterceptor);\n        var watchAction = isOneTime ? ngClassOneTimeWatchAction : ngClassWatchAction;\n\n        var classCounts = element.data('$classCounts');\n        var oldModulo = true;\n        var oldClassString;\n\n        if (!classCounts) {\n          // Use createMap() to prevent class assumptions involving property\n          // names in Object.prototype\n          classCounts = createMap();\n          element.data('$classCounts', classCounts);\n        }\n\n        if (name !== 'ngClass') {\n          if (!indexWatchExpression) {\n            indexWatchExpression = $parse('$index', function moduloTwo($index) {\n              // eslint-disable-next-line no-bitwise\n              return $index & 1;\n            });\n          }\n\n          scope.$watch(indexWatchExpression, ngClassIndexWatchAction);\n        }\n\n        scope.$watch(watchExpression, watchAction, isOneTime);\n\n        function addClasses(classString) {\n          classString = digestClassCounts(split(classString), 1);\n          attr.$addClass(classString);\n        }\n\n        function removeClasses(classString) {\n          classString = digestClassCounts(split(classString), -1);\n          attr.$removeClass(classString);\n        }\n\n        function updateClasses(oldClassString, newClassString) {\n          var oldClassArray = split(oldClassString);\n          var newClassArray = split(newClassString);\n\n          var toRemoveArray = arrayDifference(oldClassArray, newClassArray);\n          var toAddArray = arrayDifference(newClassArray, oldClassArray);\n\n          var toRemoveString = digestClassCounts(toRemoveArray, -1);\n          var toAddString = digestClassCounts(toAddArray, 1);\n\n          attr.$addClass(toAddString);\n          attr.$removeClass(toRemoveString);\n        }\n\n        function digestClassCounts(classArray, count) {\n          var classesToUpdate = [];\n\n          forEach(classArray, function(className) {\n            if (count > 0 || classCounts[className]) {\n              classCounts[className] = (classCounts[className] || 0) + count;\n              if (classCounts[className] === +(count > 0)) {\n                classesToUpdate.push(className);\n              }\n            }\n          });\n\n          return classesToUpdate.join(' ');\n        }\n\n        function ngClassIndexWatchAction(newModulo) {\n          // This watch-action should run before the `ngClass[OneTime]WatchAction()`, thus it\n          // adds/removes `oldClassString`. If the `ngClass` expression has changed as well, the\n          // `ngClass[OneTime]WatchAction()` will update the classes.\n          if (newModulo === selector) {\n            addClasses(oldClassString);\n          } else {\n            removeClasses(oldClassString);\n          }\n\n          oldModulo = newModulo;\n        }\n\n        function ngClassOneTimeWatchAction(newClassValue) {\n          var newClassString = toClassString(newClassValue);\n\n          if (newClassString !== oldClassString) {\n            ngClassWatchAction(newClassString);\n          }\n        }\n\n        function ngClassWatchAction(newClassString) {\n          if (oldModulo === selector) {\n            updateClasses(oldClassString, newClassString);\n          }\n\n          oldClassString = newClassString;\n        }\n      }\n    };\n  }];\n\n  // Helpers\n  function arrayDifference(tokens1, tokens2) {\n    if (!tokens1 || !tokens1.length) return [];\n    if (!tokens2 || !tokens2.length) return tokens1;\n\n    var values = [];\n\n    outer:\n    for (var i = 0; i < tokens1.length; i++) {\n      var token = tokens1[i];\n      for (var j = 0; j < tokens2.length; j++) {\n        if (token === tokens2[j]) continue outer;\n      }\n      values.push(token);\n    }\n\n    return values;\n  }\n\n  function split(classString) {\n    return classString && classString.split(' ');\n  }\n\n  function toClassString(classValue) {\n    var classString = classValue;\n\n    if (isArray(classValue)) {\n      classString = classValue.map(toClassString).join(' ');\n    } else if (isObject(classValue)) {\n      classString = Object.keys(classValue).\n        filter(function(key) { return classValue[key]; }).\n        join(' ');\n    }\n\n    return classString;\n  }\n\n  function toFlatValue(classValue) {\n    var flatValue = classValue;\n\n    if (isArray(classValue)) {\n      flatValue = classValue.map(toFlatValue);\n    } else if (isObject(classValue)) {\n      var hasUndefined = false;\n\n      flatValue = Object.keys(classValue).filter(function(key) {\n        var value = classValue[key];\n\n        if (!hasUndefined && isUndefined(value)) {\n          hasUndefined = true;\n        }\n\n        return value;\n      });\n\n      if (hasUndefined) {\n        // Prevent the `oneTimeLiteralWatchInterceptor` from unregistering\n        // the watcher, by including at least one `undefined` value.\n        flatValue.push(undefined);\n      }\n    }\n\n    return flatValue;\n  }\n}\n\n/**\n * @ngdoc directive\n * @name ngClass\n * @restrict AC\n * @element ANY\n *\n * @description\n * The `ngClass` directive allows you to dynamically set CSS classes on an HTML element by databinding\n * an expression that represents all classes to be added.\n *\n * The directive operates in three different ways, depending on which of three types the expression\n * evaluates to:\n *\n * 1. If the expression evaluates to a string, the string should be one or more space-delimited class\n * names.\n *\n * 2. If the expression evaluates to an object, then for each key-value pair of the\n * object with a truthy value the corresponding key is used as a class name.\n *\n * 3. If the expression evaluates to an array, each element of the array should either be a string as in\n * type 1 or an object as in type 2. This means that you can mix strings and objects together in an array\n * to give you more control over what CSS classes appear. See the code below for an example of this.\n *\n *\n * The directive won't add duplicate classes if a particular class was already set.\n *\n * When the expression changes, the previously added classes are removed and only then are the\n * new classes added.\n *\n * @knownIssue\n * You should not use {@link guide/interpolation interpolation} in the value of the `class`\n * attribute, when using the `ngClass` directive on the same element.\n * See {@link guide/interpolation#known-issues here} for more info.\n *\n * @animations\n * | Animation                        | Occurs                              |\n * |----------------------------------|-------------------------------------|\n * | {@link ng.$animate#addClass addClass}       | just before the class is applied to the element   |\n * | {@link ng.$animate#removeClass removeClass} | just before the class is removed from the element |\n *\n * ### ngClass and pre-existing CSS3 Transitions/Animations\n   The ngClass directive still supports CSS3 Transitions/Animations even if they do not follow the ngAnimate CSS naming structure.\n   Upon animation ngAnimate will apply supplementary CSS classes to track the start and end of an animation, but this will not hinder\n   any pre-existing CSS transitions already on the element. To get an idea of what happens during a class-based animation, be sure\n   to view the step by step details of {@link $animate#addClass $animate.addClass} and\n   {@link $animate#removeClass $animate.removeClass}.\n *\n * @param {expression} ngClass {@link guide/expression Expression} to eval. The result\n *   of the evaluation can be a string representing space delimited class\n *   names, an array, or a map of class names to boolean values. In the case of a map, the\n *   names of the properties whose values are truthy will be added as css classes to the\n *   element.\n *\n * @example\n * ### Basic\n   <example name=\"ng-class\">\n     <file name=\"index.html\">\n       <p ng-class=\"{strike: deleted, bold: important, 'has-error': error}\">Map Syntax Example</p>\n       <label>\n          <input type=\"checkbox\" ng-model=\"deleted\">\n          deleted (apply \"strike\" class)\n       </label><br>\n       <label>\n          <input type=\"checkbox\" ng-model=\"important\">\n          important (apply \"bold\" class)\n       </label><br>\n       <label>\n          <input type=\"checkbox\" ng-model=\"error\">\n          error (apply \"has-error\" class)\n       </label>\n       <hr>\n       <p ng-class=\"style\">Using String Syntax</p>\n       <input type=\"text\" ng-model=\"style\"\n              placeholder=\"Type: bold strike red\" aria-label=\"Type: bold strike red\">\n       <hr>\n       <p ng-class=\"[style1, style2, style3]\">Using Array Syntax</p>\n       <input ng-model=\"style1\"\n              placeholder=\"Type: bold, strike or red\" aria-label=\"Type: bold, strike or red\"><br>\n       <input ng-model=\"style2\"\n              placeholder=\"Type: bold, strike or red\" aria-label=\"Type: bold, strike or red 2\"><br>\n       <input ng-model=\"style3\"\n              placeholder=\"Type: bold, strike or red\" aria-label=\"Type: bold, strike or red 3\"><br>\n       <hr>\n       <p ng-class=\"[style4, {orange: warning}]\">Using Array and Map Syntax</p>\n       <input ng-model=\"style4\" placeholder=\"Type: bold, strike\" aria-label=\"Type: bold, strike\"><br>\n       <label><input type=\"checkbox\" ng-model=\"warning\"> warning (apply \"orange\" class)</label>\n     </file>\n     <file name=\"style.css\">\n       .strike {\n           text-decoration: line-through;\n       }\n       .bold {\n           font-weight: bold;\n       }\n       .red {\n           color: red;\n       }\n       .has-error {\n           color: red;\n           background-color: yellow;\n       }\n       .orange {\n           color: orange;\n       }\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       var ps = element.all(by.css('p'));\n\n       it('should let you toggle the class', function() {\n\n         expect(ps.first().getAttribute('class')).not.toMatch(/bold/);\n         expect(ps.first().getAttribute('class')).not.toMatch(/has-error/);\n\n         element(by.model('important')).click();\n         expect(ps.first().getAttribute('class')).toMatch(/bold/);\n\n         element(by.model('error')).click();\n         expect(ps.first().getAttribute('class')).toMatch(/has-error/);\n       });\n\n       it('should let you toggle string example', function() {\n         expect(ps.get(1).getAttribute('class')).toBe('');\n         element(by.model('style')).clear();\n         element(by.model('style')).sendKeys('red');\n         expect(ps.get(1).getAttribute('class')).toBe('red');\n       });\n\n       it('array example should have 3 classes', function() {\n         expect(ps.get(2).getAttribute('class')).toBe('');\n         element(by.model('style1')).sendKeys('bold');\n         element(by.model('style2')).sendKeys('strike');\n         element(by.model('style3')).sendKeys('red');\n         expect(ps.get(2).getAttribute('class')).toBe('bold strike red');\n       });\n\n       it('array with map example should have 2 classes', function() {\n         expect(ps.last().getAttribute('class')).toBe('');\n         element(by.model('style4')).sendKeys('bold');\n         element(by.model('warning')).click();\n         expect(ps.last().getAttribute('class')).toBe('bold orange');\n       });\n     </file>\n   </example>\n\n   @example\n   ### Animations\n\n   The example below demonstrates how to perform animations using ngClass.\n\n   <example module=\"ngAnimate\" deps=\"angular-animate.js\" animations=\"true\" name=\"ng-class\">\n     <file name=\"index.html\">\n      <input id=\"setbtn\" type=\"button\" value=\"set\" ng-click=\"myVar='my-class'\">\n      <input id=\"clearbtn\" type=\"button\" value=\"clear\" ng-click=\"myVar=''\">\n      <br>\n      <span class=\"base-class\" ng-class=\"myVar\">Sample Text</span>\n     </file>\n     <file name=\"style.css\">\n       .base-class {\n         transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;\n       }\n\n       .base-class.my-class {\n         color: red;\n         font-size:3em;\n       }\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should check ng-class', function() {\n         expect(element(by.css('.base-class')).getAttribute('class')).not.\n           toMatch(/my-class/);\n\n         element(by.id('setbtn')).click();\n\n         expect(element(by.css('.base-class')).getAttribute('class')).\n           toMatch(/my-class/);\n\n         element(by.id('clearbtn')).click();\n\n         expect(element(by.css('.base-class')).getAttribute('class')).not.\n           toMatch(/my-class/);\n       });\n     </file>\n   </example>\n */\nvar ngClassDirective = classDirective('', true);\n\n/**\n * @ngdoc directive\n * @name ngClassOdd\n * @restrict AC\n *\n * @description\n * The `ngClassOdd` and `ngClassEven` directives work exactly as\n * {@link ng.directive:ngClass ngClass}, except they work in\n * conjunction with `ngRepeat` and take effect only on odd (even) rows.\n *\n * This directive can be applied only within the scope of an\n * {@link ng.directive:ngRepeat ngRepeat}.\n *\n * @element ANY\n * @param {expression} ngClassOdd {@link guide/expression Expression} to eval. The result\n *   of the evaluation can be a string representing space delimited class names or an array.\n *\n * @example\n   <example name=\"ng-class-odd\">\n     <file name=\"index.html\">\n        <ol ng-init=\"names=['John', 'Mary', 'Cate', 'Suz']\">\n          <li ng-repeat=\"name in names\">\n           <span ng-class-odd=\"'odd'\" ng-class-even=\"'even'\">\n             {{name}}\n           </span>\n          </li>\n        </ol>\n     </file>\n     <file name=\"style.css\">\n       .odd {\n         color: red;\n       }\n       .even {\n         color: blue;\n       }\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should check ng-class-odd and ng-class-even', function() {\n         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).\n           toMatch(/odd/);\n         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).\n           toMatch(/even/);\n       });\n     </file>\n   </example>\n */\nvar ngClassOddDirective = classDirective('Odd', 0);\n\n/**\n * @ngdoc directive\n * @name ngClassEven\n * @restrict AC\n *\n * @description\n * The `ngClassOdd` and `ngClassEven` directives work exactly as\n * {@link ng.directive:ngClass ngClass}, except they work in\n * conjunction with `ngRepeat` and take effect only on odd (even) rows.\n *\n * This directive can be applied only within the scope of an\n * {@link ng.directive:ngRepeat ngRepeat}.\n *\n * @element ANY\n * @param {expression} ngClassEven {@link guide/expression Expression} to eval. The\n *   result of the evaluation can be a string representing space delimited class names or an array.\n *\n * @example\n   <example name=\"ng-class-even\">\n     <file name=\"index.html\">\n        <ol ng-init=\"names=['John', 'Mary', 'Cate', 'Suz']\">\n          <li ng-repeat=\"name in names\">\n           <span ng-class-odd=\"'odd'\" ng-class-even=\"'even'\">\n             {{name}} &nbsp; &nbsp; &nbsp;\n           </span>\n          </li>\n        </ol>\n     </file>\n     <file name=\"style.css\">\n       .odd {\n         color: red;\n       }\n       .even {\n         color: blue;\n       }\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should check ng-class-odd and ng-class-even', function() {\n         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).\n           toMatch(/odd/);\n         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).\n           toMatch(/even/);\n       });\n     </file>\n   </example>\n */\nvar ngClassEvenDirective = classDirective('Even', 1);\n\n/**\n * @ngdoc directive\n * @name ngCloak\n * @restrict AC\n *\n * @description\n * The `ngCloak` directive is used to prevent the Angular html template from being briefly\n * displayed by the browser in its raw (uncompiled) form while your application is loading. Use this\n * directive to avoid the undesirable flicker effect caused by the html template display.\n *\n * The directive can be applied to the `<body>` element, but the preferred usage is to apply\n * multiple `ngCloak` directives to small portions of the page to permit progressive rendering\n * of the browser view.\n *\n * `ngCloak` works in cooperation with the following css rule embedded within `angular.js` and\n * `angular.min.js`.\n * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).\n *\n * ```css\n * [ng\\:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x-ng-cloak {\n *   display: none !important;\n * }\n * ```\n *\n * When this css rule is loaded by the browser, all html elements (including their children) that\n * are tagged with the `ngCloak` directive are hidden. When Angular encounters this directive\n * during the compilation of the template it deletes the `ngCloak` element attribute, making\n * the compiled element visible.\n *\n * For the best result, the `angular.js` script must be loaded in the head section of the html\n * document; alternatively, the css rule above must be included in the external stylesheet of the\n * application.\n *\n * @element ANY\n *\n * @example\n   <example name=\"ng-cloak\">\n     <file name=\"index.html\">\n        <div id=\"template1\" ng-cloak>{{ 'hello' }}</div>\n        <div id=\"template2\" class=\"ng-cloak\">{{ 'world' }}</div>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should remove the template directive and css class', function() {\n         expect($('#template1').getAttribute('ng-cloak')).\n           toBeNull();\n         expect($('#template2').getAttribute('ng-cloak')).\n           toBeNull();\n       });\n     </file>\n   </example>\n *\n */\nvar ngCloakDirective = ngDirective({\n  compile: function(element, attr) {\n    attr.$set('ngCloak', undefined);\n    element.removeClass('ng-cloak');\n  }\n});\n\n/**\n * @ngdoc directive\n * @name ngController\n *\n * @description\n * The `ngController` directive attaches a controller class to the view. This is a key aspect of how angular\n * supports the principles behind the Model-View-Controller design pattern.\n *\n * MVC components in angular:\n *\n * * Model — Models are the properties of a scope; scopes are attached to the DOM where scope properties\n *   are accessed through bindings.\n * * View — The template (HTML with data bindings) that is rendered into the View.\n * * Controller — The `ngController` directive specifies a Controller class; the class contains business\n *   logic behind the application to decorate the scope with functions and values\n *\n * Note that you can also attach controllers to the DOM by declaring it in a route definition\n * via the {@link ngRoute.$route $route} service. A common mistake is to declare the controller\n * again using `ng-controller` in the template itself.  This will cause the controller to be attached\n * and executed twice.\n *\n * @element ANY\n * @scope\n * @priority 500\n * @param {expression} ngController Name of a constructor function registered with the current\n * {@link ng.$controllerProvider $controllerProvider} or an {@link guide/expression expression}\n * that on the current scope evaluates to a constructor function.\n *\n * The controller instance can be published into a scope property by specifying\n * `ng-controller=\"as propertyName\"`.\n *\n * If the current `$controllerProvider` is configured to use globals (via\n * {@link ng.$controllerProvider#allowGlobals `$controllerProvider.allowGlobals()` }), this may\n * also be the name of a globally accessible constructor function (deprecated, not recommended).\n *\n * @example\n * Here is a simple form for editing user contact information. Adding, removing, clearing, and\n * greeting are methods declared on the controller (see source tab). These methods can\n * easily be called from the angular markup. Any changes to the data are automatically reflected\n * in the View without the need for a manual update.\n *\n * Two different declaration styles are included below:\n *\n * * one binds methods and properties directly onto the controller using `this`:\n * `ng-controller=\"SettingsController1 as settings\"`\n * * one injects `$scope` into the controller:\n * `ng-controller=\"SettingsController2\"`\n *\n * The second option is more common in the Angular community, and is generally used in boilerplates\n * and in this guide. However, there are advantages to binding properties directly to the controller\n * and avoiding scope.\n *\n * * Using `controller as` makes it obvious which controller you are accessing in the template when\n * multiple controllers apply to an element.\n * * If you are writing your controllers as classes you have easier access to the properties and\n * methods, which will appear on the scope, from inside the controller code.\n * * Since there is always a `.` in the bindings, you don't have to worry about prototypal\n * inheritance masking primitives.\n *\n * This example demonstrates the `controller as` syntax.\n *\n * <example name=\"ngControllerAs\" module=\"controllerAsExample\">\n *   <file name=\"index.html\">\n *    <div id=\"ctrl-as-exmpl\" ng-controller=\"SettingsController1 as settings\">\n *      <label>Name: <input type=\"text\" ng-model=\"settings.name\"/></label>\n *      <button ng-click=\"settings.greet()\">greet</button><br/>\n *      Contact:\n *      <ul>\n *        <li ng-repeat=\"contact in settings.contacts\">\n *          <select ng-model=\"contact.type\" aria-label=\"Contact method\" id=\"select_{{$index}}\">\n *             <option>phone</option>\n *             <option>email</option>\n *          </select>\n *          <input type=\"text\" ng-model=\"contact.value\" aria-labelledby=\"select_{{$index}}\" />\n *          <button ng-click=\"settings.clearContact(contact)\">clear</button>\n *          <button ng-click=\"settings.removeContact(contact)\" aria-label=\"Remove\">X</button>\n *        </li>\n *        <li><button ng-click=\"settings.addContact()\">add</button></li>\n *     </ul>\n *    </div>\n *   </file>\n *   <file name=\"app.js\">\n *    angular.module('controllerAsExample', [])\n *      .controller('SettingsController1', SettingsController1);\n *\n *    function SettingsController1() {\n *      this.name = 'John Smith';\n *      this.contacts = [\n *        {type: 'phone', value: '408 555 1212'},\n *        {type: 'email', value: 'john.smith@example.org'}\n *      ];\n *    }\n *\n *    SettingsController1.prototype.greet = function() {\n *      alert(this.name);\n *    };\n *\n *    SettingsController1.prototype.addContact = function() {\n *      this.contacts.push({type: 'email', value: 'yourname@example.org'});\n *    };\n *\n *    SettingsController1.prototype.removeContact = function(contactToRemove) {\n *     var index = this.contacts.indexOf(contactToRemove);\n *      this.contacts.splice(index, 1);\n *    };\n *\n *    SettingsController1.prototype.clearContact = function(contact) {\n *      contact.type = 'phone';\n *      contact.value = '';\n *    };\n *   </file>\n *   <file name=\"protractor.js\" type=\"protractor\">\n *     it('should check controller as', function() {\n *       var container = element(by.id('ctrl-as-exmpl'));\n *         expect(container.element(by.model('settings.name'))\n *           .getAttribute('value')).toBe('John Smith');\n *\n *       var firstRepeat =\n *           container.element(by.repeater('contact in settings.contacts').row(0));\n *       var secondRepeat =\n *           container.element(by.repeater('contact in settings.contacts').row(1));\n *\n *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))\n *           .toBe('408 555 1212');\n *\n *       expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))\n *           .toBe('john.smith@example.org');\n *\n *       firstRepeat.element(by.buttonText('clear')).click();\n *\n *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))\n *           .toBe('');\n *\n *       container.element(by.buttonText('add')).click();\n *\n *       expect(container.element(by.repeater('contact in settings.contacts').row(2))\n *           .element(by.model('contact.value'))\n *           .getAttribute('value'))\n *           .toBe('yourname@example.org');\n *     });\n *   </file>\n * </example>\n *\n * This example demonstrates the \"attach to `$scope`\" style of controller.\n *\n * <example name=\"ngController\" module=\"controllerExample\">\n *  <file name=\"index.html\">\n *   <div id=\"ctrl-exmpl\" ng-controller=\"SettingsController2\">\n *     <label>Name: <input type=\"text\" ng-model=\"name\"/></label>\n *     <button ng-click=\"greet()\">greet</button><br/>\n *     Contact:\n *     <ul>\n *       <li ng-repeat=\"contact in contacts\">\n *         <select ng-model=\"contact.type\" id=\"select_{{$index}}\">\n *            <option>phone</option>\n *            <option>email</option>\n *         </select>\n *         <input type=\"text\" ng-model=\"contact.value\" aria-labelledby=\"select_{{$index}}\" />\n *         <button ng-click=\"clearContact(contact)\">clear</button>\n *         <button ng-click=\"removeContact(contact)\">X</button>\n *       </li>\n *       <li>[ <button ng-click=\"addContact()\">add</button> ]</li>\n *    </ul>\n *   </div>\n *  </file>\n *  <file name=\"app.js\">\n *   angular.module('controllerExample', [])\n *     .controller('SettingsController2', ['$scope', SettingsController2]);\n *\n *   function SettingsController2($scope) {\n *     $scope.name = 'John Smith';\n *     $scope.contacts = [\n *       {type:'phone', value:'408 555 1212'},\n *       {type:'email', value:'john.smith@example.org'}\n *     ];\n *\n *     $scope.greet = function() {\n *       alert($scope.name);\n *     };\n *\n *     $scope.addContact = function() {\n *       $scope.contacts.push({type:'email', value:'yourname@example.org'});\n *     };\n *\n *     $scope.removeContact = function(contactToRemove) {\n *       var index = $scope.contacts.indexOf(contactToRemove);\n *       $scope.contacts.splice(index, 1);\n *     };\n *\n *     $scope.clearContact = function(contact) {\n *       contact.type = 'phone';\n *       contact.value = '';\n *     };\n *   }\n *  </file>\n *  <file name=\"protractor.js\" type=\"protractor\">\n *    it('should check controller', function() {\n *      var container = element(by.id('ctrl-exmpl'));\n *\n *      expect(container.element(by.model('name'))\n *          .getAttribute('value')).toBe('John Smith');\n *\n *      var firstRepeat =\n *          container.element(by.repeater('contact in contacts').row(0));\n *      var secondRepeat =\n *          container.element(by.repeater('contact in contacts').row(1));\n *\n *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))\n *          .toBe('408 555 1212');\n *      expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))\n *          .toBe('john.smith@example.org');\n *\n *      firstRepeat.element(by.buttonText('clear')).click();\n *\n *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))\n *          .toBe('');\n *\n *      container.element(by.buttonText('add')).click();\n *\n *      expect(container.element(by.repeater('contact in contacts').row(2))\n *          .element(by.model('contact.value'))\n *          .getAttribute('value'))\n *          .toBe('yourname@example.org');\n *    });\n *  </file>\n *</example>\n\n */\nvar ngControllerDirective = [function() {\n  return {\n    restrict: 'A',\n    scope: true,\n    controller: '@',\n    priority: 500\n  };\n}];\n\n/**\n * @ngdoc directive\n * @name ngCsp\n *\n * @restrict A\n * @element ANY\n * @description\n *\n * Angular has some features that can conflict with certain restrictions that are applied when using\n * [CSP (Content Security Policy)](https://developer.mozilla.org/en/Security/CSP) rules.\n *\n * If you intend to implement CSP with these rules then you must tell Angular not to use these\n * features.\n *\n * This is necessary when developing things like Google Chrome Extensions or Universal Windows Apps.\n *\n *\n * The following default rules in CSP affect Angular:\n *\n * * The use of `eval()`, `Function(string)` and similar functions to dynamically create and execute\n * code from strings is forbidden. Angular makes use of this in the {@link $parse} service to\n * provide a 30% increase in the speed of evaluating Angular expressions. (This CSP rule can be\n * disabled with the CSP keyword `unsafe-eval`, but it is generally not recommended as it would\n * weaken the protections offered by CSP.)\n *\n * * The use of inline resources, such as inline `<script>` and `<style>` elements, are forbidden.\n * This prevents apps from injecting custom styles directly into the document. Angular makes use of\n * this to include some CSS rules (e.g. {@link ngCloak} and {@link ngHide}). To make these\n * directives work when a CSP rule is blocking inline styles, you must link to the `angular-csp.css`\n * in your HTML manually. (This CSP rule can be disabled with the CSP keyword `unsafe-inline`, but\n * it is generally not recommended as it would weaken the protections offered by CSP.)\n *\n * If you do not provide `ngCsp` then Angular tries to autodetect if CSP is blocking dynamic code\n * creation from strings (e.g., `unsafe-eval` not specified in CSP header) and automatically\n * deactivates this feature in the {@link $parse} service. This autodetection, however, triggers a\n * CSP error to be logged in the console:\n *\n * ```\n * Refused to evaluate a string as JavaScript because 'unsafe-eval' is not an allowed source of\n * script in the following Content Security Policy directive: \"default-src 'self'\". Note that\n * 'script-src' was not explicitly set, so 'default-src' is used as a fallback.\n * ```\n *\n * This error is harmless but annoying. To prevent the error from showing up, put the `ngCsp`\n * directive on an element of the HTML document that appears before the `<script>` tag that loads\n * the `angular.js` file.\n *\n * *Note: This directive is only available in the `ng-csp` and `data-ng-csp` attribute form.*\n *\n * You can specify which of the CSP related Angular features should be deactivated by providing\n * a value for the `ng-csp` attribute. The options are as follows:\n *\n * * no-inline-style: this stops Angular from injecting CSS styles into the DOM\n *\n * * no-unsafe-eval: this stops Angular from optimizing $parse with unsafe eval of strings\n *\n * You can use these values in the following combinations:\n *\n *\n * * No declaration means that Angular will assume that you can do inline styles, but it will do\n * a runtime check for unsafe-eval. E.g. `<body>`. This is backwardly compatible with previous\n * versions of Angular.\n *\n * * A simple `ng-csp` (or `data-ng-csp`) attribute will tell Angular to deactivate both inline\n * styles and unsafe eval. E.g. `<body ng-csp>`. This is backwardly compatible with previous\n * versions of Angular.\n *\n * * Specifying only `no-unsafe-eval` tells Angular that we must not use eval, but that we can\n * inject inline styles. E.g. `<body ng-csp=\"no-unsafe-eval\">`.\n *\n * * Specifying only `no-inline-style` tells Angular that we must not inject styles, but that we can\n * run eval - no automatic check for unsafe eval will occur. E.g. `<body ng-csp=\"no-inline-style\">`\n *\n * * Specifying both `no-unsafe-eval` and `no-inline-style` tells Angular that we must not inject\n * styles nor use eval, which is the same as an empty: ng-csp.\n * E.g.`<body ng-csp=\"no-inline-style;no-unsafe-eval\">`\n *\n * @example\n *\n * This example shows how to apply the `ngCsp` directive to the `html` tag.\n   ```html\n     <!doctype html>\n     <html ng-app ng-csp>\n     ...\n     ...\n     </html>\n   ```\n\n  <!-- Note: the `.csp` suffix in the example name triggers CSP mode in our http server! -->\n  <example name=\"example.csp\" module=\"cspExample\" ng-csp=\"true\">\n    <file name=\"index.html\">\n      <div ng-controller=\"MainController as ctrl\">\n        <div>\n          <button ng-click=\"ctrl.inc()\" id=\"inc\">Increment</button>\n          <span id=\"counter\">\n            {{ctrl.counter}}\n          </span>\n        </div>\n\n        <div>\n          <button ng-click=\"ctrl.evil()\" id=\"evil\">Evil</button>\n          <span id=\"evilError\">\n            {{ctrl.evilError}}\n          </span>\n        </div>\n      </div>\n    </file>\n    <file name=\"script.js\">\n       angular.module('cspExample', [])\n         .controller('MainController', function MainController() {\n            this.counter = 0;\n            this.inc = function() {\n              this.counter++;\n            };\n            this.evil = function() {\n              try {\n                eval('1+2'); // eslint-disable-line no-eval\n              } catch (e) {\n                this.evilError = e.message;\n              }\n            };\n          });\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n      var util, webdriver;\n\n      var incBtn = element(by.id('inc'));\n      var counter = element(by.id('counter'));\n      var evilBtn = element(by.id('evil'));\n      var evilError = element(by.id('evilError'));\n\n      function getAndClearSevereErrors() {\n        return browser.manage().logs().get('browser').then(function(browserLog) {\n          return browserLog.filter(function(logEntry) {\n            return logEntry.level.value > webdriver.logging.Level.WARNING.value;\n          });\n        });\n      }\n\n      function clearErrors() {\n        getAndClearSevereErrors();\n      }\n\n      function expectNoErrors() {\n        getAndClearSevereErrors().then(function(filteredLog) {\n          expect(filteredLog.length).toEqual(0);\n          if (filteredLog.length) {\n            console.log('browser console errors: ' + util.inspect(filteredLog));\n          }\n        });\n      }\n\n      function expectError(regex) {\n        getAndClearSevereErrors().then(function(filteredLog) {\n          var found = false;\n          filteredLog.forEach(function(log) {\n            if (log.message.match(regex)) {\n              found = true;\n            }\n          });\n          if (!found) {\n            throw new Error('expected an error that matches ' + regex);\n          }\n        });\n      }\n\n      beforeEach(function() {\n        util = require('util');\n        webdriver = require('selenium-webdriver');\n      });\n\n      // For now, we only test on Chrome,\n      // as Safari does not load the page with Protractor's injected scripts,\n      // and Firefox webdriver always disables content security policy (#6358)\n      if (browser.params.browser !== 'chrome') {\n        return;\n      }\n\n      it('should not report errors when the page is loaded', function() {\n        // clear errors so we are not dependent on previous tests\n        clearErrors();\n        // Need to reload the page as the page is already loaded when\n        // we come here\n        browser.driver.getCurrentUrl().then(function(url) {\n          browser.get(url);\n        });\n        expectNoErrors();\n      });\n\n      it('should evaluate expressions', function() {\n        expect(counter.getText()).toEqual('0');\n        incBtn.click();\n        expect(counter.getText()).toEqual('1');\n        expectNoErrors();\n      });\n\n      it('should throw and report an error when using \"eval\"', function() {\n        evilBtn.click();\n        expect(evilError.getText()).toMatch(/Content Security Policy/);\n        expectError(/Content Security Policy/);\n      });\n    </file>\n  </example>\n  */\n\n// `ngCsp` is not implemented as a proper directive any more, because we need it be processed while\n// we bootstrap the app (before `$parse` is instantiated). For this reason, we just have the `csp()`\n// fn that looks for the `ng-csp` attribute anywhere in the current doc.\n\n/**\n * @ngdoc directive\n * @name ngClick\n * @restrict A\n * @element ANY\n * @priority 0\n *\n * @description\n * The ngClick directive allows you to specify custom behavior when\n * an element is clicked.\n *\n * @param {expression} ngClick {@link guide/expression Expression} to evaluate upon\n * click. ({@link guide/expression#-event- Event object is available as `$event`})\n *\n * @example\n   <example name=\"ng-click\">\n     <file name=\"index.html\">\n      <button ng-click=\"count = count + 1\" ng-init=\"count=0\">\n        Increment\n      </button>\n      <span>\n        count: {{count}}\n      </span>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should check ng-click', function() {\n         expect(element(by.binding('count')).getText()).toMatch('0');\n         element(by.css('button')).click();\n         expect(element(by.binding('count')).getText()).toMatch('1');\n       });\n     </file>\n   </example>\n */\n/*\n * A collection of directives that allows creation of custom event handlers that are defined as\n * angular expressions and are compiled and executed within the current scope.\n */\nvar ngEventDirectives = {};\n\n// For events that might fire synchronously during DOM manipulation\n// we need to execute their event handlers asynchronously using $evalAsync,\n// so that they are not executed in an inconsistent state.\nvar forceAsyncEvents = {\n  'blur': true,\n  'focus': true\n};\nforEach(\n  'click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste'.split(' '),\n  function(eventName) {\n    var directiveName = directiveNormalize('ng-' + eventName);\n    ngEventDirectives[directiveName] = ['$parse', '$rootScope', function($parse, $rootScope) {\n      return {\n        restrict: 'A',\n        compile: function($element, attr) {\n          // NOTE:\n          // We expose the powerful `$event` object on the scope that provides access to the Window,\n          // etc. This is OK, because expressions are not sandboxed any more (and the expression\n          // sandbox was never meant to be a security feature anyway).\n          var fn = $parse(attr[directiveName]);\n          return function ngEventHandler(scope, element) {\n            element.on(eventName, function(event) {\n              var callback = function() {\n                fn(scope, {$event: event});\n              };\n              if (forceAsyncEvents[eventName] && $rootScope.$$phase) {\n                scope.$evalAsync(callback);\n              } else {\n                scope.$apply(callback);\n              }\n            });\n          };\n        }\n      };\n    }];\n  }\n);\n\n/**\n * @ngdoc directive\n * @name ngDblclick\n * @restrict A\n * @element ANY\n * @priority 0\n *\n * @description\n * The `ngDblclick` directive allows you to specify custom behavior on a dblclick event.\n *\n * @param {expression} ngDblclick {@link guide/expression Expression} to evaluate upon\n * a dblclick. (The Event object is available as `$event`)\n *\n * @example\n   <example name=\"ng-dblclick\">\n     <file name=\"index.html\">\n      <button ng-dblclick=\"count = count + 1\" ng-init=\"count=0\">\n        Increment (on double click)\n      </button>\n      count: {{count}}\n     </file>\n   </example>\n */\n\n\n/**\n * @ngdoc directive\n * @name ngMousedown\n * @restrict A\n * @element ANY\n * @priority 0\n *\n * @description\n * The ngMousedown directive allows you to specify custom behavior on mousedown event.\n *\n * @param {expression} ngMousedown {@link guide/expression Expression} to evaluate upon\n * mousedown. ({@link guide/expression#-event- Event object is available as `$event`})\n *\n * @example\n   <example name=\"ng-mousedown\">\n     <file name=\"index.html\">\n      <button ng-mousedown=\"count = count + 1\" ng-init=\"count=0\">\n        Increment (on mouse down)\n      </button>\n      count: {{count}}\n     </file>\n   </example>\n */\n\n\n/**\n * @ngdoc directive\n * @name ngMouseup\n * @restrict A\n * @element ANY\n * @priority 0\n *\n * @description\n * Specify custom behavior on mouseup event.\n *\n * @param {expression} ngMouseup {@link guide/expression Expression} to evaluate upon\n * mouseup. ({@link guide/expression#-event- Event object is available as `$event`})\n *\n * @example\n   <example name=\"ng-mouseup\">\n     <file name=\"index.html\">\n      <button ng-mouseup=\"count = count + 1\" ng-init=\"count=0\">\n        Increment (on mouse up)\n      </button>\n      count: {{count}}\n     </file>\n   </example>\n */\n\n/**\n * @ngdoc directive\n * @name ngMouseover\n * @restrict A\n * @element ANY\n * @priority 0\n *\n * @description\n * Specify custom behavior on mouseover event.\n *\n * @param {expression} ngMouseover {@link guide/expression Expression} to evaluate upon\n * mouseover. ({@link guide/expression#-event- Event object is available as `$event`})\n *\n * @example\n   <example name=\"ng-mouseover\">\n     <file name=\"index.html\">\n      <button ng-mouseover=\"count = count + 1\" ng-init=\"count=0\">\n        Increment (when mouse is over)\n      </button>\n      count: {{count}}\n     </file>\n   </example>\n */\n\n\n/**\n * @ngdoc directive\n * @name ngMouseenter\n * @restrict A\n * @element ANY\n * @priority 0\n *\n * @description\n * Specify custom behavior on mouseenter event.\n *\n * @param {expression} ngMouseenter {@link guide/expression Expression} to evaluate upon\n * mouseenter. ({@link guide/expression#-event- Event object is available as `$event`})\n *\n * @example\n   <example name=\"ng-mouseenter\">\n     <file name=\"index.html\">\n      <button ng-mouseenter=\"count = count + 1\" ng-init=\"count=0\">\n        Increment (when mouse enters)\n      </button>\n      count: {{count}}\n     </file>\n   </example>\n */\n\n\n/**\n * @ngdoc directive\n * @name ngMouseleave\n * @restrict A\n * @element ANY\n * @priority 0\n *\n * @description\n * Specify custom behavior on mouseleave event.\n *\n * @param {expression} ngMouseleave {@link guide/expression Expression} to evaluate upon\n * mouseleave. ({@link guide/expression#-event- Event object is available as `$event`})\n *\n * @example\n   <example name=\"ng-mouseleave\">\n     <file name=\"index.html\">\n      <button ng-mouseleave=\"count = count + 1\" ng-init=\"count=0\">\n        Increment (when mouse leaves)\n      </button>\n      count: {{count}}\n     </file>\n   </example>\n */\n\n\n/**\n * @ngdoc directive\n * @name ngMousemove\n * @restrict A\n * @element ANY\n * @priority 0\n *\n * @description\n * Specify custom behavior on mousemove event.\n *\n * @param {expression} ngMousemove {@link guide/expression Expression} to evaluate upon\n * mousemove. ({@link guide/expression#-event- Event object is available as `$event`})\n *\n * @example\n   <example name=\"ng-mousemove\">\n     <file name=\"index.html\">\n      <button ng-mousemove=\"count = count + 1\" ng-init=\"count=0\">\n        Increment (when mouse moves)\n      </button>\n      count: {{count}}\n     </file>\n   </example>\n */\n\n\n/**\n * @ngdoc directive\n * @name ngKeydown\n * @restrict A\n * @element ANY\n * @priority 0\n *\n * @description\n * Specify custom behavior on keydown event.\n *\n * @param {expression} ngKeydown {@link guide/expression Expression} to evaluate upon\n * keydown. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)\n *\n * @example\n   <example name=\"ng-keydown\">\n     <file name=\"index.html\">\n      <input ng-keydown=\"count = count + 1\" ng-init=\"count=0\">\n      key down count: {{count}}\n     </file>\n   </example>\n */\n\n\n/**\n * @ngdoc directive\n * @name ngKeyup\n * @restrict A\n * @element ANY\n * @priority 0\n *\n * @description\n * Specify custom behavior on keyup event.\n *\n * @param {expression} ngKeyup {@link guide/expression Expression} to evaluate upon\n * keyup. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)\n *\n * @example\n   <example name=\"ng-keyup\">\n     <file name=\"index.html\">\n       <p>Typing in the input box below updates the key count</p>\n       <input ng-keyup=\"count = count + 1\" ng-init=\"count=0\"> key up count: {{count}}\n\n       <p>Typing in the input box below updates the keycode</p>\n       <input ng-keyup=\"event=$event\">\n       <p>event keyCode: {{ event.keyCode }}</p>\n       <p>event altKey: {{ event.altKey }}</p>\n     </file>\n   </example>\n */\n\n\n/**\n * @ngdoc directive\n * @name ngKeypress\n * @restrict A\n * @element ANY\n *\n * @description\n * Specify custom behavior on keypress event.\n *\n * @param {expression} ngKeypress {@link guide/expression Expression} to evaluate upon\n * keypress. ({@link guide/expression#-event- Event object is available as `$event`}\n * and can be interrogated for keyCode, altKey, etc.)\n *\n * @example\n   <example name=\"ng-keypress\">\n     <file name=\"index.html\">\n      <input ng-keypress=\"count = count + 1\" ng-init=\"count=0\">\n      key press count: {{count}}\n     </file>\n   </example>\n */\n\n\n/**\n * @ngdoc directive\n * @name ngSubmit\n * @restrict A\n * @element form\n * @priority 0\n *\n * @description\n * Enables binding angular expressions to onsubmit events.\n *\n * Additionally it prevents the default action (which for form means sending the request to the\n * server and reloading the current page), but only if the form does not contain `action`,\n * `data-action`, or `x-action` attributes.\n *\n * <div class=\"alert alert-warning\">\n * **Warning:** Be careful not to cause \"double-submission\" by using both the `ngClick` and\n * `ngSubmit` handlers together. See the\n * {@link form#submitting-a-form-and-preventing-the-default-action `form` directive documentation}\n * for a detailed discussion of when `ngSubmit` may be triggered.\n * </div>\n *\n * @param {expression} ngSubmit {@link guide/expression Expression} to eval.\n * ({@link guide/expression#-event- Event object is available as `$event`})\n *\n * @example\n   <example module=\"submitExample\" name=\"ng-submit\">\n     <file name=\"index.html\">\n      <script>\n        angular.module('submitExample', [])\n          .controller('ExampleController', ['$scope', function($scope) {\n            $scope.list = [];\n            $scope.text = 'hello';\n            $scope.submit = function() {\n              if ($scope.text) {\n                $scope.list.push(this.text);\n                $scope.text = '';\n              }\n            };\n          }]);\n      </script>\n      <form ng-submit=\"submit()\" ng-controller=\"ExampleController\">\n        Enter text and hit enter:\n        <input type=\"text\" ng-model=\"text\" name=\"text\" />\n        <input type=\"submit\" id=\"submit\" value=\"Submit\" />\n        <pre>list={{list}}</pre>\n      </form>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should check ng-submit', function() {\n         expect(element(by.binding('list')).getText()).toBe('list=[]');\n         element(by.css('#submit')).click();\n         expect(element(by.binding('list')).getText()).toContain('hello');\n         expect(element(by.model('text')).getAttribute('value')).toBe('');\n       });\n       it('should ignore empty strings', function() {\n         expect(element(by.binding('list')).getText()).toBe('list=[]');\n         element(by.css('#submit')).click();\n         element(by.css('#submit')).click();\n         expect(element(by.binding('list')).getText()).toContain('hello');\n        });\n     </file>\n   </example>\n */\n\n/**\n * @ngdoc directive\n * @name ngFocus\n * @restrict A\n * @element window, input, select, textarea, a\n * @priority 0\n *\n * @description\n * Specify custom behavior on focus event.\n *\n * Note: As the `focus` event is executed synchronously when calling `input.focus()`\n * AngularJS executes the expression using `scope.$evalAsync` if the event is fired\n * during an `$apply` to ensure a consistent state.\n *\n * @param {expression} ngFocus {@link guide/expression Expression} to evaluate upon\n * focus. ({@link guide/expression#-event- Event object is available as `$event`})\n *\n * @example\n * See {@link ng.directive:ngClick ngClick}\n */\n\n/**\n * @ngdoc directive\n * @name ngBlur\n * @restrict A\n * @element window, input, select, textarea, a\n * @priority 0\n *\n * @description\n * Specify custom behavior on blur event.\n *\n * A [blur event](https://developer.mozilla.org/en-US/docs/Web/Events/blur) fires when\n * an element has lost focus.\n *\n * Note: As the `blur` event is executed synchronously also during DOM manipulations\n * (e.g. removing a focussed input),\n * AngularJS executes the expression using `scope.$evalAsync` if the event is fired\n * during an `$apply` to ensure a consistent state.\n *\n * @param {expression} ngBlur {@link guide/expression Expression} to evaluate upon\n * blur. ({@link guide/expression#-event- Event object is available as `$event`})\n *\n * @example\n * See {@link ng.directive:ngClick ngClick}\n */\n\n/**\n * @ngdoc directive\n * @name ngCopy\n * @restrict A\n * @element window, input, select, textarea, a\n * @priority 0\n *\n * @description\n * Specify custom behavior on copy event.\n *\n * @param {expression} ngCopy {@link guide/expression Expression} to evaluate upon\n * copy. ({@link guide/expression#-event- Event object is available as `$event`})\n *\n * @example\n   <example name=\"ng-copy\">\n     <file name=\"index.html\">\n      <input ng-copy=\"copied=true\" ng-init=\"copied=false; value='copy me'\" ng-model=\"value\">\n      copied: {{copied}}\n     </file>\n   </example>\n */\n\n/**\n * @ngdoc directive\n * @name ngCut\n * @restrict A\n * @element window, input, select, textarea, a\n * @priority 0\n *\n * @description\n * Specify custom behavior on cut event.\n *\n * @param {expression} ngCut {@link guide/expression Expression} to evaluate upon\n * cut. ({@link guide/expression#-event- Event object is available as `$event`})\n *\n * @example\n   <example name=\"ng-cut\">\n     <file name=\"index.html\">\n      <input ng-cut=\"cut=true\" ng-init=\"cut=false; value='cut me'\" ng-model=\"value\">\n      cut: {{cut}}\n     </file>\n   </example>\n */\n\n/**\n * @ngdoc directive\n * @name ngPaste\n * @restrict A\n * @element window, input, select, textarea, a\n * @priority 0\n *\n * @description\n * Specify custom behavior on paste event.\n *\n * @param {expression} ngPaste {@link guide/expression Expression} to evaluate upon\n * paste. ({@link guide/expression#-event- Event object is available as `$event`})\n *\n * @example\n   <example name=\"ng-paste\">\n     <file name=\"index.html\">\n      <input ng-paste=\"paste=true\" ng-init=\"paste=false\" placeholder='paste here'>\n      pasted: {{paste}}\n     </file>\n   </example>\n */\n\n/**\n * @ngdoc directive\n * @name ngIf\n * @restrict A\n * @multiElement\n *\n * @description\n * The `ngIf` directive removes or recreates a portion of the DOM tree based on an\n * {expression}. If the expression assigned to `ngIf` evaluates to a false\n * value then the element is removed from the DOM, otherwise a clone of the\n * element is reinserted into the DOM.\n *\n * `ngIf` differs from `ngShow` and `ngHide` in that `ngIf` completely removes and recreates the\n * element in the DOM rather than changing its visibility via the `display` css property.  A common\n * case when this difference is significant is when using css selectors that rely on an element's\n * position within the DOM, such as the `:first-child` or `:last-child` pseudo-classes.\n *\n * Note that when an element is removed using `ngIf` its scope is destroyed and a new scope\n * is created when the element is restored.  The scope created within `ngIf` inherits from\n * its parent scope using\n * [prototypal inheritance](https://github.com/angular/angular.js/wiki/Understanding-Scopes#javascript-prototypal-inheritance).\n * An important implication of this is if `ngModel` is used within `ngIf` to bind to\n * a javascript primitive defined in the parent scope. In this case any modifications made to the\n * variable within the child scope will override (hide) the value in the parent scope.\n *\n * Also, `ngIf` recreates elements using their compiled state. An example of this behavior\n * is if an element's class attribute is directly modified after it's compiled, using something like\n * jQuery's `.addClass()` method, and the element is later removed. When `ngIf` recreates the element\n * the added class will be lost because the original compiled state is used to regenerate the element.\n *\n * Additionally, you can provide animations via the `ngAnimate` module to animate the `enter`\n * and `leave` effects.\n *\n * @animations\n * | Animation                        | Occurs                               |\n * |----------------------------------|-------------------------------------|\n * | {@link ng.$animate#enter enter}  | just after the `ngIf` contents change and a new DOM element is created and injected into the `ngIf` container |\n * | {@link ng.$animate#leave leave}  | just before the `ngIf` contents are removed from the DOM |\n *\n * @element ANY\n * @scope\n * @priority 600\n * @param {expression} ngIf If the {@link guide/expression expression} is falsy then\n *     the element is removed from the DOM tree. If it is truthy a copy of the compiled\n *     element is added to the DOM tree.\n *\n * @example\n  <example module=\"ngAnimate\" deps=\"angular-animate.js\" animations=\"true\" name=\"ng-if\">\n    <file name=\"index.html\">\n      <label>Click me: <input type=\"checkbox\" ng-model=\"checked\" ng-init=\"checked=true\" /></label><br/>\n      Show when checked:\n      <span ng-if=\"checked\" class=\"animate-if\">\n        This is removed when the checkbox is unchecked.\n      </span>\n    </file>\n    <file name=\"animations.css\">\n      .animate-if {\n        background:white;\n        border:1px solid black;\n        padding:10px;\n      }\n\n      .animate-if.ng-enter, .animate-if.ng-leave {\n        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;\n      }\n\n      .animate-if.ng-enter,\n      .animate-if.ng-leave.ng-leave-active {\n        opacity:0;\n      }\n\n      .animate-if.ng-leave,\n      .animate-if.ng-enter.ng-enter-active {\n        opacity:1;\n      }\n    </file>\n  </example>\n */\nvar ngIfDirective = ['$animate', '$compile', function($animate, $compile) {\n  return {\n    multiElement: true,\n    transclude: 'element',\n    priority: 600,\n    terminal: true,\n    restrict: 'A',\n    $$tlb: true,\n    link: function($scope, $element, $attr, ctrl, $transclude) {\n        var block, childScope, previousElements;\n        $scope.$watch($attr.ngIf, function ngIfWatchAction(value) {\n\n          if (value) {\n            if (!childScope) {\n              $transclude(function(clone, newScope) {\n                childScope = newScope;\n                clone[clone.length++] = $compile.$$createComment('end ngIf', $attr.ngIf);\n                // Note: We only need the first/last node of the cloned nodes.\n                // However, we need to keep the reference to the jqlite wrapper as it might be changed later\n                // by a directive with templateUrl when its template arrives.\n                block = {\n                  clone: clone\n                };\n                $animate.enter(clone, $element.parent(), $element);\n              });\n            }\n          } else {\n            if (previousElements) {\n              previousElements.remove();\n              previousElements = null;\n            }\n            if (childScope) {\n              childScope.$destroy();\n              childScope = null;\n            }\n            if (block) {\n              previousElements = getBlockNodes(block.clone);\n              $animate.leave(previousElements).done(function(response) {\n                if (response !== false) previousElements = null;\n              });\n              block = null;\n            }\n          }\n        });\n    }\n  };\n}];\n\n/**\n * @ngdoc directive\n * @name ngInclude\n * @restrict ECA\n * @scope\n * @priority -400\n *\n * @description\n * Fetches, compiles and includes an external HTML fragment.\n *\n * By default, the template URL is restricted to the same domain and protocol as the\n * application document. This is done by calling {@link $sce#getTrustedResourceUrl\n * $sce.getTrustedResourceUrl} on it. To load templates from other domains or protocols\n * you may either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist them} or\n * {@link $sce#trustAsResourceUrl wrap them} as trusted values. Refer to Angular's {@link\n * ng.$sce Strict Contextual Escaping}.\n *\n * In addition, the browser's\n * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)\n * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)\n * policy may further restrict whether the template is successfully loaded.\n * For example, `ngInclude` won't work for cross-domain requests on all browsers and for `file://`\n * access on some browsers.\n *\n * @animations\n * | Animation                        | Occurs                              |\n * |----------------------------------|-------------------------------------|\n * | {@link ng.$animate#enter enter}  | when the expression changes, on the new include |\n * | {@link ng.$animate#leave leave}  | when the expression changes, on the old include |\n *\n * The enter and leave animation occur concurrently.\n *\n * @param {string} ngInclude|src AngularJS expression evaluating to URL. If the source is a string constant,\n *                 make sure you wrap it in **single** quotes, e.g. `src=\"'myPartialTemplate.html'\"`.\n * @param {string=} onload Expression to evaluate when a new partial is loaded.\n *                  <div class=\"alert alert-warning\">\n *                  **Note:** When using onload on SVG elements in IE11, the browser will try to call\n *                  a function with the name on the window element, which will usually throw a\n *                  \"function is undefined\" error. To fix this, you can instead use `data-onload` or a\n *                  different form that {@link guide/directive#normalization matches} `onload`.\n *                  </div>\n   *\n * @param {string=} autoscroll Whether `ngInclude` should call {@link ng.$anchorScroll\n *                  $anchorScroll} to scroll the viewport after the content is loaded.\n *\n *                  - If the attribute is not set, disable scrolling.\n *                  - If the attribute is set without value, enable scrolling.\n *                  - Otherwise enable scrolling only if the expression evaluates to truthy value.\n *\n * @example\n  <example module=\"includeExample\" deps=\"angular-animate.js\" animations=\"true\" name=\"ng-include\">\n    <file name=\"index.html\">\n     <div ng-controller=\"ExampleController\">\n       <select ng-model=\"template\" ng-options=\"t.name for t in templates\">\n        <option value=\"\">(blank)</option>\n       </select>\n       url of the template: <code>{{template.url}}</code>\n       <hr/>\n       <div class=\"slide-animate-container\">\n         <div class=\"slide-animate\" ng-include=\"template.url\"></div>\n       </div>\n     </div>\n    </file>\n    <file name=\"script.js\">\n      angular.module('includeExample', ['ngAnimate'])\n        .controller('ExampleController', ['$scope', function($scope) {\n          $scope.templates =\n            [{ name: 'template1.html', url: 'template1.html'},\n             { name: 'template2.html', url: 'template2.html'}];\n          $scope.template = $scope.templates[0];\n        }]);\n     </file>\n    <file name=\"template1.html\">\n      Content of template1.html\n    </file>\n    <file name=\"template2.html\">\n      Content of template2.html\n    </file>\n    <file name=\"animations.css\">\n      .slide-animate-container {\n        position:relative;\n        background:white;\n        border:1px solid black;\n        height:40px;\n        overflow:hidden;\n      }\n\n      .slide-animate {\n        padding:10px;\n      }\n\n      .slide-animate.ng-enter, .slide-animate.ng-leave {\n        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;\n\n        position:absolute;\n        top:0;\n        left:0;\n        right:0;\n        bottom:0;\n        display:block;\n        padding:10px;\n      }\n\n      .slide-animate.ng-enter {\n        top:-50px;\n      }\n      .slide-animate.ng-enter.ng-enter-active {\n        top:0;\n      }\n\n      .slide-animate.ng-leave {\n        top:0;\n      }\n      .slide-animate.ng-leave.ng-leave-active {\n        top:50px;\n      }\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n      var templateSelect = element(by.model('template'));\n      var includeElem = element(by.css('[ng-include]'));\n\n      it('should load template1.html', function() {\n        expect(includeElem.getText()).toMatch(/Content of template1.html/);\n      });\n\n      it('should load template2.html', function() {\n        if (browser.params.browser === 'firefox') {\n          // Firefox can't handle using selects\n          // See https://github.com/angular/protractor/issues/480\n          return;\n        }\n        templateSelect.click();\n        templateSelect.all(by.css('option')).get(2).click();\n        expect(includeElem.getText()).toMatch(/Content of template2.html/);\n      });\n\n      it('should change to blank', function() {\n        if (browser.params.browser === 'firefox') {\n          // Firefox can't handle using selects\n          return;\n        }\n        templateSelect.click();\n        templateSelect.all(by.css('option')).get(0).click();\n        expect(includeElem.isPresent()).toBe(false);\n      });\n    </file>\n  </example>\n */\n\n\n/**\n * @ngdoc event\n * @name ngInclude#$includeContentRequested\n * @eventType emit on the scope ngInclude was declared in\n * @description\n * Emitted every time the ngInclude content is requested.\n *\n * @param {Object} angularEvent Synthetic event object.\n * @param {String} src URL of content to load.\n */\n\n\n/**\n * @ngdoc event\n * @name ngInclude#$includeContentLoaded\n * @eventType emit on the current ngInclude scope\n * @description\n * Emitted every time the ngInclude content is reloaded.\n *\n * @param {Object} angularEvent Synthetic event object.\n * @param {String} src URL of content to load.\n */\n\n\n/**\n * @ngdoc event\n * @name ngInclude#$includeContentError\n * @eventType emit on the scope ngInclude was declared in\n * @description\n * Emitted when a template HTTP request yields an erroneous response (status < 200 || status > 299)\n *\n * @param {Object} angularEvent Synthetic event object.\n * @param {String} src URL of content to load.\n */\nvar ngIncludeDirective = ['$templateRequest', '$anchorScroll', '$animate',\n                  function($templateRequest,   $anchorScroll,   $animate) {\n  return {\n    restrict: 'ECA',\n    priority: 400,\n    terminal: true,\n    transclude: 'element',\n    controller: angular.noop,\n    compile: function(element, attr) {\n      var srcExp = attr.ngInclude || attr.src,\n          onloadExp = attr.onload || '',\n          autoScrollExp = attr.autoscroll;\n\n      return function(scope, $element, $attr, ctrl, $transclude) {\n        var changeCounter = 0,\n            currentScope,\n            previousElement,\n            currentElement;\n\n        var cleanupLastIncludeContent = function() {\n          if (previousElement) {\n            previousElement.remove();\n            previousElement = null;\n          }\n          if (currentScope) {\n            currentScope.$destroy();\n            currentScope = null;\n          }\n          if (currentElement) {\n            $animate.leave(currentElement).done(function(response) {\n              if (response !== false) previousElement = null;\n            });\n            previousElement = currentElement;\n            currentElement = null;\n          }\n        };\n\n        scope.$watch(srcExp, function ngIncludeWatchAction(src) {\n          var afterAnimation = function(response) {\n            if (response !== false && isDefined(autoScrollExp) &&\n              (!autoScrollExp || scope.$eval(autoScrollExp))) {\n                $anchorScroll();\n            }\n          };\n          var thisChangeId = ++changeCounter;\n\n          if (src) {\n            //set the 2nd param to true to ignore the template request error so that the inner\n            //contents and scope can be cleaned up.\n            $templateRequest(src, true).then(function(response) {\n              if (scope.$$destroyed) return;\n\n              if (thisChangeId !== changeCounter) return;\n              var newScope = scope.$new();\n              ctrl.template = response;\n\n              // Note: This will also link all children of ng-include that were contained in the original\n              // html. If that content contains controllers, ... they could pollute/change the scope.\n              // However, using ng-include on an element with additional content does not make sense...\n              // Note: We can't remove them in the cloneAttchFn of $transclude as that\n              // function is called before linking the content, which would apply child\n              // directives to non existing elements.\n              var clone = $transclude(newScope, function(clone) {\n                cleanupLastIncludeContent();\n                $animate.enter(clone, null, $element).done(afterAnimation);\n              });\n\n              currentScope = newScope;\n              currentElement = clone;\n\n              currentScope.$emit('$includeContentLoaded', src);\n              scope.$eval(onloadExp);\n            }, function() {\n              if (scope.$$destroyed) return;\n\n              if (thisChangeId === changeCounter) {\n                cleanupLastIncludeContent();\n                scope.$emit('$includeContentError', src);\n              }\n            });\n            scope.$emit('$includeContentRequested', src);\n          } else {\n            cleanupLastIncludeContent();\n            ctrl.template = null;\n          }\n        });\n      };\n    }\n  };\n}];\n\n// This directive is called during the $transclude call of the first `ngInclude` directive.\n// It will replace and compile the content of the element with the loaded template.\n// We need this directive so that the element content is already filled when\n// the link function of another directive on the same element as ngInclude\n// is called.\nvar ngIncludeFillContentDirective = ['$compile',\n  function($compile) {\n    return {\n      restrict: 'ECA',\n      priority: -400,\n      require: 'ngInclude',\n      link: function(scope, $element, $attr, ctrl) {\n        if (toString.call($element[0]).match(/SVG/)) {\n          // WebKit: https://bugs.webkit.org/show_bug.cgi?id=135698 --- SVG elements do not\n          // support innerHTML, so detect this here and try to generate the contents\n          // specially.\n          $element.empty();\n          $compile(jqLiteBuildFragment(ctrl.template, window.document).childNodes)(scope,\n              function namespaceAdaptedClone(clone) {\n            $element.append(clone);\n          }, {futureParentElement: $element});\n          return;\n        }\n\n        $element.html(ctrl.template);\n        $compile($element.contents())(scope);\n      }\n    };\n  }];\n\n/**\n * @ngdoc directive\n * @name ngInit\n * @restrict AC\n * @priority 450\n * @element ANY\n *\n * @param {expression} ngInit {@link guide/expression Expression} to eval.\n *\n * @description\n * The `ngInit` directive allows you to evaluate an expression in the\n * current scope.\n *\n * <div class=\"alert alert-danger\">\n * This directive can be abused to add unnecessary amounts of logic into your templates.\n * There are only a few appropriate uses of `ngInit`:\n * <ul>\n *   <li>aliasing special properties of {@link ng.directive:ngRepeat `ngRepeat`},\n *     as seen in the demo below.</li>\n *   <li>initializing data during development, or for examples, as seen throughout these docs.</li>\n *   <li>injecting data via server side scripting.</li>\n * </ul>\n *\n * Besides these few cases, you should use {@link guide/component Components} or\n * {@link guide/controller Controllers} rather than `ngInit` to initialize values on a scope.\n * </div>\n *\n * <div class=\"alert alert-warning\">\n * **Note**: If you have assignment in `ngInit` along with a {@link ng.$filter `filter`}, make\n * sure you have parentheses to ensure correct operator precedence:\n * <pre class=\"prettyprint\">\n * `<div ng-init=\"test1 = ($index | toString)\"></div>`\n * </pre>\n * </div>\n *\n * @example\n   <example module=\"initExample\" name=\"ng-init\">\n     <file name=\"index.html\">\n   <script>\n     angular.module('initExample', [])\n       .controller('ExampleController', ['$scope', function($scope) {\n         $scope.list = [['a', 'b'], ['c', 'd']];\n       }]);\n   </script>\n   <div ng-controller=\"ExampleController\">\n     <div ng-repeat=\"innerList in list\" ng-init=\"outerIndex = $index\">\n       <div ng-repeat=\"value in innerList\" ng-init=\"innerIndex = $index\">\n          <span class=\"example-init\">list[ {{outerIndex}} ][ {{innerIndex}} ] = {{value}};</span>\n       </div>\n     </div>\n   </div>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should alias index positions', function() {\n         var elements = element.all(by.css('.example-init'));\n         expect(elements.get(0).getText()).toBe('list[ 0 ][ 0 ] = a;');\n         expect(elements.get(1).getText()).toBe('list[ 0 ][ 1 ] = b;');\n         expect(elements.get(2).getText()).toBe('list[ 1 ][ 0 ] = c;');\n         expect(elements.get(3).getText()).toBe('list[ 1 ][ 1 ] = d;');\n       });\n     </file>\n   </example>\n */\nvar ngInitDirective = ngDirective({\n  priority: 450,\n  compile: function() {\n    return {\n      pre: function(scope, element, attrs) {\n        scope.$eval(attrs.ngInit);\n      }\n    };\n  }\n});\n\n/**\n * @ngdoc directive\n * @name ngList\n * @restrict A\n * @priority 100\n *\n * @param {string=} ngList optional delimiter that should be used to split the value.\n *\n * @description\n * Text input that converts between a delimited string and an array of strings. The default\n * delimiter is a comma followed by a space - equivalent to `ng-list=\", \"`. You can specify a custom\n * delimiter as the value of the `ngList` attribute - for example, `ng-list=\" | \"`.\n *\n * The behaviour of the directive is affected by the use of the `ngTrim` attribute.\n * * If `ngTrim` is set to `\"false\"` then whitespace around both the separator and each\n *   list item is respected. This implies that the user of the directive is responsible for\n *   dealing with whitespace but also allows you to use whitespace as a delimiter, such as a\n *   tab or newline character.\n * * Otherwise whitespace around the delimiter is ignored when splitting (although it is respected\n *   when joining the list items back together) and whitespace around each list item is stripped\n *   before it is added to the model.\n *\n * @example\n * ### Validation\n *\n * <example name=\"ngList-directive\" module=\"listExample\">\n *   <file name=\"app.js\">\n *      angular.module('listExample', [])\n *        .controller('ExampleController', ['$scope', function($scope) {\n *          $scope.names = ['morpheus', 'neo', 'trinity'];\n *        }]);\n *   </file>\n *   <file name=\"index.html\">\n *    <form name=\"myForm\" ng-controller=\"ExampleController\">\n *      <label>List: <input name=\"namesInput\" ng-model=\"names\" ng-list required></label>\n *      <span role=\"alert\">\n *        <span class=\"error\" ng-show=\"myForm.namesInput.$error.required\">\n *        Required!</span>\n *      </span>\n *      <br>\n *      <tt>names = {{names}}</tt><br/>\n *      <tt>myForm.namesInput.$valid = {{myForm.namesInput.$valid}}</tt><br/>\n *      <tt>myForm.namesInput.$error = {{myForm.namesInput.$error}}</tt><br/>\n *      <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>\n *      <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>\n *     </form>\n *   </file>\n *   <file name=\"protractor.js\" type=\"protractor\">\n *     var listInput = element(by.model('names'));\n *     var names = element(by.exactBinding('names'));\n *     var valid = element(by.binding('myForm.namesInput.$valid'));\n *     var error = element(by.css('span.error'));\n *\n *     it('should initialize to model', function() {\n *       expect(names.getText()).toContain('[\"morpheus\",\"neo\",\"trinity\"]');\n *       expect(valid.getText()).toContain('true');\n *       expect(error.getCssValue('display')).toBe('none');\n *     });\n *\n *     it('should be invalid if empty', function() {\n *       listInput.clear();\n *       listInput.sendKeys('');\n *\n *       expect(names.getText()).toContain('');\n *       expect(valid.getText()).toContain('false');\n *       expect(error.getCssValue('display')).not.toBe('none');\n *     });\n *   </file>\n * </example>\n *\n * @example\n * ### Splitting on newline\n *\n * <example name=\"ngList-directive-newlines\">\n *   <file name=\"index.html\">\n *    <textarea ng-model=\"list\" ng-list=\"&#10;\" ng-trim=\"false\"></textarea>\n *    <pre>{{ list | json }}</pre>\n *   </file>\n *   <file name=\"protractor.js\" type=\"protractor\">\n *     it(\"should split the text by newlines\", function() {\n *       var listInput = element(by.model('list'));\n *       var output = element(by.binding('list | json'));\n *       listInput.sendKeys('abc\\ndef\\nghi');\n *       expect(output.getText()).toContain('[\\n  \"abc\",\\n  \"def\",\\n  \"ghi\"\\n]');\n *     });\n *   </file>\n * </example>\n *\n */\nvar ngListDirective = function() {\n  return {\n    restrict: 'A',\n    priority: 100,\n    require: 'ngModel',\n    link: function(scope, element, attr, ctrl) {\n      var ngList = attr.ngList || ', ';\n      var trimValues = attr.ngTrim !== 'false';\n      var separator = trimValues ? trim(ngList) : ngList;\n\n      var parse = function(viewValue) {\n        // If the viewValue is invalid (say required but empty) it will be `undefined`\n        if (isUndefined(viewValue)) return;\n\n        var list = [];\n\n        if (viewValue) {\n          forEach(viewValue.split(separator), function(value) {\n            if (value) list.push(trimValues ? trim(value) : value);\n          });\n        }\n\n        return list;\n      };\n\n      ctrl.$parsers.push(parse);\n      ctrl.$formatters.push(function(value) {\n        if (isArray(value)) {\n          return value.join(ngList);\n        }\n\n        return undefined;\n      });\n\n      // Override the standard $isEmpty because an empty array means the input is empty.\n      ctrl.$isEmpty = function(value) {\n        return !value || !value.length;\n      };\n    }\n  };\n};\n\n/* global VALID_CLASS: true,\n  INVALID_CLASS: true,\n  PRISTINE_CLASS: true,\n  DIRTY_CLASS: true,\n  UNTOUCHED_CLASS: true,\n  TOUCHED_CLASS: true,\n  PENDING_CLASS: true,\n  addSetValidityMethod: true,\n  setupValidity: true,\n  defaultModelOptions: false\n*/\n\n\nvar VALID_CLASS = 'ng-valid',\n    INVALID_CLASS = 'ng-invalid',\n    PRISTINE_CLASS = 'ng-pristine',\n    DIRTY_CLASS = 'ng-dirty',\n    UNTOUCHED_CLASS = 'ng-untouched',\n    TOUCHED_CLASS = 'ng-touched',\n    EMPTY_CLASS = 'ng-empty',\n    NOT_EMPTY_CLASS = 'ng-not-empty';\n\nvar ngModelMinErr = minErr('ngModel');\n\n/**\n * @ngdoc type\n * @name ngModel.NgModelController\n * @property {*} $viewValue The actual value from the control's view. For `input` elements, this is a\n * String. See {@link ngModel.NgModelController#$setViewValue} for information about when the $viewValue\n * is set.\n *\n * @property {*} $modelValue The value in the model that the control is bound to.\n *\n * @property {Array.<Function>} $parsers Array of functions to execute, as a pipeline, whenever\n *  the control updates the ngModelController with a new {@link ngModel.NgModelController#$viewValue\n    `$viewValue`} from the DOM, usually via user input.\n    See {@link ngModel.NgModelController#$setViewValue `$setViewValue()`} for a detailed lifecycle explanation.\n    Note that the `$parsers` are not called when the bound ngModel expression changes programmatically.\n\n  The functions are called in array order, each passing\n    its return value through to the next. The last return value is forwarded to the\n    {@link ngModel.NgModelController#$validators `$validators`} collection.\n\n  Parsers are used to sanitize / convert the {@link ngModel.NgModelController#$viewValue\n    `$viewValue`}.\n\n  Returning `undefined` from a parser means a parse error occurred. In that case,\n    no {@link ngModel.NgModelController#$validators `$validators`} will run and the `ngModel`\n    will be set to `undefined` unless {@link ngModelOptions `ngModelOptions.allowInvalid`}\n    is set to `true`. The parse error is stored in `ngModel.$error.parse`.\n\n  This simple example shows a parser that would convert text input value to lowercase:\n * ```js\n * function parse(value) {\n *   if (value) {\n *     return value.toLowerCase();\n *   }\n * }\n * ngModelController.$parsers.push(parse);\n * ```\n\n *\n * @property {Array.<Function>} $formatters Array of functions to execute, as a pipeline, whenever\n    the bound ngModel expression changes programmatically. The `$formatters` are not called when the\n    value of the control is changed by user interaction.\n\n  Formatters are used to format / convert the {@link ngModel.NgModelController#$modelValue\n    `$modelValue`} for display in the control.\n\n  The functions are called in reverse array order, each passing the value through to the\n    next. The last return value is used as the actual DOM value.\n\n  This simple example shows a formatter that would convert the model value to uppercase:\n\n * ```js\n * function format(value) {\n *   if (value) {\n *     return value.toUpperCase();\n *   }\n * }\n * ngModel.$formatters.push(format);\n * ```\n *\n * @property {Object.<string, function>} $validators A collection of validators that are applied\n *      whenever the model value changes. The key value within the object refers to the name of the\n *      validator while the function refers to the validation operation. The validation operation is\n *      provided with the model value as an argument and must return a true or false value depending\n *      on the response of that validation.\n *\n * ```js\n * ngModel.$validators.validCharacters = function(modelValue, viewValue) {\n *   var value = modelValue || viewValue;\n *   return /[0-9]+/.test(value) &&\n *          /[a-z]+/.test(value) &&\n *          /[A-Z]+/.test(value) &&\n *          /\\W+/.test(value);\n * };\n * ```\n *\n * @property {Object.<string, function>} $asyncValidators A collection of validations that are expected to\n *      perform an asynchronous validation (e.g. a HTTP request). The validation function that is provided\n *      is expected to return a promise when it is run during the model validation process. Once the promise\n *      is delivered then the validation status will be set to true when fulfilled and false when rejected.\n *      When the asynchronous validators are triggered, each of the validators will run in parallel and the model\n *      value will only be updated once all validators have been fulfilled. As long as an asynchronous validator\n *      is unfulfilled, its key will be added to the controllers `$pending` property. Also, all asynchronous validators\n *      will only run once all synchronous validators have passed.\n *\n * Please note that if $http is used then it is important that the server returns a success HTTP response code\n * in order to fulfill the validation and a status level of `4xx` in order to reject the validation.\n *\n * ```js\n * ngModel.$asyncValidators.uniqueUsername = function(modelValue, viewValue) {\n *   var value = modelValue || viewValue;\n *\n *   // Lookup user by username\n *   return $http.get('/api/users/' + value).\n *      then(function resolved() {\n *        //username exists, this means validation fails\n *        return $q.reject('exists');\n *      }, function rejected() {\n *        //username does not exist, therefore this validation passes\n *        return true;\n *      });\n * };\n * ```\n *\n * @property {Array.<Function>} $viewChangeListeners Array of functions to execute whenever the\n *     view value has changed. It is called with no arguments, and its return value is ignored.\n *     This can be used in place of additional $watches against the model value.\n *\n * @property {Object} $error An object hash with all failing validator ids as keys.\n * @property {Object} $pending An object hash with all pending validator ids as keys.\n *\n * @property {boolean} $untouched True if control has not lost focus yet.\n * @property {boolean} $touched True if control has lost focus.\n * @property {boolean} $pristine True if user has not interacted with the control yet.\n * @property {boolean} $dirty True if user has already interacted with the control.\n * @property {boolean} $valid True if there is no error.\n * @property {boolean} $invalid True if at least one error on the control.\n * @property {string} $name The name attribute of the control.\n *\n * @description\n *\n * `NgModelController` provides API for the {@link ngModel `ngModel`} directive.\n * The controller contains services for data-binding, validation, CSS updates, and value formatting\n * and parsing. It purposefully does not contain any logic which deals with DOM rendering or\n * listening to DOM events.\n * Such DOM related logic should be provided by other directives which make use of\n * `NgModelController` for data-binding to control elements.\n * Angular provides this DOM logic for most {@link input `input`} elements.\n * At the end of this page you can find a {@link ngModel.NgModelController#custom-control-example\n * custom control example} that uses `ngModelController` to bind to `contenteditable` elements.\n *\n * @example\n * ### Custom Control Example\n * This example shows how to use `NgModelController` with a custom control to achieve\n * data-binding. Notice how different directives (`contenteditable`, `ng-model`, and `required`)\n * collaborate together to achieve the desired result.\n *\n * `contenteditable` is an HTML5 attribute, which tells the browser to let the element\n * contents be edited in place by the user.\n *\n * We are using the {@link ng.service:$sce $sce} service here and include the {@link ngSanitize $sanitize}\n * module to automatically remove \"bad\" content like inline event listener (e.g. `<span onclick=\"...\">`).\n * However, as we are using `$sce` the model can still decide to provide unsafe content if it marks\n * that content using the `$sce` service.\n *\n * <example name=\"NgModelController\" module=\"customControl\" deps=\"angular-sanitize.js\">\n    <file name=\"style.css\">\n      [contenteditable] {\n        border: 1px solid black;\n        background-color: white;\n        min-height: 20px;\n      }\n\n      .ng-invalid {\n        border: 1px solid red;\n      }\n\n    </file>\n    <file name=\"script.js\">\n      angular.module('customControl', ['ngSanitize']).\n        directive('contenteditable', ['$sce', function($sce) {\n          return {\n            restrict: 'A', // only activate on element attribute\n            require: '?ngModel', // get a hold of NgModelController\n            link: function(scope, element, attrs, ngModel) {\n              if (!ngModel) return; // do nothing if no ng-model\n\n              // Specify how UI should be updated\n              ngModel.$render = function() {\n                element.html($sce.getTrustedHtml(ngModel.$viewValue || ''));\n              };\n\n              // Listen for change events to enable binding\n              element.on('blur keyup change', function() {\n                scope.$evalAsync(read);\n              });\n              read(); // initialize\n\n              // Write data to the model\n              function read() {\n                var html = element.html();\n                // When we clear the content editable the browser leaves a <br> behind\n                // If strip-br attribute is provided then we strip this out\n                if (attrs.stripBr && html === '<br>') {\n                  html = '';\n                }\n                ngModel.$setViewValue(html);\n              }\n            }\n          };\n        }]);\n    </file>\n    <file name=\"index.html\">\n      <form name=\"myForm\">\n       <div contenteditable\n            name=\"myWidget\" ng-model=\"userContent\"\n            strip-br=\"true\"\n            required>Change me!</div>\n        <span ng-show=\"myForm.myWidget.$error.required\">Required!</span>\n       <hr>\n       <textarea ng-model=\"userContent\" aria-label=\"Dynamic textarea\"></textarea>\n      </form>\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n    it('should data-bind and become invalid', function() {\n      if (browser.params.browser === 'safari' || browser.params.browser === 'firefox') {\n        // SafariDriver can't handle contenteditable\n        // and Firefox driver can't clear contenteditables very well\n        return;\n      }\n      var contentEditable = element(by.css('[contenteditable]'));\n      var content = 'Change me!';\n\n      expect(contentEditable.getText()).toEqual(content);\n\n      contentEditable.clear();\n      contentEditable.sendKeys(protractor.Key.BACK_SPACE);\n      expect(contentEditable.getText()).toEqual('');\n      expect(contentEditable.getAttribute('class')).toMatch(/ng-invalid-required/);\n    });\n    </file>\n * </example>\n *\n *\n */\nNgModelController.$inject = ['$scope', '$exceptionHandler', '$attrs', '$element', '$parse', '$animate', '$timeout', '$q', '$interpolate'];\nfunction NgModelController($scope, $exceptionHandler, $attr, $element, $parse, $animate, $timeout, $q, $interpolate) {\n  this.$viewValue = Number.NaN;\n  this.$modelValue = Number.NaN;\n  this.$$rawModelValue = undefined; // stores the parsed modelValue / model set from scope regardless of validity.\n  this.$validators = {};\n  this.$asyncValidators = {};\n  this.$parsers = [];\n  this.$formatters = [];\n  this.$viewChangeListeners = [];\n  this.$untouched = true;\n  this.$touched = false;\n  this.$pristine = true;\n  this.$dirty = false;\n  this.$valid = true;\n  this.$invalid = false;\n  this.$error = {}; // keep invalid keys here\n  this.$$success = {}; // keep valid keys here\n  this.$pending = undefined; // keep pending keys here\n  this.$name = $interpolate($attr.name || '', false)($scope);\n  this.$$parentForm = nullFormCtrl;\n  this.$options = defaultModelOptions;\n  this.$$updateEvents = '';\n  // Attach the correct context to the event handler function for updateOn\n  this.$$updateEventHandler = this.$$updateEventHandler.bind(this);\n\n  this.$$parsedNgModel = $parse($attr.ngModel);\n  this.$$parsedNgModelAssign = this.$$parsedNgModel.assign;\n  this.$$ngModelGet = this.$$parsedNgModel;\n  this.$$ngModelSet = this.$$parsedNgModelAssign;\n  this.$$pendingDebounce = null;\n  this.$$parserValid = undefined;\n\n  this.$$currentValidationRunId = 0;\n\n  // https://github.com/angular/angular.js/issues/15833\n  // Prevent `$$scope` from being iterated over by `copy` when NgModelController is deep watched\n  Object.defineProperty(this, '$$scope', {value: $scope});\n  this.$$attr = $attr;\n  this.$$element = $element;\n  this.$$animate = $animate;\n  this.$$timeout = $timeout;\n  this.$$parse = $parse;\n  this.$$q = $q;\n  this.$$exceptionHandler = $exceptionHandler;\n\n  setupValidity(this);\n  setupModelWatcher(this);\n}\n\nNgModelController.prototype = {\n  $$initGetterSetters: function() {\n    if (this.$options.getOption('getterSetter')) {\n      var invokeModelGetter = this.$$parse(this.$$attr.ngModel + '()'),\n          invokeModelSetter = this.$$parse(this.$$attr.ngModel + '($$$p)');\n\n      this.$$ngModelGet = function($scope) {\n        var modelValue = this.$$parsedNgModel($scope);\n        if (isFunction(modelValue)) {\n          modelValue = invokeModelGetter($scope);\n        }\n        return modelValue;\n      };\n      this.$$ngModelSet = function($scope, newValue) {\n        if (isFunction(this.$$parsedNgModel($scope))) {\n          invokeModelSetter($scope, {$$$p: newValue});\n        } else {\n          this.$$parsedNgModelAssign($scope, newValue);\n        }\n      };\n    } else if (!this.$$parsedNgModel.assign) {\n      throw ngModelMinErr('nonassign', 'Expression \\'{0}\\' is non-assignable. Element: {1}',\n          this.$$attr.ngModel, startingTag(this.$$element));\n    }\n  },\n\n\n  /**\n   * @ngdoc method\n   * @name ngModel.NgModelController#$render\n   *\n   * @description\n   * Called when the view needs to be updated. It is expected that the user of the ng-model\n   * directive will implement this method.\n   *\n   * The `$render()` method is invoked in the following situations:\n   *\n   * * `$rollbackViewValue()` is called.  If we are rolling back the view value to the last\n   *   committed value then `$render()` is called to update the input control.\n   * * The value referenced by `ng-model` is changed programmatically and both the `$modelValue` and\n   *   the `$viewValue` are different from last time.\n   *\n   * Since `ng-model` does not do a deep watch, `$render()` is only invoked if the values of\n   * `$modelValue` and `$viewValue` are actually different from their previous values. If `$modelValue`\n   * or `$viewValue` are objects (rather than a string or number) then `$render()` will not be\n   * invoked if you only change a property on the objects.\n   */\n  $render: noop,\n\n  /**\n   * @ngdoc method\n   * @name ngModel.NgModelController#$isEmpty\n   *\n   * @description\n   * This is called when we need to determine if the value of an input is empty.\n   *\n   * For instance, the required directive does this to work out if the input has data or not.\n   *\n   * The default `$isEmpty` function checks whether the value is `undefined`, `''`, `null` or `NaN`.\n   *\n   * You can override this for input directives whose concept of being empty is different from the\n   * default. The `checkboxInputType` directive does this because in its case a value of `false`\n   * implies empty.\n   *\n   * @param {*} value The value of the input to check for emptiness.\n   * @returns {boolean} True if `value` is \"empty\".\n   */\n  $isEmpty: function(value) {\n    // eslint-disable-next-line no-self-compare\n    return isUndefined(value) || value === '' || value === null || value !== value;\n  },\n\n  $$updateEmptyClasses: function(value) {\n    if (this.$isEmpty(value)) {\n      this.$$animate.removeClass(this.$$element, NOT_EMPTY_CLASS);\n      this.$$animate.addClass(this.$$element, EMPTY_CLASS);\n    } else {\n      this.$$animate.removeClass(this.$$element, EMPTY_CLASS);\n      this.$$animate.addClass(this.$$element, NOT_EMPTY_CLASS);\n    }\n  },\n\n  /**\n   * @ngdoc method\n   * @name ngModel.NgModelController#$setPristine\n   *\n   * @description\n   * Sets the control to its pristine state.\n   *\n   * This method can be called to remove the `ng-dirty` class and set the control to its pristine\n   * state (`ng-pristine` class). A model is considered to be pristine when the control\n   * has not been changed from when first compiled.\n   */\n  $setPristine: function() {\n    this.$dirty = false;\n    this.$pristine = true;\n    this.$$animate.removeClass(this.$$element, DIRTY_CLASS);\n    this.$$animate.addClass(this.$$element, PRISTINE_CLASS);\n  },\n\n  /**\n   * @ngdoc method\n   * @name ngModel.NgModelController#$setDirty\n   *\n   * @description\n   * Sets the control to its dirty state.\n   *\n   * This method can be called to remove the `ng-pristine` class and set the control to its dirty\n   * state (`ng-dirty` class). A model is considered to be dirty when the control has been changed\n   * from when first compiled.\n   */\n  $setDirty: function() {\n    this.$dirty = true;\n    this.$pristine = false;\n    this.$$animate.removeClass(this.$$element, PRISTINE_CLASS);\n    this.$$animate.addClass(this.$$element, DIRTY_CLASS);\n    this.$$parentForm.$setDirty();\n  },\n\n  /**\n   * @ngdoc method\n   * @name ngModel.NgModelController#$setUntouched\n   *\n   * @description\n   * Sets the control to its untouched state.\n   *\n   * This method can be called to remove the `ng-touched` class and set the control to its\n   * untouched state (`ng-untouched` class). Upon compilation, a model is set as untouched\n   * by default, however this function can be used to restore that state if the model has\n   * already been touched by the user.\n   */\n  $setUntouched: function() {\n    this.$touched = false;\n    this.$untouched = true;\n    this.$$animate.setClass(this.$$element, UNTOUCHED_CLASS, TOUCHED_CLASS);\n  },\n\n  /**\n   * @ngdoc method\n   * @name ngModel.NgModelController#$setTouched\n   *\n   * @description\n   * Sets the control to its touched state.\n   *\n   * This method can be called to remove the `ng-untouched` class and set the control to its\n   * touched state (`ng-touched` class). A model is considered to be touched when the user has\n   * first focused the control element and then shifted focus away from the control (blur event).\n   */\n  $setTouched: function() {\n    this.$touched = true;\n    this.$untouched = false;\n    this.$$animate.setClass(this.$$element, TOUCHED_CLASS, UNTOUCHED_CLASS);\n  },\n\n  /**\n   * @ngdoc method\n   * @name ngModel.NgModelController#$rollbackViewValue\n   *\n   * @description\n   * Cancel an update and reset the input element's value to prevent an update to the `$modelValue`,\n   * which may be caused by a pending debounced event or because the input is waiting for some\n   * future event.\n   *\n   * If you have an input that uses `ng-model-options` to set up debounced updates or updates that\n   * depend on special events such as `blur`, there can be a period when the `$viewValue` is out of\n   * sync with the ngModel's `$modelValue`.\n   *\n   * In this case, you can use `$rollbackViewValue()` to manually cancel the debounced / future update\n   * and reset the input to the last committed view value.\n   *\n   * It is also possible that you run into difficulties if you try to update the ngModel's `$modelValue`\n   * programmatically before these debounced/future events have resolved/occurred, because Angular's\n   * dirty checking mechanism is not able to tell whether the model has actually changed or not.\n   *\n   * The `$rollbackViewValue()` method should be called before programmatically changing the model of an\n   * input which may have such events pending. This is important in order to make sure that the\n   * input field will be updated with the new model value and any pending operations are cancelled.\n   *\n   * @example\n   * <example name=\"ng-model-cancel-update\" module=\"cancel-update-example\">\n   *   <file name=\"app.js\">\n   *     angular.module('cancel-update-example', [])\n   *\n   *     .controller('CancelUpdateController', ['$scope', function($scope) {\n   *       $scope.model = {value1: '', value2: ''};\n   *\n   *       $scope.setEmpty = function(e, value, rollback) {\n   *         if (e.keyCode === 27) {\n   *           e.preventDefault();\n   *           if (rollback) {\n   *             $scope.myForm[value].$rollbackViewValue();\n   *           }\n   *           $scope.model[value] = '';\n   *         }\n   *       };\n   *     }]);\n   *   </file>\n   *   <file name=\"index.html\">\n   *     <div ng-controller=\"CancelUpdateController\">\n   *       <p>Both of these inputs are only updated if they are blurred. Hitting escape should\n   *       empty them. Follow these steps and observe the difference:</p>\n   *       <ol>\n   *         <li>Type something in the input. You will see that the model is not yet updated</li>\n   *         <li>Press the Escape key.\n   *           <ol>\n   *             <li> In the first example, nothing happens, because the model is already '', and no\n   *             update is detected. If you blur the input, the model will be set to the current view.\n   *             </li>\n   *             <li> In the second example, the pending update is cancelled, and the input is set back\n   *             to the last committed view value (''). Blurring the input does nothing.\n   *             </li>\n   *           </ol>\n   *         </li>\n   *       </ol>\n   *\n   *       <form name=\"myForm\" ng-model-options=\"{ updateOn: 'blur' }\">\n   *         <div>\n   *           <p id=\"inputDescription1\">Without $rollbackViewValue():</p>\n   *           <input name=\"value1\" aria-describedby=\"inputDescription1\" ng-model=\"model.value1\"\n   *                  ng-keydown=\"setEmpty($event, 'value1')\">\n   *           value1: \"{{ model.value1 }}\"\n   *         </div>\n   *\n   *         <div>\n   *           <p id=\"inputDescription2\">With $rollbackViewValue():</p>\n   *           <input name=\"value2\" aria-describedby=\"inputDescription2\" ng-model=\"model.value2\"\n   *                  ng-keydown=\"setEmpty($event, 'value2', true)\">\n   *           value2: \"{{ model.value2 }}\"\n   *         </div>\n   *       </form>\n   *     </div>\n   *   </file>\n       <file name=\"style.css\">\n          div {\n            display: table-cell;\n          }\n          div:nth-child(1) {\n            padding-right: 30px;\n          }\n\n        </file>\n   * </example>\n   */\n  $rollbackViewValue: function() {\n    this.$$timeout.cancel(this.$$pendingDebounce);\n    this.$viewValue = this.$$lastCommittedViewValue;\n    this.$render();\n  },\n\n  /**\n   * @ngdoc method\n   * @name ngModel.NgModelController#$validate\n   *\n   * @description\n   * Runs each of the registered validators (first synchronous validators and then\n   * asynchronous validators).\n   * If the validity changes to invalid, the model will be set to `undefined`,\n   * unless {@link ngModelOptions `ngModelOptions.allowInvalid`} is `true`.\n   * If the validity changes to valid, it will set the model to the last available valid\n   * `$modelValue`, i.e. either the last parsed value or the last value set from the scope.\n   */\n  $validate: function() {\n    // ignore $validate before model is initialized\n    if (isNumberNaN(this.$modelValue)) {\n      return;\n    }\n\n    var viewValue = this.$$lastCommittedViewValue;\n    // Note: we use the $$rawModelValue as $modelValue might have been\n    // set to undefined during a view -> model update that found validation\n    // errors. We can't parse the view here, since that could change\n    // the model although neither viewValue nor the model on the scope changed\n    var modelValue = this.$$rawModelValue;\n\n    var prevValid = this.$valid;\n    var prevModelValue = this.$modelValue;\n\n    var allowInvalid = this.$options.getOption('allowInvalid');\n\n    var that = this;\n    this.$$runValidators(modelValue, viewValue, function(allValid) {\n      // If there was no change in validity, don't update the model\n      // This prevents changing an invalid modelValue to undefined\n      if (!allowInvalid && prevValid !== allValid) {\n        // Note: Don't check this.$valid here, as we could have\n        // external validators (e.g. calculated on the server),\n        // that just call $setValidity and need the model value\n        // to calculate their validity.\n        that.$modelValue = allValid ? modelValue : undefined;\n\n        if (that.$modelValue !== prevModelValue) {\n          that.$$writeModelToScope();\n        }\n      }\n    });\n  },\n\n  $$runValidators: function(modelValue, viewValue, doneCallback) {\n    this.$$currentValidationRunId++;\n    var localValidationRunId = this.$$currentValidationRunId;\n    var that = this;\n\n    // check parser error\n    if (!processParseErrors()) {\n      validationDone(false);\n      return;\n    }\n    if (!processSyncValidators()) {\n      validationDone(false);\n      return;\n    }\n    processAsyncValidators();\n\n    function processParseErrors() {\n      var errorKey = that.$$parserName || 'parse';\n      if (isUndefined(that.$$parserValid)) {\n        setValidity(errorKey, null);\n      } else {\n        if (!that.$$parserValid) {\n          forEach(that.$validators, function(v, name) {\n            setValidity(name, null);\n          });\n          forEach(that.$asyncValidators, function(v, name) {\n            setValidity(name, null);\n          });\n        }\n        // Set the parse error last, to prevent unsetting it, should a $validators key == parserName\n        setValidity(errorKey, that.$$parserValid);\n        return that.$$parserValid;\n      }\n      return true;\n    }\n\n    function processSyncValidators() {\n      var syncValidatorsValid = true;\n      forEach(that.$validators, function(validator, name) {\n        var result = Boolean(validator(modelValue, viewValue));\n        syncValidatorsValid = syncValidatorsValid && result;\n        setValidity(name, result);\n      });\n      if (!syncValidatorsValid) {\n        forEach(that.$asyncValidators, function(v, name) {\n          setValidity(name, null);\n        });\n        return false;\n      }\n      return true;\n    }\n\n    function processAsyncValidators() {\n      var validatorPromises = [];\n      var allValid = true;\n      forEach(that.$asyncValidators, function(validator, name) {\n        var promise = validator(modelValue, viewValue);\n        if (!isPromiseLike(promise)) {\n          throw ngModelMinErr('nopromise',\n            'Expected asynchronous validator to return a promise but got \\'{0}\\' instead.', promise);\n        }\n        setValidity(name, undefined);\n        validatorPromises.push(promise.then(function() {\n          setValidity(name, true);\n        }, function() {\n          allValid = false;\n          setValidity(name, false);\n        }));\n      });\n      if (!validatorPromises.length) {\n        validationDone(true);\n      } else {\n        that.$$q.all(validatorPromises).then(function() {\n          validationDone(allValid);\n        }, noop);\n      }\n    }\n\n    function setValidity(name, isValid) {\n      if (localValidationRunId === that.$$currentValidationRunId) {\n        that.$setValidity(name, isValid);\n      }\n    }\n\n    function validationDone(allValid) {\n      if (localValidationRunId === that.$$currentValidationRunId) {\n\n        doneCallback(allValid);\n      }\n    }\n  },\n\n  /**\n   * @ngdoc method\n   * @name ngModel.NgModelController#$commitViewValue\n   *\n   * @description\n   * Commit a pending update to the `$modelValue`.\n   *\n   * Updates may be pending by a debounced event or because the input is waiting for a some future\n   * event defined in `ng-model-options`. this method is rarely needed as `NgModelController`\n   * usually handles calling this in response to input events.\n   */\n  $commitViewValue: function() {\n    var viewValue = this.$viewValue;\n\n    this.$$timeout.cancel(this.$$pendingDebounce);\n\n    // If the view value has not changed then we should just exit, except in the case where there is\n    // a native validator on the element. In this case the validation state may have changed even though\n    // the viewValue has stayed empty.\n    if (this.$$lastCommittedViewValue === viewValue && (viewValue !== '' || !this.$$hasNativeValidators)) {\n      return;\n    }\n    this.$$updateEmptyClasses(viewValue);\n    this.$$lastCommittedViewValue = viewValue;\n\n    // change to dirty\n    if (this.$pristine) {\n      this.$setDirty();\n    }\n    this.$$parseAndValidate();\n  },\n\n  $$parseAndValidate: function() {\n    var viewValue = this.$$lastCommittedViewValue;\n    var modelValue = viewValue;\n    var that = this;\n\n    this.$$parserValid = isUndefined(modelValue) ? undefined : true;\n\n    if (this.$$parserValid) {\n      for (var i = 0; i < this.$parsers.length; i++) {\n        modelValue = this.$parsers[i](modelValue);\n        if (isUndefined(modelValue)) {\n          this.$$parserValid = false;\n          break;\n        }\n      }\n    }\n    if (isNumberNaN(this.$modelValue)) {\n      // this.$modelValue has not been touched yet...\n      this.$modelValue = this.$$ngModelGet(this.$$scope);\n    }\n    var prevModelValue = this.$modelValue;\n    var allowInvalid = this.$options.getOption('allowInvalid');\n    this.$$rawModelValue = modelValue;\n\n    if (allowInvalid) {\n      this.$modelValue = modelValue;\n      writeToModelIfNeeded();\n    }\n\n    // Pass the $$lastCommittedViewValue here, because the cached viewValue might be out of date.\n    // This can happen if e.g. $setViewValue is called from inside a parser\n    this.$$runValidators(modelValue, this.$$lastCommittedViewValue, function(allValid) {\n      if (!allowInvalid) {\n        // Note: Don't check this.$valid here, as we could have\n        // external validators (e.g. calculated on the server),\n        // that just call $setValidity and need the model value\n        // to calculate their validity.\n        that.$modelValue = allValid ? modelValue : undefined;\n        writeToModelIfNeeded();\n      }\n    });\n\n    function writeToModelIfNeeded() {\n      if (that.$modelValue !== prevModelValue) {\n        that.$$writeModelToScope();\n      }\n    }\n  },\n\n  $$writeModelToScope: function() {\n    this.$$ngModelSet(this.$$scope, this.$modelValue);\n    forEach(this.$viewChangeListeners, function(listener) {\n      try {\n        listener();\n      } catch (e) {\n        // eslint-disable-next-line no-invalid-this\n        this.$$exceptionHandler(e);\n      }\n    }, this);\n  },\n\n  /**\n   * @ngdoc method\n   * @name ngModel.NgModelController#$setViewValue\n   *\n   * @description\n   * Update the view value.\n   *\n   * This method should be called when a control wants to change the view value; typically,\n   * this is done from within a DOM event handler. For example, the {@link ng.directive:input input}\n   * directive calls it when the value of the input changes and {@link ng.directive:select select}\n   * calls it when an option is selected.\n   *\n   * When `$setViewValue` is called, the new `value` will be staged for committing through the `$parsers`\n   * and `$validators` pipelines. If there are no special {@link ngModelOptions} specified then the staged\n   * value is sent directly for processing through the `$parsers` pipeline. After this, the `$validators` and\n   * `$asyncValidators` are called and the value is applied to `$modelValue`.\n   * Finally, the value is set to the **expression** specified in the `ng-model` attribute and\n   * all the registered change listeners, in the `$viewChangeListeners` list are called.\n   *\n   * In case the {@link ng.directive:ngModelOptions ngModelOptions} directive is used with `updateOn`\n   * and the `default` trigger is not listed, all those actions will remain pending until one of the\n   * `updateOn` events is triggered on the DOM element.\n   * All these actions will be debounced if the {@link ng.directive:ngModelOptions ngModelOptions}\n   * directive is used with a custom debounce for this particular event.\n   * Note that a `$digest` is only triggered once the `updateOn` events are fired, or if `debounce`\n   * is specified, once the timer runs out.\n   *\n   * When used with standard inputs, the view value will always be a string (which is in some cases\n   * parsed into another type, such as a `Date` object for `input[date]`.)\n   * However, custom controls might also pass objects to this method. In this case, we should make\n   * a copy of the object before passing it to `$setViewValue`. This is because `ngModel` does not\n   * perform a deep watch of objects, it only looks for a change of identity. If you only change\n   * the property of the object then ngModel will not realize that the object has changed and\n   * will not invoke the `$parsers` and `$validators` pipelines. For this reason, you should\n   * not change properties of the copy once it has been passed to `$setViewValue`.\n   * Otherwise you may cause the model value on the scope to change incorrectly.\n   *\n   * <div class=\"alert alert-info\">\n   * In any case, the value passed to the method should always reflect the current value\n   * of the control. For example, if you are calling `$setViewValue` for an input element,\n   * you should pass the input DOM value. Otherwise, the control and the scope model become\n   * out of sync. It's also important to note that `$setViewValue` does not call `$render` or change\n   * the control's DOM value in any way. If we want to change the control's DOM value\n   * programmatically, we should update the `ngModel` scope expression. Its new value will be\n   * picked up by the model controller, which will run it through the `$formatters`, `$render` it\n   * to update the DOM, and finally call `$validate` on it.\n   * </div>\n   *\n   * @param {*} value value from the view.\n   * @param {string} trigger Event that triggered the update.\n   */\n  $setViewValue: function(value, trigger) {\n    this.$viewValue = value;\n    if (this.$options.getOption('updateOnDefault')) {\n      this.$$debounceViewValueCommit(trigger);\n    }\n  },\n\n  $$debounceViewValueCommit: function(trigger) {\n    var debounceDelay = this.$options.getOption('debounce');\n\n    if (isNumber(debounceDelay[trigger])) {\n      debounceDelay = debounceDelay[trigger];\n    } else if (isNumber(debounceDelay['default'])) {\n      debounceDelay = debounceDelay['default'];\n    }\n\n    this.$$timeout.cancel(this.$$pendingDebounce);\n    var that = this;\n    if (debounceDelay > 0) { // this fails if debounceDelay is an object\n      this.$$pendingDebounce = this.$$timeout(function() {\n        that.$commitViewValue();\n      }, debounceDelay);\n    } else if (this.$$scope.$root.$$phase) {\n      this.$commitViewValue();\n    } else {\n      this.$$scope.$apply(function() {\n        that.$commitViewValue();\n      });\n    }\n  },\n\n  /**\n   * @ngdoc method\n   *\n   * @name ngModel.NgModelController#$overrideModelOptions\n   *\n   * @description\n   *\n   * Override the current model options settings programmatically.\n   *\n   * The previous `ModelOptions` value will not be modified. Instead, a\n   * new `ModelOptions` object will inherit from the previous one overriding\n   * or inheriting settings that are defined in the given parameter.\n   *\n   * See {@link ngModelOptions} for information about what options can be specified\n   * and how model option inheritance works.\n   *\n   * <div class=\"alert alert-warning\">\n   * **Note:** this function only affects the options set on the `ngModelController`,\n   * and not the options on the {@link ngModelOptions} directive from which they might have been\n   * obtained initially.\n   * </div>\n   *\n   * <div class=\"alert alert-danger\">\n   * **Note:** it is not possible to override the `getterSetter` option.\n   * </div>\n   *\n   * @param {Object} options a hash of settings to override the previous options\n   *\n   */\n  $overrideModelOptions: function(options) {\n    this.$options = this.$options.createChild(options);\n    this.$$setUpdateOnEvents();\n  },\n\n  /**\n   * @ngdoc method\n   *\n   * @name  ngModel.NgModelController#$processModelValue\n\n   * @description\n   *\n   * Runs the model -> view pipeline on the current\n   * {@link ngModel.NgModelController#$modelValue $modelValue}.\n   *\n   * The following actions are performed by this method:\n   *\n   * - the `$modelValue` is run through the {@link ngModel.NgModelController#$formatters $formatters}\n   * and the result is set to the {@link ngModel.NgModelController#$viewValue $viewValue}\n   * - the `ng-empty` or `ng-not-empty` class is set on the element\n   * - if the `$viewValue` has changed:\n   *   - {@link ngModel.NgModelController#$render $render} is called on the control\n   *   - the {@link ngModel.NgModelController#$validators $validators} are run and\n   *   the validation status is set.\n   *\n   * This method is called by ngModel internally when the bound scope value changes.\n   * Application developers usually do not have to call this function themselves.\n   *\n   * This function can be used when the `$viewValue` or the rendered DOM value are not correctly\n   * formatted and the `$modelValue` must be run through the `$formatters` again.\n   *\n   * @example\n   * Consider a text input with an autocomplete list (for fruit), where the items are\n   * objects with a name and an id.\n   * A user enters `ap` and then selects `Apricot` from the list.\n   * Based on this, the autocomplete widget will call `$setViewValue({name: 'Apricot', id: 443})`,\n   * but the rendered value will still be `ap`.\n   * The widget can then call `ctrl.$processModelValue()` to run the model -> view\n   * pipeline again, which formats the object to the string `Apricot`,\n   * then updates the `$viewValue`, and finally renders it in the DOM.\n   *\n   * <example module=\"inputExample\" name=\"ng-model-process\">\n     <file name=\"index.html\">\n      <div ng-controller=\"inputController\" style=\"display: flex;\">\n        <div style=\"margin-right: 30px;\">\n          Search Fruit:\n          <basic-autocomplete items=\"items\" on-select=\"selectedFruit = item\"></basic-autocomplete>\n        </div>\n        <div>\n          Model:<br>\n          <pre>{{selectedFruit | json}}</pre>\n        </div>\n      </div>\n     </file>\n     <file name=\"app.js\">\n      angular.module('inputExample', [])\n        .controller('inputController', function($scope) {\n          $scope.items = [\n            {name: 'Apricot', id: 443},\n            {name: 'Clementine', id: 972},\n            {name: 'Durian', id: 169},\n            {name: 'Jackfruit', id: 982},\n            {name: 'Strawberry', id: 863}\n          ];\n        })\n        .component('basicAutocomplete', {\n          bindings: {\n            items: '<',\n            onSelect: '&'\n          },\n          templateUrl: 'autocomplete.html',\n          controller: function($element, $scope) {\n            var that = this;\n            var ngModel;\n\n            that.$postLink = function() {\n              ngModel = $element.find('input').controller('ngModel');\n\n              ngModel.$formatters.push(function(value) {\n                return (value && value.name) || value;\n              });\n\n              ngModel.$parsers.push(function(value) {\n                var match = value;\n                for (var i = 0; i < that.items.length; i++) {\n                  if (that.items[i].name === value) {\n                    match = that.items[i];\n                    break;\n                  }\n                }\n\n                return match;\n              });\n            };\n\n            that.selectItem = function(item) {\n              ngModel.$setViewValue(item);\n              ngModel.$processModelValue();\n              that.onSelect({item: item});\n            };\n          }\n        });\n     </file>\n     <file name=\"autocomplete.html\">\n       <div>\n         <input type=\"search\" ng-model=\"$ctrl.searchTerm\" />\n         <ul>\n           <li ng-repeat=\"item in $ctrl.items | filter:$ctrl.searchTerm\">\n             <button ng-click=\"$ctrl.selectItem(item)\">{{ item.name }}</button>\n           </li>\n         </ul>\n       </div>\n     </file>\n   * </example>\n   *\n   */\n  $processModelValue: function() {\n    var viewValue = this.$$format();\n\n    if (this.$viewValue !== viewValue) {\n      this.$$updateEmptyClasses(viewValue);\n      this.$viewValue = this.$$lastCommittedViewValue = viewValue;\n      this.$render();\n      // It is possible that model and view value have been updated during render\n      this.$$runValidators(this.$modelValue, this.$viewValue, noop);\n    }\n  },\n\n  /**\n   * This method is called internally to run the $formatters on the $modelValue\n   */\n  $$format: function() {\n    var formatters = this.$formatters,\n        idx = formatters.length;\n\n    var viewValue = this.$modelValue;\n    while (idx--) {\n      viewValue = formatters[idx](viewValue);\n    }\n\n    return viewValue;\n  },\n\n  /**\n   * This method is called internally when the bound scope value changes.\n   */\n  $$setModelValue: function(modelValue) {\n    this.$modelValue = this.$$rawModelValue = modelValue;\n    this.$$parserValid = undefined;\n    this.$processModelValue();\n  },\n\n  $$setUpdateOnEvents: function() {\n    if (this.$$updateEvents) {\n      this.$$element.off(this.$$updateEvents, this.$$updateEventHandler);\n    }\n\n    this.$$updateEvents = this.$options.getOption('updateOn');\n    if (this.$$updateEvents) {\n      this.$$element.on(this.$$updateEvents, this.$$updateEventHandler);\n    }\n  },\n\n  $$updateEventHandler: function(ev) {\n    this.$$debounceViewValueCommit(ev && ev.type);\n  }\n};\n\nfunction setupModelWatcher(ctrl) {\n  // model -> value\n  // Note: we cannot use a normal scope.$watch as we want to detect the following:\n  // 1. scope value is 'a'\n  // 2. user enters 'b'\n  // 3. ng-change kicks in and reverts scope value to 'a'\n  //    -> scope value did not change since the last digest as\n  //       ng-change executes in apply phase\n  // 4. view should be changed back to 'a'\n  ctrl.$$scope.$watch(function ngModelWatch(scope) {\n    var modelValue = ctrl.$$ngModelGet(scope);\n\n    // if scope model value and ngModel value are out of sync\n    // This cannot be moved to the action function, because it would not catch the\n    // case where the model is changed in the ngChange function or the model setter\n    if (modelValue !== ctrl.$modelValue &&\n      // checks for NaN is needed to allow setting the model to NaN when there's an asyncValidator\n      // eslint-disable-next-line no-self-compare\n      (ctrl.$modelValue === ctrl.$modelValue || modelValue === modelValue)\n    ) {\n      ctrl.$$setModelValue(modelValue);\n    }\n\n    return modelValue;\n  });\n}\n\n/**\n * @ngdoc method\n * @name ngModel.NgModelController#$setValidity\n *\n * @description\n * Change the validity state, and notify the form.\n *\n * This method can be called within $parsers/$formatters or a custom validation implementation.\n * However, in most cases it should be sufficient to use the `ngModel.$validators` and\n * `ngModel.$asyncValidators` collections which will call `$setValidity` automatically.\n *\n * @param {string} validationErrorKey Name of the validator. The `validationErrorKey` will be assigned\n *        to either `$error[validationErrorKey]` or `$pending[validationErrorKey]`\n *        (for unfulfilled `$asyncValidators`), so that it is available for data-binding.\n *        The `validationErrorKey` should be in camelCase and will get converted into dash-case\n *        for class name. Example: `myError` will result in `ng-valid-my-error` and `ng-invalid-my-error`\n *        classes and can be bound to as `{{ someForm.someControl.$error.myError }}`.\n * @param {boolean} isValid Whether the current state is valid (true), invalid (false), pending (undefined),\n *                          or skipped (null). Pending is used for unfulfilled `$asyncValidators`.\n *                          Skipped is used by Angular when validators do not run because of parse errors and\n *                          when `$asyncValidators` do not run because any of the `$validators` failed.\n */\naddSetValidityMethod({\n  clazz: NgModelController,\n  set: function(object, property) {\n    object[property] = true;\n  },\n  unset: function(object, property) {\n    delete object[property];\n  }\n});\n\n\n/**\n * @ngdoc directive\n * @name ngModel\n * @restrict A\n * @priority 1\n * @param {expression} ngModel assignable {@link guide/expression Expression} to bind to.\n *\n * @description\n * The `ngModel` directive binds an `input`,`select`, `textarea` (or custom form control) to a\n * property on the scope using {@link ngModel.NgModelController NgModelController},\n * which is created and exposed by this directive.\n *\n * `ngModel` is responsible for:\n *\n * - Binding the view into the model, which other directives such as `input`, `textarea` or `select`\n *   require.\n * - Providing validation behavior (i.e. required, number, email, url).\n * - Keeping the state of the control (valid/invalid, dirty/pristine, touched/untouched, validation errors).\n * - Setting related css classes on the element (`ng-valid`, `ng-invalid`, `ng-dirty`, `ng-pristine`, `ng-touched`,\n *   `ng-untouched`, `ng-empty`, `ng-not-empty`) including animations.\n * - Registering the control with its parent {@link ng.directive:form form}.\n *\n * Note: `ngModel` will try to bind to the property given by evaluating the expression on the\n * current scope. If the property doesn't already exist on this scope, it will be created\n * implicitly and added to the scope.\n *\n * For best practices on using `ngModel`, see:\n *\n *  - [Understanding Scopes](https://github.com/angular/angular.js/wiki/Understanding-Scopes)\n *\n * For basic examples, how to use `ngModel`, see:\n *\n *  - {@link ng.directive:input input}\n *    - {@link input[text] text}\n *    - {@link input[checkbox] checkbox}\n *    - {@link input[radio] radio}\n *    - {@link input[number] number}\n *    - {@link input[email] email}\n *    - {@link input[url] url}\n *    - {@link input[date] date}\n *    - {@link input[datetime-local] datetime-local}\n *    - {@link input[time] time}\n *    - {@link input[month] month}\n *    - {@link input[week] week}\n *  - {@link ng.directive:select select}\n *  - {@link ng.directive:textarea textarea}\n *\n * ## Complex Models (objects or collections)\n *\n * By default, `ngModel` watches the model by reference, not value. This is important to know when\n * binding inputs to models that are objects (e.g. `Date`) or collections (e.g. arrays). If only properties of the\n * object or collection change, `ngModel` will not be notified and so the input will not be  re-rendered.\n *\n * The model must be assigned an entirely new object or collection before a re-rendering will occur.\n *\n * Some directives have options that will cause them to use a custom `$watchCollection` on the model expression\n * - for example, `ngOptions` will do so when a `track by` clause is included in the comprehension expression or\n * if the select is given the `multiple` attribute.\n *\n * The `$watchCollection()` method only does a shallow comparison, meaning that changing properties deeper than the\n * first level of the object (or only changing the properties of an item in the collection if it's an array) will still\n * not trigger a re-rendering of the model.\n *\n * ## CSS classes\n * The following CSS classes are added and removed on the associated input/select/textarea element\n * depending on the validity of the model.\n *\n *  - `ng-valid`: the model is valid\n *  - `ng-invalid`: the model is invalid\n *  - `ng-valid-[key]`: for each valid key added by `$setValidity`\n *  - `ng-invalid-[key]`: for each invalid key added by `$setValidity`\n *  - `ng-pristine`: the control hasn't been interacted with yet\n *  - `ng-dirty`: the control has been interacted with\n *  - `ng-touched`: the control has been blurred\n *  - `ng-untouched`: the control hasn't been blurred\n *  - `ng-pending`: any `$asyncValidators` are unfulfilled\n *  - `ng-empty`: the view does not contain a value or the value is deemed \"empty\", as defined\n *     by the {@link ngModel.NgModelController#$isEmpty} method\n *  - `ng-not-empty`: the view contains a non-empty value\n *\n * Keep in mind that ngAnimate can detect each of these classes when added and removed.\n *\n * @animations\n * Animations within models are triggered when any of the associated CSS classes are added and removed\n * on the input element which is attached to the model. These classes include: `.ng-pristine`, `.ng-dirty`,\n * `.ng-invalid` and `.ng-valid` as well as any other validations that are performed on the model itself.\n * The animations that are triggered within ngModel are similar to how they work in ngClass and\n * animations can be hooked into using CSS transitions, keyframes as well as JS animations.\n *\n * The following example shows a simple way to utilize CSS transitions to style an input element\n * that has been rendered as invalid after it has been validated:\n *\n * <pre>\n * //be sure to include ngAnimate as a module to hook into more\n * //advanced animations\n * .my-input {\n *   transition:0.5s linear all;\n *   background: white;\n * }\n * .my-input.ng-invalid {\n *   background: red;\n *   color:white;\n * }\n * </pre>\n *\n * @example\n * ### Basic Usage\n * <example deps=\"angular-animate.js\" animations=\"true\" fixBase=\"true\" module=\"inputExample\" name=\"ng-model\">\n     <file name=\"index.html\">\n       <script>\n        angular.module('inputExample', [])\n          .controller('ExampleController', ['$scope', function($scope) {\n            $scope.val = '1';\n          }]);\n       </script>\n       <style>\n         .my-input {\n           transition:all linear 0.5s;\n           background: transparent;\n         }\n         .my-input.ng-invalid {\n           color:white;\n           background: red;\n         }\n       </style>\n       <p id=\"inputDescription\">\n        Update input to see transitions when valid/invalid.\n        Integer is a valid value.\n       </p>\n       <form name=\"testForm\" ng-controller=\"ExampleController\">\n         <input ng-model=\"val\" ng-pattern=\"/^\\d+$/\" name=\"anim\" class=\"my-input\"\n                aria-describedby=\"inputDescription\" />\n       </form>\n     </file>\n * </example>\n *\n * @example\n * ### Binding to a getter/setter\n *\n * Sometimes it's helpful to bind `ngModel` to a getter/setter function.  A getter/setter is a\n * function that returns a representation of the model when called with zero arguments, and sets\n * the internal state of a model when called with an argument. It's sometimes useful to use this\n * for models that have an internal representation that's different from what the model exposes\n * to the view.\n *\n * <div class=\"alert alert-success\">\n * **Best Practice:** It's best to keep getters fast because Angular is likely to call them more\n * frequently than other parts of your code.\n * </div>\n *\n * You use this behavior by adding `ng-model-options=\"{ getterSetter: true }\"` to an element that\n * has `ng-model` attached to it. You can also add `ng-model-options=\"{ getterSetter: true }\"` to\n * a `<form>`, which will enable this behavior for all `<input>`s within it. See\n * {@link ng.directive:ngModelOptions `ngModelOptions`} for more.\n *\n * The following example shows how to use `ngModel` with a getter/setter:\n *\n * @example\n * <example name=\"ngModel-getter-setter\" module=\"getterSetterExample\">\n     <file name=\"index.html\">\n       <div ng-controller=\"ExampleController\">\n         <form name=\"userForm\">\n           <label>Name:\n             <input type=\"text\" name=\"userName\"\n                    ng-model=\"user.name\"\n                    ng-model-options=\"{ getterSetter: true }\" />\n           </label>\n         </form>\n         <pre>user.name = <span ng-bind=\"user.name()\"></span></pre>\n       </div>\n     </file>\n     <file name=\"app.js\">\n       angular.module('getterSetterExample', [])\n         .controller('ExampleController', ['$scope', function($scope) {\n           var _name = 'Brian';\n           $scope.user = {\n             name: function(newName) {\n              // Note that newName can be undefined for two reasons:\n              // 1. Because it is called as a getter and thus called with no arguments\n              // 2. Because the property should actually be set to undefined. This happens e.g. if the\n              //    input is invalid\n              return arguments.length ? (_name = newName) : _name;\n             }\n           };\n         }]);\n     </file>\n * </example>\n */\nvar ngModelDirective = ['$rootScope', function($rootScope) {\n  return {\n    restrict: 'A',\n    require: ['ngModel', '^?form', '^?ngModelOptions'],\n    controller: NgModelController,\n    // Prelink needs to run before any input directive\n    // so that we can set the NgModelOptions in NgModelController\n    // before anyone else uses it.\n    priority: 1,\n    compile: function ngModelCompile(element) {\n      // Setup initial state of the control\n      element.addClass(PRISTINE_CLASS).addClass(UNTOUCHED_CLASS).addClass(VALID_CLASS);\n\n      return {\n        pre: function ngModelPreLink(scope, element, attr, ctrls) {\n          var modelCtrl = ctrls[0],\n              formCtrl = ctrls[1] || modelCtrl.$$parentForm,\n              optionsCtrl = ctrls[2];\n\n          if (optionsCtrl) {\n            modelCtrl.$options = optionsCtrl.$options;\n          }\n\n          modelCtrl.$$initGetterSetters();\n\n          // notify others, especially parent forms\n          formCtrl.$addControl(modelCtrl);\n\n          attr.$observe('name', function(newValue) {\n            if (modelCtrl.$name !== newValue) {\n              modelCtrl.$$parentForm.$$renameControl(modelCtrl, newValue);\n            }\n          });\n\n          scope.$on('$destroy', function() {\n            modelCtrl.$$parentForm.$removeControl(modelCtrl);\n          });\n        },\n        post: function ngModelPostLink(scope, element, attr, ctrls) {\n          var modelCtrl = ctrls[0];\n          modelCtrl.$$setUpdateOnEvents();\n\n          function setTouched() {\n            modelCtrl.$setTouched();\n          }\n\n          element.on('blur', function() {\n            if (modelCtrl.$touched) return;\n\n            if ($rootScope.$$phase) {\n              scope.$evalAsync(setTouched);\n            } else {\n              scope.$apply(setTouched);\n            }\n          });\n        }\n      };\n    }\n  };\n}];\n\n/* exported defaultModelOptions */\nvar defaultModelOptions;\nvar DEFAULT_REGEXP = /(\\s+|^)default(\\s+|$)/;\n\n/**\n * @ngdoc type\n * @name ModelOptions\n * @description\n * A container for the options set by the {@link ngModelOptions} directive\n */\nfunction ModelOptions(options) {\n  this.$$options = options;\n}\n\nModelOptions.prototype = {\n\n  /**\n   * @ngdoc method\n   * @name ModelOptions#getOption\n   * @param {string} name the name of the option to retrieve\n   * @returns {*} the value of the option\n   * @description\n   * Returns the value of the given option\n   */\n  getOption: function(name) {\n    return this.$$options[name];\n  },\n\n  /**\n   * @ngdoc method\n   * @name ModelOptions#createChild\n   * @param {Object} options a hash of options for the new child that will override the parent's options\n   * @return {ModelOptions} a new `ModelOptions` object initialized with the given options.\n   */\n  createChild: function(options) {\n    var inheritAll = false;\n\n    // make a shallow copy\n    options = extend({}, options);\n\n    // Inherit options from the parent if specified by the value `\"$inherit\"`\n    forEach(options, /* @this */ function(option, key) {\n      if (option === '$inherit') {\n        if (key === '*') {\n          inheritAll = true;\n        } else {\n          options[key] = this.$$options[key];\n          // `updateOn` is special so we must also inherit the `updateOnDefault` option\n          if (key === 'updateOn') {\n            options.updateOnDefault = this.$$options.updateOnDefault;\n          }\n        }\n      } else {\n        if (key === 'updateOn') {\n          // If the `updateOn` property contains the `default` event then we have to remove\n          // it from the event list and set the `updateOnDefault` flag.\n          options.updateOnDefault = false;\n          options[key] = trim(option.replace(DEFAULT_REGEXP, function() {\n            options.updateOnDefault = true;\n            return ' ';\n          }));\n        }\n      }\n    }, this);\n\n    if (inheritAll) {\n      // We have a property of the form: `\"*\": \"$inherit\"`\n      delete options['*'];\n      defaults(options, this.$$options);\n    }\n\n    // Finally add in any missing defaults\n    defaults(options, defaultModelOptions.$$options);\n\n    return new ModelOptions(options);\n  }\n};\n\n\ndefaultModelOptions = new ModelOptions({\n  updateOn: '',\n  updateOnDefault: true,\n  debounce: 0,\n  getterSetter: false,\n  allowInvalid: false,\n  timezone: null\n});\n\n\n/**\n * @ngdoc directive\n * @name ngModelOptions\n * @restrict A\n * @priority 10\n *\n * @description\n * This directive allows you to modify the behaviour of {@link ngModel} directives within your\n * application. You can specify an `ngModelOptions` directive on any element. All {@link ngModel}\n * directives will use the options of their nearest `ngModelOptions` ancestor.\n *\n * The `ngModelOptions` settings are found by evaluating the value of the attribute directive as\n * an Angular expression. This expression should evaluate to an object, whose properties contain\n * the settings. For example: `<div ng-model-options=\"{ debounce: 100 }\"`.\n *\n * ## Inheriting Options\n *\n * You can specify that an `ngModelOptions` setting should be inherited from a parent `ngModelOptions`\n * directive by giving it the value of `\"$inherit\"`.\n * Then it will inherit that setting from the first `ngModelOptions` directive found by traversing up the\n * DOM tree. If there is no ancestor element containing an `ngModelOptions` directive then default settings\n * will be used.\n *\n * For example given the following fragment of HTML\n *\n *\n * ```html\n * <div ng-model-options=\"{ allowInvalid: true, debounce: 200 }\">\n *   <form ng-model-options=\"{ updateOn: 'blur', allowInvalid: '$inherit' }\">\n *     <input ng-model-options=\"{ updateOn: 'default', allowInvalid: '$inherit' }\" />\n *   </form>\n * </div>\n * ```\n *\n * the `input` element will have the following settings\n *\n * ```js\n * { allowInvalid: true, updateOn: 'default', debounce: 0 }\n * ```\n *\n * Notice that the `debounce` setting was not inherited and used the default value instead.\n *\n * You can specify that all undefined settings are automatically inherited from an ancestor by\n * including a property with key of `\"*\"` and value of `\"$inherit\"`.\n *\n * For example given the following fragment of HTML\n *\n *\n * ```html\n * <div ng-model-options=\"{ allowInvalid: true, debounce: 200 }\">\n *   <form ng-model-options=\"{ updateOn: 'blur', \"*\": '$inherit' }\">\n *     <input ng-model-options=\"{ updateOn: 'default', \"*\": '$inherit' }\" />\n *   </form>\n * </div>\n * ```\n *\n * the `input` element will have the following settings\n *\n * ```js\n * { allowInvalid: true, updateOn: 'default', debounce: 200 }\n * ```\n *\n * Notice that the `debounce` setting now inherits the value from the outer `<div>` element.\n *\n * If you are creating a reusable component then you should be careful when using `\"*\": \"$inherit\"`\n * since you may inadvertently inherit a setting in the future that changes the behavior of your component.\n *\n *\n * ## Triggering and debouncing model updates\n *\n * The `updateOn` and `debounce` properties allow you to specify a custom list of events that will\n * trigger a model update and/or a debouncing delay so that the actual update only takes place when\n * a timer expires; this timer will be reset after another change takes place.\n *\n * Given the nature of `ngModelOptions`, the value displayed inside input fields in the view might\n * be different from the value in the actual model. This means that if you update the model you\n * should also invoke {@link ngModel.NgModelController#$rollbackViewValue} on the relevant input field in\n * order to make sure it is synchronized with the model and that any debounced action is canceled.\n *\n * The easiest way to reference the control's {@link ngModel.NgModelController#$rollbackViewValue}\n * method is by making sure the input is placed inside a form that has a `name` attribute. This is\n * important because `form` controllers are published to the related scope under the name in their\n * `name` attribute.\n *\n * Any pending changes will take place immediately when an enclosing form is submitted via the\n * `submit` event. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`\n * to have access to the updated model.\n *\n * ### Overriding immediate updates\n *\n * The following example shows how to override immediate updates. Changes on the inputs within the\n * form will update the model only when the control loses focus (blur event). If `escape` key is\n * pressed while the input field is focused, the value is reset to the value in the current model.\n *\n * <example name=\"ngModelOptions-directive-blur\" module=\"optionsExample\">\n *   <file name=\"index.html\">\n *     <div ng-controller=\"ExampleController\">\n *       <form name=\"userForm\">\n *         <label>\n *           Name:\n *           <input type=\"text\" name=\"userName\"\n *                  ng-model=\"user.name\"\n *                  ng-model-options=\"{ updateOn: 'blur' }\"\n *                  ng-keyup=\"cancel($event)\" />\n *         </label><br />\n *         <label>\n *           Other data:\n *           <input type=\"text\" ng-model=\"user.data\" />\n *         </label><br />\n *       </form>\n *       <pre>user.name = <span ng-bind=\"user.name\"></span></pre>\n *     </div>\n *   </file>\n *   <file name=\"app.js\">\n *     angular.module('optionsExample', [])\n *       .controller('ExampleController', ['$scope', function($scope) {\n *         $scope.user = { name: 'say', data: '' };\n *\n *         $scope.cancel = function(e) {\n *           if (e.keyCode === 27) {\n *             $scope.userForm.userName.$rollbackViewValue();\n *           }\n *         };\n *       }]);\n *   </file>\n *   <file name=\"protractor.js\" type=\"protractor\">\n *     var model = element(by.binding('user.name'));\n *     var input = element(by.model('user.name'));\n *     var other = element(by.model('user.data'));\n *\n *     it('should allow custom events', function() {\n *       input.sendKeys(' hello');\n *       input.click();\n *       expect(model.getText()).toEqual('say');\n *       other.click();\n *       expect(model.getText()).toEqual('say hello');\n *     });\n *\n *     it('should $rollbackViewValue when model changes', function() {\n *       input.sendKeys(' hello');\n *       expect(input.getAttribute('value')).toEqual('say hello');\n *       input.sendKeys(protractor.Key.ESCAPE);\n *       expect(input.getAttribute('value')).toEqual('say');\n *       other.click();\n *       expect(model.getText()).toEqual('say');\n *     });\n *   </file>\n * </example>\n *\n * ### Debouncing updates\n *\n * The next example shows how to debounce model changes. Model will be updated only 1 sec after last change.\n * If the `Clear` button is pressed, any debounced action is canceled and the value becomes empty.\n *\n * <example name=\"ngModelOptions-directive-debounce\" module=\"optionsExample\">\n *   <file name=\"index.html\">\n *     <div ng-controller=\"ExampleController\">\n *       <form name=\"userForm\">\n *         Name:\n *         <input type=\"text\" name=\"userName\"\n *                ng-model=\"user.name\"\n *                ng-model-options=\"{ debounce: 1000 }\" />\n *         <button ng-click=\"userForm.userName.$rollbackViewValue(); user.name=''\">Clear</button><br />\n *       </form>\n *       <pre>user.name = <span ng-bind=\"user.name\"></span></pre>\n *     </div>\n *   </file>\n *   <file name=\"app.js\">\n *     angular.module('optionsExample', [])\n *       .controller('ExampleController', ['$scope', function($scope) {\n *         $scope.user = { name: 'say' };\n *       }]);\n *   </file>\n * </example>\n *\n *\n * ## Model updates and validation\n *\n * The default behaviour in `ngModel` is that the model value is set to `undefined` when the\n * validation determines that the value is invalid. By setting the `allowInvalid` property to true,\n * the model will still be updated even if the value is invalid.\n *\n *\n * ## Connecting to the scope\n *\n * By setting the `getterSetter` property to true you are telling ngModel that the `ngModel` expression\n * on the scope refers to a \"getter/setter\" function rather than the value itself.\n *\n * The following example shows how to bind to getter/setters:\n *\n * <example name=\"ngModelOptions-directive-getter-setter\" module=\"getterSetterExample\">\n *   <file name=\"index.html\">\n *     <div ng-controller=\"ExampleController\">\n *       <form name=\"userForm\">\n *         <label>\n *           Name:\n *           <input type=\"text\" name=\"userName\"\n *                  ng-model=\"user.name\"\n *                  ng-model-options=\"{ getterSetter: true }\" />\n *         </label>\n *       </form>\n *       <pre>user.name = <span ng-bind=\"user.name()\"></span></pre>\n *     </div>\n *   </file>\n *   <file name=\"app.js\">\n *     angular.module('getterSetterExample', [])\n *       .controller('ExampleController', ['$scope', function($scope) {\n *         var _name = 'Brian';\n *         $scope.user = {\n *           name: function(newName) {\n *             return angular.isDefined(newName) ? (_name = newName) : _name;\n *           }\n *         };\n *       }]);\n *   </file>\n * </example>\n *\n *\n * ## Specifying timezones\n *\n * You can specify the timezone that date/time input directives expect by providing its name in the\n * `timezone` property.\n *\n *\n * ## Programmatically changing options\n *\n * The `ngModelOptions` expression is only evaluated once when the directive is linked; it is not\n * watched for changes. However, it is possible to override the options on a single\n * {@link ngModel.NgModelController} instance with\n * {@link ngModel.NgModelController#$overrideModelOptions `NgModelController#$overrideModelOptions()`}.\n *\n *\n * @param {Object} ngModelOptions options to apply to {@link ngModel} directives on this element and\n *   and its descendents. Valid keys are:\n *   - `updateOn`: string specifying which event should the input be bound to. You can set several\n *     events using an space delimited list. There is a special event called `default` that\n *     matches the default events belonging to the control. These are the events that are bound to\n *     the control, and when fired, update the `$viewValue` via `$setViewValue`.\n *\n *     `ngModelOptions` considers every event that is not listed in `updateOn` a \"default\" event,\n *     since different control types use different default events.\n *\n *     See also the section {@link ngModelOptions#triggering-and-debouncing-model-updates\n *     Triggering and debouncing model updates}.\n *\n *   - `debounce`: integer value which contains the debounce model update value in milliseconds. A\n *     value of 0 triggers an immediate update. If an object is supplied instead, you can specify a\n *     custom value for each event. For example:\n *     ```\n *     ng-model-options=\"{\n *       updateOn: 'default blur click',\n *       debounce: { 'default': 500, 'blur': 0 }\n *     }\"\n *     ```\n *\n *     \"default\" also applies to all events that are listed in `updateOn` but are not\n *     listed in `debounce`, i.e. \"click\" would also be debounced by 500 milliseconds.\n *\n *   - `allowInvalid`: boolean value which indicates that the model can be set with values that did\n *     not validate correctly instead of the default behavior of setting the model to undefined.\n *   - `getterSetter`: boolean value which determines whether or not to treat functions bound to\n *     `ngModel` as getters/setters.\n *   - `timezone`: Defines the timezone to be used to read/write the `Date` instance in the model for\n *     `<input type=\"date\" />`, `<input type=\"time\" />`, ... . It understands UTC/GMT and the\n *     continental US time zone abbreviations, but for general use, use a time zone offset, for\n *     example, `'+0430'` (4 hours, 30 minutes east of the Greenwich meridian)\n *     If not specified, the timezone of the browser will be used.\n *\n */\nvar ngModelOptionsDirective = function() {\n  NgModelOptionsController.$inject = ['$attrs', '$scope'];\n  function NgModelOptionsController($attrs, $scope) {\n    this.$$attrs = $attrs;\n    this.$$scope = $scope;\n  }\n  NgModelOptionsController.prototype = {\n    $onInit: function() {\n      var parentOptions = this.parentCtrl ? this.parentCtrl.$options : defaultModelOptions;\n      var modelOptionsDefinition = this.$$scope.$eval(this.$$attrs.ngModelOptions);\n\n      this.$options = parentOptions.createChild(modelOptionsDefinition);\n    }\n  };\n\n  return {\n    restrict: 'A',\n    // ngModelOptions needs to run before ngModel and input directives\n    priority: 10,\n    require: {parentCtrl: '?^^ngModelOptions'},\n    bindToController: true,\n    controller: NgModelOptionsController\n  };\n};\n\n\n// shallow copy over values from `src` that are not already specified on `dst`\nfunction defaults(dst, src) {\n  forEach(src, function(value, key) {\n    if (!isDefined(dst[key])) {\n      dst[key] = value;\n    }\n  });\n}\n\n/**\n * @ngdoc directive\n * @name ngNonBindable\n * @restrict AC\n * @priority 1000\n * @element ANY\n *\n * @description\n * The `ngNonBindable` directive tells AngularJS not to compile or bind the contents of the current\n * DOM element, including directives on the element itself that have a lower priority than\n * `ngNonBindable`. This is useful if the element contains what appears to be AngularJS directives\n * and bindings but which should be ignored by AngularJS. This could be the case if you have a site\n * that displays snippets of code, for instance.\n *\n * @example\n * In this example there are two locations where a simple interpolation binding (`{{}}`) is present,\n * but the one wrapped in `ngNonBindable` is left alone.\n *\n  <example name=\"ng-non-bindable\">\n    <file name=\"index.html\">\n      <div>Normal: {{1 + 2}}</div>\n      <div ng-non-bindable>Ignored: {{1 + 2}}</div>\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n     it('should check ng-non-bindable', function() {\n       expect(element(by.binding('1 + 2')).getText()).toContain('3');\n       expect(element.all(by.css('div')).last().getText()).toMatch(/1 \\+ 2/);\n     });\n    </file>\n  </example>\n */\nvar ngNonBindableDirective = ngDirective({ terminal: true, priority: 1000 });\n\n/* exported ngOptionsDirective */\n\n/* global jqLiteRemove */\n\nvar ngOptionsMinErr = minErr('ngOptions');\n\n/**\n * @ngdoc directive\n * @name ngOptions\n * @restrict A\n *\n * @description\n *\n * The `ngOptions` attribute can be used to dynamically generate a list of `<option>`\n * elements for the `<select>` element using the array or object obtained by evaluating the\n * `ngOptions` comprehension expression.\n *\n * In many cases, {@link ng.directive:ngRepeat ngRepeat} can be used on `<option>` elements instead of\n * `ngOptions` to achieve a similar result. However, `ngOptions` provides some benefits:\n * - more flexibility in how the `<select>`'s model is assigned via the `select` **`as`** part of the\n * comprehension expression\n * - reduced memory consumption by not creating a new scope for each repeated instance\n * - increased render speed by creating the options in a documentFragment instead of individually\n *\n * When an item in the `<select>` menu is selected, the array element or object property\n * represented by the selected option will be bound to the model identified by the `ngModel`\n * directive.\n *\n * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can\n * be nested into the `<select>` element. This element will then represent the `null` or \"not selected\"\n * option. See example below for demonstration.\n *\n * ## Complex Models (objects or collections)\n *\n * By default, `ngModel` watches the model by reference, not value. This is important to know when\n * binding the select to a model that is an object or a collection.\n *\n * One issue occurs if you want to preselect an option. For example, if you set\n * the model to an object that is equal to an object in your collection, `ngOptions` won't be able to set the selection,\n * because the objects are not identical. So by default, you should always reference the item in your collection\n * for preselections, e.g.: `$scope.selected = $scope.collection[3]`.\n *\n * Another solution is to use a `track by` clause, because then `ngOptions` will track the identity\n * of the item not by reference, but by the result of the `track by` expression. For example, if your\n * collection items have an id property, you would `track by item.id`.\n *\n * A different issue with objects or collections is that ngModel won't detect if an object property or\n * a collection item changes. For that reason, `ngOptions` additionally watches the model using\n * `$watchCollection`, when the expression contains a `track by` clause or the the select has the `multiple` attribute.\n * This allows ngOptions to trigger a re-rendering of the options even if the actual object/collection\n * has not changed identity, but only a property on the object or an item in the collection changes.\n *\n * Note that `$watchCollection` does a shallow comparison of the properties of the object (or the items in the collection\n * if the model is an array). This means that changing a property deeper than the first level inside the\n * object/collection will not trigger a re-rendering.\n *\n * ## `select` **`as`**\n *\n * Using `select` **`as`** will bind the result of the `select` expression to the model, but\n * the value of the `<select>` and `<option>` html elements will be either the index (for array data sources)\n * or property name (for object data sources) of the value within the collection. If a **`track by`** expression\n * is used, the result of that expression will be set as the value of the `option` and `select` elements.\n *\n *\n * ### `select` **`as`** and **`track by`**\n *\n * <div class=\"alert alert-warning\">\n * Be careful when using `select` **`as`** and **`track by`** in the same expression.\n * </div>\n *\n * Given this array of items on the $scope:\n *\n * ```js\n * $scope.items = [{\n *   id: 1,\n *   label: 'aLabel',\n *   subItem: { name: 'aSubItem' }\n * }, {\n *   id: 2,\n *   label: 'bLabel',\n *   subItem: { name: 'bSubItem' }\n * }];\n * ```\n *\n * This will work:\n *\n * ```html\n * <select ng-options=\"item as item.label for item in items track by item.id\" ng-model=\"selected\"></select>\n * ```\n * ```js\n * $scope.selected = $scope.items[0];\n * ```\n *\n * but this will not work:\n *\n * ```html\n * <select ng-options=\"item.subItem as item.label for item in items track by item.id\" ng-model=\"selected\"></select>\n * ```\n * ```js\n * $scope.selected = $scope.items[0].subItem;\n * ```\n *\n * In both examples, the **`track by`** expression is applied successfully to each `item` in the\n * `items` array. Because the selected option has been set programmatically in the controller, the\n * **`track by`** expression is also applied to the `ngModel` value. In the first example, the\n * `ngModel` value is `items[0]` and the **`track by`** expression evaluates to `items[0].id` with\n * no issue. In the second example, the `ngModel` value is `items[0].subItem` and the **`track by`**\n * expression evaluates to `items[0].subItem.id` (which is undefined). As a result, the model value\n * is not matched against any `<option>` and the `<select>` appears as having no selected value.\n *\n *\n * @param {string} ngModel Assignable AngularJS expression to data-bind to.\n * @param {comprehension_expression} ngOptions in one of the following forms:\n *\n *   * for array data sources:\n *     * `label` **`for`** `value` **`in`** `array`\n *     * `select` **`as`** `label` **`for`** `value` **`in`** `array`\n *     * `label` **`group by`** `group` **`for`** `value` **`in`** `array`\n *     * `label` **`disable when`** `disable` **`for`** `value` **`in`** `array`\n *     * `label` **`group by`** `group` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`\n *     * `label` **`disable when`** `disable` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`\n *     * `label` **`for`** `value` **`in`** `array` | orderBy:`orderexpr` **`track by`** `trackexpr`\n *        (for including a filter with `track by`)\n *   * for object data sources:\n *     * `label` **`for (`**`key` **`,`** `value`**`) in`** `object`\n *     * `select` **`as`** `label` **`for (`**`key` **`,`** `value`**`) in`** `object`\n *     * `label` **`group by`** `group` **`for (`**`key`**`,`** `value`**`) in`** `object`\n *     * `label` **`disable when`** `disable` **`for (`**`key`**`,`** `value`**`) in`** `object`\n *     * `select` **`as`** `label` **`group by`** `group`\n *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`\n *     * `select` **`as`** `label` **`disable when`** `disable`\n *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`\n *\n * Where:\n *\n *   * `array` / `object`: an expression which evaluates to an array / object to iterate over.\n *   * `value`: local variable which will refer to each item in the `array` or each property value\n *      of `object` during iteration.\n *   * `key`: local variable which will refer to a property name in `object` during iteration.\n *   * `label`: The result of this expression will be the label for `<option>` element. The\n *     `expression` will most likely refer to the `value` variable (e.g. `value.propertyName`).\n *   * `select`: The result of this expression will be bound to the model of the parent `<select>`\n *      element. If not specified, `select` expression will default to `value`.\n *   * `group`: The result of this expression will be used to group options using the `<optgroup>`\n *      DOM element.\n *   * `disable`: The result of this expression will be used to disable the rendered `<option>`\n *      element. Return `true` to disable.\n *   * `trackexpr`: Used when working with an array of objects. The result of this expression will be\n *      used to identify the objects in the array. The `trackexpr` will most likely refer to the\n *     `value` variable (e.g. `value.propertyName`). With this the selection is preserved\n *      even when the options are recreated (e.g. reloaded from the server).\n * @param {string=} name Property name of the form under which the control is published.\n * @param {string=} required The control is considered valid only if value is entered.\n * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to\n *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of\n *    `required` when you want to data-bind to the `required` attribute.\n * @param {string=} ngAttrSize sets the size of the select element dynamically. Uses the\n * {@link guide/interpolation#-ngattr-for-binding-to-arbitrary-attributes ngAttr} directive.\n *\n * @example\n    <example module=\"selectExample\" name=\"select\">\n      <file name=\"index.html\">\n        <script>\n        angular.module('selectExample', [])\n          .controller('ExampleController', ['$scope', function($scope) {\n            $scope.colors = [\n              {name:'black', shade:'dark'},\n              {name:'white', shade:'light', notAnOption: true},\n              {name:'red', shade:'dark'},\n              {name:'blue', shade:'dark', notAnOption: true},\n              {name:'yellow', shade:'light', notAnOption: false}\n            ];\n            $scope.myColor = $scope.colors[2]; // red\n          }]);\n        </script>\n        <div ng-controller=\"ExampleController\">\n          <ul>\n            <li ng-repeat=\"color in colors\">\n              <label>Name: <input ng-model=\"color.name\"></label>\n              <label><input type=\"checkbox\" ng-model=\"color.notAnOption\"> Disabled?</label>\n              <button ng-click=\"colors.splice($index, 1)\" aria-label=\"Remove\">X</button>\n            </li>\n            <li>\n              <button ng-click=\"colors.push({})\">add</button>\n            </li>\n          </ul>\n          <hr/>\n          <label>Color (null not allowed):\n            <select ng-model=\"myColor\" ng-options=\"color.name for color in colors\"></select>\n          </label><br/>\n          <label>Color (null allowed):\n          <span  class=\"nullable\">\n            <select ng-model=\"myColor\" ng-options=\"color.name for color in colors\">\n              <option value=\"\">-- choose color --</option>\n            </select>\n          </span></label><br/>\n\n          <label>Color grouped by shade:\n            <select ng-model=\"myColor\" ng-options=\"color.name group by color.shade for color in colors\">\n            </select>\n          </label><br/>\n\n          <label>Color grouped by shade, with some disabled:\n            <select ng-model=\"myColor\"\n                  ng-options=\"color.name group by color.shade disable when color.notAnOption for color in colors\">\n            </select>\n          </label><br/>\n\n\n\n          Select <button ng-click=\"myColor = { name:'not in list', shade: 'other' }\">bogus</button>.\n          <br/>\n          <hr/>\n          Currently selected: {{ {selected_color:myColor} }}\n          <div style=\"border:solid 1px black; height:20px\"\n               ng-style=\"{'background-color':myColor.name}\">\n          </div>\n        </div>\n      </file>\n      <file name=\"protractor.js\" type=\"protractor\">\n         it('should check ng-options', function() {\n           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('red');\n           element.all(by.model('myColor')).first().click();\n           element.all(by.css('select[ng-model=\"myColor\"] option')).first().click();\n           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('black');\n           element(by.css('.nullable select[ng-model=\"myColor\"]')).click();\n           element.all(by.css('.nullable select[ng-model=\"myColor\"] option')).first().click();\n           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('null');\n         });\n      </file>\n    </example>\n */\n\n/* eslint-disable max-len */\n//                     //00001111111111000000000002222222222000000000000000000000333333333300000000000000000000000004444444444400000000000005555555555555000000000666666666666600000007777777777777000000000000000888888888800000000000000000009999999999\nvar NG_OPTIONS_REGEXP = /^\\s*([\\s\\S]+?)(?:\\s+as\\s+([\\s\\S]+?))?(?:\\s+group\\s+by\\s+([\\s\\S]+?))?(?:\\s+disable\\s+when\\s+([\\s\\S]+?))?\\s+for\\s+(?:([$\\w][$\\w]*)|(?:\\(\\s*([$\\w][$\\w]*)\\s*,\\s*([$\\w][$\\w]*)\\s*\\)))\\s+in\\s+([\\s\\S]+?)(?:\\s+track\\s+by\\s+([\\s\\S]+?))?$/;\n                        // 1: value expression (valueFn)\n                        // 2: label expression (displayFn)\n                        // 3: group by expression (groupByFn)\n                        // 4: disable when expression (disableWhenFn)\n                        // 5: array item variable name\n                        // 6: object item key variable name\n                        // 7: object item value variable name\n                        // 8: collection expression\n                        // 9: track by expression\n/* eslint-enable */\n\n\nvar ngOptionsDirective = ['$compile', '$document', '$parse', function($compile, $document, $parse) {\n\n  function parseOptionsExpression(optionsExp, selectElement, scope) {\n\n    var match = optionsExp.match(NG_OPTIONS_REGEXP);\n    if (!(match)) {\n      throw ngOptionsMinErr('iexp',\n        'Expected expression in form of ' +\n        '\\'_select_ (as _label_)? for (_key_,)?_value_ in _collection_\\'' +\n        ' but got \\'{0}\\'. Element: {1}',\n        optionsExp, startingTag(selectElement));\n    }\n\n    // Extract the parts from the ngOptions expression\n\n    // The variable name for the value of the item in the collection\n    var valueName = match[5] || match[7];\n    // The variable name for the key of the item in the collection\n    var keyName = match[6];\n\n    // An expression that generates the viewValue for an option if there is a label expression\n    var selectAs = / as /.test(match[0]) && match[1];\n    // An expression that is used to track the id of each object in the options collection\n    var trackBy = match[9];\n    // An expression that generates the viewValue for an option if there is no label expression\n    var valueFn = $parse(match[2] ? match[1] : valueName);\n    var selectAsFn = selectAs && $parse(selectAs);\n    var viewValueFn = selectAsFn || valueFn;\n    var trackByFn = trackBy && $parse(trackBy);\n\n    // Get the value by which we are going to track the option\n    // if we have a trackFn then use that (passing scope and locals)\n    // otherwise just hash the given viewValue\n    var getTrackByValueFn = trackBy ?\n                              function(value, locals) { return trackByFn(scope, locals); } :\n                              function getHashOfValue(value) { return hashKey(value); };\n    var getTrackByValue = function(value, key) {\n      return getTrackByValueFn(value, getLocals(value, key));\n    };\n\n    var displayFn = $parse(match[2] || match[1]);\n    var groupByFn = $parse(match[3] || '');\n    var disableWhenFn = $parse(match[4] || '');\n    var valuesFn = $parse(match[8]);\n\n    var locals = {};\n    var getLocals = keyName ? function(value, key) {\n      locals[keyName] = key;\n      locals[valueName] = value;\n      return locals;\n    } : function(value) {\n      locals[valueName] = value;\n      return locals;\n    };\n\n\n    function Option(selectValue, viewValue, label, group, disabled) {\n      this.selectValue = selectValue;\n      this.viewValue = viewValue;\n      this.label = label;\n      this.group = group;\n      this.disabled = disabled;\n    }\n\n    function getOptionValuesKeys(optionValues) {\n      var optionValuesKeys;\n\n      if (!keyName && isArrayLike(optionValues)) {\n        optionValuesKeys = optionValues;\n      } else {\n        // if object, extract keys, in enumeration order, unsorted\n        optionValuesKeys = [];\n        for (var itemKey in optionValues) {\n          if (optionValues.hasOwnProperty(itemKey) && itemKey.charAt(0) !== '$') {\n            optionValuesKeys.push(itemKey);\n          }\n        }\n      }\n      return optionValuesKeys;\n    }\n\n    return {\n      trackBy: trackBy,\n      getTrackByValue: getTrackByValue,\n      getWatchables: $parse(valuesFn, function(optionValues) {\n        // Create a collection of things that we would like to watch (watchedArray)\n        // so that they can all be watched using a single $watchCollection\n        // that only runs the handler once if anything changes\n        var watchedArray = [];\n        optionValues = optionValues || [];\n\n        var optionValuesKeys = getOptionValuesKeys(optionValues);\n        var optionValuesLength = optionValuesKeys.length;\n        for (var index = 0; index < optionValuesLength; index++) {\n          var key = (optionValues === optionValuesKeys) ? index : optionValuesKeys[index];\n          var value = optionValues[key];\n\n          var locals = getLocals(value, key);\n          var selectValue = getTrackByValueFn(value, locals);\n          watchedArray.push(selectValue);\n\n          // Only need to watch the displayFn if there is a specific label expression\n          if (match[2] || match[1]) {\n            var label = displayFn(scope, locals);\n            watchedArray.push(label);\n          }\n\n          // Only need to watch the disableWhenFn if there is a specific disable expression\n          if (match[4]) {\n            var disableWhen = disableWhenFn(scope, locals);\n            watchedArray.push(disableWhen);\n          }\n        }\n        return watchedArray;\n      }),\n\n      getOptions: function() {\n\n        var optionItems = [];\n        var selectValueMap = {};\n\n        // The option values were already computed in the `getWatchables` fn,\n        // which must have been called to trigger `getOptions`\n        var optionValues = valuesFn(scope) || [];\n        var optionValuesKeys = getOptionValuesKeys(optionValues);\n        var optionValuesLength = optionValuesKeys.length;\n\n        for (var index = 0; index < optionValuesLength; index++) {\n          var key = (optionValues === optionValuesKeys) ? index : optionValuesKeys[index];\n          var value = optionValues[key];\n          var locals = getLocals(value, key);\n          var viewValue = viewValueFn(scope, locals);\n          var selectValue = getTrackByValueFn(viewValue, locals);\n          var label = displayFn(scope, locals);\n          var group = groupByFn(scope, locals);\n          var disabled = disableWhenFn(scope, locals);\n          var optionItem = new Option(selectValue, viewValue, label, group, disabled);\n\n          optionItems.push(optionItem);\n          selectValueMap[selectValue] = optionItem;\n        }\n\n        return {\n          items: optionItems,\n          selectValueMap: selectValueMap,\n          getOptionFromViewValue: function(value) {\n            return selectValueMap[getTrackByValue(value)];\n          },\n          getViewValueFromOption: function(option) {\n            // If the viewValue could be an object that may be mutated by the application,\n            // we need to make a copy and not return the reference to the value on the option.\n            return trackBy ? copy(option.viewValue) : option.viewValue;\n          }\n        };\n      }\n    };\n  }\n\n\n  // Support: IE 9 only\n  // We can't just jqLite('<option>') since jqLite is not smart enough\n  // to create it in <select> and IE barfs otherwise.\n  var optionTemplate = window.document.createElement('option'),\n      optGroupTemplate = window.document.createElement('optgroup');\n\n    function ngOptionsPostLink(scope, selectElement, attr, ctrls) {\n\n      var selectCtrl = ctrls[0];\n      var ngModelCtrl = ctrls[1];\n      var multiple = attr.multiple;\n\n      // The emptyOption allows the application developer to provide their own custom \"empty\"\n      // option when the viewValue does not match any of the option values.\n      for (var i = 0, children = selectElement.children(), ii = children.length; i < ii; i++) {\n        if (children[i].value === '') {\n          selectCtrl.hasEmptyOption = true;\n          selectCtrl.emptyOption = children.eq(i);\n          break;\n        }\n      }\n\n      // The empty option will be compiled and rendered before we first generate the options\n      selectElement.empty();\n\n      var providedEmptyOption = !!selectCtrl.emptyOption;\n\n      var unknownOption = jqLite(optionTemplate.cloneNode(false));\n      unknownOption.val('?');\n\n      var options;\n      var ngOptions = parseOptionsExpression(attr.ngOptions, selectElement, scope);\n      // This stores the newly created options before they are appended to the select.\n      // Since the contents are removed from the fragment when it is appended,\n      // we only need to create it once.\n      var listFragment = $document[0].createDocumentFragment();\n\n      // Overwrite the implementation. ngOptions doesn't use hashes\n      selectCtrl.generateUnknownOptionValue = function(val) {\n        return '?';\n      };\n\n      // Update the controller methods for multiple selectable options\n      if (!multiple) {\n\n        selectCtrl.writeValue = function writeNgOptionsValue(value) {\n          // The options might not be defined yet when ngModel tries to render\n          if (!options) return;\n\n          var selectedOption = selectElement[0].options[selectElement[0].selectedIndex];\n          var option = options.getOptionFromViewValue(value);\n\n          // Make sure to remove the selected attribute from the previously selected option\n          // Otherwise, screen readers might get confused\n          if (selectedOption) selectedOption.removeAttribute('selected');\n\n          if (option) {\n            // Don't update the option when it is already selected.\n            // For example, the browser will select the first option by default. In that case,\n            // most properties are set automatically - except the `selected` attribute, which we\n            // set always\n\n            if (selectElement[0].value !== option.selectValue) {\n              selectCtrl.removeUnknownOption();\n\n              selectElement[0].value = option.selectValue;\n              option.element.selected = true;\n            }\n\n            option.element.setAttribute('selected', 'selected');\n          } else {\n            selectCtrl.selectUnknownOrEmptyOption(value);\n          }\n        };\n\n        selectCtrl.readValue = function readNgOptionsValue() {\n\n          var selectedOption = options.selectValueMap[selectElement.val()];\n\n          if (selectedOption && !selectedOption.disabled) {\n            selectCtrl.unselectEmptyOption();\n            selectCtrl.removeUnknownOption();\n            return options.getViewValueFromOption(selectedOption);\n          }\n          return null;\n        };\n\n        // If we are using `track by` then we must watch the tracked value on the model\n        // since ngModel only watches for object identity change\n        // FIXME: When a user selects an option, this watch will fire needlessly\n        if (ngOptions.trackBy) {\n          scope.$watch(\n            function() { return ngOptions.getTrackByValue(ngModelCtrl.$viewValue); },\n            function() { ngModelCtrl.$render(); }\n          );\n        }\n\n      } else {\n\n        selectCtrl.writeValue = function writeNgOptionsMultiple(values) {\n          // The options might not be defined yet when ngModel tries to render\n          if (!options) return;\n\n          // Only set `<option>.selected` if necessary, in order to prevent some browsers from\n          // scrolling to `<option>` elements that are outside the `<select>` element's viewport.\n          var selectedOptions = values && values.map(getAndUpdateSelectedOption) || [];\n\n          options.items.forEach(function(option) {\n            if (option.element.selected && !includes(selectedOptions, option)) {\n              option.element.selected = false;\n            }\n          });\n        };\n\n\n        selectCtrl.readValue = function readNgOptionsMultiple() {\n          var selectedValues = selectElement.val() || [],\n              selections = [];\n\n          forEach(selectedValues, function(value) {\n            var option = options.selectValueMap[value];\n            if (option && !option.disabled) selections.push(options.getViewValueFromOption(option));\n          });\n\n          return selections;\n        };\n\n        // If we are using `track by` then we must watch these tracked values on the model\n        // since ngModel only watches for object identity change\n        if (ngOptions.trackBy) {\n\n          scope.$watchCollection(function() {\n            if (isArray(ngModelCtrl.$viewValue)) {\n              return ngModelCtrl.$viewValue.map(function(value) {\n                return ngOptions.getTrackByValue(value);\n              });\n            }\n          }, function() {\n            ngModelCtrl.$render();\n          });\n\n        }\n      }\n\n      if (providedEmptyOption) {\n\n        // compile the element since there might be bindings in it\n        $compile(selectCtrl.emptyOption)(scope);\n\n        selectElement.prepend(selectCtrl.emptyOption);\n\n        if (selectCtrl.emptyOption[0].nodeType === NODE_TYPE_COMMENT) {\n          // This means the empty option has currently no actual DOM node, probably because\n          // it has been modified by a transclusion directive.\n          selectCtrl.hasEmptyOption = false;\n\n          // Redefine the registerOption function, which will catch\n          // options that are added by ngIf etc. (rendering of the node is async because of\n          // lazy transclusion)\n          selectCtrl.registerOption = function(optionScope, optionEl) {\n            if (optionEl.val() === '') {\n              selectCtrl.hasEmptyOption = true;\n              selectCtrl.emptyOption = optionEl;\n              selectCtrl.emptyOption.removeClass('ng-scope');\n              // This ensures the new empty option is selected if previously no option was selected\n              ngModelCtrl.$render();\n\n              optionEl.on('$destroy', function() {\n                var needsRerender = selectCtrl.$isEmptyOptionSelected();\n\n                selectCtrl.hasEmptyOption = false;\n                selectCtrl.emptyOption = undefined;\n\n                if (needsRerender) ngModelCtrl.$render();\n              });\n            }\n          };\n\n        } else {\n          // remove the class, which is added automatically because we recompile the element and it\n          // becomes the compilation root\n          selectCtrl.emptyOption.removeClass('ng-scope');\n        }\n\n      }\n\n      // We will re-render the option elements if the option values or labels change\n      scope.$watchCollection(ngOptions.getWatchables, updateOptions);\n\n      // ------------------------------------------------------------------ //\n\n      function addOptionElement(option, parent) {\n        var optionElement = optionTemplate.cloneNode(false);\n        parent.appendChild(optionElement);\n        updateOptionElement(option, optionElement);\n      }\n\n      function getAndUpdateSelectedOption(viewValue) {\n        var option = options.getOptionFromViewValue(viewValue);\n        var element = option && option.element;\n\n        if (element && !element.selected) element.selected = true;\n\n        return option;\n      }\n\n      function updateOptionElement(option, element) {\n        option.element = element;\n        element.disabled = option.disabled;\n        // Support: IE 11 only, Edge 12-13 only\n        // NOTE: The label must be set before the value, otherwise IE 11 & Edge create unresponsive\n        // selects in certain circumstances when multiple selects are next to each other and display\n        // the option list in listbox style, i.e. the select is [multiple], or specifies a [size].\n        // See https://github.com/angular/angular.js/issues/11314 for more info.\n        // This is unfortunately untestable with unit / e2e tests\n        if (option.label !== element.label) {\n          element.label = option.label;\n          element.textContent = option.label;\n        }\n        element.value = option.selectValue;\n      }\n\n      function updateOptions() {\n        var previousValue = options && selectCtrl.readValue();\n\n        // We must remove all current options, but cannot simply set innerHTML = null\n        // since the providedEmptyOption might have an ngIf on it that inserts comments which we\n        // must preserve.\n        // Instead, iterate over the current option elements and remove them or their optgroup\n        // parents\n        if (options) {\n\n          for (var i = options.items.length - 1; i >= 0; i--) {\n            var option = options.items[i];\n            if (isDefined(option.group)) {\n              jqLiteRemove(option.element.parentNode);\n            } else {\n              jqLiteRemove(option.element);\n            }\n          }\n        }\n\n        options = ngOptions.getOptions();\n\n        var groupElementMap = {};\n\n        options.items.forEach(function addOption(option) {\n          var groupElement;\n\n          if (isDefined(option.group)) {\n\n            // This option is to live in a group\n            // See if we have already created this group\n            groupElement = groupElementMap[option.group];\n\n            if (!groupElement) {\n\n              groupElement = optGroupTemplate.cloneNode(false);\n              listFragment.appendChild(groupElement);\n\n              // Update the label on the group element\n              // \"null\" is special cased because of Safari\n              groupElement.label = option.group === null ? 'null' : option.group;\n\n              // Store it for use later\n              groupElementMap[option.group] = groupElement;\n            }\n\n            addOptionElement(option, groupElement);\n\n          } else {\n\n            // This option is not in a group\n            addOptionElement(option, listFragment);\n          }\n        });\n\n        selectElement[0].appendChild(listFragment);\n\n        ngModelCtrl.$render();\n\n        // Check to see if the value has changed due to the update to the options\n        if (!ngModelCtrl.$isEmpty(previousValue)) {\n          var nextValue = selectCtrl.readValue();\n          var isNotPrimitive = ngOptions.trackBy || multiple;\n          if (isNotPrimitive ? !equals(previousValue, nextValue) : previousValue !== nextValue) {\n            ngModelCtrl.$setViewValue(nextValue);\n            ngModelCtrl.$render();\n          }\n        }\n      }\n  }\n\n  return {\n    restrict: 'A',\n    terminal: true,\n    require: ['select', 'ngModel'],\n    link: {\n      pre: function ngOptionsPreLink(scope, selectElement, attr, ctrls) {\n        // Deactivate the SelectController.register method to prevent\n        // option directives from accidentally registering themselves\n        // (and unwanted $destroy handlers etc.)\n        ctrls[0].registerOption = noop;\n      },\n      post: ngOptionsPostLink\n    }\n  };\n}];\n\n/**\n * @ngdoc directive\n * @name ngPluralize\n * @restrict EA\n *\n * @description\n * `ngPluralize` is a directive that displays messages according to en-US localization rules.\n * These rules are bundled with angular.js, but can be overridden\n * (see {@link guide/i18n Angular i18n} dev guide). You configure ngPluralize directive\n * by specifying the mappings between\n * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)\n * and the strings to be displayed.\n *\n * ## Plural categories and explicit number rules\n * There are two\n * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)\n * in Angular's default en-US locale: \"one\" and \"other\".\n *\n * While a plural category may match many numbers (for example, in en-US locale, \"other\" can match\n * any number that is not 1), an explicit number rule can only match one number. For example, the\n * explicit number rule for \"3\" matches the number 3. There are examples of plural categories\n * and explicit number rules throughout the rest of this documentation.\n *\n * ## Configuring ngPluralize\n * You configure ngPluralize by providing 2 attributes: `count` and `when`.\n * You can also provide an optional attribute, `offset`.\n *\n * The value of the `count` attribute can be either a string or an {@link guide/expression\n * Angular expression}; these are evaluated on the current scope for its bound value.\n *\n * The `when` attribute specifies the mappings between plural categories and the actual\n * string to be displayed. The value of the attribute should be a JSON object.\n *\n * The following example shows how to configure ngPluralize:\n *\n * ```html\n * <ng-pluralize count=\"personCount\"\n                 when=\"{'0': 'Nobody is viewing.',\n *                      'one': '1 person is viewing.',\n *                      'other': '{} people are viewing.'}\">\n * </ng-pluralize>\n *```\n *\n * In the example, `\"0: Nobody is viewing.\"` is an explicit number rule. If you did not\n * specify this rule, 0 would be matched to the \"other\" category and \"0 people are viewing\"\n * would be shown instead of \"Nobody is viewing\". You can specify an explicit number rule for\n * other numbers, for example 12, so that instead of showing \"12 people are viewing\", you can\n * show \"a dozen people are viewing\".\n *\n * You can use a set of closed braces (`{}`) as a placeholder for the number that you want substituted\n * into pluralized strings. In the previous example, Angular will replace `{}` with\n * <span ng-non-bindable>`{{personCount}}`</span>. The closed braces `{}` is a placeholder\n * for <span ng-non-bindable>{{numberExpression}}</span>.\n *\n * If no rule is defined for a category, then an empty string is displayed and a warning is generated.\n * Note that some locales define more categories than `one` and `other`. For example, fr-fr defines `few` and `many`.\n *\n * ## Configuring ngPluralize with offset\n * The `offset` attribute allows further customization of pluralized text, which can result in\n * a better user experience. For example, instead of the message \"4 people are viewing this document\",\n * you might display \"John, Kate and 2 others are viewing this document\".\n * The offset attribute allows you to offset a number by any desired value.\n * Let's take a look at an example:\n *\n * ```html\n * <ng-pluralize count=\"personCount\" offset=2\n *               when=\"{'0': 'Nobody is viewing.',\n *                      '1': '{{person1}} is viewing.',\n *                      '2': '{{person1}} and {{person2}} are viewing.',\n *                      'one': '{{person1}}, {{person2}} and one other person are viewing.',\n *                      'other': '{{person1}}, {{person2}} and {} other people are viewing.'}\">\n * </ng-pluralize>\n * ```\n *\n * Notice that we are still using two plural categories(one, other), but we added\n * three explicit number rules 0, 1 and 2.\n * When one person, perhaps John, views the document, \"John is viewing\" will be shown.\n * When three people view the document, no explicit number rule is found, so\n * an offset of 2 is taken off 3, and Angular uses 1 to decide the plural category.\n * In this case, plural category 'one' is matched and \"John, Mary and one other person are viewing\"\n * is shown.\n *\n * Note that when you specify offsets, you must provide explicit number rules for\n * numbers from 0 up to and including the offset. If you use an offset of 3, for example,\n * you must provide explicit number rules for 0, 1, 2 and 3. You must also provide plural strings for\n * plural categories \"one\" and \"other\".\n *\n * @param {string|expression} count The variable to be bound to.\n * @param {string} when The mapping between plural category to its corresponding strings.\n * @param {number=} offset Offset to deduct from the total number.\n *\n * @example\n    <example module=\"pluralizeExample\" name=\"ng-pluralize\">\n      <file name=\"index.html\">\n        <script>\n          angular.module('pluralizeExample', [])\n            .controller('ExampleController', ['$scope', function($scope) {\n              $scope.person1 = 'Igor';\n              $scope.person2 = 'Misko';\n              $scope.personCount = 1;\n            }]);\n        </script>\n        <div ng-controller=\"ExampleController\">\n          <label>Person 1:<input type=\"text\" ng-model=\"person1\" value=\"Igor\" /></label><br/>\n          <label>Person 2:<input type=\"text\" ng-model=\"person2\" value=\"Misko\" /></label><br/>\n          <label>Number of People:<input type=\"text\" ng-model=\"personCount\" value=\"1\" /></label><br/>\n\n          <!--- Example with simple pluralization rules for en locale --->\n          Without Offset:\n          <ng-pluralize count=\"personCount\"\n                        when=\"{'0': 'Nobody is viewing.',\n                               'one': '1 person is viewing.',\n                               'other': '{} people are viewing.'}\">\n          </ng-pluralize><br>\n\n          <!--- Example with offset --->\n          With Offset(2):\n          <ng-pluralize count=\"personCount\" offset=2\n                        when=\"{'0': 'Nobody is viewing.',\n                               '1': '{{person1}} is viewing.',\n                               '2': '{{person1}} and {{person2}} are viewing.',\n                               'one': '{{person1}}, {{person2}} and one other person are viewing.',\n                               'other': '{{person1}}, {{person2}} and {} other people are viewing.'}\">\n          </ng-pluralize>\n        </div>\n      </file>\n      <file name=\"protractor.js\" type=\"protractor\">\n        it('should show correct pluralized string', function() {\n          var withoutOffset = element.all(by.css('ng-pluralize')).get(0);\n          var withOffset = element.all(by.css('ng-pluralize')).get(1);\n          var countInput = element(by.model('personCount'));\n\n          expect(withoutOffset.getText()).toEqual('1 person is viewing.');\n          expect(withOffset.getText()).toEqual('Igor is viewing.');\n\n          countInput.clear();\n          countInput.sendKeys('0');\n\n          expect(withoutOffset.getText()).toEqual('Nobody is viewing.');\n          expect(withOffset.getText()).toEqual('Nobody is viewing.');\n\n          countInput.clear();\n          countInput.sendKeys('2');\n\n          expect(withoutOffset.getText()).toEqual('2 people are viewing.');\n          expect(withOffset.getText()).toEqual('Igor and Misko are viewing.');\n\n          countInput.clear();\n          countInput.sendKeys('3');\n\n          expect(withoutOffset.getText()).toEqual('3 people are viewing.');\n          expect(withOffset.getText()).toEqual('Igor, Misko and one other person are viewing.');\n\n          countInput.clear();\n          countInput.sendKeys('4');\n\n          expect(withoutOffset.getText()).toEqual('4 people are viewing.');\n          expect(withOffset.getText()).toEqual('Igor, Misko and 2 other people are viewing.');\n        });\n        it('should show data-bound names', function() {\n          var withOffset = element.all(by.css('ng-pluralize')).get(1);\n          var personCount = element(by.model('personCount'));\n          var person1 = element(by.model('person1'));\n          var person2 = element(by.model('person2'));\n          personCount.clear();\n          personCount.sendKeys('4');\n          person1.clear();\n          person1.sendKeys('Di');\n          person2.clear();\n          person2.sendKeys('Vojta');\n          expect(withOffset.getText()).toEqual('Di, Vojta and 2 other people are viewing.');\n        });\n      </file>\n    </example>\n */\nvar ngPluralizeDirective = ['$locale', '$interpolate', '$log', function($locale, $interpolate, $log) {\n  var BRACE = /{}/g,\n      IS_WHEN = /^when(Minus)?(.+)$/;\n\n  return {\n    link: function(scope, element, attr) {\n      var numberExp = attr.count,\n          whenExp = attr.$attr.when && element.attr(attr.$attr.when), // we have {{}} in attrs\n          offset = attr.offset || 0,\n          whens = scope.$eval(whenExp) || {},\n          whensExpFns = {},\n          startSymbol = $interpolate.startSymbol(),\n          endSymbol = $interpolate.endSymbol(),\n          braceReplacement = startSymbol + numberExp + '-' + offset + endSymbol,\n          watchRemover = angular.noop,\n          lastCount;\n\n      forEach(attr, function(expression, attributeName) {\n        var tmpMatch = IS_WHEN.exec(attributeName);\n        if (tmpMatch) {\n          var whenKey = (tmpMatch[1] ? '-' : '') + lowercase(tmpMatch[2]);\n          whens[whenKey] = element.attr(attr.$attr[attributeName]);\n        }\n      });\n      forEach(whens, function(expression, key) {\n        whensExpFns[key] = $interpolate(expression.replace(BRACE, braceReplacement));\n\n      });\n\n      scope.$watch(numberExp, function ngPluralizeWatchAction(newVal) {\n        var count = parseFloat(newVal);\n        var countIsNaN = isNumberNaN(count);\n\n        if (!countIsNaN && !(count in whens)) {\n          // If an explicit number rule such as 1, 2, 3... is defined, just use it.\n          // Otherwise, check it against pluralization rules in $locale service.\n          count = $locale.pluralCat(count - offset);\n        }\n\n        // If both `count` and `lastCount` are NaN, we don't need to re-register a watch.\n        // In JS `NaN !== NaN`, so we have to explicitly check.\n        if ((count !== lastCount) && !(countIsNaN && isNumberNaN(lastCount))) {\n          watchRemover();\n          var whenExpFn = whensExpFns[count];\n          if (isUndefined(whenExpFn)) {\n            if (newVal != null) {\n              $log.debug('ngPluralize: no rule defined for \\'' + count + '\\' in ' + whenExp);\n            }\n            watchRemover = noop;\n            updateElementText();\n          } else {\n            watchRemover = scope.$watch(whenExpFn, updateElementText);\n          }\n          lastCount = count;\n        }\n      });\n\n      function updateElementText(newText) {\n        element.text(newText || '');\n      }\n    }\n  };\n}];\n\n/* exported ngRepeatDirective */\n\n/**\n * @ngdoc directive\n * @name ngRepeat\n * @multiElement\n * @restrict A\n *\n * @description\n * The `ngRepeat` directive instantiates a template once per item from a collection. Each template\n * instance gets its own scope, where the given loop variable is set to the current collection item,\n * and `$index` is set to the item index or key.\n *\n * Special properties are exposed on the local scope of each template instance, including:\n *\n * | Variable  | Type            | Details                                                                     |\n * |-----------|-----------------|-----------------------------------------------------------------------------|\n * | `$index`  | {@type number}  | iterator offset of the repeated element (0..length-1)                       |\n * | `$first`  | {@type boolean} | true if the repeated element is first in the iterator.                      |\n * | `$middle` | {@type boolean} | true if the repeated element is between the first and last in the iterator. |\n * | `$last`   | {@type boolean} | true if the repeated element is last in the iterator.                       |\n * | `$even`   | {@type boolean} | true if the iterator position `$index` is even (otherwise false).           |\n * | `$odd`    | {@type boolean} | true if the iterator position `$index` is odd (otherwise false).            |\n *\n * <div class=\"alert alert-info\">\n *   Creating aliases for these properties is possible with {@link ng.directive:ngInit `ngInit`}.\n *   This may be useful when, for instance, nesting ngRepeats.\n * </div>\n *\n *\n * ## Iterating over object properties\n *\n * It is possible to get `ngRepeat` to iterate over the properties of an object using the following\n * syntax:\n *\n * ```js\n * <div ng-repeat=\"(key, value) in myObj\"> ... </div>\n * ```\n *\n * However, there are a few limitations compared to array iteration:\n *\n * - The JavaScript specification does not define the order of keys\n *   returned for an object, so Angular relies on the order returned by the browser\n *   when running `for key in myObj`. Browsers generally follow the strategy of providing\n *   keys in the order in which they were defined, although there are exceptions when keys are deleted\n *   and reinstated. See the\n *   [MDN page on `delete` for more info](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete#Cross-browser_notes).\n *\n * - `ngRepeat` will silently *ignore* object keys starting with `$`, because\n *   it's a prefix used by Angular for public (`$`) and private (`$$`) properties.\n *\n * - The built-in filters {@link ng.orderBy orderBy} and {@link ng.filter filter} do not work with\n *   objects, and will throw an error if used with one.\n *\n * If you are hitting any of these limitations, the recommended workaround is to convert your object into an array\n * that is sorted into the order that you prefer before providing it to `ngRepeat`. You could\n * do this with a filter such as [toArrayFilter](http://ngmodules.org/modules/angular-toArrayFilter)\n * or implement a `$watch` on the object yourself.\n *\n *\n * ## Tracking and Duplicates\n *\n * `ngRepeat` uses {@link $rootScope.Scope#$watchCollection $watchCollection} to detect changes in\n * the collection. When a change happens, `ngRepeat` then makes the corresponding changes to the DOM:\n *\n * * When an item is added, a new instance of the template is added to the DOM.\n * * When an item is removed, its template instance is removed from the DOM.\n * * When items are reordered, their respective templates are reordered in the DOM.\n *\n * To minimize creation of DOM elements, `ngRepeat` uses a function\n * to \"keep track\" of all items in the collection and their corresponding DOM elements.\n * For example, if an item is added to the collection, `ngRepeat` will know that all other items\n * already have DOM elements, and will not re-render them.\n *\n * The default tracking function (which tracks items by their identity) does not allow\n * duplicate items in arrays. This is because when there are duplicates, it is not possible\n * to maintain a one-to-one mapping between collection items and DOM elements.\n *\n * If you do need to repeat duplicate items, you can substitute the default tracking behavior\n * with your own using the `track by` expression.\n *\n * For example, you may track items by the index of each item in the collection, using the\n * special scope property `$index`:\n * ```html\n *    <div ng-repeat=\"n in [42, 42, 43, 43] track by $index\">\n *      {{n}}\n *    </div>\n * ```\n *\n * You may also use arbitrary expressions in `track by`, including references to custom functions\n * on the scope:\n * ```html\n *    <div ng-repeat=\"n in [42, 42, 43, 43] track by myTrackingFunction(n)\">\n *      {{n}}\n *    </div>\n * ```\n *\n * <div class=\"alert alert-success\">\n * If you are working with objects that have a unique identifier property, you should track\n * by this identifier instead of the object instance. Should you reload your data later, `ngRepeat`\n * will not have to rebuild the DOM elements for items it has already rendered, even if the\n * JavaScript objects in the collection have been substituted for new ones. For large collections,\n * this significantly improves rendering performance. If you don't have a unique identifier,\n * `track by $index` can also provide a performance boost.\n * </div>\n *\n * ```html\n *    <div ng-repeat=\"model in collection track by model.id\">\n *      {{model.name}}\n *    </div>\n * ```\n *\n * <br />\n * <div class=\"alert alert-warning\">\n * Avoid using `track by $index` when the repeated template contains\n * {@link guide/expression#one-time-binding one-time bindings}. In such cases, the `nth` DOM\n * element will always be matched with the `nth` item of the array, so the bindings on that element\n * will not be updated even when the corresponding item changes, essentially causing the view to get\n * out-of-sync with the underlying data.\n * </div>\n *\n * When no `track by` expression is provided, it is equivalent to tracking by the built-in\n * `$id` function, which tracks items by their identity:\n * ```html\n *    <div ng-repeat=\"obj in collection track by $id(obj)\">\n *      {{obj.prop}}\n *    </div>\n * ```\n *\n * <br />\n * <div class=\"alert alert-warning\">\n * **Note:** `track by` must always be the last expression:\n * </div>\n * ```\n *    <div ng-repeat=\"model in collection | orderBy: 'id' as filtered_result track by model.id\">\n *      {{model.name}}\n *    </div>\n * ```\n *\n *\n * ## Special repeat start and end points\n * To repeat a series of elements instead of just one parent element, ngRepeat (as well as other ng directives) supports extending\n * the range of the repeater by defining explicit start and end points by using **ng-repeat-start** and **ng-repeat-end** respectively.\n * The **ng-repeat-start** directive works the same as **ng-repeat**, but will repeat all the HTML code (including the tag it's defined on)\n * up to and including the ending HTML tag where **ng-repeat-end** is placed.\n *\n * The example below makes use of this feature:\n * ```html\n *   <header ng-repeat-start=\"item in items\">\n *     Header {{ item }}\n *   </header>\n *   <div class=\"body\">\n *     Body {{ item }}\n *   </div>\n *   <footer ng-repeat-end>\n *     Footer {{ item }}\n *   </footer>\n * ```\n *\n * And with an input of {@type ['A','B']} for the items variable in the example above, the output will evaluate to:\n * ```html\n *   <header>\n *     Header A\n *   </header>\n *   <div class=\"body\">\n *     Body A\n *   </div>\n *   <footer>\n *     Footer A\n *   </footer>\n *   <header>\n *     Header B\n *   </header>\n *   <div class=\"body\">\n *     Body B\n *   </div>\n *   <footer>\n *     Footer B\n *   </footer>\n * ```\n *\n * The custom start and end points for ngRepeat also support all other HTML directive syntax flavors provided in AngularJS (such\n * as **data-ng-repeat-start**, **x-ng-repeat-start** and **ng:repeat-start**).\n *\n * @animations\n * | Animation                        | Occurs                              |\n * |----------------------------------|-------------------------------------|\n * | {@link ng.$animate#enter enter} | when a new item is added to the list or when an item is revealed after a filter |\n * | {@link ng.$animate#leave leave} | when an item is removed from the list or when an item is filtered out |\n * | {@link ng.$animate#move move } | when an adjacent item is filtered out causing a reorder or when the item contents are reordered |\n *\n * See the example below for defining CSS animations with ngRepeat.\n *\n * @element ANY\n * @scope\n * @priority 1000\n * @param {repeat_expression} ngRepeat The expression indicating how to enumerate a collection. These\n *   formats are currently supported:\n *\n *   * `variable in expression` – where variable is the user defined loop variable and `expression`\n *     is a scope expression giving the collection to enumerate.\n *\n *     For example: `album in artist.albums`.\n *\n *   * `(key, value) in expression` – where `key` and `value` can be any user defined identifiers,\n *     and `expression` is the scope expression giving the collection to enumerate.\n *\n *     For example: `(name, age) in {'adam':10, 'amalie':12}`.\n *\n *   * `variable in expression track by tracking_expression` – You can also provide an optional tracking expression\n *     which can be used to associate the objects in the collection with the DOM elements. If no tracking expression\n *     is specified, ng-repeat associates elements by identity. It is an error to have\n *     more than one tracking expression value resolve to the same key. (This would mean that two distinct objects are\n *     mapped to the same DOM element, which is not possible.)\n *\n *     <div class=\"alert alert-warning\">\n *       <strong>Note:</strong> the `track by` expression must come last - after any filters, and the alias expression.\n *     </div>\n *\n *     For example: `item in items` is equivalent to `item in items track by $id(item)`. This implies that the DOM elements\n *     will be associated by item identity in the array.\n *\n *     For example: `item in items track by $id(item)`. A built in `$id()` function can be used to assign a unique\n *     `$$hashKey` property to each item in the array. This property is then used as a key to associated DOM elements\n *     with the corresponding item in the array by identity. Moving the same object in array would move the DOM\n *     element in the same way in the DOM.\n *\n *     For example: `item in items track by item.id` is a typical pattern when the items come from the database. In this\n *     case the object identity does not matter. Two objects are considered equivalent as long as their `id`\n *     property is same.\n *\n *     For example: `item in items | filter:searchText track by item.id` is a pattern that might be used to apply a filter\n *     to items in conjunction with a tracking expression.\n *\n *   * `variable in expression as alias_expression` – You can also provide an optional alias expression which will then store the\n *     intermediate results of the repeater after the filters have been applied. Typically this is used to render a special message\n *     when a filter is active on the repeater, but the filtered result set is empty.\n *\n *     For example: `item in items | filter:x as results` will store the fragment of the repeated items as `results`, but only after\n *     the items have been processed through the filter.\n *\n *     Please note that `as [variable name] is not an operator but rather a part of ngRepeat micro-syntax so it can be used only at the end\n *     (and not as operator, inside an expression).\n *\n *     For example: `item in items | filter : x | orderBy : order | limitTo : limit as results` .\n *\n * @example\n * This example uses `ngRepeat` to display a list of people. A filter is used to restrict the displayed\n * results by name or by age. New (entering) and removed (leaving) items are animated.\n  <example module=\"ngRepeat\" name=\"ngRepeat\" deps=\"angular-animate.js\" animations=\"true\">\n    <file name=\"index.html\">\n      <div ng-controller=\"repeatController\">\n        I have {{friends.length}} friends. They are:\n        <input type=\"search\" ng-model=\"q\" placeholder=\"filter friends...\" aria-label=\"filter friends\" />\n        <ul class=\"example-animate-container\">\n          <li class=\"animate-repeat\" ng-repeat=\"friend in friends | filter:q as results\">\n            [{{$index + 1}}] {{friend.name}} who is {{friend.age}} years old.\n          </li>\n          <li class=\"animate-repeat\" ng-if=\"results.length === 0\">\n            <strong>No results found...</strong>\n          </li>\n        </ul>\n      </div>\n    </file>\n    <file name=\"script.js\">\n      angular.module('ngRepeat', ['ngAnimate']).controller('repeatController', function($scope) {\n        $scope.friends = [\n          {name:'John', age:25, gender:'boy'},\n          {name:'Jessie', age:30, gender:'girl'},\n          {name:'Johanna', age:28, gender:'girl'},\n          {name:'Joy', age:15, gender:'girl'},\n          {name:'Mary', age:28, gender:'girl'},\n          {name:'Peter', age:95, gender:'boy'},\n          {name:'Sebastian', age:50, gender:'boy'},\n          {name:'Erika', age:27, gender:'girl'},\n          {name:'Patrick', age:40, gender:'boy'},\n          {name:'Samantha', age:60, gender:'girl'}\n        ];\n      });\n    </file>\n    <file name=\"animations.css\">\n      .example-animate-container {\n        background:white;\n        border:1px solid black;\n        list-style:none;\n        margin:0;\n        padding:0 10px;\n      }\n\n      .animate-repeat {\n        line-height:30px;\n        list-style:none;\n        box-sizing:border-box;\n      }\n\n      .animate-repeat.ng-move,\n      .animate-repeat.ng-enter,\n      .animate-repeat.ng-leave {\n        transition:all linear 0.5s;\n      }\n\n      .animate-repeat.ng-leave.ng-leave-active,\n      .animate-repeat.ng-move,\n      .animate-repeat.ng-enter {\n        opacity:0;\n        max-height:0;\n      }\n\n      .animate-repeat.ng-leave,\n      .animate-repeat.ng-move.ng-move-active,\n      .animate-repeat.ng-enter.ng-enter-active {\n        opacity:1;\n        max-height:30px;\n      }\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n      var friends = element.all(by.repeater('friend in friends'));\n\n      it('should render initial data set', function() {\n        expect(friends.count()).toBe(10);\n        expect(friends.get(0).getText()).toEqual('[1] John who is 25 years old.');\n        expect(friends.get(1).getText()).toEqual('[2] Jessie who is 30 years old.');\n        expect(friends.last().getText()).toEqual('[10] Samantha who is 60 years old.');\n        expect(element(by.binding('friends.length')).getText())\n            .toMatch(\"I have 10 friends. They are:\");\n      });\n\n       it('should update repeater when filter predicate changes', function() {\n         expect(friends.count()).toBe(10);\n\n         element(by.model('q')).sendKeys('ma');\n\n         expect(friends.count()).toBe(2);\n         expect(friends.get(0).getText()).toEqual('[1] Mary who is 28 years old.');\n         expect(friends.last().getText()).toEqual('[2] Samantha who is 60 years old.');\n       });\n      </file>\n    </example>\n */\nvar ngRepeatDirective = ['$parse', '$animate', '$compile', function($parse, $animate, $compile) {\n  var NG_REMOVED = '$$NG_REMOVED';\n  var ngRepeatMinErr = minErr('ngRepeat');\n\n  var updateScope = function(scope, index, valueIdentifier, value, keyIdentifier, key, arrayLength) {\n    // TODO(perf): generate setters to shave off ~40ms or 1-1.5%\n    scope[valueIdentifier] = value;\n    if (keyIdentifier) scope[keyIdentifier] = key;\n    scope.$index = index;\n    scope.$first = (index === 0);\n    scope.$last = (index === (arrayLength - 1));\n    scope.$middle = !(scope.$first || scope.$last);\n    // eslint-disable-next-line no-bitwise\n    scope.$odd = !(scope.$even = (index & 1) === 0);\n  };\n\n  var getBlockStart = function(block) {\n    return block.clone[0];\n  };\n\n  var getBlockEnd = function(block) {\n    return block.clone[block.clone.length - 1];\n  };\n\n\n  return {\n    restrict: 'A',\n    multiElement: true,\n    transclude: 'element',\n    priority: 1000,\n    terminal: true,\n    $$tlb: true,\n    compile: function ngRepeatCompile($element, $attr) {\n      var expression = $attr.ngRepeat;\n      var ngRepeatEndComment = $compile.$$createComment('end ngRepeat', expression);\n\n      var match = expression.match(/^\\s*([\\s\\S]+?)\\s+in\\s+([\\s\\S]+?)(?:\\s+as\\s+([\\s\\S]+?))?(?:\\s+track\\s+by\\s+([\\s\\S]+?))?\\s*$/);\n\n      if (!match) {\n        throw ngRepeatMinErr('iexp', 'Expected expression in form of \\'_item_ in _collection_[ track by _id_]\\' but got \\'{0}\\'.',\n            expression);\n      }\n\n      var lhs = match[1];\n      var rhs = match[2];\n      var aliasAs = match[3];\n      var trackByExp = match[4];\n\n      match = lhs.match(/^(?:(\\s*[$\\w]+)|\\(\\s*([$\\w]+)\\s*,\\s*([$\\w]+)\\s*\\))$/);\n\n      if (!match) {\n        throw ngRepeatMinErr('iidexp', '\\'_item_\\' in \\'_item_ in _collection_\\' should be an identifier or \\'(_key_, _value_)\\' expression, but got \\'{0}\\'.',\n            lhs);\n      }\n      var valueIdentifier = match[3] || match[1];\n      var keyIdentifier = match[2];\n\n      if (aliasAs && (!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(aliasAs) ||\n          /^(null|undefined|this|\\$index|\\$first|\\$middle|\\$last|\\$even|\\$odd|\\$parent|\\$root|\\$id)$/.test(aliasAs))) {\n        throw ngRepeatMinErr('badident', 'alias \\'{0}\\' is invalid --- must be a valid JS identifier which is not a reserved name.',\n          aliasAs);\n      }\n\n      var trackByExpGetter, trackByIdExpFn, trackByIdArrayFn, trackByIdObjFn;\n      var hashFnLocals = {$id: hashKey};\n\n      if (trackByExp) {\n        trackByExpGetter = $parse(trackByExp);\n      } else {\n        trackByIdArrayFn = function(key, value) {\n          return hashKey(value);\n        };\n        trackByIdObjFn = function(key) {\n          return key;\n        };\n      }\n\n      return function ngRepeatLink($scope, $element, $attr, ctrl, $transclude) {\n\n        if (trackByExpGetter) {\n          trackByIdExpFn = function(key, value, index) {\n            // assign key, value, and $index to the locals so that they can be used in hash functions\n            if (keyIdentifier) hashFnLocals[keyIdentifier] = key;\n            hashFnLocals[valueIdentifier] = value;\n            hashFnLocals.$index = index;\n            return trackByExpGetter($scope, hashFnLocals);\n          };\n        }\n\n        // Store a list of elements from previous run. This is a hash where key is the item from the\n        // iterator, and the value is objects with following properties.\n        //   - scope: bound scope\n        //   - clone: previous element.\n        //   - index: position\n        //\n        // We are using no-proto object so that we don't need to guard against inherited props via\n        // hasOwnProperty.\n        var lastBlockMap = createMap();\n\n        //watch props\n        $scope.$watchCollection(rhs, function ngRepeatAction(collection) {\n          var index, length,\n              previousNode = $element[0],     // node that cloned nodes should be inserted after\n                                              // initialized to the comment node anchor\n              nextNode,\n              // Same as lastBlockMap but it has the current state. It will become the\n              // lastBlockMap on the next iteration.\n              nextBlockMap = createMap(),\n              collectionLength,\n              key, value, // key/value of iteration\n              trackById,\n              trackByIdFn,\n              collectionKeys,\n              block,       // last object information {scope, element, id}\n              nextBlockOrder,\n              elementsToRemove;\n\n          if (aliasAs) {\n            $scope[aliasAs] = collection;\n          }\n\n          if (isArrayLike(collection)) {\n            collectionKeys = collection;\n            trackByIdFn = trackByIdExpFn || trackByIdArrayFn;\n          } else {\n            trackByIdFn = trackByIdExpFn || trackByIdObjFn;\n            // if object, extract keys, in enumeration order, unsorted\n            collectionKeys = [];\n            for (var itemKey in collection) {\n              if (hasOwnProperty.call(collection, itemKey) && itemKey.charAt(0) !== '$') {\n                collectionKeys.push(itemKey);\n              }\n            }\n          }\n\n          collectionLength = collectionKeys.length;\n          nextBlockOrder = new Array(collectionLength);\n\n          // locate existing items\n          for (index = 0; index < collectionLength; index++) {\n            key = (collection === collectionKeys) ? index : collectionKeys[index];\n            value = collection[key];\n            trackById = trackByIdFn(key, value, index);\n            if (lastBlockMap[trackById]) {\n              // found previously seen block\n              block = lastBlockMap[trackById];\n              delete lastBlockMap[trackById];\n              nextBlockMap[trackById] = block;\n              nextBlockOrder[index] = block;\n            } else if (nextBlockMap[trackById]) {\n              // if collision detected. restore lastBlockMap and throw an error\n              forEach(nextBlockOrder, function(block) {\n                if (block && block.scope) lastBlockMap[block.id] = block;\n              });\n              throw ngRepeatMinErr('dupes',\n                  'Duplicates in a repeater are not allowed. Use \\'track by\\' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}, Duplicate value: {2}',\n                  expression, trackById, value);\n            } else {\n              // new never before seen block\n              nextBlockOrder[index] = {id: trackById, scope: undefined, clone: undefined};\n              nextBlockMap[trackById] = true;\n            }\n          }\n\n          // remove leftover items\n          for (var blockKey in lastBlockMap) {\n            block = lastBlockMap[blockKey];\n            elementsToRemove = getBlockNodes(block.clone);\n            $animate.leave(elementsToRemove);\n            if (elementsToRemove[0].parentNode) {\n              // if the element was not removed yet because of pending animation, mark it as deleted\n              // so that we can ignore it later\n              for (index = 0, length = elementsToRemove.length; index < length; index++) {\n                elementsToRemove[index][NG_REMOVED] = true;\n              }\n            }\n            block.scope.$destroy();\n          }\n\n          // we are not using forEach for perf reasons (trying to avoid #call)\n          for (index = 0; index < collectionLength; index++) {\n            key = (collection === collectionKeys) ? index : collectionKeys[index];\n            value = collection[key];\n            block = nextBlockOrder[index];\n\n            if (block.scope) {\n              // if we have already seen this object, then we need to reuse the\n              // associated scope/element\n\n              nextNode = previousNode;\n\n              // skip nodes that are already pending removal via leave animation\n              do {\n                nextNode = nextNode.nextSibling;\n              } while (nextNode && nextNode[NG_REMOVED]);\n\n              if (getBlockStart(block) !== nextNode) {\n                // existing item which got moved\n                $animate.move(getBlockNodes(block.clone), null, previousNode);\n              }\n              previousNode = getBlockEnd(block);\n              updateScope(block.scope, index, valueIdentifier, value, keyIdentifier, key, collectionLength);\n            } else {\n              // new item which we don't know about\n              $transclude(function ngRepeatTransclude(clone, scope) {\n                block.scope = scope;\n                // http://jsperf.com/clone-vs-createcomment\n                var endNode = ngRepeatEndComment.cloneNode(false);\n                clone[clone.length++] = endNode;\n\n                $animate.enter(clone, null, previousNode);\n                previousNode = endNode;\n                // Note: We only need the first/last node of the cloned nodes.\n                // However, we need to keep the reference to the jqlite wrapper as it might be changed later\n                // by a directive with templateUrl when its template arrives.\n                block.clone = clone;\n                nextBlockMap[block.id] = block;\n                updateScope(block.scope, index, valueIdentifier, value, keyIdentifier, key, collectionLength);\n              });\n            }\n          }\n          lastBlockMap = nextBlockMap;\n        });\n      };\n    }\n  };\n}];\n\nvar NG_HIDE_CLASS = 'ng-hide';\nvar NG_HIDE_IN_PROGRESS_CLASS = 'ng-hide-animate';\n/**\n * @ngdoc directive\n * @name ngShow\n * @multiElement\n *\n * @description\n * The `ngShow` directive shows or hides the given HTML element based on the expression provided to\n * the `ngShow` attribute.\n *\n * The element is shown or hidden by removing or adding the `.ng-hide` CSS class onto the element.\n * The `.ng-hide` CSS class is predefined in AngularJS and sets the display style to none (using an\n * `!important` flag). For CSP mode please add `angular-csp.css` to your HTML file (see\n * {@link ng.directive:ngCsp ngCsp}).\n *\n * ```html\n * <!-- when $scope.myValue is truthy (element is visible) -->\n * <div ng-show=\"myValue\"></div>\n *\n * <!-- when $scope.myValue is falsy (element is hidden) -->\n * <div ng-show=\"myValue\" class=\"ng-hide\"></div>\n * ```\n *\n * When the `ngShow` expression evaluates to a falsy value then the `.ng-hide` CSS class is added\n * to the class attribute on the element causing it to become hidden. When truthy, the `.ng-hide`\n * CSS class is removed from the element causing the element not to appear hidden.\n *\n * ## Why is `!important` used?\n *\n * You may be wondering why `!important` is used for the `.ng-hide` CSS class. This is because the\n * `.ng-hide` selector can be easily overridden by heavier selectors. For example, something as\n * simple as changing the display style on a HTML list item would make hidden elements appear\n * visible. This also becomes a bigger issue when dealing with CSS frameworks.\n *\n * By using `!important`, the show and hide behavior will work as expected despite any clash between\n * CSS selector specificity (when `!important` isn't used with any conflicting styles). If a\n * developer chooses to override the styling to change how to hide an element then it is just a\n * matter of using `!important` in their own CSS code.\n *\n * ### Overriding `.ng-hide`\n *\n * By default, the `.ng-hide` class will style the element with `display: none !important`. If you\n * wish to change the hide behavior with `ngShow`/`ngHide`, you can simply overwrite the styles for\n * the `.ng-hide` CSS class. Note that the selector that needs to be used is actually\n * `.ng-hide:not(.ng-hide-animate)` to cope with extra animation classes that can be added.\n *\n * ```css\n * .ng-hide:not(.ng-hide-animate) {\n *   /&#42; These are just alternative ways of hiding an element &#42;/\n *   display: block!important;\n *   position: absolute;\n *   top: -9999px;\n *   left: -9999px;\n * }\n * ```\n *\n * By default you don't need to override anything in CSS and the animations will work around the\n * display style.\n *\n * @animations\n * | Animation                                           | Occurs                                                                                                        |\n * |-----------------------------------------------------|---------------------------------------------------------------------------------------------------------------|\n * | {@link $animate#addClass addClass} `.ng-hide`       | After the `ngShow` expression evaluates to a non truthy value and just before the contents are set to hidden. |\n * | {@link $animate#removeClass removeClass} `.ng-hide` | After the `ngShow` expression evaluates to a truthy value and just before contents are set to visible.        |\n *\n * Animations in `ngShow`/`ngHide` work with the show and hide events that are triggered when the\n * directive expression is true and false. This system works like the animation system present with\n * `ngClass` except that you must also include the `!important` flag to override the display\n * property so that the elements are not actually hidden during the animation.\n *\n * ```css\n * /&#42; A working example can be found at the bottom of this page. &#42;/\n * .my-element.ng-hide-add, .my-element.ng-hide-remove {\n *   transition: all 0.5s linear;\n * }\n *\n * .my-element.ng-hide-add { ... }\n * .my-element.ng-hide-add.ng-hide-add-active { ... }\n * .my-element.ng-hide-remove { ... }\n * .my-element.ng-hide-remove.ng-hide-remove-active { ... }\n * ```\n *\n * Keep in mind that, as of AngularJS version 1.3, there is no need to change the display property\n * to block during animation states - ngAnimate will automatically handle the style toggling for you.\n *\n * @element ANY\n * @param {expression} ngShow If the {@link guide/expression expression} is truthy/falsy then the\n *                            element is shown/hidden respectively.\n *\n * @example\n * A simple example, animating the element's opacity:\n *\n  <example module=\"ngAnimate\" deps=\"angular-animate.js\" animations=\"true\" name=\"ng-show-simple\">\n    <file name=\"index.html\">\n      Show: <input type=\"checkbox\" ng-model=\"checked\" aria-label=\"Toggle ngShow\"><br />\n      <div class=\"check-element animate-show-hide\" ng-show=\"checked\">\n        I show up when your checkbox is checked.\n      </div>\n    </file>\n    <file name=\"animations.css\">\n      .animate-show-hide.ng-hide {\n        opacity: 0;\n      }\n\n      .animate-show-hide.ng-hide-add,\n      .animate-show-hide.ng-hide-remove {\n        transition: all linear 0.5s;\n      }\n\n      .check-element {\n        border: 1px solid black;\n        opacity: 1;\n        padding: 10px;\n      }\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n      it('should check ngShow', function() {\n        var checkbox = element(by.model('checked'));\n        var checkElem = element(by.css('.check-element'));\n\n        expect(checkElem.isDisplayed()).toBe(false);\n        checkbox.click();\n        expect(checkElem.isDisplayed()).toBe(true);\n      });\n    </file>\n  </example>\n *\n * <hr />\n * @example\n * A more complex example, featuring different show/hide animations:\n *\n  <example module=\"ngAnimate\" deps=\"angular-animate.js\" animations=\"true\" name=\"ng-show-complex\">\n    <file name=\"index.html\">\n      Show: <input type=\"checkbox\" ng-model=\"checked\" aria-label=\"Toggle ngShow\"><br />\n      <div class=\"check-element funky-show-hide\" ng-show=\"checked\">\n        I show up when your checkbox is checked.\n      </div>\n    </file>\n    <file name=\"animations.css\">\n      body {\n        overflow: hidden;\n        perspective: 1000px;\n      }\n\n      .funky-show-hide.ng-hide-add {\n        transform: rotateZ(0);\n        transform-origin: right;\n        transition: all 0.5s ease-in-out;\n      }\n\n      .funky-show-hide.ng-hide-add.ng-hide-add-active {\n        transform: rotateZ(-135deg);\n      }\n\n      .funky-show-hide.ng-hide-remove {\n        transform: rotateY(90deg);\n        transform-origin: left;\n        transition: all 0.5s ease;\n      }\n\n      .funky-show-hide.ng-hide-remove.ng-hide-remove-active {\n        transform: rotateY(0);\n      }\n\n      .check-element {\n        border: 1px solid black;\n        opacity: 1;\n        padding: 10px;\n      }\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n      it('should check ngShow', function() {\n        var checkbox = element(by.model('checked'));\n        var checkElem = element(by.css('.check-element'));\n\n        expect(checkElem.isDisplayed()).toBe(false);\n        checkbox.click();\n        expect(checkElem.isDisplayed()).toBe(true);\n      });\n    </file>\n  </example>\n */\nvar ngShowDirective = ['$animate', function($animate) {\n  return {\n    restrict: 'A',\n    multiElement: true,\n    link: function(scope, element, attr) {\n      scope.$watch(attr.ngShow, function ngShowWatchAction(value) {\n        // we're adding a temporary, animation-specific class for ng-hide since this way\n        // we can control when the element is actually displayed on screen without having\n        // to have a global/greedy CSS selector that breaks when other animations are run.\n        // Read: https://github.com/angular/angular.js/issues/9103#issuecomment-58335845\n        $animate[value ? 'removeClass' : 'addClass'](element, NG_HIDE_CLASS, {\n          tempClasses: NG_HIDE_IN_PROGRESS_CLASS\n        });\n      });\n    }\n  };\n}];\n\n\n/**\n * @ngdoc directive\n * @name ngHide\n * @multiElement\n *\n * @description\n * The `ngHide` directive shows or hides the given HTML element based on the expression provided to\n * the `ngHide` attribute.\n *\n * The element is shown or hidden by removing or adding the `.ng-hide` CSS class onto the element.\n * The `.ng-hide` CSS class is predefined in AngularJS and sets the display style to none (using an\n * `!important` flag). For CSP mode please add `angular-csp.css` to your HTML file (see\n * {@link ng.directive:ngCsp ngCsp}).\n *\n * ```html\n * <!-- when $scope.myValue is truthy (element is hidden) -->\n * <div ng-hide=\"myValue\" class=\"ng-hide\"></div>\n *\n * <!-- when $scope.myValue is falsy (element is visible) -->\n * <div ng-hide=\"myValue\"></div>\n * ```\n *\n * When the `ngHide` expression evaluates to a truthy value then the `.ng-hide` CSS class is added\n * to the class attribute on the element causing it to become hidden. When falsy, the `.ng-hide`\n * CSS class is removed from the element causing the element not to appear hidden.\n *\n * ## Why is `!important` used?\n *\n * You may be wondering why `!important` is used for the `.ng-hide` CSS class. This is because the\n * `.ng-hide` selector can be easily overridden by heavier selectors. For example, something as\n * simple as changing the display style on a HTML list item would make hidden elements appear\n * visible. This also becomes a bigger issue when dealing with CSS frameworks.\n *\n * By using `!important`, the show and hide behavior will work as expected despite any clash between\n * CSS selector specificity (when `!important` isn't used with any conflicting styles). If a\n * developer chooses to override the styling to change how to hide an element then it is just a\n * matter of using `!important` in their own CSS code.\n *\n * ### Overriding `.ng-hide`\n *\n * By default, the `.ng-hide` class will style the element with `display: none !important`. If you\n * wish to change the hide behavior with `ngShow`/`ngHide`, you can simply overwrite the styles for\n * the `.ng-hide` CSS class. Note that the selector that needs to be used is actually\n * `.ng-hide:not(.ng-hide-animate)` to cope with extra animation classes that can be added.\n *\n * ```css\n * .ng-hide:not(.ng-hide-animate) {\n *   /&#42; These are just alternative ways of hiding an element &#42;/\n *   display: block!important;\n *   position: absolute;\n *   top: -9999px;\n *   left: -9999px;\n * }\n * ```\n *\n * By default you don't need to override in CSS anything and the animations will work around the\n * display style.\n *\n * @animations\n * | Animation                                           | Occurs                                                                                                     |\n * |-----------------------------------------------------|------------------------------------------------------------------------------------------------------------|\n * | {@link $animate#addClass addClass} `.ng-hide`       | After the `ngHide` expression evaluates to a truthy value and just before the contents are set to hidden.  |\n * | {@link $animate#removeClass removeClass} `.ng-hide` | After the `ngHide` expression evaluates to a non truthy value and just before contents are set to visible. |\n *\n * Animations in `ngShow`/`ngHide` work with the show and hide events that are triggered when the\n * directive expression is true and false. This system works like the animation system present with\n * `ngClass` except that you must also include the `!important` flag to override the display\n * property so that the elements are not actually hidden during the animation.\n *\n * ```css\n * /&#42; A working example can be found at the bottom of this page. &#42;/\n * .my-element.ng-hide-add, .my-element.ng-hide-remove {\n *   transition: all 0.5s linear;\n * }\n *\n * .my-element.ng-hide-add { ... }\n * .my-element.ng-hide-add.ng-hide-add-active { ... }\n * .my-element.ng-hide-remove { ... }\n * .my-element.ng-hide-remove.ng-hide-remove-active { ... }\n * ```\n *\n * Keep in mind that, as of AngularJS version 1.3, there is no need to change the display property\n * to block during animation states - ngAnimate will automatically handle the style toggling for you.\n *\n * @element ANY\n * @param {expression} ngHide If the {@link guide/expression expression} is truthy/falsy then the\n *                            element is hidden/shown respectively.\n *\n * @example\n * A simple example, animating the element's opacity:\n *\n  <example module=\"ngAnimate\" deps=\"angular-animate.js\" animations=\"true\" name=\"ng-hide-simple\">\n    <file name=\"index.html\">\n      Hide: <input type=\"checkbox\" ng-model=\"checked\" aria-label=\"Toggle ngHide\"><br />\n      <div class=\"check-element animate-show-hide\" ng-hide=\"checked\">\n        I hide when your checkbox is checked.\n      </div>\n    </file>\n    <file name=\"animations.css\">\n      .animate-show-hide.ng-hide {\n        opacity: 0;\n      }\n\n      .animate-show-hide.ng-hide-add,\n      .animate-show-hide.ng-hide-remove {\n        transition: all linear 0.5s;\n      }\n\n      .check-element {\n        border: 1px solid black;\n        opacity: 1;\n        padding: 10px;\n      }\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n      it('should check ngHide', function() {\n        var checkbox = element(by.model('checked'));\n        var checkElem = element(by.css('.check-element'));\n\n        expect(checkElem.isDisplayed()).toBe(true);\n        checkbox.click();\n        expect(checkElem.isDisplayed()).toBe(false);\n      });\n    </file>\n  </example>\n *\n * <hr />\n * @example\n * A more complex example, featuring different show/hide animations:\n *\n  <example module=\"ngAnimate\" deps=\"angular-animate.js\" animations=\"true\" name=\"ng-hide-complex\">\n    <file name=\"index.html\">\n      Hide: <input type=\"checkbox\" ng-model=\"checked\" aria-label=\"Toggle ngHide\"><br />\n      <div class=\"check-element funky-show-hide\" ng-hide=\"checked\">\n        I hide when your checkbox is checked.\n      </div>\n    </file>\n    <file name=\"animations.css\">\n      body {\n        overflow: hidden;\n        perspective: 1000px;\n      }\n\n      .funky-show-hide.ng-hide-add {\n        transform: rotateZ(0);\n        transform-origin: right;\n        transition: all 0.5s ease-in-out;\n      }\n\n      .funky-show-hide.ng-hide-add.ng-hide-add-active {\n        transform: rotateZ(-135deg);\n      }\n\n      .funky-show-hide.ng-hide-remove {\n        transform: rotateY(90deg);\n        transform-origin: left;\n        transition: all 0.5s ease;\n      }\n\n      .funky-show-hide.ng-hide-remove.ng-hide-remove-active {\n        transform: rotateY(0);\n      }\n\n      .check-element {\n        border: 1px solid black;\n        opacity: 1;\n        padding: 10px;\n      }\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n      it('should check ngHide', function() {\n        var checkbox = element(by.model('checked'));\n        var checkElem = element(by.css('.check-element'));\n\n        expect(checkElem.isDisplayed()).toBe(true);\n        checkbox.click();\n        expect(checkElem.isDisplayed()).toBe(false);\n      });\n    </file>\n  </example>\n */\nvar ngHideDirective = ['$animate', function($animate) {\n  return {\n    restrict: 'A',\n    multiElement: true,\n    link: function(scope, element, attr) {\n      scope.$watch(attr.ngHide, function ngHideWatchAction(value) {\n        // The comment inside of the ngShowDirective explains why we add and\n        // remove a temporary class for the show/hide animation\n        $animate[value ? 'addClass' : 'removeClass'](element,NG_HIDE_CLASS, {\n          tempClasses: NG_HIDE_IN_PROGRESS_CLASS\n        });\n      });\n    }\n  };\n}];\n\n/**\n * @ngdoc directive\n * @name ngStyle\n * @restrict AC\n *\n * @description\n * The `ngStyle` directive allows you to set CSS style on an HTML element conditionally.\n *\n * @knownIssue\n * You should not use {@link guide/interpolation interpolation} in the value of the `style`\n * attribute, when using the `ngStyle` directive on the same element.\n * See {@link guide/interpolation#known-issues here} for more info.\n *\n * @element ANY\n * @param {expression} ngStyle\n *\n * {@link guide/expression Expression} which evals to an\n * object whose keys are CSS style names and values are corresponding values for those CSS\n * keys.\n *\n * Since some CSS style names are not valid keys for an object, they must be quoted.\n * See the 'background-color' style in the example below.\n *\n * @example\n   <example name=\"ng-style\">\n     <file name=\"index.html\">\n        <input type=\"button\" value=\"set color\" ng-click=\"myStyle={color:'red'}\">\n        <input type=\"button\" value=\"set background\" ng-click=\"myStyle={'background-color':'blue'}\">\n        <input type=\"button\" value=\"clear\" ng-click=\"myStyle={}\">\n        <br/>\n        <span ng-style=\"myStyle\">Sample Text</span>\n        <pre>myStyle={{myStyle}}</pre>\n     </file>\n     <file name=\"style.css\">\n       span {\n         color: black;\n       }\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       var colorSpan = element(by.css('span'));\n\n       it('should check ng-style', function() {\n         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');\n         element(by.css('input[value=\\'set color\\']')).click();\n         expect(colorSpan.getCssValue('color')).toBe('rgba(255, 0, 0, 1)');\n         element(by.css('input[value=clear]')).click();\n         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');\n       });\n     </file>\n   </example>\n */\nvar ngStyleDirective = ngDirective(function(scope, element, attr) {\n  scope.$watch(attr.ngStyle, function ngStyleWatchAction(newStyles, oldStyles) {\n    if (oldStyles && (newStyles !== oldStyles)) {\n      forEach(oldStyles, function(val, style) { element.css(style, '');});\n    }\n    if (newStyles) element.css(newStyles);\n  }, true);\n});\n\n/**\n * @ngdoc directive\n * @name ngSwitch\n * @restrict EA\n *\n * @description\n * The `ngSwitch` directive is used to conditionally swap DOM structure on your template based on a scope expression.\n * Elements within `ngSwitch` but without `ngSwitchWhen` or `ngSwitchDefault` directives will be preserved at the location\n * as specified in the template.\n *\n * The directive itself works similar to ngInclude, however, instead of downloading template code (or loading it\n * from the template cache), `ngSwitch` simply chooses one of the nested elements and makes it visible based on which element\n * matches the value obtained from the evaluated expression. In other words, you define a container element\n * (where you place the directive), place an expression on the **`on=\"...\"` attribute**\n * (or the **`ng-switch=\"...\"` attribute**), define any inner elements inside of the directive and place\n * a when attribute per element. The when attribute is used to inform ngSwitch which element to display when the on\n * expression is evaluated. If a matching expression is not found via a when attribute then an element with the default\n * attribute is displayed.\n *\n * <div class=\"alert alert-info\">\n * Be aware that the attribute values to match against cannot be expressions. They are interpreted\n * as literal string values to match against.\n * For example, **`ng-switch-when=\"someVal\"`** will match against the string `\"someVal\"` not against the\n * value of the expression `$scope.someVal`.\n * </div>\n\n * @animations\n * | Animation                        | Occurs                              |\n * |----------------------------------|-------------------------------------|\n * | {@link ng.$animate#enter enter}  | after the ngSwitch contents change and the matched child element is placed inside the container |\n * | {@link ng.$animate#leave leave}  | after the ngSwitch contents change and just before the former contents are removed from the DOM |\n *\n * @usage\n *\n * ```\n * <ANY ng-switch=\"expression\">\n *   <ANY ng-switch-when=\"matchValue1\">...</ANY>\n *   <ANY ng-switch-when=\"matchValue2\">...</ANY>\n *   <ANY ng-switch-default>...</ANY>\n * </ANY>\n * ```\n *\n *\n * @scope\n * @priority 1200\n * @param {*} ngSwitch|on expression to match against <code>ng-switch-when</code>.\n * On child elements add:\n *\n * * `ngSwitchWhen`: the case statement to match against. If match then this\n *   case will be displayed. If the same match appears multiple times, all the\n *   elements will be displayed. It is possible to associate multiple values to\n *   the same `ngSwitchWhen` by defining the optional attribute\n *   `ngSwitchWhenSeparator`. The separator will be used to split the value of\n *   the `ngSwitchWhen` attribute into multiple tokens, and the element will show\n *   if any of the `ngSwitch` evaluates to any of these tokens.\n * * `ngSwitchDefault`: the default case when no other case match. If there\n *   are multiple default cases, all of them will be displayed when no other\n *   case match.\n *\n *\n * @example\n  <example module=\"switchExample\" deps=\"angular-animate.js\" animations=\"true\" name=\"ng-switch\">\n    <file name=\"index.html\">\n      <div ng-controller=\"ExampleController\">\n        <select ng-model=\"selection\" ng-options=\"item for item in items\">\n        </select>\n        <code>selection={{selection}}</code>\n        <hr/>\n        <div class=\"animate-switch-container\"\n          ng-switch on=\"selection\">\n            <div class=\"animate-switch\" ng-switch-when=\"settings|options\" ng-switch-when-separator=\"|\">Settings Div</div>\n            <div class=\"animate-switch\" ng-switch-when=\"home\">Home Span</div>\n            <div class=\"animate-switch\" ng-switch-default>default</div>\n        </div>\n      </div>\n    </file>\n    <file name=\"script.js\">\n      angular.module('switchExample', ['ngAnimate'])\n        .controller('ExampleController', ['$scope', function($scope) {\n          $scope.items = ['settings', 'home', 'options', 'other'];\n          $scope.selection = $scope.items[0];\n        }]);\n    </file>\n    <file name=\"animations.css\">\n      .animate-switch-container {\n        position:relative;\n        background:white;\n        border:1px solid black;\n        height:40px;\n        overflow:hidden;\n      }\n\n      .animate-switch {\n        padding:10px;\n      }\n\n      .animate-switch.ng-animate {\n        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;\n\n        position:absolute;\n        top:0;\n        left:0;\n        right:0;\n        bottom:0;\n      }\n\n      .animate-switch.ng-leave.ng-leave-active,\n      .animate-switch.ng-enter {\n        top:-50px;\n      }\n      .animate-switch.ng-leave,\n      .animate-switch.ng-enter.ng-enter-active {\n        top:0;\n      }\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n      var switchElem = element(by.css('[ng-switch]'));\n      var select = element(by.model('selection'));\n\n      it('should start in settings', function() {\n        expect(switchElem.getText()).toMatch(/Settings Div/);\n      });\n      it('should change to home', function() {\n        select.all(by.css('option')).get(1).click();\n        expect(switchElem.getText()).toMatch(/Home Span/);\n      });\n      it('should change to settings via \"options\"', function() {\n        select.all(by.css('option')).get(2).click();\n        expect(switchElem.getText()).toMatch(/Settings Div/);\n      });\n      it('should select default', function() {\n        select.all(by.css('option')).get(3).click();\n        expect(switchElem.getText()).toMatch(/default/);\n      });\n    </file>\n  </example>\n */\nvar ngSwitchDirective = ['$animate', '$compile', function($animate, $compile) {\n  return {\n    require: 'ngSwitch',\n\n    // asks for $scope to fool the BC controller module\n    controller: ['$scope', function NgSwitchController() {\n     this.cases = {};\n    }],\n    link: function(scope, element, attr, ngSwitchController) {\n      var watchExpr = attr.ngSwitch || attr.on,\n          selectedTranscludes = [],\n          selectedElements = [],\n          previousLeaveAnimations = [],\n          selectedScopes = [];\n\n      var spliceFactory = function(array, index) {\n          return function(response) {\n            if (response !== false) array.splice(index, 1);\n          };\n      };\n\n      scope.$watch(watchExpr, function ngSwitchWatchAction(value) {\n        var i, ii;\n\n        // Start with the last, in case the array is modified during the loop\n        while (previousLeaveAnimations.length) {\n          $animate.cancel(previousLeaveAnimations.pop());\n        }\n\n        for (i = 0, ii = selectedScopes.length; i < ii; ++i) {\n          var selected = getBlockNodes(selectedElements[i].clone);\n          selectedScopes[i].$destroy();\n          var runner = previousLeaveAnimations[i] = $animate.leave(selected);\n          runner.done(spliceFactory(previousLeaveAnimations, i));\n        }\n\n        selectedElements.length = 0;\n        selectedScopes.length = 0;\n\n        if ((selectedTranscludes = ngSwitchController.cases['!' + value] || ngSwitchController.cases['?'])) {\n          forEach(selectedTranscludes, function(selectedTransclude) {\n            selectedTransclude.transclude(function(caseElement, selectedScope) {\n              selectedScopes.push(selectedScope);\n              var anchor = selectedTransclude.element;\n              caseElement[caseElement.length++] = $compile.$$createComment('end ngSwitchWhen');\n              var block = { clone: caseElement };\n\n              selectedElements.push(block);\n              $animate.enter(caseElement, anchor.parent(), anchor);\n            });\n          });\n        }\n      });\n    }\n  };\n}];\n\nvar ngSwitchWhenDirective = ngDirective({\n  transclude: 'element',\n  priority: 1200,\n  require: '^ngSwitch',\n  multiElement: true,\n  link: function(scope, element, attrs, ctrl, $transclude) {\n\n    var cases = attrs.ngSwitchWhen.split(attrs.ngSwitchWhenSeparator).sort().filter(\n      // Filter duplicate cases\n      function(element, index, array) { return array[index - 1] !== element; }\n    );\n\n    forEach(cases, function(whenCase) {\n      ctrl.cases['!' + whenCase] = (ctrl.cases['!' + whenCase] || []);\n      ctrl.cases['!' + whenCase].push({ transclude: $transclude, element: element });\n    });\n  }\n});\n\nvar ngSwitchDefaultDirective = ngDirective({\n  transclude: 'element',\n  priority: 1200,\n  require: '^ngSwitch',\n  multiElement: true,\n  link: function(scope, element, attr, ctrl, $transclude) {\n    ctrl.cases['?'] = (ctrl.cases['?'] || []);\n    ctrl.cases['?'].push({ transclude: $transclude, element: element });\n   }\n});\n\n/**\n * @ngdoc directive\n * @name ngTransclude\n * @restrict EAC\n *\n * @description\n * Directive that marks the insertion point for the transcluded DOM of the nearest parent directive that uses transclusion.\n *\n * You can specify that you want to insert a named transclusion slot, instead of the default slot, by providing the slot name\n * as the value of the `ng-transclude` or `ng-transclude-slot` attribute.\n *\n * If the transcluded content is not empty (i.e. contains one or more DOM nodes, including whitespace text nodes), any existing\n * content of this element will be removed before the transcluded content is inserted.\n * If the transcluded content is empty (or only whitespace), the existing content is left intact. This lets you provide fallback\n * content in the case that no transcluded content is provided.\n *\n * @element ANY\n *\n * @param {string} ngTransclude|ngTranscludeSlot the name of the slot to insert at this point. If this is not provided, is empty\n *                                               or its value is the same as the name of the attribute then the default slot is used.\n *\n * @example\n * ### Basic transclusion\n * This example demonstrates basic transclusion of content into a component directive.\n * <example name=\"simpleTranscludeExample\" module=\"transcludeExample\">\n *   <file name=\"index.html\">\n *     <script>\n *       angular.module('transcludeExample', [])\n *        .directive('pane', function(){\n *           return {\n *             restrict: 'E',\n *             transclude: true,\n *             scope: { title:'@' },\n *             template: '<div style=\"border: 1px solid black;\">' +\n *                         '<div style=\"background-color: gray\">{{title}}</div>' +\n *                         '<ng-transclude></ng-transclude>' +\n *                       '</div>'\n *           };\n *       })\n *       .controller('ExampleController', ['$scope', function($scope) {\n *         $scope.title = 'Lorem Ipsum';\n *         $scope.text = 'Neque porro quisquam est qui dolorem ipsum quia dolor...';\n *       }]);\n *     </script>\n *     <div ng-controller=\"ExampleController\">\n *       <input ng-model=\"title\" aria-label=\"title\"> <br/>\n *       <textarea ng-model=\"text\" aria-label=\"text\"></textarea> <br/>\n *       <pane title=\"{{title}}\"><span>{{text}}</span></pane>\n *     </div>\n *   </file>\n *   <file name=\"protractor.js\" type=\"protractor\">\n *      it('should have transcluded', function() {\n *        var titleElement = element(by.model('title'));\n *        titleElement.clear();\n *        titleElement.sendKeys('TITLE');\n *        var textElement = element(by.model('text'));\n *        textElement.clear();\n *        textElement.sendKeys('TEXT');\n *        expect(element(by.binding('title')).getText()).toEqual('TITLE');\n *        expect(element(by.binding('text')).getText()).toEqual('TEXT');\n *      });\n *   </file>\n * </example>\n *\n * @example\n * ### Transclude fallback content\n * This example shows how to use `NgTransclude` with fallback content, that\n * is displayed if no transcluded content is provided.\n *\n * <example module=\"transcludeFallbackContentExample\" name=\"ng-transclude\">\n * <file name=\"index.html\">\n * <script>\n * angular.module('transcludeFallbackContentExample', [])\n * .directive('myButton', function(){\n *             return {\n *               restrict: 'E',\n *               transclude: true,\n *               scope: true,\n *               template: '<button style=\"cursor: pointer;\">' +\n *                           '<ng-transclude>' +\n *                             '<b style=\"color: red;\">Button1</b>' +\n *                           '</ng-transclude>' +\n *                         '</button>'\n *             };\n *         });\n * </script>\n * <!-- fallback button content -->\n * <my-button id=\"fallback\"></my-button>\n * <!-- modified button content -->\n * <my-button id=\"modified\">\n *   <i style=\"color: green;\">Button2</i>\n * </my-button>\n * </file>\n * <file name=\"protractor.js\" type=\"protractor\">\n * it('should have different transclude element content', function() {\n *          expect(element(by.id('fallback')).getText()).toBe('Button1');\n *          expect(element(by.id('modified')).getText()).toBe('Button2');\n *        });\n * </file>\n * </example>\n *\n * @example\n * ### Multi-slot transclusion\n * This example demonstrates using multi-slot transclusion in a component directive.\n * <example name=\"multiSlotTranscludeExample\" module=\"multiSlotTranscludeExample\">\n *   <file name=\"index.html\">\n *    <style>\n *      .title, .footer {\n *        background-color: gray\n *      }\n *    </style>\n *    <div ng-controller=\"ExampleController\">\n *      <input ng-model=\"title\" aria-label=\"title\"> <br/>\n *      <textarea ng-model=\"text\" aria-label=\"text\"></textarea> <br/>\n *      <pane>\n *        <pane-title><a ng-href=\"{{link}}\">{{title}}</a></pane-title>\n *        <pane-body><p>{{text}}</p></pane-body>\n *      </pane>\n *    </div>\n *   </file>\n *   <file name=\"app.js\">\n *    angular.module('multiSlotTranscludeExample', [])\n *     .directive('pane', function() {\n *        return {\n *          restrict: 'E',\n *          transclude: {\n *            'title': '?paneTitle',\n *            'body': 'paneBody',\n *            'footer': '?paneFooter'\n *          },\n *          template: '<div style=\"border: 1px solid black;\">' +\n *                      '<div class=\"title\" ng-transclude=\"title\">Fallback Title</div>' +\n *                      '<div ng-transclude=\"body\"></div>' +\n *                      '<div class=\"footer\" ng-transclude=\"footer\">Fallback Footer</div>' +\n *                    '</div>'\n *        };\n *    })\n *    .controller('ExampleController', ['$scope', function($scope) {\n *      $scope.title = 'Lorem Ipsum';\n *      $scope.link = 'https://google.com';\n *      $scope.text = 'Neque porro quisquam est qui dolorem ipsum quia dolor...';\n *    }]);\n *   </file>\n *   <file name=\"protractor.js\" type=\"protractor\">\n *      it('should have transcluded the title and the body', function() {\n *        var titleElement = element(by.model('title'));\n *        titleElement.clear();\n *        titleElement.sendKeys('TITLE');\n *        var textElement = element(by.model('text'));\n *        textElement.clear();\n *        textElement.sendKeys('TEXT');\n *        expect(element(by.css('.title')).getText()).toEqual('TITLE');\n *        expect(element(by.binding('text')).getText()).toEqual('TEXT');\n *        expect(element(by.css('.footer')).getText()).toEqual('Fallback Footer');\n *      });\n *   </file>\n * </example>\n */\nvar ngTranscludeMinErr = minErr('ngTransclude');\nvar ngTranscludeDirective = ['$compile', function($compile) {\n  return {\n    restrict: 'EAC',\n    terminal: true,\n    compile: function ngTranscludeCompile(tElement) {\n\n      // Remove and cache any original content to act as a fallback\n      var fallbackLinkFn = $compile(tElement.contents());\n      tElement.empty();\n\n      return function ngTranscludePostLink($scope, $element, $attrs, controller, $transclude) {\n\n        if (!$transclude) {\n          throw ngTranscludeMinErr('orphan',\n          'Illegal use of ngTransclude directive in the template! ' +\n          'No parent directive that requires a transclusion found. ' +\n          'Element: {0}',\n          startingTag($element));\n        }\n\n\n        // If the attribute is of the form: `ng-transclude=\"ng-transclude\"` then treat it like the default\n        if ($attrs.ngTransclude === $attrs.$attr.ngTransclude) {\n          $attrs.ngTransclude = '';\n        }\n        var slotName = $attrs.ngTransclude || $attrs.ngTranscludeSlot;\n\n        // If the slot is required and no transclusion content is provided then this call will throw an error\n        $transclude(ngTranscludeCloneAttachFn, null, slotName);\n\n        // If the slot is optional and no transclusion content is provided then use the fallback content\n        if (slotName && !$transclude.isSlotFilled(slotName)) {\n          useFallbackContent();\n        }\n\n        function ngTranscludeCloneAttachFn(clone, transcludedScope) {\n          if (clone.length && notWhitespace(clone)) {\n            $element.append(clone);\n          } else {\n            useFallbackContent();\n            // There is nothing linked against the transcluded scope since no content was available,\n            // so it should be safe to clean up the generated scope.\n            transcludedScope.$destroy();\n          }\n        }\n\n        function useFallbackContent() {\n          // Since this is the fallback content rather than the transcluded content,\n          // we link against the scope of this directive rather than the transcluded scope\n          fallbackLinkFn($scope, function(clone) {\n            $element.append(clone);\n          });\n        }\n\n        function notWhitespace(nodes) {\n          for (var i = 0, ii = nodes.length; i < ii; i++) {\n            var node = nodes[i];\n            if (node.nodeType !== NODE_TYPE_TEXT || node.nodeValue.trim()) {\n              return true;\n            }\n          }\n        }\n      };\n    }\n  };\n}];\n\n/**\n * @ngdoc directive\n * @name script\n * @restrict E\n *\n * @description\n * Load the content of a `<script>` element into {@link ng.$templateCache `$templateCache`}, so that the\n * template can be used by {@link ng.directive:ngInclude `ngInclude`},\n * {@link ngRoute.directive:ngView `ngView`}, or {@link guide/directive directives}. The type of the\n * `<script>` element must be specified as `text/ng-template`, and a cache name for the template must be\n * assigned through the element's `id`, which can then be used as a directive's `templateUrl`.\n *\n * @param {string} type Must be set to `'text/ng-template'`.\n * @param {string} id Cache name of the template.\n *\n * @example\n  <example  name=\"script-tag\">\n    <file name=\"index.html\">\n      <script type=\"text/ng-template\" id=\"/tpl.html\">\n        Content of the template.\n      </script>\n\n      <a ng-click=\"currentTpl='/tpl.html'\" id=\"tpl-link\">Load inlined template</a>\n      <div id=\"tpl-content\" ng-include src=\"currentTpl\"></div>\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n      it('should load template defined inside script tag', function() {\n        element(by.css('#tpl-link')).click();\n        expect(element(by.css('#tpl-content')).getText()).toMatch(/Content of the template/);\n      });\n    </file>\n  </example>\n */\nvar scriptDirective = ['$templateCache', function($templateCache) {\n  return {\n    restrict: 'E',\n    terminal: true,\n    compile: function(element, attr) {\n      if (attr.type === 'text/ng-template') {\n        var templateUrl = attr.id,\n            text = element[0].text;\n\n        $templateCache.put(templateUrl, text);\n      }\n    }\n  };\n}];\n\n/* exported selectDirective, optionDirective */\n\nvar noopNgModelController = { $setViewValue: noop, $render: noop };\n\nfunction setOptionSelectedStatus(optionEl, value) {\n  optionEl.prop('selected', value);\n  /**\n   * When unselecting an option, setting the property to null / false should be enough\n   * However, screenreaders might react to the selected attribute instead, see\n   * https://github.com/angular/angular.js/issues/14419\n   * Note: \"selected\" is a boolean attr and will be removed when the \"value\" arg in attr() is false\n   * or null\n   */\n  optionEl.attr('selected', value);\n}\n\n/**\n * @ngdoc type\n * @name  select.SelectController\n *\n * @description\n * The controller for the {@link ng.select select} directive. The controller exposes\n * a few utility methods that can be used to augment the behavior of a regular or an\n * {@link ng.ngOptions ngOptions} select element.\n *\n * @example\n * ### Set a custom error when the unknown option is selected\n *\n * This example sets a custom error \"unknownValue\" on the ngModelController\n * when the select element's unknown option is selected, i.e. when the model is set to a value\n * that is not matched by any option.\n *\n * <example name=\"select-unknown-value-error\" module=\"staticSelect\">\n * <file name=\"index.html\">\n * <div ng-controller=\"ExampleController\">\n *   <form name=\"myForm\">\n *     <label for=\"testSelect\"> Single select: </label><br>\n *     <select name=\"testSelect\" ng-model=\"selected\" unknown-value-error>\n *       <option value=\"option-1\">Option 1</option>\n *       <option value=\"option-2\">Option 2</option>\n *     </select><br>\n *     <span class=\"error\" ng-if=\"myForm.testSelect.$error.unknownValue\">\n *       Error: The current model doesn't match any option</span><br>\n *\n *     <button ng-click=\"forceUnknownOption()\">Force unknown option</button><br>\n *   </form>\n * </div>\n * </file>\n * <file name=\"app.js\">\n *  angular.module('staticSelect', [])\n *    .controller('ExampleController', ['$scope', function($scope) {\n *      $scope.selected = null;\n *\n *      $scope.forceUnknownOption = function() {\n *        $scope.selected = 'nonsense';\n *      };\n *   }])\n *   .directive('unknownValueError', function() {\n *     return {\n *       require: ['ngModel', 'select'],\n *       link: function(scope, element, attrs, ctrls) {\n *         var ngModelCtrl = ctrls[0];\n *         var selectCtrl = ctrls[1];\n *\n *         ngModelCtrl.$validators.unknownValue = function(modelValue, viewValue) {\n *           if (selectCtrl.$isUnknownOptionSelected()) {\n *             return false;\n *           }\n *\n *           return true;\n *         };\n *       }\n *\n *     };\n *   });\n * </file>\n *</example>\n *\n *\n * @example\n * ### Set the \"required\" error when the unknown option is selected.\n *\n * By default, the \"required\" error on the ngModelController is only set on a required select\n * when the empty option is selected. This example adds a custom directive that also sets the\n * error when the unknown option is selected.\n *\n * <example name=\"select-unknown-value-required\" module=\"staticSelect\">\n * <file name=\"index.html\">\n * <div ng-controller=\"ExampleController\">\n *   <form name=\"myForm\">\n *     <label for=\"testSelect\"> Select: </label><br>\n *     <select name=\"testSelect\" ng-model=\"selected\" required unknown-value-required>\n *       <option value=\"option-1\">Option 1</option>\n *       <option value=\"option-2\">Option 2</option>\n *     </select><br>\n *     <span class=\"error\" ng-if=\"myForm.testSelect.$error.required\">Error: Please select a value</span><br>\n *\n *     <button ng-click=\"forceUnknownOption()\">Force unknown option</button><br>\n *   </form>\n * </div>\n * </file>\n * <file name=\"app.js\">\n *  angular.module('staticSelect', [])\n *    .controller('ExampleController', ['$scope', function($scope) {\n *      $scope.selected = null;\n *\n *      $scope.forceUnknownOption = function() {\n *        $scope.selected = 'nonsense';\n *      };\n *   }])\n *   .directive('unknownValueRequired', function() {\n *     return {\n *       priority: 1, // This directive must run after the required directive has added its validator\n *       require: ['ngModel', 'select'],\n *       link: function(scope, element, attrs, ctrls) {\n *         var ngModelCtrl = ctrls[0];\n *         var selectCtrl = ctrls[1];\n *\n *         var originalRequiredValidator = ngModelCtrl.$validators.required;\n *\n *         ngModelCtrl.$validators.required = function() {\n *           if (attrs.required && selectCtrl.$isUnknownOptionSelected()) {\n *             return false;\n *           }\n *\n *           return originalRequiredValidator.apply(this, arguments);\n *         };\n *       }\n *     };\n *   });\n * </file>\n * <file name=\"protractor.js\" type=\"protractor\">\n *  it('should show the error message when the unknown option is selected', function() {\n\n      var error = element(by.className('error'));\n\n      expect(error.getText()).toBe('Error: Please select a value');\n\n      element(by.cssContainingText('option', 'Option 1')).click();\n\n      expect(error.isPresent()).toBe(false);\n\n      element(by.tagName('button')).click();\n\n      expect(error.getText()).toBe('Error: Please select a value');\n    });\n * </file>\n *</example>\n *\n *\n */\nvar SelectController =\n        ['$element', '$scope', /** @this */ function($element, $scope) {\n\n  var self = this,\n      optionsMap = new NgMap();\n\n  self.selectValueMap = {}; // Keys are the hashed values, values the original values\n\n  // If the ngModel doesn't get provided then provide a dummy noop version to prevent errors\n  self.ngModelCtrl = noopNgModelController;\n  self.multiple = false;\n\n  // The \"unknown\" option is one that is prepended to the list if the viewValue\n  // does not match any of the options. When it is rendered the value of the unknown\n  // option is '? XXX ?' where XXX is the hashKey of the value that is not known.\n  //\n  // Support: IE 9 only\n  // We can't just jqLite('<option>') since jqLite is not smart enough\n  // to create it in <select> and IE barfs otherwise.\n  self.unknownOption = jqLite(window.document.createElement('option'));\n\n  // The empty option is an option with the value '' that the application developer can\n  // provide inside the select. It is always selectable and indicates that a \"null\" selection has\n  // been made by the user.\n  // If the select has an empty option, and the model of the select is set to \"undefined\" or \"null\",\n  // the empty option is selected.\n  // If the model is set to a different unmatched value, the unknown option is rendered and\n  // selected, i.e both are present, because a \"null\" selection and an unknown value are different.\n  self.hasEmptyOption = false;\n  self.emptyOption = undefined;\n\n  self.renderUnknownOption = function(val) {\n    var unknownVal = self.generateUnknownOptionValue(val);\n    self.unknownOption.val(unknownVal);\n    $element.prepend(self.unknownOption);\n    setOptionSelectedStatus(self.unknownOption, true);\n    $element.val(unknownVal);\n  };\n\n  self.updateUnknownOption = function(val) {\n    var unknownVal = self.generateUnknownOptionValue(val);\n    self.unknownOption.val(unknownVal);\n    setOptionSelectedStatus(self.unknownOption, true);\n    $element.val(unknownVal);\n  };\n\n  self.generateUnknownOptionValue = function(val) {\n    return '? ' + hashKey(val) + ' ?';\n  };\n\n  self.removeUnknownOption = function() {\n    if (self.unknownOption.parent()) self.unknownOption.remove();\n  };\n\n  self.selectEmptyOption = function() {\n    if (self.emptyOption) {\n      $element.val('');\n      setOptionSelectedStatus(self.emptyOption, true);\n    }\n  };\n\n  self.unselectEmptyOption = function() {\n    if (self.hasEmptyOption) {\n      setOptionSelectedStatus(self.emptyOption, false);\n    }\n  };\n\n  $scope.$on('$destroy', function() {\n    // disable unknown option so that we don't do work when the whole select is being destroyed\n    self.renderUnknownOption = noop;\n  });\n\n  // Read the value of the select control, the implementation of this changes depending\n  // upon whether the select can have multiple values and whether ngOptions is at work.\n  self.readValue = function readSingleValue() {\n    var val = $element.val();\n    // ngValue added option values are stored in the selectValueMap, normal interpolations are not\n    var realVal = val in self.selectValueMap ? self.selectValueMap[val] : val;\n\n    if (self.hasOption(realVal)) {\n      return realVal;\n    }\n\n    return null;\n  };\n\n\n  // Write the value to the select control, the implementation of this changes depending\n  // upon whether the select can have multiple values and whether ngOptions is at work.\n  self.writeValue = function writeSingleValue(value) {\n    // Make sure to remove the selected attribute from the previously selected option\n    // Otherwise, screen readers might get confused\n    var currentlySelectedOption = $element[0].options[$element[0].selectedIndex];\n    if (currentlySelectedOption) setOptionSelectedStatus(jqLite(currentlySelectedOption), false);\n\n    if (self.hasOption(value)) {\n      self.removeUnknownOption();\n\n      var hashedVal = hashKey(value);\n      $element.val(hashedVal in self.selectValueMap ? hashedVal : value);\n\n      // Set selected attribute and property on selected option for screen readers\n      var selectedOption = $element[0].options[$element[0].selectedIndex];\n      setOptionSelectedStatus(jqLite(selectedOption), true);\n    } else {\n      self.selectUnknownOrEmptyOption(value);\n    }\n  };\n\n\n  // Tell the select control that an option, with the given value, has been added\n  self.addOption = function(value, element) {\n    // Skip comment nodes, as they only pollute the `optionsMap`\n    if (element[0].nodeType === NODE_TYPE_COMMENT) return;\n\n    assertNotHasOwnProperty(value, '\"option value\"');\n    if (value === '') {\n      self.hasEmptyOption = true;\n      self.emptyOption = element;\n    }\n    var count = optionsMap.get(value) || 0;\n    optionsMap.set(value, count + 1);\n    // Only render at the end of a digest. This improves render performance when many options\n    // are added during a digest and ensures all relevant options are correctly marked as selected\n    scheduleRender();\n  };\n\n  // Tell the select control that an option, with the given value, has been removed\n  self.removeOption = function(value) {\n    var count = optionsMap.get(value);\n    if (count) {\n      if (count === 1) {\n        optionsMap.delete(value);\n        if (value === '') {\n          self.hasEmptyOption = false;\n          self.emptyOption = undefined;\n        }\n      } else {\n        optionsMap.set(value, count - 1);\n      }\n    }\n  };\n\n  // Check whether the select control has an option matching the given value\n  self.hasOption = function(value) {\n    return !!optionsMap.get(value);\n  };\n\n  /**\n   * @ngdoc method\n   * @name select.SelectController#$hasEmptyOption\n   *\n   * @description\n   *\n   * Returns `true` if the select element currently has an empty option\n   * element, i.e. an option that signifies that the select is empty / the selection is null.\n   *\n   */\n  self.$hasEmptyOption = function() {\n    return self.hasEmptyOption;\n  };\n\n  /**\n   * @ngdoc method\n   * @name select.SelectController#$isUnknownOptionSelected\n   *\n   * @description\n   *\n   * Returns `true` if the select element's unknown option is selected. The unknown option is added\n   * and automatically selected whenever the select model doesn't match any option.\n   *\n   */\n  self.$isUnknownOptionSelected = function() {\n    // Presence of the unknown option means it is selected\n    return $element[0].options[0] === self.unknownOption[0];\n  };\n\n  /**\n   * @ngdoc method\n   * @name select.SelectController#$isEmptyOptionSelected\n   *\n   * @description\n   *\n   * Returns `true` if the select element has an empty option and this empty option is currently\n   * selected. Returns `false` if the select element has no empty option or it is not selected.\n   *\n   */\n  self.$isEmptyOptionSelected = function() {\n    return self.hasEmptyOption && $element[0].options[$element[0].selectedIndex] === self.emptyOption[0];\n  };\n\n  self.selectUnknownOrEmptyOption = function(value) {\n    if (value == null && self.emptyOption) {\n      self.removeUnknownOption();\n      self.selectEmptyOption();\n    } else if (self.unknownOption.parent().length) {\n      self.updateUnknownOption(value);\n    } else {\n      self.renderUnknownOption(value);\n    }\n  };\n\n  var renderScheduled = false;\n  function scheduleRender() {\n    if (renderScheduled) return;\n    renderScheduled = true;\n    $scope.$$postDigest(function() {\n      renderScheduled = false;\n      self.ngModelCtrl.$render();\n    });\n  }\n\n  var updateScheduled = false;\n  function scheduleViewValueUpdate(renderAfter) {\n    if (updateScheduled) return;\n\n    updateScheduled = true;\n\n    $scope.$$postDigest(function() {\n      if ($scope.$$destroyed) return;\n\n      updateScheduled = false;\n      self.ngModelCtrl.$setViewValue(self.readValue());\n      if (renderAfter) self.ngModelCtrl.$render();\n    });\n  }\n\n\n  self.registerOption = function(optionScope, optionElement, optionAttrs, interpolateValueFn, interpolateTextFn) {\n\n    if (optionAttrs.$attr.ngValue) {\n      // The value attribute is set by ngValue\n      var oldVal, hashedVal = NaN;\n      optionAttrs.$observe('value', function valueAttributeObserveAction(newVal) {\n\n        var removal;\n        var previouslySelected = optionElement.prop('selected');\n\n        if (isDefined(hashedVal)) {\n          self.removeOption(oldVal);\n          delete self.selectValueMap[hashedVal];\n          removal = true;\n        }\n\n        hashedVal = hashKey(newVal);\n        oldVal = newVal;\n        self.selectValueMap[hashedVal] = newVal;\n        self.addOption(newVal, optionElement);\n        // Set the attribute directly instead of using optionAttrs.$set - this stops the observer\n        // from firing a second time. Other $observers on value will also get the result of the\n        // ngValue expression, not the hashed value\n        optionElement.attr('value', hashedVal);\n\n        if (removal && previouslySelected) {\n          scheduleViewValueUpdate();\n        }\n\n      });\n    } else if (interpolateValueFn) {\n      // The value attribute is interpolated\n      optionAttrs.$observe('value', function valueAttributeObserveAction(newVal) {\n        // This method is overwritten in ngOptions and has side-effects!\n        self.readValue();\n\n        var removal;\n        var previouslySelected = optionElement.prop('selected');\n\n        if (isDefined(oldVal)) {\n          self.removeOption(oldVal);\n          removal = true;\n        }\n        oldVal = newVal;\n        self.addOption(newVal, optionElement);\n\n        if (removal && previouslySelected) {\n          scheduleViewValueUpdate();\n        }\n      });\n    } else if (interpolateTextFn) {\n      // The text content is interpolated\n      optionScope.$watch(interpolateTextFn, function interpolateWatchAction(newVal, oldVal) {\n        optionAttrs.$set('value', newVal);\n        var previouslySelected = optionElement.prop('selected');\n        if (oldVal !== newVal) {\n          self.removeOption(oldVal);\n        }\n        self.addOption(newVal, optionElement);\n\n        if (oldVal && previouslySelected) {\n          scheduleViewValueUpdate();\n        }\n      });\n    } else {\n      // The value attribute is static\n      self.addOption(optionAttrs.value, optionElement);\n    }\n\n\n    optionAttrs.$observe('disabled', function(newVal) {\n\n      // Since model updates will also select disabled options (like ngOptions),\n      // we only have to handle options becoming disabled, not enabled\n\n      if (newVal === 'true' || newVal && optionElement.prop('selected')) {\n        if (self.multiple) {\n          scheduleViewValueUpdate(true);\n        } else {\n          self.ngModelCtrl.$setViewValue(null);\n          self.ngModelCtrl.$render();\n        }\n      }\n    });\n\n    optionElement.on('$destroy', function() {\n      var currentValue = self.readValue();\n      var removeValue = optionAttrs.value;\n\n      self.removeOption(removeValue);\n      scheduleRender();\n\n      if (self.multiple && currentValue && currentValue.indexOf(removeValue) !== -1 ||\n          currentValue === removeValue\n      ) {\n        // When multiple (selected) options are destroyed at the same time, we don't want\n        // to run a model update for each of them. Instead, run a single update in the $$postDigest\n        scheduleViewValueUpdate(true);\n      }\n    });\n  };\n}];\n\n/**\n * @ngdoc directive\n * @name select\n * @restrict E\n *\n * @description\n * HTML `select` element with angular data-binding.\n *\n * The `select` directive is used together with {@link ngModel `ngModel`} to provide data-binding\n * between the scope and the `<select>` control (including setting default values).\n * It also handles dynamic `<option>` elements, which can be added using the {@link ngRepeat `ngRepeat}` or\n * {@link ngOptions `ngOptions`} directives.\n *\n * When an item in the `<select>` menu is selected, the value of the selected option will be bound\n * to the model identified by the `ngModel` directive. With static or repeated options, this is\n * the content of the `value` attribute or the textContent of the `<option>`, if the value attribute is missing.\n * Value and textContent can be interpolated.\n *\n * The {@link select.SelectController select controller} exposes utility functions that can be used\n * to manipulate the select's behavior.\n *\n * ## Matching model and option values\n *\n * In general, the match between the model and an option is evaluated by strictly comparing the model\n * value against the value of the available options.\n *\n * If you are setting the option value with the option's `value` attribute, or textContent, the\n * value will always be a `string` which means that the model value must also be a string.\n * Otherwise the `select` directive cannot match them correctly.\n *\n * To bind the model to a non-string value, you can use one of the following strategies:\n * - the {@link ng.ngOptions `ngOptions`} directive\n *   ({@link ng.select#using-select-with-ngoptions-and-setting-a-default-value})\n * - the {@link ng.ngValue `ngValue`} directive, which allows arbitrary expressions to be\n *   option values ({@link ng.select#using-ngvalue-to-bind-the-model-to-an-array-of-objects Example})\n * - model $parsers / $formatters to convert the string value\n *   ({@link ng.select#binding-select-to-a-non-string-value-via-ngmodel-parsing-formatting Example})\n *\n * If the viewValue of `ngModel` does not match any of the options, then the control\n * will automatically add an \"unknown\" option, which it then removes when the mismatch is resolved.\n *\n * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can\n * be nested into the `<select>` element. This element will then represent the `null` or \"not selected\"\n * option. See example below for demonstration.\n *\n * ## Choosing between `ngRepeat` and `ngOptions`\n *\n * In many cases, `ngRepeat` can be used on `<option>` elements instead of {@link ng.directive:ngOptions\n * ngOptions} to achieve a similar result. However, `ngOptions` provides some benefits:\n * - more flexibility in how the `<select>`'s model is assigned via the `select` **`as`** part of the\n * comprehension expression\n * - reduced memory consumption by not creating a new scope for each repeated instance\n * - increased render speed by creating the options in a documentFragment instead of individually\n *\n * Specifically, select with repeated options slows down significantly starting at 2000 options in\n * Chrome and Internet Explorer / Edge.\n *\n *\n * @param {string} ngModel Assignable angular expression to data-bind to.\n * @param {string=} name Property name of the form under which the control is published.\n * @param {string=} multiple Allows multiple options to be selected. The selected values will be\n *     bound to the model as an array.\n * @param {string=} required Sets `required` validation error key if the value is not entered.\n * @param {string=} ngRequired Adds required attribute and required validation constraint to\n * the element when the ngRequired expression evaluates to true. Use ngRequired instead of required\n * when you want to data-bind to the required attribute.\n * @param {string=} ngChange Angular expression to be executed when selected option(s) changes due to user\n *    interaction with the select element.\n * @param {string=} ngOptions sets the options that the select is populated with and defines what is\n * set on the model on selection. See {@link ngOptions `ngOptions`}.\n * @param {string=} ngAttrSize sets the size of the select element dynamically. Uses the\n * {@link guide/interpolation#-ngattr-for-binding-to-arbitrary-attributes ngAttr} directive.\n *\n *\n * @knownIssue\n *\n * In Firefox, the select model is only updated when the select element is blurred. For example,\n * when switching between options with the keyboard, the select model is only set to the\n * currently selected option when the select is blurred, e.g via tab key or clicking the mouse\n * outside the select.\n *\n * This is due to an ambiguity in the select element specification. See the\n * [issue on the Firefox bug tracker](https://bugzilla.mozilla.org/show_bug.cgi?id=126379)\n * for more information, and this\n * [Github comment for a workaround](https://github.com/angular/angular.js/issues/9134#issuecomment-130800488)\n *\n * @example\n * ### Simple `select` elements with static options\n *\n * <example name=\"static-select\" module=\"staticSelect\">\n * <file name=\"index.html\">\n * <div ng-controller=\"ExampleController\">\n *   <form name=\"myForm\">\n *     <label for=\"singleSelect\"> Single select: </label><br>\n *     <select name=\"singleSelect\" ng-model=\"data.singleSelect\">\n *       <option value=\"option-1\">Option 1</option>\n *       <option value=\"option-2\">Option 2</option>\n *     </select><br>\n *\n *     <label for=\"singleSelect\"> Single select with \"not selected\" option and dynamic option values: </label><br>\n *     <select name=\"singleSelect\" id=\"singleSelect\" ng-model=\"data.singleSelect\">\n *       <option value=\"\">---Please select---</option> <!-- not selected / blank option -->\n *       <option value=\"{{data.option1}}\">Option 1</option> <!-- interpolation -->\n *       <option value=\"option-2\">Option 2</option>\n *     </select><br>\n *     <button ng-click=\"forceUnknownOption()\">Force unknown option</button><br>\n *     <tt>singleSelect = {{data.singleSelect}}</tt>\n *\n *     <hr>\n *     <label for=\"multipleSelect\"> Multiple select: </label><br>\n *     <select name=\"multipleSelect\" id=\"multipleSelect\" ng-model=\"data.multipleSelect\" multiple>\n *       <option value=\"option-1\">Option 1</option>\n *       <option value=\"option-2\">Option 2</option>\n *       <option value=\"option-3\">Option 3</option>\n *     </select><br>\n *     <tt>multipleSelect = {{data.multipleSelect}}</tt><br/>\n *   </form>\n * </div>\n * </file>\n * <file name=\"app.js\">\n *  angular.module('staticSelect', [])\n *    .controller('ExampleController', ['$scope', function($scope) {\n *      $scope.data = {\n *       singleSelect: null,\n *       multipleSelect: [],\n *       option1: 'option-1'\n *      };\n *\n *      $scope.forceUnknownOption = function() {\n *        $scope.data.singleSelect = 'nonsense';\n *      };\n *   }]);\n * </file>\n *</example>\n *\n * @example\n * ### Using `ngRepeat` to generate `select` options\n * <example name=\"select-ngrepeat\" module=\"ngrepeatSelect\">\n * <file name=\"index.html\">\n * <div ng-controller=\"ExampleController\">\n *   <form name=\"myForm\">\n *     <label for=\"repeatSelect\"> Repeat select: </label>\n *     <select name=\"repeatSelect\" id=\"repeatSelect\" ng-model=\"data.model\">\n *       <option ng-repeat=\"option in data.availableOptions\" value=\"{{option.id}}\">{{option.name}}</option>\n *     </select>\n *   </form>\n *   <hr>\n *   <tt>model = {{data.model}}</tt><br/>\n * </div>\n * </file>\n * <file name=\"app.js\">\n *  angular.module('ngrepeatSelect', [])\n *    .controller('ExampleController', ['$scope', function($scope) {\n *      $scope.data = {\n *       model: null,\n *       availableOptions: [\n *         {id: '1', name: 'Option A'},\n *         {id: '2', name: 'Option B'},\n *         {id: '3', name: 'Option C'}\n *       ]\n *      };\n *   }]);\n * </file>\n *</example>\n *\n * @example\n * ### Using `ngValue` to bind the model to an array of objects\n * <example name=\"select-ngvalue\" module=\"ngvalueSelect\">\n * <file name=\"index.html\">\n * <div ng-controller=\"ExampleController\">\n *   <form name=\"myForm\">\n *     <label for=\"ngvalueselect\"> ngvalue select: </label>\n *     <select size=\"6\" name=\"ngvalueselect\" ng-model=\"data.model\" multiple>\n *       <option ng-repeat=\"option in data.availableOptions\" ng-value=\"option.value\">{{option.name}}</option>\n *     </select>\n *   </form>\n *   <hr>\n *   <pre>model = {{data.model | json}}</pre><br/>\n * </div>\n * </file>\n * <file name=\"app.js\">\n *  angular.module('ngvalueSelect', [])\n *    .controller('ExampleController', ['$scope', function($scope) {\n *      $scope.data = {\n *       model: null,\n *       availableOptions: [\n           {value: 'myString', name: 'string'},\n           {value: 1, name: 'integer'},\n           {value: true, name: 'boolean'},\n           {value: null, name: 'null'},\n           {value: {prop: 'value'}, name: 'object'},\n           {value: ['a'], name: 'array'}\n *       ]\n *      };\n *   }]);\n * </file>\n *</example>\n *\n * @example\n * ### Using `select` with `ngOptions` and setting a default value\n * See the {@link ngOptions ngOptions documentation} for more `ngOptions` usage examples.\n *\n * <example name=\"select-with-default-values\" module=\"defaultValueSelect\">\n * <file name=\"index.html\">\n * <div ng-controller=\"ExampleController\">\n *   <form name=\"myForm\">\n *     <label for=\"mySelect\">Make a choice:</label>\n *     <select name=\"mySelect\" id=\"mySelect\"\n *       ng-options=\"option.name for option in data.availableOptions track by option.id\"\n *       ng-model=\"data.selectedOption\"></select>\n *   </form>\n *   <hr>\n *   <tt>option = {{data.selectedOption}}</tt><br/>\n * </div>\n * </file>\n * <file name=\"app.js\">\n *  angular.module('defaultValueSelect', [])\n *    .controller('ExampleController', ['$scope', function($scope) {\n *      $scope.data = {\n *       availableOptions: [\n *         {id: '1', name: 'Option A'},\n *         {id: '2', name: 'Option B'},\n *         {id: '3', name: 'Option C'}\n *       ],\n *       selectedOption: {id: '3', name: 'Option C'} //This sets the default value of the select in the ui\n *       };\n *   }]);\n * </file>\n *</example>\n *\n * @example\n * ### Binding `select` to a non-string value via `ngModel` parsing / formatting\n *\n * <example name=\"select-with-non-string-options\" module=\"nonStringSelect\">\n *   <file name=\"index.html\">\n *     <select ng-model=\"model.id\" convert-to-number>\n *       <option value=\"0\">Zero</option>\n *       <option value=\"1\">One</option>\n *       <option value=\"2\">Two</option>\n *     </select>\n *     {{ model }}\n *   </file>\n *   <file name=\"app.js\">\n *     angular.module('nonStringSelect', [])\n *       .run(function($rootScope) {\n *         $rootScope.model = { id: 2 };\n *       })\n *       .directive('convertToNumber', function() {\n *         return {\n *           require: 'ngModel',\n *           link: function(scope, element, attrs, ngModel) {\n *             ngModel.$parsers.push(function(val) {\n *               return parseInt(val, 10);\n *             });\n *             ngModel.$formatters.push(function(val) {\n *               return '' + val;\n *             });\n *           }\n *         };\n *       });\n *   </file>\n *   <file name=\"protractor.js\" type=\"protractor\">\n *     it('should initialize to model', function() {\n *       expect(element(by.model('model.id')).$('option:checked').getText()).toEqual('Two');\n *     });\n *   </file>\n * </example>\n *\n */\nvar selectDirective = function() {\n\n  return {\n    restrict: 'E',\n    require: ['select', '?ngModel'],\n    controller: SelectController,\n    priority: 1,\n    link: {\n      pre: selectPreLink,\n      post: selectPostLink\n    }\n  };\n\n  function selectPreLink(scope, element, attr, ctrls) {\n\n      var selectCtrl = ctrls[0];\n      var ngModelCtrl = ctrls[1];\n\n      // if ngModel is not defined, we don't need to do anything but set the registerOption\n      // function to noop, so options don't get added internally\n      if (!ngModelCtrl) {\n        selectCtrl.registerOption = noop;\n        return;\n      }\n\n\n      selectCtrl.ngModelCtrl = ngModelCtrl;\n\n      // When the selected item(s) changes we delegate getting the value of the select control\n      // to the `readValue` method, which can be changed if the select can have multiple\n      // selected values or if the options are being generated by `ngOptions`\n      element.on('change', function() {\n        selectCtrl.removeUnknownOption();\n        scope.$apply(function() {\n          ngModelCtrl.$setViewValue(selectCtrl.readValue());\n        });\n      });\n\n      // If the select allows multiple values then we need to modify how we read and write\n      // values from and to the control; also what it means for the value to be empty and\n      // we have to add an extra watch since ngModel doesn't work well with arrays - it\n      // doesn't trigger rendering if only an item in the array changes.\n      if (attr.multiple) {\n        selectCtrl.multiple = true;\n\n        // Read value now needs to check each option to see if it is selected\n        selectCtrl.readValue = function readMultipleValue() {\n          var array = [];\n          forEach(element.find('option'), function(option) {\n            if (option.selected && !option.disabled) {\n              var val = option.value;\n              array.push(val in selectCtrl.selectValueMap ? selectCtrl.selectValueMap[val] : val);\n            }\n          });\n          return array;\n        };\n\n        // Write value now needs to set the selected property of each matching option\n        selectCtrl.writeValue = function writeMultipleValue(value) {\n          forEach(element.find('option'), function(option) {\n            var shouldBeSelected = !!value && (includes(value, option.value) ||\n                                               includes(value, selectCtrl.selectValueMap[option.value]));\n            var currentlySelected = option.selected;\n\n            // Support: IE 9-11 only, Edge 12-15+\n            // In IE and Edge adding options to the selection via shift+click/UP/DOWN\n            // will de-select already selected options if \"selected\" on those options was set\n            // more than once (i.e. when the options were already selected)\n            // So we only modify the selected property if necessary.\n            // Note: this behavior cannot be replicated via unit tests because it only shows in the\n            // actual user interface.\n            if (shouldBeSelected !== currentlySelected) {\n              setOptionSelectedStatus(jqLite(option), shouldBeSelected);\n            }\n\n          });\n        };\n\n        // we have to do it on each watch since ngModel watches reference, but\n        // we need to work of an array, so we need to see if anything was inserted/removed\n        var lastView, lastViewRef = NaN;\n        scope.$watch(function selectMultipleWatch() {\n          if (lastViewRef === ngModelCtrl.$viewValue && !equals(lastView, ngModelCtrl.$viewValue)) {\n            lastView = shallowCopy(ngModelCtrl.$viewValue);\n            ngModelCtrl.$render();\n          }\n          lastViewRef = ngModelCtrl.$viewValue;\n        });\n\n        // If we are a multiple select then value is now a collection\n        // so the meaning of $isEmpty changes\n        ngModelCtrl.$isEmpty = function(value) {\n          return !value || value.length === 0;\n        };\n\n      }\n    }\n\n    function selectPostLink(scope, element, attrs, ctrls) {\n      // if ngModel is not defined, we don't need to do anything\n      var ngModelCtrl = ctrls[1];\n      if (!ngModelCtrl) return;\n\n      var selectCtrl = ctrls[0];\n\n      // We delegate rendering to the `writeValue` method, which can be changed\n      // if the select can have multiple selected values or if the options are being\n      // generated by `ngOptions`.\n      // This must be done in the postLink fn to prevent $render to be called before\n      // all nodes have been linked correctly.\n      ngModelCtrl.$render = function() {\n        selectCtrl.writeValue(ngModelCtrl.$viewValue);\n      };\n    }\n};\n\n\n// The option directive is purely designed to communicate the existence (or lack of)\n// of dynamically created (and destroyed) option elements to their containing select\n// directive via its controller.\nvar optionDirective = ['$interpolate', function($interpolate) {\n  return {\n    restrict: 'E',\n    priority: 100,\n    compile: function(element, attr) {\n      var interpolateValueFn, interpolateTextFn;\n\n      if (isDefined(attr.ngValue)) {\n        // Will be handled by registerOption\n      } else if (isDefined(attr.value)) {\n        // If the value attribute is defined, check if it contains an interpolation\n        interpolateValueFn = $interpolate(attr.value, true);\n      } else {\n        // If the value attribute is not defined then we fall back to the\n        // text content of the option element, which may be interpolated\n        interpolateTextFn = $interpolate(element.text(), true);\n        if (!interpolateTextFn) {\n          attr.$set('value', element.text());\n        }\n      }\n\n      return function(scope, element, attr) {\n        // This is an optimization over using ^^ since we don't want to have to search\n        // all the way to the root of the DOM for every single option element\n        var selectCtrlName = '$selectController',\n            parent = element.parent(),\n            selectCtrl = parent.data(selectCtrlName) ||\n              parent.parent().data(selectCtrlName); // in case we are in optgroup\n\n        if (selectCtrl) {\n          selectCtrl.registerOption(scope, element, attr, interpolateValueFn, interpolateTextFn);\n        }\n      };\n    }\n  };\n}];\n\n/**\n * @ngdoc directive\n * @name ngRequired\n * @restrict A\n *\n * @param {expression} ngRequired AngularJS expression. If it evaluates to `true`, it sets the\n *                                `required` attribute to the element and adds the `required`\n *                                {@link ngModel.NgModelController#$validators `validator`}.\n *\n * @description\n *\n * ngRequired adds the required {@link ngModel.NgModelController#$validators `validator`} to {@link ngModel `ngModel`}.\n * It is most often used for {@link input `input`} and {@link select `select`} controls, but can also be\n * applied to custom controls.\n *\n * The directive sets the `required` attribute on the element if the Angular expression inside\n * `ngRequired` evaluates to true. A special directive for setting `required` is necessary because we\n * cannot use interpolation inside `required`. See the {@link guide/interpolation interpolation guide}\n * for more info.\n *\n * The validator will set the `required` error key to true if the `required` attribute is set and\n * calling {@link ngModel.NgModelController#$isEmpty `NgModelController.$isEmpty`} with the\n * {@link ngModel.NgModelController#$viewValue `ngModel.$viewValue`} returns `true`. For example, the\n * `$isEmpty()` implementation for `input[text]` checks the length of the `$viewValue`. When developing\n * custom controls, `$isEmpty()` can be overwritten to account for a $viewValue that is not string-based.\n *\n * @example\n * <example name=\"ngRequiredDirective\" module=\"ngRequiredExample\">\n *   <file name=\"index.html\">\n *     <script>\n *       angular.module('ngRequiredExample', [])\n *         .controller('ExampleController', ['$scope', function($scope) {\n *           $scope.required = true;\n *         }]);\n *     </script>\n *     <div ng-controller=\"ExampleController\">\n *       <form name=\"form\">\n *         <label for=\"required\">Toggle required: </label>\n *         <input type=\"checkbox\" ng-model=\"required\" id=\"required\" />\n *         <br>\n *         <label for=\"input\">This input must be filled if `required` is true: </label>\n *         <input type=\"text\" ng-model=\"model\" id=\"input\" name=\"input\" ng-required=\"required\" /><br>\n *         <hr>\n *         required error set? = <code>{{form.input.$error.required}}</code><br>\n *         model = <code>{{model}}</code>\n *       </form>\n *     </div>\n *   </file>\n *   <file name=\"protractor.js\" type=\"protractor\">\n       var required = element(by.binding('form.input.$error.required'));\n       var model = element(by.binding('model'));\n       var input = element(by.id('input'));\n\n       it('should set the required error', function() {\n         expect(required.getText()).toContain('true');\n\n         input.sendKeys('123');\n         expect(required.getText()).not.toContain('true');\n         expect(model.getText()).toContain('123');\n       });\n *   </file>\n * </example>\n */\nvar requiredDirective = function() {\n  return {\n    restrict: 'A',\n    require: '?ngModel',\n    link: function(scope, elm, attr, ctrl) {\n      if (!ctrl) return;\n      attr.required = true; // force truthy in case we are on non input element\n\n      ctrl.$validators.required = function(modelValue, viewValue) {\n        return !attr.required || !ctrl.$isEmpty(viewValue);\n      };\n\n      attr.$observe('required', function() {\n        ctrl.$validate();\n      });\n    }\n  };\n};\n\n/**\n * @ngdoc directive\n * @name ngPattern\n * @restrict A\n *\n * @param {expression|RegExp} ngPattern AngularJS expression that must evaluate to a `RegExp` or a `String`\n *                                      parsable into a `RegExp`, or a `RegExp` literal. See above for\n *                                      more details.\n *\n * @description\n *\n * ngPattern adds the pattern {@link ngModel.NgModelController#$validators `validator`} to {@link ngModel `ngModel`}.\n * It is most often used for text-based {@link input `input`} controls, but can also be applied to custom text-based controls.\n *\n * The validator sets the `pattern` error key if the {@link ngModel.NgModelController#$viewValue `ngModel.$viewValue`}\n * does not match a RegExp which is obtained from the `ngPattern` attribute value:\n * - the value is an AngularJS expression:\n *   - If the expression evaluates to a RegExp object, then this is used directly.\n *   - If the expression evaluates to a string, then it will be converted to a RegExp after wrapping it\n *     in `^` and `$` characters. For instance, `\"abc\"` will be converted to `new RegExp('^abc$')`.\n * - If the value is a RegExp literal, e.g. `ngPattern=\"/^\\d+$/\"`, it is used directly.\n *\n * <div class=\"alert alert-info\">\n * **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to\n * start at the index of the last search's match, thus not taking the whole input value into\n * account.\n * </div>\n *\n * <div class=\"alert alert-info\">\n * **Note:** This directive is also added when the plain `pattern` attribute is used, with two\n * differences:\n * <ol>\n *   <li>\n *     `ngPattern` does not set the `pattern` attribute and therefore HTML5 constraint validation is\n *     not available.\n *   </li>\n *   <li>\n *     The `ngPattern` attribute must be an expression, while the `pattern` value must be\n *     interpolated.\n *   </li>\n * </ol>\n * </div>\n *\n * @example\n * <example name=\"ngPatternDirective\" module=\"ngPatternExample\">\n *   <file name=\"index.html\">\n *     <script>\n *       angular.module('ngPatternExample', [])\n *         .controller('ExampleController', ['$scope', function($scope) {\n *           $scope.regex = '\\\\d+';\n *         }]);\n *     </script>\n *     <div ng-controller=\"ExampleController\">\n *       <form name=\"form\">\n *         <label for=\"regex\">Set a pattern (regex string): </label>\n *         <input type=\"text\" ng-model=\"regex\" id=\"regex\" />\n *         <br>\n *         <label for=\"input\">This input is restricted by the current pattern: </label>\n *         <input type=\"text\" ng-model=\"model\" id=\"input\" name=\"input\" ng-pattern=\"regex\" /><br>\n *         <hr>\n *         input valid? = <code>{{form.input.$valid}}</code><br>\n *         model = <code>{{model}}</code>\n *       </form>\n *     </div>\n *   </file>\n *   <file name=\"protractor.js\" type=\"protractor\">\n       var model = element(by.binding('model'));\n       var input = element(by.id('input'));\n\n       it('should validate the input with the default pattern', function() {\n         input.sendKeys('aaa');\n         expect(model.getText()).not.toContain('aaa');\n\n         input.clear().then(function() {\n           input.sendKeys('123');\n           expect(model.getText()).toContain('123');\n         });\n       });\n *   </file>\n * </example>\n */\nvar patternDirective = function() {\n  return {\n    restrict: 'A',\n    require: '?ngModel',\n    link: function(scope, elm, attr, ctrl) {\n      if (!ctrl) return;\n\n      var regexp, patternExp = attr.ngPattern || attr.pattern;\n      attr.$observe('pattern', function(regex) {\n        if (isString(regex) && regex.length > 0) {\n          regex = new RegExp('^' + regex + '$');\n        }\n\n        if (regex && !regex.test) {\n          throw minErr('ngPattern')('noregexp',\n            'Expected {0} to be a RegExp but was {1}. Element: {2}', patternExp,\n            regex, startingTag(elm));\n        }\n\n        regexp = regex || undefined;\n        ctrl.$validate();\n      });\n\n      ctrl.$validators.pattern = function(modelValue, viewValue) {\n        // HTML5 pattern constraint validates the input value, so we validate the viewValue\n        return ctrl.$isEmpty(viewValue) || isUndefined(regexp) || regexp.test(viewValue);\n      };\n    }\n  };\n};\n\n/**\n * @ngdoc directive\n * @name ngMaxlength\n * @restrict A\n *\n * @param {expression} ngMaxlength AngularJS expression that must evaluate to a `Number` or `String`\n *                                 parsable into a `Number`. Used as value for the `maxlength`\n *                                 {@link ngModel.NgModelController#$validators validator}.\n *\n * @description\n *\n * ngMaxlength adds the maxlength {@link ngModel.NgModelController#$validators `validator`} to {@link ngModel `ngModel`}.\n * It is most often used for text-based {@link input `input`} controls, but can also be applied to custom text-based controls.\n *\n * The validator sets the `maxlength` error key if the {@link ngModel.NgModelController#$viewValue `ngModel.$viewValue`}\n * is longer than the integer obtained by evaluating the Angular expression given in the\n * `ngMaxlength` attribute value.\n *\n * <div class=\"alert alert-info\">\n * **Note:** This directive is also added when the plain `maxlength` attribute is used, with two\n * differences:\n * <ol>\n *   <li>\n *     `ngMaxlength` does not set the `maxlength` attribute and therefore HTML5 constraint\n *     validation is not available.\n *   </li>\n *   <li>\n *     The `ngMaxlength` attribute must be an expression, while the `maxlength` value must be\n *     interpolated.\n *   </li>\n * </ol>\n * </div>\n *\n * @example\n * <example name=\"ngMaxlengthDirective\" module=\"ngMaxlengthExample\">\n *   <file name=\"index.html\">\n *     <script>\n *       angular.module('ngMaxlengthExample', [])\n *         .controller('ExampleController', ['$scope', function($scope) {\n *           $scope.maxlength = 5;\n *         }]);\n *     </script>\n *     <div ng-controller=\"ExampleController\">\n *       <form name=\"form\">\n *         <label for=\"maxlength\">Set a maxlength: </label>\n *         <input type=\"number\" ng-model=\"maxlength\" id=\"maxlength\" />\n *         <br>\n *         <label for=\"input\">This input is restricted by the current maxlength: </label>\n *         <input type=\"text\" ng-model=\"model\" id=\"input\" name=\"input\" ng-maxlength=\"maxlength\" /><br>\n *         <hr>\n *         input valid? = <code>{{form.input.$valid}}</code><br>\n *         model = <code>{{model}}</code>\n *       </form>\n *     </div>\n *   </file>\n *   <file name=\"protractor.js\" type=\"protractor\">\n       var model = element(by.binding('model'));\n       var input = element(by.id('input'));\n\n       it('should validate the input with the default maxlength', function() {\n         input.sendKeys('abcdef');\n         expect(model.getText()).not.toContain('abcdef');\n\n         input.clear().then(function() {\n           input.sendKeys('abcde');\n           expect(model.getText()).toContain('abcde');\n         });\n       });\n *   </file>\n * </example>\n */\nvar maxlengthDirective = function() {\n  return {\n    restrict: 'A',\n    require: '?ngModel',\n    link: function(scope, elm, attr, ctrl) {\n      if (!ctrl) return;\n\n      var maxlength = -1;\n      attr.$observe('maxlength', function(value) {\n        var intVal = toInt(value);\n        maxlength = isNumberNaN(intVal) ? -1 : intVal;\n        ctrl.$validate();\n      });\n      ctrl.$validators.maxlength = function(modelValue, viewValue) {\n        return (maxlength < 0) || ctrl.$isEmpty(viewValue) || (viewValue.length <= maxlength);\n      };\n    }\n  };\n};\n\n/**\n * @ngdoc directive\n * @name ngMinlength\n * @restrict A\n *\n * @param {expression} ngMinlength AngularJS expression that must evaluate to a `Number` or `String`\n *                                 parsable into a `Number`. Used as value for the `minlength`\n *                                 {@link ngModel.NgModelController#$validators validator}.\n *\n * @description\n *\n * ngMinlength adds the minlength {@link ngModel.NgModelController#$validators `validator`} to {@link ngModel `ngModel`}.\n * It is most often used for text-based {@link input `input`} controls, but can also be applied to custom text-based controls.\n *\n * The validator sets the `minlength` error key if the {@link ngModel.NgModelController#$viewValue `ngModel.$viewValue`}\n * is shorter than the integer obtained by evaluating the Angular expression given in the\n * `ngMinlength` attribute value.\n *\n * <div class=\"alert alert-info\">\n * **Note:** This directive is also added when the plain `minlength` attribute is used, with two\n * differences:\n * <ol>\n *   <li>\n *     `ngMinlength` does not set the `minlength` attribute and therefore HTML5 constraint\n *     validation is not available.\n *   </li>\n *   <li>\n *     The `ngMinlength` value must be an expression, while the `minlength` value must be\n *     interpolated.\n *   </li>\n * </ol>\n * </div>\n *\n * @example\n * <example name=\"ngMinlengthDirective\" module=\"ngMinlengthExample\">\n *   <file name=\"index.html\">\n *     <script>\n *       angular.module('ngMinlengthExample', [])\n *         .controller('ExampleController', ['$scope', function($scope) {\n *           $scope.minlength = 3;\n *         }]);\n *     </script>\n *     <div ng-controller=\"ExampleController\">\n *       <form name=\"form\">\n *         <label for=\"minlength\">Set a minlength: </label>\n *         <input type=\"number\" ng-model=\"minlength\" id=\"minlength\" />\n *         <br>\n *         <label for=\"input\">This input is restricted by the current minlength: </label>\n *         <input type=\"text\" ng-model=\"model\" id=\"input\" name=\"input\" ng-minlength=\"minlength\" /><br>\n *         <hr>\n *         input valid? = <code>{{form.input.$valid}}</code><br>\n *         model = <code>{{model}}</code>\n *       </form>\n *     </div>\n *   </file>\n *   <file name=\"protractor.js\" type=\"protractor\">\n       var model = element(by.binding('model'));\n       var input = element(by.id('input'));\n\n       it('should validate the input with the default minlength', function() {\n         input.sendKeys('ab');\n         expect(model.getText()).not.toContain('ab');\n\n         input.sendKeys('abc');\n         expect(model.getText()).toContain('abc');\n       });\n *   </file>\n * </example>\n */\nvar minlengthDirective = function() {\n  return {\n    restrict: 'A',\n    require: '?ngModel',\n    link: function(scope, elm, attr, ctrl) {\n      if (!ctrl) return;\n\n      var minlength = 0;\n      attr.$observe('minlength', function(value) {\n        minlength = toInt(value) || 0;\n        ctrl.$validate();\n      });\n      ctrl.$validators.minlength = function(modelValue, viewValue) {\n        return ctrl.$isEmpty(viewValue) || viewValue.length >= minlength;\n      };\n    }\n  };\n};\n\nif (window.angular.bootstrap) {\n  // AngularJS is already loaded, so we can return here...\n  if (window.console) {\n    console.log('WARNING: Tried to load angular more than once.');\n  }\n  return;\n}\n\n// try to bind to jquery now so that one can write jqLite(fn)\n// but we will rebind on bootstrap again.\nbindJQuery();\n\npublishExternalAPI(angular);\n\nangular.module(\"ngLocale\", [], [\"$provide\", function($provide) {\nvar PLURAL_CATEGORY = {ZERO: \"zero\", ONE: \"one\", TWO: \"two\", FEW: \"few\", MANY: \"many\", OTHER: \"other\"};\nfunction getDecimals(n) {\n  n = n + '';\n  var i = n.indexOf('.');\n  return (i == -1) ? 0 : n.length - i - 1;\n}\n\nfunction getVF(n, opt_precision) {\n  var v = opt_precision;\n\n  if (undefined === v) {\n    v = Math.min(getDecimals(n), 3);\n  }\n\n  var base = Math.pow(10, v);\n  var f = ((n * base) | 0) % base;\n  return {v: v, f: f};\n}\n\n$provide.value(\"$locale\", {\n  \"DATETIME_FORMATS\": {\n    \"AMPMS\": [\n      \"AM\",\n      \"PM\"\n    ],\n    \"DAY\": [\n      \"Sunday\",\n      \"Monday\",\n      \"Tuesday\",\n      \"Wednesday\",\n      \"Thursday\",\n      \"Friday\",\n      \"Saturday\"\n    ],\n    \"ERANAMES\": [\n      \"Before Christ\",\n      \"Anno Domini\"\n    ],\n    \"ERAS\": [\n      \"BC\",\n      \"AD\"\n    ],\n    \"FIRSTDAYOFWEEK\": 6,\n    \"MONTH\": [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\"\n    ],\n    \"SHORTDAY\": [\n      \"Sun\",\n      \"Mon\",\n      \"Tue\",\n      \"Wed\",\n      \"Thu\",\n      \"Fri\",\n      \"Sat\"\n    ],\n    \"SHORTMONTH\": [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\"\n    ],\n    \"STANDALONEMONTH\": [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\"\n    ],\n    \"WEEKENDRANGE\": [\n      5,\n      6\n    ],\n    \"fullDate\": \"EEEE, MMMM d, y\",\n    \"longDate\": \"MMMM d, y\",\n    \"medium\": \"MMM d, y h:mm:ss a\",\n    \"mediumDate\": \"MMM d, y\",\n    \"mediumTime\": \"h:mm:ss a\",\n    \"short\": \"M/d/yy h:mm a\",\n    \"shortDate\": \"M/d/yy\",\n    \"shortTime\": \"h:mm a\"\n  },\n  \"NUMBER_FORMATS\": {\n    \"CURRENCY_SYM\": \"$\",\n    \"DECIMAL_SEP\": \".\",\n    \"GROUP_SEP\": \",\",\n    \"PATTERNS\": [\n      {\n        \"gSize\": 3,\n        \"lgSize\": 3,\n        \"maxFrac\": 3,\n        \"minFrac\": 0,\n        \"minInt\": 1,\n        \"negPre\": \"-\",\n        \"negSuf\": \"\",\n        \"posPre\": \"\",\n        \"posSuf\": \"\"\n      },\n      {\n        \"gSize\": 3,\n        \"lgSize\": 3,\n        \"maxFrac\": 2,\n        \"minFrac\": 2,\n        \"minInt\": 1,\n        \"negPre\": \"-\\u00a4\",\n        \"negSuf\": \"\",\n        \"posPre\": \"\\u00a4\",\n        \"posSuf\": \"\"\n      }\n    ]\n  },\n  \"id\": \"en-us\",\n  \"localeID\": \"en_US\",\n  \"pluralCat\": function(n, opt_precision) {  var i = n | 0;  var vf = getVF(n, opt_precision);  if (i == 1 && vf.v == 0) {    return PLURAL_CATEGORY.ONE;  }  return PLURAL_CATEGORY.OTHER;}\n});\n}]);\n\n  jqLite(function() {\n    angularInit(window.document, bootstrap);\n  });\n\n})(window);\n\n!window.angular.$$csp().noInlineStyle && window.angular.element(document.head).prepend('<style type=\"text/css\">@charset \"UTF-8\";[ng\\\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>');\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular/angular.js\n// module id = EKTY\n// module chunks = 0","\"use strict\";\n/**\n * @coreapi\n * @module transition\n */ /** for typedoc */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar common_1 = require(\"../common/common\");\nvar predicates_1 = require(\"../common/predicates\");\nvar interface_1 = require(\"./interface\");\nvar transitionHook_1 = require(\"./transitionHook\");\n/**\n * This class returns applicable TransitionHooks for a specific Transition instance.\n *\n * Hooks ([[RegisteredHook]]) may be registered globally, e.g., $transitions.onEnter(...), or locally, e.g.\n * myTransition.onEnter(...).  The HookBuilder finds matching RegisteredHooks (where the match criteria is\n * determined by the type of hook)\n *\n * The HookBuilder also converts RegisteredHooks objects to TransitionHook objects, which are used to run a Transition.\n *\n * The HookBuilder constructor is given the $transitions service and a Transition instance.  Thus, a HookBuilder\n * instance may only be used for one specific Transition object. (side note: the _treeChanges accessor is private\n * in the Transition class, so we must also provide the Transition's _treeChanges)\n *\n */\nvar HookBuilder = (function () {\n    function HookBuilder(transition) {\n        this.transition = transition;\n    }\n    HookBuilder.prototype.buildHooksForPhase = function (phase) {\n        var _this = this;\n        var $transitions = this.transition.router.transitionService;\n        return $transitions._pluginapi._getEvents(phase)\n            .map(function (type) { return _this.buildHooks(type); })\n            .reduce(common_1.unnestR, [])\n            .filter(common_1.identity);\n    };\n    /**\n     * Returns an array of newly built TransitionHook objects.\n     *\n     * - Finds all RegisteredHooks registered for the given `hookType` which matched the transition's [[TreeChanges]].\n     * - Finds [[PathNode]] (or `PathNode[]`) to use as the TransitionHook context(s)\n     * - For each of the [[PathNode]]s, creates a TransitionHook\n     *\n     * @param hookType the type of the hook registration function, e.g., 'onEnter', 'onFinish'.\n     */\n    HookBuilder.prototype.buildHooks = function (hookType) {\n        var transition = this.transition;\n        var treeChanges = transition.treeChanges();\n        // Find all the matching registered hooks for a given hook type\n        var matchingHooks = this.getMatchingHooks(hookType, treeChanges);\n        if (!matchingHooks)\n            return [];\n        var baseHookOptions = {\n            transition: transition,\n            current: transition.options().current\n        };\n        var makeTransitionHooks = function (hook) {\n            // Fetch the Nodes that caused this hook to match.\n            var matches = hook.matches(treeChanges);\n            // Select the PathNode[] that will be used as TransitionHook context objects\n            var matchingNodes = matches[hookType.criteriaMatchPath.name];\n            // Return an array of HookTuples\n            return matchingNodes.map(function (node) {\n                var _options = common_1.extend({\n                    bind: hook.bind,\n                    traceData: { hookType: hookType.name, context: node }\n                }, baseHookOptions);\n                var state = hookType.criteriaMatchPath.scope === interface_1.TransitionHookScope.STATE ? node.state.self : null;\n                var transitionHook = new transitionHook_1.TransitionHook(transition, state, hook, _options);\n                return { hook: hook, node: node, transitionHook: transitionHook };\n            });\n        };\n        return matchingHooks.map(makeTransitionHooks)\n            .reduce(common_1.unnestR, [])\n            .sort(tupleSort(hookType.reverseSort))\n            .map(function (tuple) { return tuple.transitionHook; });\n    };\n    /**\n     * Finds all RegisteredHooks from:\n     * - The Transition object instance hook registry\n     * - The TransitionService ($transitions) global hook registry\n     *\n     * which matched:\n     * - the eventType\n     * - the matchCriteria (to, from, exiting, retained, entering)\n     *\n     * @returns an array of matched [[RegisteredHook]]s\n     */\n    HookBuilder.prototype.getMatchingHooks = function (hookType, treeChanges) {\n        var isCreate = hookType.hookPhase === interface_1.TransitionHookPhase.CREATE;\n        // Instance and Global hook registries\n        var $transitions = this.transition.router.transitionService;\n        var registries = isCreate ? [$transitions] : [this.transition, $transitions];\n        return registries.map(function (reg) { return reg.getHooks(hookType.name); }) // Get named hooks from registries\n            .filter(common_1.assertPredicate(predicates_1.isArray, \"broken event named: \" + hookType.name)) // Sanity check\n            .reduce(common_1.unnestR, []) // Un-nest RegisteredHook[][] to RegisteredHook[] array\n            .filter(function (hook) { return hook.matches(treeChanges); }); // Only those satisfying matchCriteria\n    };\n    return HookBuilder;\n}());\nexports.HookBuilder = HookBuilder;\n/**\n * A factory for a sort function for HookTuples.\n *\n * The sort function first compares the PathNode depth (how deep in the state tree a node is), then compares\n * the EventHook priority.\n *\n * @param reverseDepthSort a boolean, when true, reverses the sort order for the node depth\n * @returns a tuple sort function\n */\nfunction tupleSort(reverseDepthSort) {\n    if (reverseDepthSort === void 0) { reverseDepthSort = false; }\n    return function nodeDepthThenPriority(l, r) {\n        var factor = reverseDepthSort ? -1 : 1;\n        var depthDelta = (l.node.state.path.length - r.node.state.path.length) * factor;\n        return depthDelta !== 0 ? depthDelta : r.hook.priority - l.hook.priority;\n    };\n}\n//# sourceMappingURL=hookBuilder.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/transition/hookBuilder.js\n// module id = EuoQ\n// module chunks = 0","\"use strict\";\n/**\n * @module common\n */ /** for typedoc */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Queue = (function () {\n    function Queue(_items, _limit) {\n        if (_items === void 0) { _items = []; }\n        if (_limit === void 0) { _limit = null; }\n        this._items = _items;\n        this._limit = _limit;\n    }\n    Queue.prototype.enqueue = function (item) {\n        var items = this._items;\n        items.push(item);\n        if (this._limit && items.length > this._limit)\n            items.shift();\n        return item;\n    };\n    Queue.prototype.dequeue = function () {\n        if (this.size())\n            return this._items.splice(0, 1)[0];\n    };\n    Queue.prototype.clear = function () {\n        var current = this._items;\n        this._items = [];\n        return current;\n    };\n    Queue.prototype.size = function () {\n        return this._items.length;\n    };\n    Queue.prototype.remove = function (item) {\n        var idx = this._items.indexOf(item);\n        return idx > -1 && this._items.splice(idx, 1)[0];\n    };\n    Queue.prototype.peekTail = function () {\n        return this._items[this._items.length - 1];\n    };\n    Queue.prototype.peekHead = function () {\n        if (this.size())\n            return this._items[0];\n    };\n    return Queue;\n}());\nexports.Queue = Queue;\n//# sourceMappingURL=queue.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/common/queue.js\n// module id = G4Yj\n// module chunks = 0","\"use strict\";\n/**\n * Higher order functions\n *\n * These utility functions are exported, but are subject to change without notice.\n *\n * @module common_hof\n */ /** */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Returns a new function for [Partial Application](https://en.wikipedia.org/wiki/Partial_application) of the original function.\n *\n * Given a function with N parameters, returns a new function that supports partial application.\n * The new function accepts anywhere from 1 to N parameters.  When that function is called with M parameters,\n * where M is less than N, it returns a new function that accepts the remaining parameters.  It continues to\n * accept more parameters until all N parameters have been supplied.\n *\n *\n * This contrived example uses a partially applied function as an predicate, which returns true\n * if an object is found in both arrays.\n * @example\n * ```\n * // returns true if an object is in both of the two arrays\n * function inBoth(array1, array2, object) {\n *   return array1.indexOf(object) !== -1 &&\n *          array2.indexOf(object) !== 1;\n * }\n * let obj1, obj2, obj3, obj4, obj5, obj6, obj7\n * let foos = [obj1, obj3]\n * let bars = [obj3, obj4, obj5]\n *\n * // A curried \"copy\" of inBoth\n * let curriedInBoth = curry(inBoth);\n * // Partially apply both the array1 and array2\n * let inFoosAndBars = curriedInBoth(foos, bars);\n *\n * // Supply the final argument; since all arguments are\n * // supplied, the original inBoth function is then called.\n * let obj1InBoth = inFoosAndBars(obj1); // false\n *\n * // Use the inFoosAndBars as a predicate.\n * // Filter, on each iteration, supplies the final argument\n * let allObjs = [ obj1, obj2, obj3, obj4, obj5, obj6, obj7 ];\n * let foundInBoth = allObjs.filter(inFoosAndBars); // [ obj3 ]\n *\n * ```\n *\n * Stolen from: http://stackoverflow.com/questions/4394747/javascript-curry-function\n *\n * @param fn\n * @returns {*|function(): (*|any)}\n */\nfunction curry(fn) {\n    var initial_args = [].slice.apply(arguments, [1]);\n    var func_args_length = fn.length;\n    function curried(args) {\n        if (args.length >= func_args_length)\n            return fn.apply(null, args);\n        return function () {\n            return curried(args.concat([].slice.apply(arguments)));\n        };\n    }\n    return curried(initial_args);\n}\nexports.curry = curry;\n/**\n * Given a varargs list of functions, returns a function that composes the argument functions, right-to-left\n * given: f(x), g(x), h(x)\n * let composed = compose(f,g,h)\n * then, composed is: f(g(h(x)))\n */\nfunction compose() {\n    var args = arguments;\n    var start = args.length - 1;\n    return function () {\n        var i = start, result = args[start].apply(this, arguments);\n        while (i--)\n            result = args[i].call(this, result);\n        return result;\n    };\n}\nexports.compose = compose;\n/**\n * Given a varargs list of functions, returns a function that is composes the argument functions, left-to-right\n * given: f(x), g(x), h(x)\n * let piped = pipe(f,g,h);\n * then, piped is: h(g(f(x)))\n */\nfunction pipe() {\n    var funcs = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        funcs[_i] = arguments[_i];\n    }\n    return compose.apply(null, [].slice.call(arguments).reverse());\n}\nexports.pipe = pipe;\n/**\n * Given a property name, returns a function that returns that property from an object\n * let obj = { foo: 1, name: \"blarg\" };\n * let getName = prop(\"name\");\n * getName(obj) === \"blarg\"\n */\nexports.prop = function (name) {\n    return function (obj) { return obj && obj[name]; };\n};\n/**\n * Given a property name and a value, returns a function that returns a boolean based on whether\n * the passed object has a property that matches the value\n * let obj = { foo: 1, name: \"blarg\" };\n * let getName = propEq(\"name\", \"blarg\");\n * getName(obj) === true\n */\nexports.propEq = curry(function (name, val, obj) { return obj && obj[name] === val; });\n/**\n * Given a dotted property name, returns a function that returns a nested property from an object, or undefined\n * let obj = { id: 1, nestedObj: { foo: 1, name: \"blarg\" }, };\n * let getName = prop(\"nestedObj.name\");\n * getName(obj) === \"blarg\"\n * let propNotFound = prop(\"this.property.doesnt.exist\");\n * propNotFound(obj) === undefined\n */\nexports.parse = function (name) {\n    return pipe.apply(null, name.split(\".\").map(exports.prop));\n};\n/**\n * Given a function that returns a truthy or falsey value, returns a\n * function that returns the opposite (falsey or truthy) value given the same inputs\n */\nexports.not = function (fn) {\n    return function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return !fn.apply(null, args);\n    };\n};\n/**\n * Given two functions that return truthy or falsey values, returns a function that returns truthy\n * if both functions return truthy for the given arguments\n */\nfunction and(fn1, fn2) {\n    return function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return fn1.apply(null, args) && fn2.apply(null, args);\n    };\n}\nexports.and = and;\n/**\n * Given two functions that return truthy or falsey values, returns a function that returns truthy\n * if at least one of the functions returns truthy for the given arguments\n */\nfunction or(fn1, fn2) {\n    return function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return fn1.apply(null, args) || fn2.apply(null, args);\n    };\n}\nexports.or = or;\n/**\n * Check if all the elements of an array match a predicate function\n *\n * @param fn1 a predicate function `fn1`\n * @returns a function which takes an array and returns true if `fn1` is true for all elements of the array\n */\nexports.all = function (fn1) {\n    return function (arr) { return arr.reduce(function (b, x) { return b && !!fn1(x); }, true); };\n};\nexports.any = function (fn1) {\n    return function (arr) { return arr.reduce(function (b, x) { return b || !!fn1(x); }, false); };\n};\n/** Given a class, returns a Predicate function that returns true if the object is of that class */\nexports.is = function (ctor) {\n    return function (obj) {\n        return (obj != null && obj.constructor === ctor || obj instanceof ctor);\n    };\n};\n/** Given a value, returns a Predicate function that returns true if another value is === equal to the original value */\nexports.eq = function (val) { return function (other) {\n    return val === other;\n}; };\n/** Given a value, returns a function which returns the value */\nexports.val = function (v) { return function () { return v; }; };\nfunction invoke(fnName, args) {\n    return function (obj) {\n        return obj[fnName].apply(obj, args);\n    };\n}\nexports.invoke = invoke;\n/**\n * Sorta like Pattern Matching (a functional programming conditional construct)\n *\n * See http://c2.com/cgi/wiki?PatternMatching\n *\n * This is a conditional construct which allows a series of predicates and output functions\n * to be checked and then applied.  Each predicate receives the input.  If the predicate\n * returns truthy, then its matching output function (mapping function) is provided with\n * the input and, then the result is returned.\n *\n * Each combination (2-tuple) of predicate + output function should be placed in an array\n * of size 2: [ predicate, mapFn ]\n *\n * These 2-tuples should be put in an outer array.\n *\n * @example\n * ```\n *\n * // Here's a 2-tuple where the first element is the isString predicate\n * // and the second element is a function that returns a description of the input\n * let firstTuple = [ angular.isString, (input) => `Heres your string ${input}` ];\n *\n * // Second tuple: predicate \"isNumber\", mapfn returns a description\n * let secondTuple = [ angular.isNumber, (input) => `(${input}) That's a number!` ];\n *\n * let third = [ (input) => input === null,  (input) => `Oh, null...` ];\n *\n * let fourth = [ (input) => input === undefined,  (input) => `notdefined` ];\n *\n * let descriptionOf = pattern([ firstTuple, secondTuple, third, fourth ]);\n *\n * console.log(descriptionOf(undefined)); // 'notdefined'\n * console.log(descriptionOf(55)); // '(55) That's a number!'\n * console.log(descriptionOf(\"foo\")); // 'Here's your string foo'\n * ```\n *\n * @param struct A 2D array.  Each element of the array should be an array, a 2-tuple,\n * with a Predicate and a mapping/output function\n * @returns {function(any): *}\n */\nfunction pattern(struct) {\n    return function (x) {\n        for (var i = 0; i < struct.length; i++) {\n            if (struct[i][0](x))\n                return struct[i][1](x);\n        }\n    };\n}\nexports.pattern = pattern;\n//# sourceMappingURL=hof.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/common/hof.js\n// module id = GKq3\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @coreapi\n * @module resolve\n */ /** for typedoc */\nvar common_1 = require(\"../common/common\");\nvar coreservices_1 = require(\"../common/coreservices\");\nvar trace_1 = require(\"../common/trace\");\nvar strings_1 = require(\"../common/strings\");\nvar predicates_1 = require(\"../common/predicates\");\n// TODO: explicitly make this user configurable\nexports.defaultResolvePolicy = {\n    when: \"LAZY\",\n    async: \"WAIT\"\n};\n/**\n * The basic building block for the resolve system.\n *\n * Resolvables encapsulate a state's resolve's resolveFn, the resolveFn's declared dependencies, the wrapped (.promise),\n * and the unwrapped-when-complete (.data) result of the resolveFn.\n *\n * Resolvable.get() either retrieves the Resolvable's existing promise, or else invokes resolve() (which invokes the\n * resolveFn) and returns the resulting promise.\n *\n * Resolvable.get() and Resolvable.resolve() both execute within a context path, which is passed as the first\n * parameter to those fns.\n */\nvar Resolvable = (function () {\n    function Resolvable(arg1, resolveFn, deps, policy, data) {\n        this.resolved = false;\n        this.promise = undefined;\n        if (arg1 instanceof Resolvable) {\n            common_1.extend(this, arg1);\n        }\n        else if (predicates_1.isFunction(resolveFn)) {\n            if (arg1 == null || arg1 == undefined)\n                throw new Error(\"new Resolvable(): token argument is required\");\n            if (!predicates_1.isFunction(resolveFn))\n                throw new Error(\"new Resolvable(): resolveFn argument must be a function\");\n            this.token = arg1;\n            this.policy = policy;\n            this.resolveFn = resolveFn;\n            this.deps = deps || [];\n            this.data = data;\n            this.resolved = data !== undefined;\n            this.promise = this.resolved ? coreservices_1.services.$q.when(this.data) : undefined;\n        }\n        else if (predicates_1.isObject(arg1) && arg1.token && predicates_1.isFunction(arg1.resolveFn)) {\n            var literal = arg1;\n            return new Resolvable(literal.token, literal.resolveFn, literal.deps, literal.policy, literal.data);\n        }\n    }\n    Resolvable.prototype.getPolicy = function (state) {\n        var thisPolicy = this.policy || {};\n        var statePolicy = state && state.resolvePolicy || {};\n        return {\n            when: thisPolicy.when || statePolicy.when || exports.defaultResolvePolicy.when,\n            async: thisPolicy.async || statePolicy.async || exports.defaultResolvePolicy.async,\n        };\n    };\n    /**\n     * Asynchronously resolve this Resolvable's data\n     *\n     * Given a ResolveContext that this Resolvable is found in:\n     * Wait for this Resolvable's dependencies, then invoke this Resolvable's function\n     * and update the Resolvable's state\n     */\n    Resolvable.prototype.resolve = function (resolveContext, trans) {\n        var _this = this;\n        var $q = coreservices_1.services.$q;\n        // Gets all dependencies from ResolveContext and wait for them to be resolved\n        var getResolvableDependencies = function () {\n            return $q.all(resolveContext.getDependencies(_this).map(function (resolvable) {\n                return resolvable.get(resolveContext, trans);\n            }));\n        };\n        // Invokes the resolve function passing the resolved dependencies as arguments\n        var invokeResolveFn = function (resolvedDeps) {\n            return _this.resolveFn.apply(null, resolvedDeps);\n        };\n        /**\n         * For RXWAIT policy:\n         *\n         * Given an observable returned from a resolve function:\n         * - enables .cache() mode (this allows multicast subscribers)\n         * - then calls toPromise() (this triggers subscribe() and thus fetches)\n         * - Waits for the promise, then return the cached observable (not the first emitted value).\n         */\n        var waitForRx = function (observable$) {\n            var cached = observable$.cache(1);\n            return cached.take(1).toPromise().then(function () { return cached; });\n        };\n        // If the resolve policy is RXWAIT, wait for the observable to emit something. otherwise pass through.\n        var node = resolveContext.findNode(this);\n        var state = node && node.state;\n        var maybeWaitForRx = this.getPolicy(state).async === \"RXWAIT\" ? waitForRx : common_1.identity;\n        // After the final value has been resolved, update the state of the Resolvable\n        var applyResolvedValue = function (resolvedValue) {\n            _this.data = resolvedValue;\n            _this.resolved = true;\n            trace_1.trace.traceResolvableResolved(_this, trans);\n            return _this.data;\n        };\n        // Sets the promise property first, then getsResolvableDependencies in the context of the promise chain. Always waits one tick.\n        return this.promise = $q.when()\n            .then(getResolvableDependencies)\n            .then(invokeResolveFn)\n            .then(maybeWaitForRx)\n            .then(applyResolvedValue);\n    };\n    /**\n     * Gets a promise for this Resolvable's data.\n     *\n     * Fetches the data and returns a promise.\n     * Returns the existing promise if it has already been fetched once.\n     */\n    Resolvable.prototype.get = function (resolveContext, trans) {\n        return this.promise || this.resolve(resolveContext, trans);\n    };\n    Resolvable.prototype.toString = function () {\n        return \"Resolvable(token: \" + strings_1.stringify(this.token) + \", requires: [\" + this.deps.map(strings_1.stringify) + \"])\";\n    };\n    Resolvable.prototype.clone = function () {\n        return new Resolvable(this);\n    };\n    return Resolvable;\n}());\nResolvable.fromData = function (token, data) {\n    return new Resolvable(token, function () { return data; }, null, null, data);\n};\nexports.Resolvable = Resolvable;\n//# sourceMappingURL=resolvable.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/resolve/resolvable.js\n// module id = GpAh\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @coreapi\n * @module url\n */ /** */\nvar urlMatcher_1 = require(\"./urlMatcher\");\nvar predicates_1 = require(\"../common/predicates\");\nvar common_1 = require(\"../common/common\");\nvar hof_1 = require(\"../common/hof\");\n/**\n * Creates a [[UrlRule]]\n *\n * Creates a [[UrlRule]] from a:\n *\n * - `string`\n * - [[UrlMatcher]]\n * - `RegExp`\n * - [[StateObject]]\n * @internalapi\n */\nvar UrlRuleFactory = (function () {\n    function UrlRuleFactory(router) {\n        this.router = router;\n    }\n    UrlRuleFactory.prototype.compile = function (str) {\n        return this.router.urlMatcherFactory.compile(str);\n    };\n    UrlRuleFactory.prototype.create = function (what, handler) {\n        var _this = this;\n        var makeRule = hof_1.pattern([\n            [predicates_1.isString, function (_what) { return makeRule(_this.compile(_what)); }],\n            [hof_1.is(urlMatcher_1.UrlMatcher), function (_what) { return _this.fromUrlMatcher(_what, handler); }],\n            [predicates_1.isState, function (_what) { return _this.fromState(_what, _this.router); }],\n            [hof_1.is(RegExp), function (_what) { return _this.fromRegExp(_what, handler); }],\n            [predicates_1.isFunction, function (_what) { return new BaseUrlRule(_what, handler); }],\n        ]);\n        var rule = makeRule(what);\n        if (!rule)\n            throw new Error(\"invalid 'what' in when()\");\n        return rule;\n    };\n    /**\n     * A UrlRule which matches based on a UrlMatcher\n     *\n     * The `handler` may be either a `string`, a [[UrlRuleHandlerFn]] or another [[UrlMatcher]]\n     *\n     * ## Handler as a function\n     *\n     * If `handler` is a function, the function is invoked with:\n     *\n     * - matched parameter values ([[RawParams]] from [[UrlMatcher.exec]])\n     * - url: the current Url ([[UrlParts]])\n     * - router: the router object ([[UIRouter]])\n     *\n     * #### Example:\n     * ```js\n     * var urlMatcher = $umf.compile(\"/foo/:fooId/:barId\");\n     * var rule = factory.fromUrlMatcher(urlMatcher, match => \"/home/\" + match.fooId + \"/\" + match.barId);\n     * var match = rule.match('/foo/123/456'); // results in { fooId: '123', barId: '456' }\n     * var result = rule.handler(match); // '/home/123/456'\n     * ```\n     *\n     * ## Handler as UrlMatcher\n     *\n     * If `handler` is a UrlMatcher, the handler matcher is used to create the new url.\n     * The `handler` UrlMatcher is formatted using the matched param from the first matcher.\n     * The url is replaced with the result.\n     *\n     * #### Example:\n     * ```js\n     * var urlMatcher = $umf.compile(\"/foo/:fooId/:barId\");\n     * var handler = $umf.compile(\"/home/:fooId/:barId\");\n     * var rule = factory.fromUrlMatcher(urlMatcher, handler);\n     * var match = rule.match('/foo/123/456'); // results in { fooId: '123', barId: '456' }\n     * var result = rule.handler(match); // '/home/123/456'\n     * ```\n     */\n    UrlRuleFactory.prototype.fromUrlMatcher = function (urlMatcher, handler) {\n        var _handler = handler;\n        if (predicates_1.isString(handler))\n            handler = this.router.urlMatcherFactory.compile(handler);\n        if (hof_1.is(urlMatcher_1.UrlMatcher)(handler))\n            _handler = function (match) { return handler.format(match); };\n        function match(url) {\n            var match = urlMatcher.exec(url.path, url.search, url.hash);\n            return urlMatcher.validates(match) && match;\n        }\n        // Prioritize URLs, lowest to highest:\n        // - Some optional URL parameters, but none matched\n        // - No optional parameters in URL\n        // - Some optional parameters, some matched\n        // - Some optional parameters, all matched\n        function matchPriority(params) {\n            var optional = urlMatcher.parameters().filter(function (param) { return param.isOptional; });\n            if (!optional.length)\n                return 0.000001;\n            var matched = optional.filter(function (param) { return params[param.id]; });\n            return matched.length / optional.length;\n        }\n        var details = { urlMatcher: urlMatcher, matchPriority: matchPriority, type: \"URLMATCHER\" };\n        return common_1.extend(new BaseUrlRule(match, _handler), details);\n    };\n    /**\n     * A UrlRule which matches a state by its url\n     *\n     * #### Example:\n     * ```js\n     * var rule = factory.fromState($state.get('foo'), router);\n     * var match = rule.match('/foo/123/456'); // results in { fooId: '123', barId: '456' }\n     * var result = rule.handler(match);\n     * // Starts a transition to 'foo' with params: { fooId: '123', barId: '456' }\n     * ```\n     */\n    UrlRuleFactory.prototype.fromState = function (state, router) {\n        /**\n         * Handles match by transitioning to matched state\n         *\n         * First checks if the router should start a new transition.\n         * A new transition is not required if the current state's URL\n         * and the new URL are already identical\n         */\n        var handler = function (match) {\n            var $state = router.stateService;\n            var globals = router.globals;\n            if ($state.href(state, match) !== $state.href(globals.current, globals.params)) {\n                $state.transitionTo(state, match, { inherit: true, source: \"url\" });\n            }\n        };\n        var details = { state: state, type: \"STATE\" };\n        return common_1.extend(this.fromUrlMatcher(state.url, handler), details);\n    };\n    /**\n     * A UrlRule which matches based on a regular expression\n     *\n     * The `handler` may be either a [[UrlRuleHandlerFn]] or a string.\n     *\n     * ## Handler as a function\n     *\n     * If `handler` is a function, the function is invoked with:\n     *\n     * - regexp match array (from `regexp`)\n     * - url: the current Url ([[UrlParts]])\n     * - router: the router object ([[UIRouter]])\n     *\n     * #### Example:\n     * ```js\n     * var rule = factory.fromRegExp(/^\\/foo\\/(bar|baz)$/, match => \"/home/\" + match[1])\n     * var match = rule.match('/foo/bar'); // results in [ '/foo/bar', 'bar' ]\n     * var result = rule.handler(match); // '/home/bar'\n     * ```\n     *\n     * ## Handler as string\n     *\n     * If `handler` is a string, the url is *replaced by the string* when the Rule is invoked.\n     * The string is first interpolated using `string.replace()` style pattern.\n     *\n     * #### Example:\n     * ```js\n     * var rule = factory.fromRegExp(/^\\/foo\\/(bar|baz)$/, \"/home/$1\")\n     * var match = rule.match('/foo/bar'); // results in [ '/foo/bar', 'bar' ]\n     * var result = rule.handler(match); // '/home/bar'\n     * ```\n     */\n    UrlRuleFactory.prototype.fromRegExp = function (regexp, handler) {\n        if (regexp.global || regexp.sticky)\n            throw new Error(\"Rule RegExp must not be global or sticky\");\n        /**\n         * If handler is a string, the url will be replaced by the string.\n         * If the string has any String.replace() style variables in it (like `$2`),\n         * they will be replaced by the captures from [[match]]\n         */\n        var redirectUrlTo = function (match) {\n            // Interpolates matched values into $1 $2, etc using a String.replace()-style pattern\n            return handler.replace(/\\$(\\$|\\d{1,2})/, function (m, what) {\n                return match[what === '$' ? 0 : Number(what)];\n            });\n        };\n        var _handler = predicates_1.isString(handler) ? redirectUrlTo : handler;\n        var match = function (url) {\n            return regexp.exec(url.path);\n        };\n        var details = { regexp: regexp, type: \"REGEXP\" };\n        return common_1.extend(new BaseUrlRule(match, _handler), details);\n    };\n    return UrlRuleFactory;\n}());\nUrlRuleFactory.isUrlRule = function (obj) {\n    return obj && ['type', 'match', 'handler'].every(function (key) { return predicates_1.isDefined(obj[key]); });\n};\nexports.UrlRuleFactory = UrlRuleFactory;\n/**\n * A base rule which calls `match`\n *\n * The value from the `match` function is passed through to the `handler`.\n * @internalapi\n */\nvar BaseUrlRule = (function () {\n    function BaseUrlRule(match, handler) {\n        var _this = this;\n        this.match = match;\n        this.type = \"RAW\";\n        this.matchPriority = function (match) { return 0 - _this.$id; };\n        this.handler = handler || common_1.identity;\n    }\n    return BaseUrlRule;\n}());\nexports.BaseUrlRule = BaseUrlRule;\n//# sourceMappingURL=urlRule.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/url/urlRule.js\n// module id = H1Q6\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @internalapi\n * @module vanilla\n */\n/** */\nvar index_1 = require(\"../common/index\");\nvar common_1 = require(\"../common/common\");\nvar beforeAfterSubstr = function (char) { return function (str) {\n    if (!str)\n        return [\"\", \"\"];\n    var idx = str.indexOf(char);\n    if (idx === -1)\n        return [str, \"\"];\n    return [str.substr(0, idx), str.substr(idx + 1)];\n}; };\nexports.splitHash = beforeAfterSubstr(\"#\");\nexports.splitQuery = beforeAfterSubstr(\"?\");\nexports.splitEqual = beforeAfterSubstr(\"=\");\nexports.trimHashVal = function (str) { return str ? str.replace(/^#/, \"\") : \"\"; };\nexports.keyValsToObjectR = function (accum, _a) {\n    var key = _a[0], val = _a[1];\n    if (!accum.hasOwnProperty(key)) {\n        accum[key] = val;\n    }\n    else if (index_1.isArray(accum[key])) {\n        accum[key].push(val);\n    }\n    else {\n        accum[key] = [accum[key], val];\n    }\n    return accum;\n};\nexports.getParams = function (queryString) {\n    return queryString.split(\"&\").filter(common_1.identity).map(exports.splitEqual).reduce(exports.keyValsToObjectR, {});\n};\nfunction parseUrl(url) {\n    var orEmptyString = function (x) { return x || \"\"; };\n    var _a = exports.splitHash(url).map(orEmptyString), beforehash = _a[0], hash = _a[1];\n    var _b = exports.splitQuery(beforehash).map(orEmptyString), path = _b[0], search = _b[1];\n    return { path: path, search: search, hash: hash, url: url };\n}\nexports.parseUrl = parseUrl;\nexports.buildUrl = function (loc) {\n    var path = loc.path();\n    var searchObject = loc.search();\n    var hash = loc.hash();\n    var search = Object.keys(searchObject).map(function (key) {\n        var param = searchObject[key];\n        var vals = index_1.isArray(param) ? param : [param];\n        return vals.map(function (val) { return key + \"=\" + val; });\n    }).reduce(common_1.unnestR, []).join(\"&\");\n    return path + (search ? \"?\" + search : \"\") + (hash ? \"#\" + hash : \"\");\n};\nfunction locationPluginFactory(name, isHtml5, serviceClass, configurationClass) {\n    return function (router) {\n        var service = router.locationService = new serviceClass(router);\n        var configuration = router.locationConfig = new configurationClass(router, isHtml5);\n        function dispose(router) {\n            router.dispose(service);\n            router.dispose(configuration);\n        }\n        return { name: name, service: service, configuration: configuration, dispose: dispose };\n    };\n}\nexports.locationPluginFactory = locationPluginFactory;\n//# sourceMappingURL=utils.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/vanilla/utils.js\n// module id = HYaK\n// module chunks = 0","\"use strict\";\n/**\n * @coreapi\n * @module state\n */ /** for typedoc */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar stateMatcher_1 = require(\"./stateMatcher\");\nvar stateBuilder_1 = require(\"./stateBuilder\");\nvar stateQueueManager_1 = require(\"./stateQueueManager\");\nvar common_1 = require(\"../common/common\");\nvar hof_1 = require(\"../common/hof\");\nvar StateRegistry = (function () {\n    /** @internalapi */\n    function StateRegistry(_router) {\n        this._router = _router;\n        this.states = {};\n        this.listeners = [];\n        this.matcher = new stateMatcher_1.StateMatcher(this.states);\n        this.builder = new stateBuilder_1.StateBuilder(this.matcher, _router.urlMatcherFactory);\n        this.stateQueue = new stateQueueManager_1.StateQueueManager(this, _router.urlRouter, this.states, this.builder, this.listeners);\n        this._registerRoot();\n    }\n    /** @internalapi */\n    StateRegistry.prototype._registerRoot = function () {\n        var rootStateDef = {\n            name: '',\n            url: '^',\n            views: null,\n            params: {\n                '#': { value: null, type: 'hash', dynamic: true }\n            },\n            abstract: true\n        };\n        var _root = this._root = this.stateQueue.register(rootStateDef);\n        _root.navigable = null;\n    };\n    /** @internalapi */\n    StateRegistry.prototype.dispose = function () {\n        var _this = this;\n        this.stateQueue.dispose();\n        this.listeners = [];\n        this.get().forEach(function (state) { return _this.get(state) && _this.deregister(state); });\n    };\n    /**\n     * Listen for a State Registry events\n     *\n     * Adds a callback that is invoked when states are registered or deregistered with the StateRegistry.\n     *\n     * #### Example:\n     * ```js\n     * let allStates = registry.get();\n     *\n     * // Later, invoke deregisterFn() to remove the listener\n     * let deregisterFn = registry.onStatesChanged((event, states) => {\n     *   switch(event) {\n     *     case: 'registered':\n     *       states.forEach(state => allStates.push(state));\n     *       break;\n     *     case: 'deregistered':\n     *       states.forEach(state => {\n     *         let idx = allStates.indexOf(state);\n     *         if (idx !== -1) allStates.splice(idx, 1);\n     *       });\n     *       break;\n     *   }\n     * });\n     * ```\n     *\n     * @param listener a callback function invoked when the registered states changes.\n     *        The function receives two parameters, `event` and `state`.\n     *        See [[StateRegistryListener]]\n     * @return a function that deregisters the listener\n     */\n    StateRegistry.prototype.onStatesChanged = function (listener) {\n        this.listeners.push(listener);\n        return function deregisterListener() {\n            common_1.removeFrom(this.listeners)(listener);\n        }.bind(this);\n    };\n    /**\n     * Gets the implicit root state\n     *\n     * Gets the root of the state tree.\n     * The root state is implicitly created by UI-Router.\n     * Note: this returns the internal [[StateObject]] representation, not a [[StateDeclaration]]\n     *\n     * @return the root [[StateObject]]\n     */\n    StateRegistry.prototype.root = function () {\n        return this._root;\n    };\n    /**\n     * Adds a state to the registry\n     *\n     * Registers a [[StateDeclaration]] or queues it for registration.\n     *\n     * Note: a state will be queued if the state's parent isn't yet registered.\n     *\n     * @param stateDefinition the definition of the state to register.\n     * @returns the internal [[StateObject]] object.\n     *          If the state was successfully registered, then the object is fully built (See: [[StateBuilder]]).\n     *          If the state was only queued, then the object is not fully built.\n     */\n    StateRegistry.prototype.register = function (stateDefinition) {\n        return this.stateQueue.register(stateDefinition);\n    };\n    /** @hidden */\n    StateRegistry.prototype._deregisterTree = function (state) {\n        var _this = this;\n        var all = this.get().map(function (s) { return s.$$state(); });\n        var getChildren = function (states) {\n            var children = all.filter(function (s) { return states.indexOf(s.parent) !== -1; });\n            return children.length === 0 ? children : children.concat(getChildren(children));\n        };\n        var children = getChildren([state]);\n        var deregistered = [state].concat(children).reverse();\n        deregistered.forEach(function (state) {\n            var $ur = _this._router.urlRouter;\n            // Remove URL rule\n            $ur.rules().filter(hof_1.propEq(\"state\", state)).forEach($ur.removeRule.bind($ur));\n            // Remove state from registry\n            delete _this.states[state.name];\n        });\n        return deregistered;\n    };\n    /**\n     * Removes a state from the registry\n     *\n     * This removes a state from the registry.\n     * If the state has children, they are are also removed from the registry.\n     *\n     * @param stateOrName the state's name or object representation\n     * @returns {StateObject[]} a list of removed states\n     */\n    StateRegistry.prototype.deregister = function (stateOrName) {\n        var _state = this.get(stateOrName);\n        if (!_state)\n            throw new Error(\"Can't deregister state; not found: \" + stateOrName);\n        var deregisteredStates = this._deregisterTree(_state.$$state());\n        this.listeners.forEach(function (listener) { return listener(\"deregistered\", deregisteredStates.map(function (s) { return s.self; })); });\n        return deregisteredStates;\n    };\n    StateRegistry.prototype.get = function (stateOrName, base) {\n        var _this = this;\n        if (arguments.length === 0)\n            return Object.keys(this.states).map(function (name) { return _this.states[name].self; });\n        var found = this.matcher.find(stateOrName, base);\n        return found && found.self || null;\n    };\n    StateRegistry.prototype.decorator = function (name, func) {\n        return this.builder.builder(name, func);\n    };\n    return StateRegistry;\n}());\nexports.StateRegistry = StateRegistry;\n//# sourceMappingURL=stateRegistry.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/state/stateRegistry.js\n// module id = Hb7g\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @internalapi\n * @module url\n */\n/** for typedoc */\nvar common_1 = require(\"../common/common\");\nvar predicates_1 = require(\"../common/predicates\");\nvar urlMatcher_1 = require(\"./urlMatcher\");\nvar hof_1 = require(\"../common/hof\");\nvar urlRule_1 = require(\"./urlRule\");\nvar targetState_1 = require(\"../state/targetState\");\n/** @hidden */\nfunction appendBasePath(url, isHtml5, absolute, baseHref) {\n    if (baseHref === '/')\n        return url;\n    if (isHtml5)\n        return baseHref.slice(0, -1) + url;\n    if (absolute)\n        return baseHref.slice(1) + url;\n    return url;\n}\n/** @hidden */\nvar getMatcher = hof_1.prop(\"urlMatcher\");\n/**\n * Default rule priority sorting function.\n *\n * Sorts rules by:\n *\n * - Explicit priority (set rule priority using [[UrlRulesApi.when]])\n * - Rule type (STATE: 4, URLMATCHER: 4, REGEXP: 3, RAW: 2, OTHER: 1)\n * - `UrlMatcher` specificity ([[UrlMatcher.compare]]): works for STATE and URLMATCHER types to pick the most specific rule.\n * - Registration order (for rule types other than STATE and URLMATCHER)\n *\n * @coreapi\n */\nvar defaultRuleSortFn;\ndefaultRuleSortFn = common_1.composeSort(common_1.sortBy(hof_1.pipe(hof_1.prop(\"priority\"), function (x) { return -x; })), common_1.sortBy(hof_1.pipe(hof_1.prop(\"type\"), function (type) { return ({ \"STATE\": 4, \"URLMATCHER\": 4, \"REGEXP\": 3, \"RAW\": 2, \"OTHER\": 1 })[type]; })), function (a, b) { return (getMatcher(a) && getMatcher(b)) ? urlMatcher_1.UrlMatcher.compare(getMatcher(a), getMatcher(b)) : 0; }, common_1.sortBy(hof_1.prop(\"$id\"), common_1.inArray([\"REGEXP\", \"RAW\", \"OTHER\"])));\n/**\n * Updates URL and responds to URL changes\n *\n * ### Deprecation warning:\n * This class is now considered to be an internal API\n * Use the [[UrlService]] instead.\n * For configuring URL rules, use the [[UrlRulesApi]] which can be found as [[UrlService.rules]].\n *\n * This class updates the URL when the state changes.\n * It also responds to changes in the URL.\n */\nvar UrlRouter = (function () {\n    /** @hidden */\n    function UrlRouter(router) {\n        /** @hidden */ this._sortFn = defaultRuleSortFn;\n        /** @hidden */ this._rules = [];\n        /** @hidden */ this.interceptDeferred = false;\n        /** @hidden */ this._id = 0;\n        /** @hidden */ this._sorted = false;\n        this._router = router;\n        this.urlRuleFactory = new urlRule_1.UrlRuleFactory(router);\n        common_1.createProxyFunctions(hof_1.val(UrlRouter.prototype), this, hof_1.val(this));\n    }\n    /** @internalapi */\n    UrlRouter.prototype.dispose = function () {\n        this.listen(false);\n        this._rules = [];\n        delete this._otherwiseFn;\n    };\n    /** @inheritdoc */\n    UrlRouter.prototype.sort = function (compareFn) {\n        this._rules.sort(this._sortFn = compareFn || this._sortFn);\n        this._sorted = true;\n    };\n    UrlRouter.prototype.ensureSorted = function () {\n        this._sorted || this.sort();\n    };\n    /**\n     * Given a URL, check all rules and return the best [[MatchResult]]\n     * @param url\n     * @returns {MatchResult}\n     */\n    UrlRouter.prototype.match = function (url) {\n        var _this = this;\n        this.ensureSorted();\n        url = common_1.extend({ path: '', search: {}, hash: '' }, url);\n        var rules = this.rules();\n        if (this._otherwiseFn)\n            rules.push(this._otherwiseFn);\n        // Checks a single rule. Returns { rule: rule, match: match, weight: weight } if it matched, or undefined\n        var checkRule = function (rule) {\n            var match = rule.match(url, _this._router);\n            return match && { match: match, rule: rule, weight: rule.matchPriority(match) };\n        };\n        // The rules are pre-sorted.\n        // - Find the first matching rule.\n        // - Find any other matching rule that sorted *exactly the same*, according to `.sort()`.\n        // - Choose the rule with the highest match weight.\n        var best;\n        for (var i = 0; i < rules.length; i++) {\n            // Stop when there is a 'best' rule and the next rule sorts differently than it.\n            if (best && this._sortFn(rules[i], best.rule) !== 0)\n                break;\n            var current = checkRule(rules[i]);\n            // Pick the best MatchResult\n            best = (!best || current && current.weight > best.weight) ? current : best;\n        }\n        return best;\n    };\n    /** @inheritdoc */\n    UrlRouter.prototype.sync = function (evt) {\n        if (evt && evt.defaultPrevented)\n            return;\n        var router = this._router, $url = router.urlService, $state = router.stateService;\n        var url = {\n            path: $url.path(), search: $url.search(), hash: $url.hash(),\n        };\n        var best = this.match(url);\n        var applyResult = hof_1.pattern([\n            [predicates_1.isString, function (newurl) { return $url.url(newurl, true); }],\n            [targetState_1.TargetState.isDef, function (def) { return $state.go(def.state, def.params, def.options); }],\n            [hof_1.is(targetState_1.TargetState), function (target) { return $state.go(target.state(), target.params(), target.options()); }],\n        ]);\n        applyResult(best && best.rule.handler(best.match, url, router));\n    };\n    /** @inheritdoc */\n    UrlRouter.prototype.listen = function (enabled) {\n        var _this = this;\n        if (enabled === false) {\n            this._stopFn && this._stopFn();\n            delete this._stopFn;\n        }\n        else {\n            return this._stopFn = this._stopFn || this._router.urlService.onChange(function (evt) { return _this.sync(evt); });\n        }\n    };\n    /**\n     * Internal API.\n     * @internalapi\n     */\n    UrlRouter.prototype.update = function (read) {\n        var $url = this._router.locationService;\n        if (read) {\n            this.location = $url.path();\n            return;\n        }\n        if ($url.path() === this.location)\n            return;\n        $url.url(this.location, true);\n    };\n    /**\n     * Internal API.\n     *\n     * Pushes a new location to the browser history.\n     *\n     * @internalapi\n     * @param urlMatcher\n     * @param params\n     * @param options\n     */\n    UrlRouter.prototype.push = function (urlMatcher, params, options) {\n        var replace = options && !!options.replace;\n        this._router.urlService.url(urlMatcher.format(params || {}), replace);\n    };\n    /**\n     * Builds and returns a URL with interpolated parameters\n     *\n     * #### Example:\n     * ```js\n     * matcher = $umf.compile(\"/about/:person\");\n     * params = { person: \"bob\" };\n     * $bob = $urlRouter.href(matcher, params);\n     * // $bob == \"/about/bob\";\n     * ```\n     *\n     * @param urlMatcher The [[UrlMatcher]] object which is used as the template of the URL to generate.\n     * @param params An object of parameter values to fill the matcher's required parameters.\n     * @param options Options object. The options are:\n     *\n     * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. \"http://www.example.com/fullurl\".\n     *\n     * @returns Returns the fully compiled URL, or `null` if `params` fail validation against `urlMatcher`\n     */\n    UrlRouter.prototype.href = function (urlMatcher, params, options) {\n        var url = urlMatcher.format(params);\n        if (url == null)\n            return null;\n        options = options || { absolute: false };\n        var cfg = this._router.urlService.config;\n        var isHtml5 = cfg.html5Mode();\n        if (!isHtml5 && url !== null) {\n            url = \"#\" + cfg.hashPrefix() + url;\n        }\n        url = appendBasePath(url, isHtml5, options.absolute, cfg.baseHref());\n        if (!options.absolute || !url) {\n            return url;\n        }\n        var slash = (!isHtml5 && url ? '/' : ''), port = cfg.port();\n        port = (port === 80 || port === 443 ? '' : ':' + port);\n        return [cfg.protocol(), '://', cfg.host(), port, slash, url].join('');\n    };\n    /**\n     * Manually adds a URL Rule.\n     *\n     * Usually, a url rule is added using [[StateDeclaration.url]] or [[when]].\n     * This api can be used directly for more control (to register a [[BaseUrlRule]], for example).\n     * Rules can be created using [[UrlRouter.urlRuleFactory]], or create manually as simple objects.\n     *\n     * A rule should have a `match` function which returns truthy if the rule matched.\n     * It should also have a `handler` function which is invoked if the rule is the best match.\n     *\n     * @return a function that deregisters the rule\n     */\n    UrlRouter.prototype.rule = function (rule) {\n        var _this = this;\n        if (!urlRule_1.UrlRuleFactory.isUrlRule(rule))\n            throw new Error(\"invalid rule\");\n        rule.$id = this._id++;\n        rule.priority = rule.priority || 0;\n        this._rules.push(rule);\n        this._sorted = false;\n        return function () { return _this.removeRule(rule); };\n    };\n    /** @inheritdoc */\n    UrlRouter.prototype.removeRule = function (rule) {\n        common_1.removeFrom(this._rules, rule);\n    };\n    /** @inheritdoc */\n    UrlRouter.prototype.rules = function () {\n        this.ensureSorted();\n        return this._rules.slice();\n    };\n    /** @inheritdoc */\n    UrlRouter.prototype.otherwise = function (handler) {\n        var handlerFn = getHandlerFn(handler);\n        this._otherwiseFn = this.urlRuleFactory.create(hof_1.val(true), handlerFn);\n        this._sorted = false;\n    };\n    ;\n    /** @inheritdoc */\n    UrlRouter.prototype.initial = function (handler) {\n        var handlerFn = getHandlerFn(handler);\n        var matchFn = function (urlParts, router) {\n            return router.globals.transitionHistory.size() === 0 && !!/^\\/?$/.exec(urlParts.path);\n        };\n        this.rule(this.urlRuleFactory.create(matchFn, handlerFn));\n    };\n    ;\n    /** @inheritdoc */\n    UrlRouter.prototype.when = function (matcher, handler, options) {\n        var rule = this.urlRuleFactory.create(matcher, handler);\n        if (predicates_1.isDefined(options && options.priority))\n            rule.priority = options.priority;\n        this.rule(rule);\n        return rule;\n    };\n    ;\n    /** @inheritdoc */\n    UrlRouter.prototype.deferIntercept = function (defer) {\n        if (defer === undefined)\n            defer = true;\n        this.interceptDeferred = defer;\n    };\n    ;\n    return UrlRouter;\n}());\nexports.UrlRouter = UrlRouter;\nfunction getHandlerFn(handler) {\n    if (!predicates_1.isFunction(handler) && !predicates_1.isString(handler) && !hof_1.is(targetState_1.TargetState)(handler) && !targetState_1.TargetState.isDef(handler)) {\n        throw new Error(\"'handler' must be a string, function, TargetState, or have a state: 'newtarget' property\");\n    }\n    return predicates_1.isFunction(handler) ? handler : hof_1.val(handler);\n}\n//# sourceMappingURL=urlRouter.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/url/urlRouter.js\n// module id = HgDW\n// module chunks = 0","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @internalapi\n * @module vanilla\n */\n/** */\n__export(require(\"./vanilla/index\"));\n//# sourceMappingURL=vanilla.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/vanilla.js\n// module id = JruV\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * # Transition tracing (debug)\n *\n * Enable transition tracing to print transition information to the console,\n * in order to help debug your application.\n * Tracing logs detailed information about each Transition to your console.\n *\n * To enable tracing, import the [[Trace]] singleton and enable one or more categories.\n *\n * ### ES6\n * ```js\n * import {trace} from \"ui-router-ng2\"; // or \"angular-ui-router\"\n * trace.enable(1, 5); // TRANSITION and VIEWCONFIG\n * ```\n *\n * ### CJS\n * ```js\n * let trace = require(\"angular-ui-router\").trace; // or \"ui-router-ng2\"\n * trace.enable(\"TRANSITION\", \"VIEWCONFIG\");\n * ```\n *\n * ### Globals\n * ```js\n * let trace = window[\"angular-ui-router\"].trace; // or \"ui-router-ng2\"\n * trace.enable(); // Trace everything (very verbose)\n * ```\n *\n * ### Angular 1:\n * ```js\n * app.run($trace => $trace.enable());\n * ```\n *\n * @coreapi\n * @module trace\n */ /** for typedoc */\nvar hof_1 = require(\"../common/hof\");\nvar predicates_1 = require(\"../common/predicates\");\nvar strings_1 = require(\"./strings\");\n/** @hidden */\nfunction uiViewString(viewData) {\n    if (!viewData)\n        return 'ui-view (defunct)';\n    return \"[ui-view#\" + viewData.id + \" tag \" +\n        (\"in template from '\" + (viewData.creationContext && viewData.creationContext.name || '(root)') + \"' state]: \") +\n        (\"fqn: '\" + viewData.fqn + \"', \") +\n        (\"name: '\" + viewData.name + \"@\" + viewData.creationContext + \"')\");\n}\n/** @hidden */\nvar viewConfigString = function (viewConfig) {\n    return \"[ViewConfig#\" + viewConfig.$id + \" from '\" + (viewConfig.viewDecl.$context.name || '(root)') + \"' state]: target ui-view: '\" + viewConfig.viewDecl.$uiViewName + \"@\" + viewConfig.viewDecl.$uiViewContextAnchor + \"'\";\n};\n/** @hidden */\nfunction normalizedCat(input) {\n    return predicates_1.isNumber(input) ? Category[input] : Category[Category[input]];\n}\n/**\n * Trace categories Enum\n *\n * Enable or disable a category using [[Trace.enable]] or [[Trace.disable]]\n *\n * `trace.enable(Category.TRANSITION)`\n *\n * These can also be provided using a matching string, or position ordinal\n *\n * `trace.enable(\"TRANSITION\")`\n *\n * `trace.enable(1)`\n */\nvar Category;\n(function (Category) {\n    Category[Category[\"RESOLVE\"] = 0] = \"RESOLVE\";\n    Category[Category[\"TRANSITION\"] = 1] = \"TRANSITION\";\n    Category[Category[\"HOOK\"] = 2] = \"HOOK\";\n    Category[Category[\"UIVIEW\"] = 3] = \"UIVIEW\";\n    Category[Category[\"VIEWCONFIG\"] = 4] = \"VIEWCONFIG\";\n})(Category = exports.Category || (exports.Category = {}));\n/** @hidden */ var _tid = hof_1.parse(\"$id\");\n/** @hidden */ var _rid = hof_1.parse(\"router.$id\");\n/** @hidden */ var transLbl = function (trans) { return \"Transition #\" + _tid(trans) + \"-\" + _rid(trans); };\n/**\n * Prints UI-Router Transition trace information to the console.\n */\nvar Trace = (function () {\n    /** @hidden */\n    function Trace() {\n        /** @hidden */\n        this._enabled = {};\n        this.approximateDigests = 0;\n    }\n    /** @hidden */\n    Trace.prototype._set = function (enabled, categories) {\n        var _this = this;\n        if (!categories.length) {\n            categories = Object.keys(Category)\n                .map(function (k) { return parseInt(k, 10); })\n                .filter(function (k) { return !isNaN(k); })\n                .map(function (key) { return Category[key]; });\n        }\n        categories.map(normalizedCat).forEach(function (category) { return _this._enabled[category] = enabled; });\n    };\n    /**\n     * Enables a trace [[Category]]\n     *\n     * ```js\n     * trace.enable(\"TRANSITION\");\n     * ```\n     *\n     * @param categories categories to enable. If `categories` is omitted, all categories are enabled.\n     *        Also takes strings (category name) or ordinal (category position)\n     */\n    Trace.prototype.enable = function () {\n        var categories = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            categories[_i] = arguments[_i];\n        }\n        this._set(true, categories);\n    };\n    /**\n     * Disables a trace [[Category]]\n     *\n     * ```js\n     * trace.disable(\"VIEWCONFIG\");\n     * ```\n     *\n     * @param categories categories to disable. If `categories` is omitted, all categories are disabled.\n     *        Also takes strings (category name) or ordinal (category position)\n     */\n    Trace.prototype.disable = function () {\n        var categories = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            categories[_i] = arguments[_i];\n        }\n        this._set(false, categories);\n    };\n    /**\n     * Retrieves the enabled stateus of a [[Category]]\n     *\n     * ```js\n     * trace.enabled(\"VIEWCONFIG\"); // true or false\n     * ```\n     *\n     * @returns boolean true if the category is enabled\n     */\n    Trace.prototype.enabled = function (category) {\n        return !!this._enabled[normalizedCat(category)];\n    };\n    /** @internalapi called by ui-router code */\n    Trace.prototype.traceTransitionStart = function (trans) {\n        if (!this.enabled(Category.TRANSITION))\n            return;\n        console.log(transLbl(trans) + \": Started  -> \" + strings_1.stringify(trans));\n    };\n    /** @internalapi called by ui-router code */\n    Trace.prototype.traceTransitionIgnored = function (trans) {\n        if (!this.enabled(Category.TRANSITION))\n            return;\n        console.log(transLbl(trans) + \": Ignored  <> \" + strings_1.stringify(trans));\n    };\n    /** @internalapi called by ui-router code */\n    Trace.prototype.traceHookInvocation = function (step, trans, options) {\n        if (!this.enabled(Category.HOOK))\n            return;\n        var event = hof_1.parse(\"traceData.hookType\")(options) || \"internal\", context = hof_1.parse(\"traceData.context.state.name\")(options) || hof_1.parse(\"traceData.context\")(options) || \"unknown\", name = strings_1.functionToString(step.registeredHook.callback);\n        console.log(transLbl(trans) + \":   Hook -> \" + event + \" context: \" + context + \", \" + strings_1.maxLength(200, name));\n    };\n    /** @internalapi called by ui-router code */\n    Trace.prototype.traceHookResult = function (hookResult, trans, transitionOptions) {\n        if (!this.enabled(Category.HOOK))\n            return;\n        console.log(transLbl(trans) + \":   <- Hook returned: \" + strings_1.maxLength(200, strings_1.stringify(hookResult)));\n    };\n    /** @internalapi called by ui-router code */\n    Trace.prototype.traceResolvePath = function (path, when, trans) {\n        if (!this.enabled(Category.RESOLVE))\n            return;\n        console.log(transLbl(trans) + \":         Resolving \" + path + \" (\" + when + \")\");\n    };\n    /** @internalapi called by ui-router code */\n    Trace.prototype.traceResolvableResolved = function (resolvable, trans) {\n        if (!this.enabled(Category.RESOLVE))\n            return;\n        console.log(transLbl(trans) + \":               <- Resolved  \" + resolvable + \" to: \" + strings_1.maxLength(200, strings_1.stringify(resolvable.data)));\n    };\n    /** @internalapi called by ui-router code */\n    Trace.prototype.traceError = function (reason, trans) {\n        if (!this.enabled(Category.TRANSITION))\n            return;\n        console.log(transLbl(trans) + \": <- Rejected \" + strings_1.stringify(trans) + \", reason: \" + reason);\n    };\n    /** @internalapi called by ui-router code */\n    Trace.prototype.traceSuccess = function (finalState, trans) {\n        if (!this.enabled(Category.TRANSITION))\n            return;\n        console.log(transLbl(trans) + \": <- Success  \" + strings_1.stringify(trans) + \", final state: \" + finalState.name);\n    };\n    /** @internalapi called by ui-router code */\n    Trace.prototype.traceUIViewEvent = function (event, viewData, extra) {\n        if (extra === void 0) { extra = \"\"; }\n        if (!this.enabled(Category.UIVIEW))\n            return;\n        console.log(\"ui-view: \" + strings_1.padString(30, event) + \" \" + uiViewString(viewData) + extra);\n    };\n    /** @internalapi called by ui-router code */\n    Trace.prototype.traceUIViewConfigUpdated = function (viewData, context) {\n        if (!this.enabled(Category.UIVIEW))\n            return;\n        this.traceUIViewEvent(\"Updating\", viewData, \" with ViewConfig from context='\" + context + \"'\");\n    };\n    /** @internalapi called by ui-router code */\n    Trace.prototype.traceUIViewFill = function (viewData, html) {\n        if (!this.enabled(Category.UIVIEW))\n            return;\n        this.traceUIViewEvent(\"Fill\", viewData, \" with: \" + strings_1.maxLength(200, html));\n    };\n    /** @internalapi called by ui-router code */\n    Trace.prototype.traceViewServiceEvent = function (event, viewConfig) {\n        if (!this.enabled(Category.VIEWCONFIG))\n            return;\n        console.log(\"VIEWCONFIG: \" + event + \" \" + viewConfigString(viewConfig));\n    };\n    /** @internalapi called by ui-router code */\n    Trace.prototype.traceViewServiceUIViewEvent = function (event, viewData) {\n        if (!this.enabled(Category.VIEWCONFIG))\n            return;\n        console.log(\"VIEWCONFIG: \" + event + \" \" + uiViewString(viewData));\n    };\n    return Trace;\n}());\nexports.Trace = Trace;\n/**\n * The [[Trace]] singleton\n *\n * #### Example:\n * ```js\n * import {trace} from \"angular-ui-router\";\n * trace.enable(1, 5);\n * ```\n */\nvar trace = new Trace();\nexports.trace = trace;\n//# sourceMappingURL=trace.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/common/trace.js\n// module id = KQ7J\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.notImplemented = function (fnname) { return function () {\n    throw new Error(fnname + \"(): No coreservices implementation for UI-Router is loaded.\");\n}; };\nvar services = {\n    $q: undefined,\n    $injector: undefined,\n};\nexports.services = services;\n//# sourceMappingURL=coreservices.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/common/coreservices.js\n// module id = LK5s\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @coreapi\n * @module state\n */\n/** */\nvar common_1 = require(\"../common/common\");\nvar predicates_1 = require(\"../common/predicates\");\nvar queue_1 = require(\"../common/queue\");\nvar coreservices_1 = require(\"../common/coreservices\");\nvar pathFactory_1 = require(\"../path/pathFactory\");\nvar pathNode_1 = require(\"../path/pathNode\");\nvar transitionService_1 = require(\"../transition/transitionService\");\nvar rejectFactory_1 = require(\"../transition/rejectFactory\");\nvar targetState_1 = require(\"./targetState\");\nvar param_1 = require(\"../params/param\");\nvar glob_1 = require(\"../common/glob\");\nvar resolveContext_1 = require(\"../resolve/resolveContext\");\nvar lazyLoad_1 = require(\"../hooks/lazyLoad\");\nvar hof_1 = require(\"../common/hof\");\n/**\n * Provides state related service functions\n *\n * This class provides services related to ui-router states.\n * An instance of this class is located on the global [[UIRouter]] object.\n */\nvar StateService = (function () {\n    /** @internalapi */\n    function StateService(router) {\n        this.router = router;\n        /** @internalapi */\n        this.invalidCallbacks = [];\n        /** @hidden */\n        this._defaultErrorHandler = function $defaultErrorHandler($error$) {\n            if ($error$ instanceof Error && $error$.stack) {\n                console.error($error$);\n                console.error($error$.stack);\n            }\n            else if ($error$ instanceof rejectFactory_1.Rejection) {\n                console.error($error$.toString());\n                if ($error$.detail && $error$.detail.stack)\n                    console.error($error$.detail.stack);\n            }\n            else {\n                console.error($error$);\n            }\n        };\n        var getters = ['current', '$current', 'params', 'transition'];\n        var boundFns = Object.keys(StateService.prototype).filter(hof_1.not(common_1.inArray(getters)));\n        common_1.createProxyFunctions(hof_1.val(StateService.prototype), this, hof_1.val(this), boundFns);\n    }\n    Object.defineProperty(StateService.prototype, \"transition\", {\n        /**\n         * The [[Transition]] currently in progress (or null)\n         *\n         * This is a passthrough through to [[UIRouterGlobals.transition]]\n         */\n        get: function () { return this.router.globals.transition; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(StateService.prototype, \"params\", {\n        /**\n         * The latest successful state parameters\n         *\n         * This is a passthrough through to [[UIRouterGlobals.params]]\n         */\n        get: function () { return this.router.globals.params; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(StateService.prototype, \"current\", {\n        /**\n         * The current [[StateDeclaration]]\n         *\n         * This is a passthrough through to [[UIRouterGlobals.current]]\n         */\n        get: function () { return this.router.globals.current; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(StateService.prototype, \"$current\", {\n        /**\n         * The current [[StateObject]]\n         *\n         * This is a passthrough through to [[UIRouterGlobals.$current]]\n         */\n        get: function () { return this.router.globals.$current; },\n        enumerable: true,\n        configurable: true\n    });\n    /** @internalapi */\n    StateService.prototype.dispose = function () {\n        this.defaultErrorHandler(common_1.noop);\n        this.invalidCallbacks = [];\n    };\n    /**\n     * Handler for when [[transitionTo]] is called with an invalid state.\n     *\n     * Invokes the [[onInvalid]] callbacks, in natural order.\n     * Each callback's return value is checked in sequence until one of them returns an instance of TargetState.\n     * The results of the callbacks are wrapped in $q.when(), so the callbacks may return promises.\n     *\n     * If a callback returns an TargetState, then it is used as arguments to $state.transitionTo() and the result returned.\n     *\n     * @internalapi\n     */\n    StateService.prototype._handleInvalidTargetState = function (fromPath, toState) {\n        var _this = this;\n        var fromState = pathFactory_1.PathUtils.makeTargetState(fromPath);\n        var globals = this.router.globals;\n        var latestThing = function () { return globals.transitionHistory.peekTail(); };\n        var latest = latestThing();\n        var callbackQueue = new queue_1.Queue(this.invalidCallbacks.slice());\n        var injector = new resolveContext_1.ResolveContext(fromPath).injector();\n        var checkForRedirect = function (result) {\n            if (!(result instanceof targetState_1.TargetState)) {\n                return;\n            }\n            var target = result;\n            // Recreate the TargetState, in case the state is now defined.\n            target = _this.target(target.identifier(), target.params(), target.options());\n            if (!target.valid()) {\n                return rejectFactory_1.Rejection.invalid(target.error()).toPromise();\n            }\n            if (latestThing() !== latest) {\n                return rejectFactory_1.Rejection.superseded().toPromise();\n            }\n            return _this.transitionTo(target.identifier(), target.params(), target.options());\n        };\n        function invokeNextCallback() {\n            var nextCallback = callbackQueue.dequeue();\n            if (nextCallback === undefined)\n                return rejectFactory_1.Rejection.invalid(toState.error()).toPromise();\n            var callbackResult = coreservices_1.services.$q.when(nextCallback(toState, fromState, injector));\n            return callbackResult.then(checkForRedirect).then(function (result) { return result || invokeNextCallback(); });\n        }\n        return invokeNextCallback();\n    };\n    /**\n     * Registers an Invalid State handler\n     *\n     * Registers a [[OnInvalidCallback]] function to be invoked when [[StateService.transitionTo]]\n     * has been called with an invalid state reference parameter\n     *\n     * Example:\n     * ```js\n     * stateService.onInvalid(function(to, from, injector) {\n     *   if (to.name() === 'foo') {\n     *     let lazyLoader = injector.get('LazyLoadService');\n     *     return lazyLoader.load('foo')\n     *         .then(() => stateService.target('foo'));\n     *   }\n     * });\n     * ```\n     *\n     * @param {function} callback invoked when the toState is invalid\n     *   This function receives the (invalid) toState, the fromState, and an injector.\n     *   The function may optionally return a [[TargetState]] or a Promise for a TargetState.\n     *   If one is returned, it is treated as a redirect.\n     *\n     * @returns a function which deregisters the callback\n     */\n    StateService.prototype.onInvalid = function (callback) {\n        this.invalidCallbacks.push(callback);\n        return function deregisterListener() {\n            common_1.removeFrom(this.invalidCallbacks)(callback);\n        }.bind(this);\n    };\n    /**\n     * Reloads the current state\n     *\n     * A method that force reloads the current state, or a partial state hierarchy.\n     * All resolves are re-resolved, and components reinstantiated.\n     *\n     * #### Example:\n     * ```js\n     * let app angular.module('app', ['ui.router']);\n     *\n     * app.controller('ctrl', function ($scope, $state) {\n     *   $scope.reload = function(){\n     *     $state.reload();\n     *   }\n     * });\n     * ```\n     *\n     * Note: `reload()` is just an alias for:\n     *\n     * ```js\n     * $state.transitionTo($state.current, $state.params, {\n     *   reload: true, inherit: false\n     * });\n     * ```\n     *\n     * @param reloadState A state name or a state object.\n     *    If present, this state and all its children will be reloaded, but ancestors will not reload.\n     *\n     * #### Example:\n     * ```js\n     * //assuming app application consists of 3 states: 'contacts', 'contacts.detail', 'contacts.detail.item'\n     * //and current state is 'contacts.detail.item'\n     * let app angular.module('app', ['ui.router']);\n     *\n     * app.controller('ctrl', function ($scope, $state) {\n     *   $scope.reload = function(){\n     *     //will reload 'contact.detail' and nested 'contact.detail.item' states\n     *     $state.reload('contact.detail');\n     *   }\n     * });\n     * ```\n     *\n     * @returns A promise representing the state of the new transition. See [[StateService.go]]\n     */\n    StateService.prototype.reload = function (reloadState) {\n        return this.transitionTo(this.current, this.params, {\n            reload: predicates_1.isDefined(reloadState) ? reloadState : true,\n            inherit: false,\n            notify: false,\n        });\n    };\n    ;\n    /**\n     * Transition to a different state and/or parameters\n     *\n     * Convenience method for transitioning to a new state.\n     *\n     * `$state.go` calls `$state.transitionTo` internally but automatically sets options to\n     * `{ location: true, inherit: true, relative: router.globals.$current, notify: true }`.\n     * This allows you to use either an absolute or relative `to` argument (because of `relative: router.globals.$current`).\n     * It also allows you to specify * only the parameters you'd like to update, while letting unspecified parameters\n     * inherit from the current parameter values (because of `inherit: true`).\n     *\n     * #### Example:\n     * ```js\n     * let app = angular.module('app', ['ui.router']);\n     *\n     * app.controller('ctrl', function ($scope, $state) {\n     *   $scope.changeState = function () {\n     *     $state.go('contact.detail');\n     *   };\n     * });\n     * ```\n     *\n     * @param to Absolute state name, state object, or relative state path (relative to current state).\n     *\n     * Some examples:\n     *\n     * - `$state.go('contact.detail')` - will go to the `contact.detail` state\n     * - `$state.go('^')` - will go to the parent state\n     * - `$state.go('^.sibling')` - if current state is `home.child`, will go to the `home.sibling` state\n     * - `$state.go('.child.grandchild')` - if current state is home, will go to the `home.child.grandchild` state\n     *\n     * @param params A map of the parameters that will be sent to the state, will populate $stateParams.\n     *\n     *    Any parameters that are not specified will be inherited from current parameter values (because of `inherit: true`).\n     *    This allows, for example, going to a sibling state that shares parameters defined by a parent state.\n     *\n     * @param options Transition options\n     *\n     * @returns {promise} A promise representing the state of the new transition.\n     */\n    StateService.prototype.go = function (to, params, options) {\n        var defautGoOpts = { relative: this.$current, inherit: true };\n        var transOpts = common_1.defaults(options, defautGoOpts, transitionService_1.defaultTransOpts);\n        return this.transitionTo(to, params, transOpts);\n    };\n    ;\n    /**\n     * Creates a [[TargetState]]\n     *\n     * This is a factory method for creating a TargetState\n     *\n     * This may be returned from a Transition Hook to redirect a transition, for example.\n     */\n    StateService.prototype.target = function (identifier, params, options) {\n        if (options === void 0) { options = {}; }\n        // If we're reloading, find the state object to reload from\n        if (predicates_1.isObject(options.reload) && !options.reload.name)\n            throw new Error('Invalid reload state object');\n        var reg = this.router.stateRegistry;\n        options.reloadState = options.reload === true ? reg.root() : reg.matcher.find(options.reload, options.relative);\n        if (options.reload && !options.reloadState)\n            throw new Error(\"No such reload state '\" + (predicates_1.isString(options.reload) ? options.reload : options.reload.name) + \"'\");\n        var stateDefinition = reg.matcher.find(identifier, options.relative);\n        return new targetState_1.TargetState(identifier, stateDefinition, params, options);\n    };\n    ;\n    StateService.prototype.getCurrentPath = function () {\n        var _this = this;\n        var globals = this.router.globals;\n        var latestSuccess = globals.successfulTransitions.peekTail();\n        var rootPath = function () { return [new pathNode_1.PathNode(_this.router.stateRegistry.root())]; };\n        return latestSuccess ? latestSuccess.treeChanges().to : rootPath();\n    };\n    /**\n     * Low-level method for transitioning to a new state.\n     *\n     * The [[go]] method (which uses `transitionTo` internally) is recommended in most situations.\n     *\n     * #### Example:\n     * ```js\n     * let app = angular.module('app', ['ui.router']);\n     *\n     * app.controller('ctrl', function ($scope, $state) {\n     *   $scope.changeState = function () {\n     *     $state.transitionTo('contact.detail');\n     *   };\n     * });\n     * ```\n     *\n     * @param to State name or state object.\n     * @param toParams A map of the parameters that will be sent to the state,\n     *      will populate $stateParams.\n     * @param options Transition options\n     *\n     * @returns A promise representing the state of the new transition. See [[go]]\n     */\n    StateService.prototype.transitionTo = function (to, toParams, options) {\n        var _this = this;\n        if (toParams === void 0) { toParams = {}; }\n        if (options === void 0) { options = {}; }\n        var router = this.router;\n        var globals = router.globals;\n        options = common_1.defaults(options, transitionService_1.defaultTransOpts);\n        var getCurrent = function () {\n            return globals.transition;\n        };\n        options = common_1.extend(options, { current: getCurrent });\n        var ref = this.target(to, toParams, options);\n        var currentPath = this.getCurrentPath();\n        if (!ref.exists())\n            return this._handleInvalidTargetState(currentPath, ref);\n        if (!ref.valid())\n            return common_1.silentRejection(ref.error());\n        /**\n         * Special handling for Ignored, Aborted, and Redirected transitions\n         *\n         * The semantics for the transition.run() promise and the StateService.transitionTo()\n         * promise differ. For instance, the run() promise may be rejected because it was\n         * IGNORED, but the transitionTo() promise is resolved because from the user perspective\n         * no error occurred.  Likewise, the transition.run() promise may be rejected because of\n         * a Redirect, but the transitionTo() promise is chained to the new Transition's promise.\n         */\n        var rejectedTransitionHandler = function (transition) { return function (error) {\n            if (error instanceof rejectFactory_1.Rejection) {\n                var isLatest = router.globals.lastStartedTransitionId === transition.$id;\n                if (error.type === rejectFactory_1.RejectType.IGNORED) {\n                    isLatest && router.urlRouter.update();\n                    // Consider ignored `Transition.run()` as a successful `transitionTo`\n                    return coreservices_1.services.$q.when(globals.current);\n                }\n                var detail = error.detail;\n                if (error.type === rejectFactory_1.RejectType.SUPERSEDED && error.redirected && detail instanceof targetState_1.TargetState) {\n                    // If `Transition.run()` was redirected, allow the `transitionTo()` promise to resolve successfully\n                    // by returning the promise for the new (redirect) `Transition.run()`.\n                    var redirect = transition.redirect(detail);\n                    return redirect.run().catch(rejectedTransitionHandler(redirect));\n                }\n                if (error.type === rejectFactory_1.RejectType.ABORTED) {\n                    isLatest && router.urlRouter.update();\n                    return coreservices_1.services.$q.reject(error);\n                }\n            }\n            var errorHandler = _this.defaultErrorHandler();\n            errorHandler(error);\n            return coreservices_1.services.$q.reject(error);\n        }; };\n        var transition = this.router.transitionService.create(currentPath, ref);\n        var transitionToPromise = transition.run().catch(rejectedTransitionHandler(transition));\n        common_1.silenceUncaughtInPromise(transitionToPromise); // issue #2676\n        // Return a promise for the transition, which also has the transition object on it.\n        return common_1.extend(transitionToPromise, { transition: transition });\n    };\n    ;\n    /**\n     * Checks if the current state *is* the provided state\n     *\n     * Similar to [[includes]] but only checks for the full state name.\n     * If params is supplied then it will be tested for strict equality against the current\n     * active params object, so all params must match with none missing and no extras.\n     *\n     * #### Example:\n     * ```js\n     * $state.$current.name = 'contacts.details.item';\n     *\n     * // absolute name\n     * $state.is('contact.details.item'); // returns true\n     * $state.is(contactDetailItemStateObject); // returns true\n     * ```\n     *\n     * // relative name (. and ^), typically from a template\n     * // E.g. from the 'contacts.details' template\n     * ```html\n     * <div ng-class=\"{highlighted: $state.is('.item')}\">Item</div>\n     * ```\n     *\n     * @param stateOrName The state name (absolute or relative) or state object you'd like to check.\n     * @param params A param object, e.g. `{sectionId: section.id}`, that you'd like\n     * to test against the current active state.\n     * @param options An options object. The options are:\n     *   - `relative`: If `stateOrName` is a relative state name and `options.relative` is set, .is will\n     *     test relative to `options.relative` state (or name).\n     *\n     * @returns Returns true if it is the state.\n     */\n    StateService.prototype.is = function (stateOrName, params, options) {\n        options = common_1.defaults(options, { relative: this.$current });\n        var state = this.router.stateRegistry.matcher.find(stateOrName, options.relative);\n        if (!predicates_1.isDefined(state))\n            return undefined;\n        if (this.$current !== state)\n            return false;\n        if (!params)\n            return true;\n        var schema = state.parameters({ inherit: true, matchingKeys: params });\n        return param_1.Param.equals(schema, param_1.Param.values(schema, params), this.params);\n    };\n    ;\n    /**\n     * Checks if the current state *includes* the provided state\n     *\n     * A method to determine if the current active state is equal to or is the child of the\n     * state stateName. If any params are passed then they will be tested for a match as well.\n     * Not all the parameters need to be passed, just the ones you'd like to test for equality.\n     *\n     * #### Example when `$state.$current.name === 'contacts.details.item'`\n     * ```js\n     * // Using partial names\n     * $state.includes(\"contacts\"); // returns true\n     * $state.includes(\"contacts.details\"); // returns true\n     * $state.includes(\"contacts.details.item\"); // returns true\n     * $state.includes(\"contacts.list\"); // returns false\n     * $state.includes(\"about\"); // returns false\n     * ```\n     *\n     * #### Glob Examples when `* $state.$current.name === 'contacts.details.item.url'`:\n     * ```js\n     * $state.includes(\"*.details.*.*\"); // returns true\n     * $state.includes(\"*.details.**\"); // returns true\n     * $state.includes(\"**.item.**\"); // returns true\n     * $state.includes(\"*.details.item.url\"); // returns true\n     * $state.includes(\"*.details.*.url\"); // returns true\n     * $state.includes(\"*.details.*\"); // returns false\n     * $state.includes(\"item.**\"); // returns false\n     * ```\n     *\n     * @param stateOrName A partial name, relative name, glob pattern,\n     *   or state object to be searched for within the current state name.\n     * @param params A param object, e.g. `{sectionId: section.id}`,\n     *   that you'd like to test against the current active state.\n     * @param options An options object. The options are:\n     *   - `relative`: If `stateOrName` is a relative state name and `options.relative` is set, .is will\n     *     test relative to `options.relative` state (or name).\n     *\n     * @returns {boolean} Returns true if it does include the state\n     */\n    StateService.prototype.includes = function (stateOrName, params, options) {\n        options = common_1.defaults(options, { relative: this.$current });\n        var glob = predicates_1.isString(stateOrName) && glob_1.Glob.fromString(stateOrName);\n        if (glob) {\n            if (!glob.matches(this.$current.name))\n                return false;\n            stateOrName = this.$current.name;\n        }\n        var state = this.router.stateRegistry.matcher.find(stateOrName, options.relative), include = this.$current.includes;\n        if (!predicates_1.isDefined(state))\n            return undefined;\n        if (!predicates_1.isDefined(include[state.name]))\n            return false;\n        if (!params)\n            return true;\n        var schema = state.parameters({ inherit: true, matchingKeys: params });\n        return param_1.Param.equals(schema, param_1.Param.values(schema, params), this.params);\n    };\n    ;\n    /**\n     * Generates a URL for a state and parameters\n     *\n     * Returns the url for the given state populated with the given params.\n     *\n     * #### Example:\n     * ```js\n     * expect($state.href(\"about.person\", { person: \"bob\" })).toEqual(\"/about/bob\");\n     * ```\n     *\n     * @param stateOrName The state name or state object you'd like to generate a url from.\n     * @param params An object of parameter values to fill the state's required parameters.\n     * @param options Options object. The options are:\n     *\n     * @returns {string} compiled state url\n     */\n    StateService.prototype.href = function (stateOrName, params, options) {\n        var defaultHrefOpts = {\n            lossy: true,\n            inherit: true,\n            absolute: false,\n            relative: this.$current,\n        };\n        options = common_1.defaults(options, defaultHrefOpts);\n        params = params || {};\n        var state = this.router.stateRegistry.matcher.find(stateOrName, options.relative);\n        if (!predicates_1.isDefined(state))\n            return null;\n        if (options.inherit)\n            params = this.params.$inherit(params, this.$current, state);\n        var nav = (state && options.lossy) ? state.navigable : state;\n        if (!nav || nav.url === undefined || nav.url === null) {\n            return null;\n        }\n        return this.router.urlRouter.href(nav.url, params, {\n            absolute: options.absolute,\n        });\n    };\n    ;\n    /**\n     * Sets or gets the default [[transitionTo]] error handler.\n     *\n     * The error handler is called when a [[Transition]] is rejected or when any error occurred during the Transition.\n     * This includes errors caused by resolves and transition hooks.\n     *\n     * Note:\n     * This handler does not receive certain Transition rejections.\n     * Redirected and Ignored Transitions are not considered to be errors by [[StateService.transitionTo]].\n     *\n     * The built-in default error handler logs the error to the console.\n     *\n     * You can provide your own custom handler.\n     *\n     * #### Example:\n     * ```js\n     * stateService.defaultErrorHandler(function() {\n     *   // Do not log transitionTo errors\n     * });\n     * ```\n     *\n     * @param handler a global error handler function\n     * @returns the current global error handler\n     */\n    StateService.prototype.defaultErrorHandler = function (handler) {\n        return this._defaultErrorHandler = handler || this._defaultErrorHandler;\n    };\n    StateService.prototype.get = function (stateOrName, base) {\n        var reg = this.router.stateRegistry;\n        if (arguments.length === 0)\n            return reg.get();\n        return reg.get(stateOrName, base || this.$current);\n    };\n    /**\n     * Lazy loads a state\n     *\n     * Explicitly runs a state's [[StateDeclaration.lazyLoad]] function.\n     *\n     * @param stateOrName the state that should be lazy loaded\n     * @param transition the optional Transition context to use (if the lazyLoad function requires an injector, etc)\n     * Note: If no transition is provided, a noop transition is created using the from the current state to the current state.\n     * This noop transition is not actually run.\n     *\n     * @returns a promise to lazy load\n     */\n    StateService.prototype.lazyLoad = function (stateOrName, transition) {\n        var state = this.get(stateOrName);\n        if (!state || !state.lazyLoad)\n            throw new Error(\"Can not lazy load \" + stateOrName);\n        var currentPath = this.getCurrentPath();\n        var target = pathFactory_1.PathUtils.makeTargetState(currentPath);\n        transition = transition || this.router.transitionService.create(currentPath, target);\n        return lazyLoad_1.lazyLoadState(transition, state);\n    };\n    return StateService;\n}());\nexports.StateService = StateService;\n//# sourceMappingURL=stateService.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/state/stateService.js\n// module id = MSho\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @internalapi\n * @module vanilla\n */\n/** */\nvar index_1 = require(\"../common/index\");\n// globally available injectables\nvar globals = {};\nvar STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\nvar ARGUMENT_NAMES = /([^\\s,]+)/g;\n/**\n * A basic angular1-like injector api\n *\n * This object implements four methods similar to the\n * [angular 1 dependency injector](https://docs.angularjs.org/api/auto/service/$injector)\n *\n * UI-Router evolved from an angular 1 library to a framework agnostic library.\n * However, some of the `@uirouter/core` code uses these ng1 style APIs to support ng1 style dependency injection.\n *\n * This object provides a naive implementation of a globally scoped dependency injection system.\n * It supports the following DI approaches:\n *\n * ### Function parameter names\n *\n * A function's `.toString()` is called, and the parameter names are parsed.\n * This only works when the parameter names aren't \"mangled\" by a minifier such as UglifyJS.\n *\n * ```js\n * function injectedFunction(FooService, BarService) {\n *   // FooService and BarService are injected\n * }\n * ```\n *\n * ### Function annotation\n *\n * A function may be annotated with an array of dependency names as the `$inject` property.\n *\n * ```js\n * injectedFunction.$inject = [ 'FooService', 'BarService' ];\n * function injectedFunction(fs, bs) {\n *   // FooService and BarService are injected as fs and bs parameters\n * }\n * ```\n *\n * ### Array notation\n *\n * An array provides the names of the dependencies to inject (as strings).\n * The function is the last element of the array.\n *\n * ```js\n * [ 'FooService', 'BarService', function (fs, bs) {\n *   // FooService and BarService are injected as fs and bs parameters\n * }]\n * ```\n *\n * @type {$InjectorLike}\n */\nexports.$injector = {\n    /** Gets an object from DI based on a string token */\n    get: function (name) { return globals[name]; },\n    /** Returns true if an object named `name` exists in global DI */\n    has: function (name) { return exports.$injector.get(name) != null; },\n    /**\n     * Injects a function\n     *\n     * @param fn the function to inject\n     * @param context the function's `this` binding\n     * @param locals An object with additional DI tokens and values, such as `{ someToken: { foo: 1 } }`\n     */\n    invoke: function (fn, context, locals) {\n        var all = index_1.extend({}, globals, locals || {});\n        var params = exports.$injector.annotate(fn);\n        var ensureExist = index_1.assertPredicate(function (key) { return all.hasOwnProperty(key); }, function (key) { return \"DI can't find injectable: '\" + key + \"'\"; });\n        var args = params.filter(ensureExist).map(function (x) { return all[x]; });\n        if (index_1.isFunction(fn))\n            return fn.apply(context, args);\n        else\n            return fn.slice(-1)[0].apply(context, args);\n    },\n    /**\n     * Returns a function's dependencies\n     *\n     * Analyzes a function (or array) and returns an array of DI tokens that the function requires.\n     * @return an array of `string`s\n     */\n    annotate: function (fn) {\n        if (!index_1.isInjectable(fn))\n            throw new Error(\"Not an injectable function: \" + fn);\n        if (fn && fn.$inject)\n            return fn.$inject;\n        if (index_1.isArray(fn))\n            return fn.slice(0, -1);\n        var fnStr = fn.toString().replace(STRIP_COMMENTS, '');\n        var result = fnStr.slice(fnStr.indexOf('(') + 1, fnStr.indexOf(')')).match(ARGUMENT_NAMES);\n        return result || [];\n    }\n};\n//# sourceMappingURL=injector.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/vanilla/injector.js\n// module id = O/PI\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @coreapi\n * @module params\n */\n/** */\nvar common_1 = require(\"../common/common\");\n/** @internalapi */\nvar StateParams = (function () {\n    function StateParams(params) {\n        if (params === void 0) { params = {}; }\n        common_1.extend(this, params);\n    }\n    /**\n     * Merges a set of parameters with all parameters inherited between the common parents of the\n     * current state and a given destination state.\n     *\n     * @param {Object} newParams The set of parameters which will be composited with inherited params.\n     * @param {Object} $current Internal definition of object representing the current state.\n     * @param {Object} $to Internal definition of object representing state to transition to.\n     */\n    StateParams.prototype.$inherit = function (newParams, $current, $to) {\n        var parents = common_1.ancestors($current, $to), parentParams, inherited = {}, inheritList = [];\n        for (var i in parents) {\n            if (!parents[i] || !parents[i].params)\n                continue;\n            parentParams = Object.keys(parents[i].params);\n            if (!parentParams.length)\n                continue;\n            for (var j in parentParams) {\n                if (inheritList.indexOf(parentParams[j]) >= 0)\n                    continue;\n                inheritList.push(parentParams[j]);\n                inherited[parentParams[j]] = this[parentParams[j]];\n            }\n        }\n        return common_1.extend({}, inherited, newParams);\n    };\n    ;\n    return StateParams;\n}());\nexports.StateParams = StateParams;\n//# sourceMappingURL=stateParams.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/params/stateParams.js\n// module id = OJjJ\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar utils_1 = require(\"./utils\");\nvar baseLocationService_1 = require(\"./baseLocationService\");\n/**\n * A `LocationServices` that gets/sets the current location using the browser's `location` and `history` apis\n *\n * Uses `history.pushState` and `history.replaceState`\n */\nvar PushStateLocationService = (function (_super) {\n    __extends(PushStateLocationService, _super);\n    function PushStateLocationService(router) {\n        var _this = _super.call(this, router, true) || this;\n        _this._config = router.urlService.config;\n        window.addEventListener(\"popstate\", _this._listener, false);\n        return _this;\n    }\n    ;\n    PushStateLocationService.prototype._get = function () {\n        var _a = this._location, pathname = _a.pathname, hash = _a.hash, search = _a.search;\n        search = utils_1.splitQuery(search)[1]; // strip ? if found\n        hash = utils_1.splitHash(hash)[1]; // strip # if found\n        return pathname + (search ? \"?\" + search : \"\") + (hash ? \"$\" + search : \"\");\n    };\n    PushStateLocationService.prototype._set = function (state, title, url, replace) {\n        var _a = this, _config = _a._config, _history = _a._history;\n        var fullUrl = _config.baseHref() + url;\n        if (replace) {\n            _history.replaceState(state, title, fullUrl);\n        }\n        else {\n            _history.pushState(state, title, fullUrl);\n        }\n    };\n    PushStateLocationService.prototype.dispose = function (router) {\n        _super.prototype.dispose.call(this, router);\n        window.removeEventListener(\"popstate\", this._listener);\n    };\n    return PushStateLocationService;\n}(baseLocationService_1.BaseLocationServices));\nexports.PushStateLocationService = PushStateLocationService;\n//# sourceMappingURL=pushStateLocationService.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/vanilla/pushStateLocationService.js\n// module id = Obm9\n// module chunks = 0","\"use strict\";\n/** @module hooks */ /** */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar trace_1 = require(\"../common/trace\");\nvar rejectFactory_1 = require(\"../transition/rejectFactory\");\n/**\n * A [[TransitionHookFn]] that skips a transition if it should be ignored\n *\n * This hook is invoked at the end of the onBefore phase.\n *\n * If the transition should be ignored (because no parameter or states changed)\n * then the transition is ignored and not processed.\n */\nfunction ignoredHook(trans) {\n    var ignoredReason = trans._ignoredReason();\n    if (!ignoredReason)\n        return;\n    trace_1.trace.traceTransitionIgnored(trans);\n    var pending = trans.router.globals.transition;\n    // The user clicked a link going back to the *current state* ('A')\n    // However, there is also a pending transition in flight (to 'B')\n    // Abort the transition to 'B' because the user now wants to be back at 'A'.\n    if (ignoredReason === 'SameAsCurrent' && pending) {\n        pending.abort();\n    }\n    return rejectFactory_1.Rejection.ignored().toPromise();\n}\nexports.registerIgnoredTransitionHook = function (transitionService) {\n    return transitionService.onBefore({}, ignoredHook, { priority: -9999 });\n};\n//# sourceMappingURL=ignoredTransition.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/hooks/ignoredTransition.js\n// module id = OssK\n// module chunks = 0","\"use strict\";\n/**\n * Main entry point for angular 1.x build\n * @module ng1\n */ /** */\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core = require(\"@uirouter/core\");\nexports.core = core;\n__export(require(\"@uirouter/core\"));\n__export(require(\"./services\"));\n__export(require(\"./statebuilders/views\"));\n__export(require(\"./stateProvider\"));\n__export(require(\"./urlRouterProvider\"));\nrequire(\"./injectables\");\nrequire(\"./directives/stateDirectives\");\nrequire(\"./stateFilters\");\nrequire(\"./directives/viewDirective\");\nrequire(\"./viewScroll\");\nexports.default = \"ui.router\";\n//# sourceMappingURL=index.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/lib/index.js\n// module id = PJE+\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @coreapi\n * @module transition\n */\n/** for typedoc */\nvar trace_1 = require(\"../common/trace\");\nvar coreservices_1 = require(\"../common/coreservices\");\nvar common_1 = require(\"../common/common\");\nvar predicates_1 = require(\"../common/predicates\");\nvar hof_1 = require(\"../common/hof\");\nvar interface_1 = require(\"./interface\"); // has or is using\nvar transitionHook_1 = require(\"./transitionHook\");\nvar hookRegistry_1 = require(\"./hookRegistry\");\nvar hookBuilder_1 = require(\"./hookBuilder\");\nvar pathFactory_1 = require(\"../path/pathFactory\");\nvar targetState_1 = require(\"../state/targetState\");\nvar param_1 = require(\"../params/param\");\nvar resolvable_1 = require(\"../resolve/resolvable\");\nvar resolveContext_1 = require(\"../resolve/resolveContext\");\n/** @hidden */\nvar stateSelf = hof_1.prop(\"self\");\n/**\n * Represents a transition between two states.\n *\n * When navigating to a state, we are transitioning **from** the current state **to** the new state.\n *\n * This object contains all contextual information about the to/from states, parameters, resolves.\n * It has information about all states being entered and exited as a result of the transition.\n */\nvar Transition = (function () {\n    /**\n     * Creates a new Transition object.\n     *\n     * If the target state is not valid, an error is thrown.\n     *\n     * @internalapi\n     *\n     * @param fromPath The path of [[PathNode]]s from which the transition is leaving.  The last node in the `fromPath`\n     *        encapsulates the \"from state\".\n     * @param targetState The target state and parameters being transitioned to (also, the transition options)\n     * @param router The [[UIRouter]] instance\n     */\n    function Transition(fromPath, targetState, router) {\n        var _this = this;\n        /** @hidden */\n        this._deferred = coreservices_1.services.$q.defer();\n        /**\n         * This promise is resolved or rejected based on the outcome of the Transition.\n         *\n         * When the transition is successful, the promise is resolved\n         * When the transition is unsuccessful, the promise is rejected with the [[Rejection]] or javascript error\n         */\n        this.promise = this._deferred.promise;\n        /** @hidden Holds the hook registration functions such as those passed to Transition.onStart() */\n        this._registeredHooks = {};\n        /** @hidden */\n        this._hookBuilder = new hookBuilder_1.HookBuilder(this);\n        /** Checks if this transition is currently active/running. */\n        this.isActive = function () {\n            return _this.router.globals.transition === _this;\n        };\n        this.router = router;\n        this._targetState = targetState;\n        if (!targetState.valid()) {\n            throw new Error(targetState.error());\n        }\n        // current() is assumed to come from targetState.options, but provide a naive implementation otherwise.\n        this._options = common_1.extend({ current: hof_1.val(this) }, targetState.options());\n        this.$id = router.transitionService._transitionCount++;\n        var toPath = pathFactory_1.PathUtils.buildToPath(fromPath, targetState);\n        this._treeChanges = pathFactory_1.PathUtils.treeChanges(fromPath, toPath, this._options.reloadState);\n        this.createTransitionHookRegFns();\n        var onCreateHooks = this._hookBuilder.buildHooksForPhase(interface_1.TransitionHookPhase.CREATE);\n        transitionHook_1.TransitionHook.invokeHooks(onCreateHooks, function () { return null; });\n        this.applyViewConfigs(router);\n    }\n    /** @hidden */\n    Transition.prototype.onBefore = function (criteria, callback, options) { return; };\n    /** @inheritdoc */\n    Transition.prototype.onStart = function (criteria, callback, options) { return; };\n    /** @inheritdoc */\n    Transition.prototype.onExit = function (criteria, callback, options) { return; };\n    /** @inheritdoc */\n    Transition.prototype.onRetain = function (criteria, callback, options) { return; };\n    /** @inheritdoc */\n    Transition.prototype.onEnter = function (criteria, callback, options) { return; };\n    /** @inheritdoc */\n    Transition.prototype.onFinish = function (criteria, callback, options) { return; };\n    /** @inheritdoc */\n    Transition.prototype.onSuccess = function (criteria, callback, options) { return; };\n    /** @inheritdoc */\n    Transition.prototype.onError = function (criteria, callback, options) { return; };\n    /** @hidden\n     * Creates the transition-level hook registration functions\n     * (which can then be used to register hooks)\n     */\n    Transition.prototype.createTransitionHookRegFns = function () {\n        var _this = this;\n        this.router.transitionService._pluginapi._getEvents()\n            .filter(function (type) { return type.hookPhase !== interface_1.TransitionHookPhase.CREATE; })\n            .forEach(function (type) { return hookRegistry_1.makeEvent(_this, _this.router.transitionService, type); });\n    };\n    /** @internalapi */\n    Transition.prototype.getHooks = function (hookName) {\n        return this._registeredHooks[hookName];\n    };\n    Transition.prototype.applyViewConfigs = function (router) {\n        var enteringStates = this._treeChanges.entering.map(function (node) { return node.state; });\n        pathFactory_1.PathUtils.applyViewConfigs(router.transitionService.$view, this._treeChanges.to, enteringStates);\n    };\n    /**\n     * @internalapi\n     *\n     * @returns the internal from [State] object\n     */\n    Transition.prototype.$from = function () {\n        return common_1.tail(this._treeChanges.from).state;\n    };\n    /**\n     * @internalapi\n     *\n     * @returns the internal to [State] object\n     */\n    Transition.prototype.$to = function () {\n        return common_1.tail(this._treeChanges.to).state;\n    };\n    /**\n     * Returns the \"from state\"\n     *\n     * Returns the state that the transition is coming *from*.\n     *\n     * @returns The state declaration object for the Transition's (\"from state\").\n     */\n    Transition.prototype.from = function () {\n        return this.$from().self;\n    };\n    /**\n     * Returns the \"to state\"\n     *\n     * Returns the state that the transition is going *to*.\n     *\n     * @returns The state declaration object for the Transition's target state (\"to state\").\n     */\n    Transition.prototype.to = function () {\n        return this.$to().self;\n    };\n    /**\n     * Gets the Target State\n     *\n     * A transition's [[TargetState]] encapsulates the [[to]] state, the [[params]], and the [[options]] as a single object.\n     *\n     * @returns the [[TargetState]] of this Transition\n     */\n    Transition.prototype.targetState = function () {\n        return this._targetState;\n    };\n    /**\n     * Determines whether two transitions are equivalent.\n     * @deprecated\n     */\n    Transition.prototype.is = function (compare) {\n        if (compare instanceof Transition) {\n            // TODO: Also compare parameters\n            return this.is({ to: compare.$to().name, from: compare.$from().name });\n        }\n        return !((compare.to && !hookRegistry_1.matchState(this.$to(), compare.to)) ||\n            (compare.from && !hookRegistry_1.matchState(this.$from(), compare.from)));\n    };\n    Transition.prototype.params = function (pathname) {\n        if (pathname === void 0) { pathname = \"to\"; }\n        return Object.freeze(this._treeChanges[pathname].map(hof_1.prop(\"paramValues\")).reduce(common_1.mergeR, {}));\n    };\n    /**\n     * Creates a [[UIInjector]] Dependency Injector\n     *\n     * Returns a Dependency Injector for the Transition's target state (to state).\n     * The injector provides resolve values which the target state has access to.\n     *\n     * The `UIInjector` can also provide values from the native root/global injector (ng1/ng2).\n     *\n     * #### Example:\n     * ```js\n     * .onEnter({ entering: 'myState' }, trans => {\n     *   var myResolveValue = trans.injector().get('myResolve');\n     *   // Inject a global service from the global/native injector (if it exists)\n     *   var MyService = trans.injector().get('MyService');\n     * })\n     * ```\n     *\n     * In some cases (such as `onBefore`), you may need access to some resolve data but it has not yet been fetched.\n     * You can use [[UIInjector.getAsync]] to get a promise for the data.\n     * #### Example:\n     * ```js\n     * .onBefore({}, trans => {\n     *   return trans.injector().getAsync('myResolve').then(myResolveValue =>\n     *     return myResolveValue !== 'ABORT';\n     *   });\n     * });\n     * ```\n     *\n     * If a `state` is provided, the injector that is returned will be limited to resolve values that the provided state has access to.\n     * This can be useful if both a parent state `foo` and a child state `foo.bar` have both defined a resolve such as `data`.\n     * #### Example:\n     * ```js\n     * .onEnter({ to: 'foo.bar' }, trans => {\n     *   // returns result of `foo` state's `data` resolve\n     *   // even though `foo.bar` also has a `data` resolve\n     *   var fooData = trans.injector('foo').get('data');\n     * });\n     * ```\n     *\n     * If you need resolve data from the exiting states, pass `'from'` as `pathName`.\n     * The resolve data from the `from` path will be returned.\n     * #### Example:\n     * ```js\n     * .onExit({ exiting: 'foo.bar' }, trans => {\n     *   // Gets the resolve value of `data` from the exiting state.\n     *   var fooData = trans.injector(null, 'foo.bar').get('data');\n     * });\n     * ```\n     *\n     *\n     * @param state Limits the resolves provided to only the resolves the provided state has access to.\n     * @param pathName Default: `'to'`: Chooses the path for which to create the injector. Use this to access resolves for `exiting` states.\n     *\n     * @returns a [[UIInjector]]\n     */\n    Transition.prototype.injector = function (state, pathName) {\n        if (pathName === void 0) { pathName = \"to\"; }\n        var path = this._treeChanges[pathName];\n        if (state)\n            path = pathFactory_1.PathUtils.subPath(path, function (node) { return node.state === state || node.state.name === state; });\n        return new resolveContext_1.ResolveContext(path).injector();\n    };\n    /**\n     * Gets all available resolve tokens (keys)\n     *\n     * This method can be used in conjunction with [[injector]] to inspect the resolve values\n     * available to the Transition.\n     *\n     * This returns all the tokens defined on [[StateDeclaration.resolve]] blocks, for the states\n     * in the Transition's [[TreeChanges.to]] path.\n     *\n     * #### Example:\n     * This example logs all resolve values\n     * ```js\n     * let tokens = trans.getResolveTokens();\n     * tokens.forEach(token => console.log(token + \" = \" + trans.injector().get(token)));\n     * ```\n     *\n     * #### Example:\n     * This example creates promises for each resolve value.\n     * This triggers fetches of resolves (if any have not yet been fetched).\n     * When all promises have all settled, it logs the resolve values.\n     * ```js\n     * let tokens = trans.getResolveTokens();\n     * let promise = tokens.map(token => trans.injector().getAsync(token));\n     * Promise.all(promises).then(values => console.log(\"Resolved values: \" + values));\n     * ```\n     *\n     * Note: Angular 1 users whould use `$q.all()`\n     *\n     * @param pathname resolve context's path name (e.g., `to` or `from`)\n     *\n     * @returns an array of resolve tokens (keys)\n     */\n    Transition.prototype.getResolveTokens = function (pathname) {\n        if (pathname === void 0) { pathname = \"to\"; }\n        return new resolveContext_1.ResolveContext(this._treeChanges[pathname]).getTokens();\n    };\n    /**\n     * Dynamically adds a new [[Resolvable]] (i.e., [[StateDeclaration.resolve]]) to this transition.\n     *\n     * #### Example:\n     * ```js\n     * transitionService.onBefore({}, transition => {\n     *   transition.addResolvable({\n     *     token: 'myResolve',\n     *     deps: ['MyService'],\n     *     resolveFn: myService => myService.getData()\n     *   });\n     * });\n     * ```\n     *\n     * @param resolvable a [[ResolvableLiteral]] object (or a [[Resolvable]])\n     * @param state the state in the \"to path\" which should receive the new resolve (otherwise, the root state)\n     */\n    Transition.prototype.addResolvable = function (resolvable, state) {\n        if (state === void 0) { state = \"\"; }\n        resolvable = hof_1.is(resolvable_1.Resolvable)(resolvable) ? resolvable : new resolvable_1.Resolvable(resolvable);\n        var stateName = (typeof state === \"string\") ? state : state.name;\n        var topath = this._treeChanges.to;\n        var targetNode = common_1.find(topath, function (node) { return node.state.name === stateName; });\n        var resolveContext = new resolveContext_1.ResolveContext(topath);\n        resolveContext.addResolvables([resolvable], targetNode.state);\n    };\n    /**\n     * Gets the transition from which this transition was redirected.\n     *\n     * If the current transition is a redirect, this method returns the transition that was redirected.\n     *\n     * #### Example:\n     * ```js\n     * let transitionA = $state.go('A').transition\n     * transitionA.onStart({}, () => $state.target('B'));\n     * $transitions.onSuccess({ to: 'B' }, (trans) => {\n     *   trans.to().name === 'B'; // true\n     *   trans.redirectedFrom() === transitionA; // true\n     * });\n     * ```\n     *\n     * @returns The previous Transition, or null if this Transition is not the result of a redirection\n     */\n    Transition.prototype.redirectedFrom = function () {\n        return this._options.redirectedFrom || null;\n    };\n    /**\n     * Gets the original transition in a redirect chain\n     *\n     * A transition might belong to a long chain of multiple redirects.\n     * This method walks the [[redirectedFrom]] chain back to the original (first) transition in the chain.\n     *\n     * #### Example:\n     * ```js\n     * // states\n     * registry.register({ name: 'A', redirectTo: 'B' });\n     * registry.register({ name: 'B', redirectTo: 'C' });\n     * registry.register({ name: 'C', redirectTo: 'D' });\n     * registry.register({ name: 'D' });\n     *\n     * let transitionA = $state.go('A').transition\n     *\n     * $transitions.onSuccess({ to: 'D' }, (trans) => {\n     *   trans.to().name === 'D'; // true\n     *   trans.redirectedFrom().to().name === 'C'; // true\n     *   trans.originalTransition() === transitionA; // true\n     *   trans.originalTransition().to().name === 'A'; // true\n     * });\n     * ```\n     *\n     * @returns The original Transition that started a redirect chain\n     */\n    Transition.prototype.originalTransition = function () {\n        var rf = this.redirectedFrom();\n        return (rf && rf.originalTransition()) || this;\n    };\n    /**\n     * Get the transition options\n     *\n     * @returns the options for this Transition.\n     */\n    Transition.prototype.options = function () {\n        return this._options;\n    };\n    /**\n     * Gets the states being entered.\n     *\n     * @returns an array of states that will be entered during this transition.\n     */\n    Transition.prototype.entering = function () {\n        return common_1.map(this._treeChanges.entering, hof_1.prop('state')).map(stateSelf);\n    };\n    /**\n     * Gets the states being exited.\n     *\n     * @returns an array of states that will be exited during this transition.\n     */\n    Transition.prototype.exiting = function () {\n        return common_1.map(this._treeChanges.exiting, hof_1.prop('state')).map(stateSelf).reverse();\n    };\n    /**\n     * Gets the states being retained.\n     *\n     * @returns an array of states that are already entered from a previous Transition, that will not be\n     *    exited during this Transition\n     */\n    Transition.prototype.retained = function () {\n        return common_1.map(this._treeChanges.retained, hof_1.prop('state')).map(stateSelf);\n    };\n    /**\n     * Get the [[ViewConfig]]s associated with this Transition\n     *\n     * Each state can define one or more views (template/controller), which are encapsulated as `ViewConfig` objects.\n     * This method fetches the `ViewConfigs` for a given path in the Transition (e.g., \"to\" or \"entering\").\n     *\n     * @param pathname the name of the path to fetch views for:\n     *   (`'to'`, `'from'`, `'entering'`, `'exiting'`, `'retained'`)\n     * @param state If provided, only returns the `ViewConfig`s for a single state in the path\n     *\n     * @returns a list of ViewConfig objects for the given path.\n     */\n    Transition.prototype.views = function (pathname, state) {\n        if (pathname === void 0) { pathname = \"entering\"; }\n        var path = this._treeChanges[pathname];\n        path = !state ? path : path.filter(hof_1.propEq('state', state));\n        return path.map(hof_1.prop(\"views\")).filter(common_1.identity).reduce(common_1.unnestR, []);\n    };\n    Transition.prototype.treeChanges = function (pathname) {\n        return pathname ? this._treeChanges[pathname] : this._treeChanges;\n    };\n    /**\n     * Creates a new transition that is a redirection of the current one.\n     *\n     * This transition can be returned from a [[TransitionService]] hook to\n     * redirect a transition to a new state and/or set of parameters.\n     *\n     * @internalapi\n     *\n     * @returns Returns a new [[Transition]] instance.\n     */\n    Transition.prototype.redirect = function (targetState) {\n        var redirects = 1, trans = this;\n        while ((trans = trans.redirectedFrom()) != null) {\n            if (++redirects > 20)\n                throw new Error(\"Too many consecutive Transition redirects (20+)\");\n        }\n        var redirectOpts = { redirectedFrom: this, source: \"redirect\" };\n        // If the original transition was caused by URL sync, then use { location: 'replace' }\n        // on the new transition (unless the target state explicitly specifies location: false).\n        // This causes the original url to be replaced with the url for the redirect target\n        // so the original url disappears from the browser history.\n        if (this.options().source === 'url' && targetState.options().location !== false) {\n            redirectOpts.location = 'replace';\n        }\n        var newOptions = common_1.extend({}, this.options(), targetState.options(), redirectOpts);\n        targetState = new targetState_1.TargetState(targetState.identifier(), targetState.$state(), targetState.params(), newOptions);\n        var newTransition = this.router.transitionService.create(this._treeChanges.from, targetState);\n        var originalEnteringNodes = this._treeChanges.entering;\n        var redirectEnteringNodes = newTransition._treeChanges.entering;\n        // --- Re-use resolve data from original transition ---\n        // When redirecting from a parent state to a child state where the parent parameter values haven't changed\n        // (because of the redirect), the resolves fetched by the original transition are still valid in the\n        // redirected transition.\n        //\n        // This allows you to define a redirect on a parent state which depends on an async resolve value.\n        // You can wait for the resolve, then redirect to a child state based on the result.\n        // The redirected transition does not have to re-fetch the resolve.\n        // ---------------------------------------------------------\n        var nodeIsReloading = function (reloadState) { return function (node) {\n            return reloadState && node.state.includes[reloadState.name];\n        }; };\n        // Find any \"entering\" nodes in the redirect path that match the original path and aren't being reloaded\n        var matchingEnteringNodes = pathFactory_1.PathUtils.matching(redirectEnteringNodes, originalEnteringNodes, pathFactory_1.PathUtils.nonDynamicParams)\n            .filter(hof_1.not(nodeIsReloading(targetState.options().reloadState)));\n        // Use the existing (possibly pre-resolved) resolvables for the matching entering nodes.\n        matchingEnteringNodes.forEach(function (node, idx) {\n            node.resolvables = originalEnteringNodes[idx].resolvables;\n        });\n        return newTransition;\n    };\n    /** @hidden If a transition doesn't exit/enter any states, returns any [[Param]] whose value changed */\n    Transition.prototype._changedParams = function () {\n        var tc = this._treeChanges;\n        /** Return undefined if it's not a \"dynamic\" transition, for the following reasons */\n        // If user explicitly wants a reload\n        if (this._options.reload)\n            return undefined;\n        // If any states are exiting or entering\n        if (tc.exiting.length || tc.entering.length)\n            return undefined;\n        // If to/from path lengths differ\n        if (tc.to.length !== tc.from.length)\n            return undefined;\n        // If the to/from paths are different\n        var pathsDiffer = common_1.arrayTuples(tc.to, tc.from)\n            .map(function (tuple) { return tuple[0].state !== tuple[1].state; })\n            .reduce(common_1.anyTrueR, false);\n        if (pathsDiffer)\n            return undefined;\n        // Find any parameter values that differ\n        var nodeSchemas = tc.to.map(function (node) { return node.paramSchema; });\n        var _a = [tc.to, tc.from].map(function (path) { return path.map(function (x) { return x.paramValues; }); }), toValues = _a[0], fromValues = _a[1];\n        var tuples = common_1.arrayTuples(nodeSchemas, toValues, fromValues);\n        return tuples.map(function (_a) {\n            var schema = _a[0], toVals = _a[1], fromVals = _a[2];\n            return param_1.Param.changed(schema, toVals, fromVals);\n        }).reduce(common_1.unnestR, []);\n    };\n    /**\n     * Returns true if the transition is dynamic.\n     *\n     * A transition is dynamic if no states are entered nor exited, but at least one dynamic parameter has changed.\n     *\n     * @returns true if the Transition is dynamic\n     */\n    Transition.prototype.dynamic = function () {\n        var changes = this._changedParams();\n        return !changes ? false : changes.map(function (x) { return x.dynamic; }).reduce(common_1.anyTrueR, false);\n    };\n    /**\n     * Returns true if the transition is ignored.\n     *\n     * A transition is ignored if no states are entered nor exited, and no parameter values have changed.\n     *\n     * @returns true if the Transition is ignored.\n     */\n    Transition.prototype.ignored = function () {\n        return !!this._ignoredReason();\n    };\n    /** @hidden */\n    Transition.prototype._ignoredReason = function () {\n        var pending = this.router.globals.transition;\n        var reloadState = this._options.reloadState;\n        var same = function (pathA, pathB) {\n            if (pathA.length !== pathB.length)\n                return false;\n            var matching = pathFactory_1.PathUtils.matching(pathA, pathB);\n            return pathA.length === matching.filter(function (node) { return !reloadState || !node.state.includes[reloadState.name]; }).length;\n        };\n        var newTC = this.treeChanges();\n        var pendTC = pending && pending.treeChanges();\n        if (pendTC && same(pendTC.to, newTC.to) && same(pendTC.exiting, newTC.exiting))\n            return \"SameAsPending\";\n        if (newTC.exiting.length === 0 && newTC.entering.length === 0 && same(newTC.from, newTC.to))\n            return \"SameAsCurrent\";\n    };\n    /**\n     * Runs the transition\n     *\n     * This method is generally called from the [[StateService.transitionTo]]\n     *\n     * @internalapi\n     *\n     * @returns a promise for a successful transition.\n     */\n    Transition.prototype.run = function () {\n        var _this = this;\n        var runAllHooks = transitionHook_1.TransitionHook.runAllHooks;\n        // Gets transition hooks array for the given phase\n        var getHooksFor = function (phase) {\n            return _this._hookBuilder.buildHooksForPhase(phase);\n        };\n        // When the chain is complete, then resolve or reject the deferred\n        var transitionSuccess = function () {\n            trace_1.trace.traceSuccess(_this.$to(), _this);\n            _this.success = true;\n            _this._deferred.resolve(_this.to());\n            runAllHooks(getHooksFor(interface_1.TransitionHookPhase.SUCCESS));\n        };\n        var transitionError = function (reason) {\n            trace_1.trace.traceError(reason, _this);\n            _this.success = false;\n            _this._deferred.reject(reason);\n            _this._error = reason;\n            runAllHooks(getHooksFor(interface_1.TransitionHookPhase.ERROR));\n        };\n        var runTransition = function () {\n            // Wait to build the RUN hook chain until the BEFORE hooks are done\n            // This allows a BEFORE hook to dynamically add additional RUN hooks via the Transition object.\n            var allRunHooks = getHooksFor(interface_1.TransitionHookPhase.RUN);\n            var done = function () { return coreservices_1.services.$q.when(undefined); };\n            return transitionHook_1.TransitionHook.invokeHooks(allRunHooks, done);\n        };\n        var startTransition = function () {\n            var globals = _this.router.globals;\n            globals.lastStartedTransitionId = _this.$id;\n            globals.transition = _this;\n            globals.transitionHistory.enqueue(_this);\n            trace_1.trace.traceTransitionStart(_this);\n            return coreservices_1.services.$q.when(undefined);\n        };\n        var allBeforeHooks = getHooksFor(interface_1.TransitionHookPhase.BEFORE);\n        transitionHook_1.TransitionHook.invokeHooks(allBeforeHooks, startTransition)\n            .then(runTransition)\n            .then(transitionSuccess, transitionError);\n        return this.promise;\n    };\n    /**\n     * Checks if the Transition is valid\n     *\n     * @returns true if the Transition is valid\n     */\n    Transition.prototype.valid = function () {\n        return !this.error() || this.success !== undefined;\n    };\n    /**\n     * Aborts this transition\n     *\n     * Imperative API to abort a Transition.\n     * This only applies to Transitions that are not yet complete.\n     */\n    Transition.prototype.abort = function () {\n        // Do not set flag if the transition is already complete\n        if (predicates_1.isUndefined(this.success)) {\n            this._aborted = true;\n        }\n    };\n    /**\n     * The Transition error reason.\n     *\n     * If the transition is invalid (and could not be run), returns the reason the transition is invalid.\n     * If the transition was valid and ran, but was not successful, returns the reason the transition failed.\n     *\n     * @returns an error message explaining why the transition is invalid, or the reason the transition failed.\n     */\n    Transition.prototype.error = function () {\n        var state = this.$to();\n        if (state.self.abstract)\n            return \"Cannot transition to abstract state '\" + state.name + \"'\";\n        if (!param_1.Param.validates(state.parameters(), this.params()))\n            return \"Param values not valid for state '\" + state.name + \"'\";\n        if (this.success === false)\n            return this._error;\n    };\n    /**\n     * A string representation of the Transition\n     *\n     * @returns A string representation of the Transition\n     */\n    Transition.prototype.toString = function () {\n        var fromStateOrName = this.from();\n        var toStateOrName = this.to();\n        var avoidEmptyHash = function (params) {\n            return (params[\"#\"] !== null && params[\"#\"] !== undefined) ? params : common_1.omit(params, [\"#\"]);\n        };\n        // (X) means the to state is invalid.\n        var id = this.$id, from = predicates_1.isObject(fromStateOrName) ? fromStateOrName.name : fromStateOrName, fromParams = common_1.toJson(avoidEmptyHash(this._treeChanges.from.map(hof_1.prop('paramValues')).reduce(common_1.mergeR, {}))), toValid = this.valid() ? \"\" : \"(X) \", to = predicates_1.isObject(toStateOrName) ? toStateOrName.name : toStateOrName, toParams = common_1.toJson(avoidEmptyHash(this.params()));\n        return \"Transition#\" + id + \"( '\" + from + \"'\" + fromParams + \" -> \" + toValid + \"'\" + to + \"'\" + toParams + \" )\";\n    };\n    return Transition;\n}());\n/** @hidden */\nTransition.diToken = Transition;\nexports.Transition = Transition;\n//# sourceMappingURL=transition.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/transition/transition.js\n// module id = QEtB\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * # Angular 1 types\n *\n * UI-Router core provides various Typescript types which you can use for code completion and validating parameter values, etc.\n * The customizations to the core types for Angular UI-Router are documented here.\n *\n * The optional [[$resolve]] service is also documented here.\n *\n * @module ng1\n * @preferred\n */\n/** for typedoc */\nvar angular_1 = require(\"./angular\");\nvar core_1 = require(\"@uirouter/core\");\nvar views_1 = require(\"./statebuilders/views\");\nvar templateFactory_1 = require(\"./templateFactory\");\nvar stateProvider_1 = require(\"./stateProvider\");\nvar onEnterExitRetain_1 = require(\"./statebuilders/onEnterExitRetain\");\nvar locationServices_1 = require(\"./locationServices\");\nvar urlRouterProvider_1 = require(\"./urlRouterProvider\");\nangular_1.ng.module(\"ui.router.angular1\", []);\nvar mod_init = angular_1.ng.module('ui.router.init', []);\nvar mod_util = angular_1.ng.module('ui.router.util', ['ng', 'ui.router.init']);\nvar mod_rtr = angular_1.ng.module('ui.router.router', ['ui.router.util']);\nvar mod_state = angular_1.ng.module('ui.router.state', ['ui.router.router', 'ui.router.util', 'ui.router.angular1']);\nvar mod_main = angular_1.ng.module('ui.router', ['ui.router.init', 'ui.router.state', 'ui.router.angular1']);\nvar mod_cmpt = angular_1.ng.module('ui.router.compat', ['ui.router']); // tslint:disable-line\nvar router = null;\n$uiRouter.$inject = ['$locationProvider'];\n/** This angular 1 provider instantiates a Router and exposes its services via the angular injector */\nfunction $uiRouter($locationProvider) {\n    // Create a new instance of the Router when the $uiRouterProvider is initialized\n    router = this.router = new core_1.UIRouter();\n    router.stateProvider = new stateProvider_1.StateProvider(router.stateRegistry, router.stateService);\n    // Apply ng1 specific StateBuilder code for `views`, `resolve`, and `onExit/Retain/Enter` properties\n    router.stateRegistry.decorator(\"views\", views_1.ng1ViewsBuilder);\n    router.stateRegistry.decorator(\"onExit\", onEnterExitRetain_1.getStateHookBuilder(\"onExit\"));\n    router.stateRegistry.decorator(\"onRetain\", onEnterExitRetain_1.getStateHookBuilder(\"onRetain\"));\n    router.stateRegistry.decorator(\"onEnter\", onEnterExitRetain_1.getStateHookBuilder(\"onEnter\"));\n    router.viewService._pluginapi._viewConfigFactory('ng1', views_1.getNg1ViewConfigFactory());\n    var ng1LocationService = router.locationService = router.locationConfig = new locationServices_1.Ng1LocationServices($locationProvider);\n    locationServices_1.Ng1LocationServices.monkeyPatchPathParameterType(router);\n    // backwards compat: also expose router instance as $uiRouterProvider.router\n    router['router'] = router;\n    router['$get'] = $get;\n    $get.$inject = ['$location', '$browser', '$sniffer', '$rootScope', '$http', '$templateCache'];\n    function $get($location, $browser, $sniffer, $rootScope, $http, $templateCache) {\n        ng1LocationService._runtimeServices($rootScope, $location, $sniffer, $browser);\n        delete router['router'];\n        delete router['$get'];\n        return router;\n    }\n    return router;\n}\nvar getProviderFor = function (serviceName) { return ['$uiRouterProvider', function ($urp) {\n        var service = $urp.router[serviceName];\n        service[\"$get\"] = function () { return service; };\n        return service;\n    }]; };\n// This effectively calls $get() on `$uiRouterProvider` to trigger init (when ng enters runtime)\nrunBlock.$inject = ['$injector', '$q', '$uiRouter'];\nfunction runBlock($injector, $q, $uiRouter) {\n    core_1.services.$injector = $injector;\n    core_1.services.$q = $q;\n    // The $injector is now available.\n    // Find any resolvables that had dependency annotation deferred\n    $uiRouter.stateRegistry.get()\n        .map(function (x) { return x.$$state().resolvables; })\n        .reduce(core_1.unnestR, [])\n        .filter(function (x) { return x.deps === \"deferred\"; })\n        .forEach(function (resolvable) { return resolvable.deps = $injector.annotate(resolvable.resolveFn); });\n}\n// $urlRouter service and $urlRouterProvider\nvar getUrlRouterProvider = function (uiRouter) {\n    return uiRouter.urlRouterProvider = new urlRouterProvider_1.UrlRouterProvider(uiRouter);\n};\n// $state service and $stateProvider\n// $urlRouter service and $urlRouterProvider\nvar getStateProvider = function () {\n    return core_1.extend(router.stateProvider, { $get: function () { return router.stateService; } });\n};\nwatchDigests.$inject = ['$rootScope'];\nfunction watchDigests($rootScope) {\n    $rootScope.$watch(function () { core_1.trace.approximateDigests++; });\n}\nexports.watchDigests = watchDigests;\nmod_init.provider(\"$uiRouter\", $uiRouter);\nmod_rtr.provider('$urlRouter', ['$uiRouterProvider', getUrlRouterProvider]);\nmod_util.provider('$urlService', getProviderFor('urlService'));\nmod_util.provider('$urlMatcherFactory', ['$uiRouterProvider', function () { return router.urlMatcherFactory; }]);\nmod_util.provider('$templateFactory', function () { return new templateFactory_1.TemplateFactory(); });\nmod_state.provider('$stateRegistry', getProviderFor('stateRegistry'));\nmod_state.provider('$uiRouterGlobals', getProviderFor('globals'));\nmod_state.provider('$transitions', getProviderFor('transitionService'));\nmod_state.provider('$state', ['$uiRouterProvider', getStateProvider]);\nmod_state.factory('$stateParams', ['$uiRouter', function ($uiRouter) { return $uiRouter.globals.params; }]);\nmod_main.factory('$view', function () { return router.viewService; });\nmod_main.service(\"$trace\", function () { return core_1.trace; });\nmod_main.run(watchDigests);\nmod_util.run(['$urlMatcherFactory', function ($urlMatcherFactory) { }]);\nmod_state.run(['$state', function ($state) { }]);\nmod_rtr.run(['$urlRouter', function ($urlRouter) { }]);\nmod_init.run(runBlock);\n/** @hidden TODO: find a place to move this */\nexports.getLocals = function (ctx) {\n    var tokens = ctx.getTokens().filter(core_1.isString);\n    var tuples = tokens.map(function (key) {\n        var resolvable = ctx.getResolvable(key);\n        var waitPolicy = ctx.getPolicy(resolvable).async;\n        return [key, waitPolicy === 'NOWAIT' ? resolvable.promise : resolvable.data];\n    });\n    return tuples.reduce(core_1.applyPairs, {});\n};\n//# sourceMappingURL=services.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/lib/services.js\n// module id = QoMd\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @coreapi\n * @module core\n */ /** */\nvar stateParams_1 = require(\"./params/stateParams\");\nvar queue_1 = require(\"./common/queue\");\n/**\n * Global router state\n *\n * This is where we hold the global mutable state such as current state, current\n * params, current transition, etc.\n */\nvar UIRouterGlobals = (function () {\n    function UIRouterGlobals() {\n        /**\n         * Current parameter values\n         *\n         * The parameter values from the latest successful transition\n         */\n        this.params = new stateParams_1.StateParams();\n        /** @internalapi */\n        this.lastStartedTransitionId = -1;\n        /** @internalapi */\n        this.transitionHistory = new queue_1.Queue([], 1);\n        /** @internalapi */\n        this.successfulTransitions = new queue_1.Queue([], 1);\n    }\n    UIRouterGlobals.prototype.dispose = function () {\n        this.transitionHistory.clear();\n        this.successfulTransitions.clear();\n        this.transition = null;\n    };\n    return UIRouterGlobals;\n}());\nexports.UIRouterGlobals = UIRouterGlobals;\n//# sourceMappingURL=globals.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/globals.js\n// module id = RIEG\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @coreapi\n * @module url\n */\n/** for typedoc */\nvar common_1 = require(\"../common/common\");\nvar hof_1 = require(\"../common/hof\");\nvar predicates_1 = require(\"../common/predicates\");\nvar param_1 = require(\"../params/param\");\nvar strings_1 = require(\"../common/strings\");\n/** @hidden */\nfunction quoteRegExp(string, param) {\n    var surroundPattern = ['', ''], result = string.replace(/[\\\\\\[\\]\\^$*+?.()|{}]/g, \"\\\\$&\");\n    if (!param)\n        return result;\n    switch (param.squash) {\n        case false:\n            surroundPattern = ['(', ')' + (param.isOptional ? '?' : '')];\n            break;\n        case true:\n            result = result.replace(/\\/$/, '');\n            surroundPattern = ['(?:\\/(', ')|\\/)?'];\n            break;\n        default:\n            surroundPattern = [\"(\" + param.squash + \"|\", ')?'];\n            break;\n    }\n    return result + surroundPattern[0] + param.type.pattern.source + surroundPattern[1];\n}\n/** @hidden */\nvar memoizeTo = function (obj, prop, fn) {\n    return obj[prop] = obj[prop] || fn();\n};\n/** @hidden */\nvar splitOnSlash = strings_1.splitOnDelim('/');\n/**\n * Matches URLs against patterns.\n *\n * Matches URLs against patterns and extracts named parameters from the path or the search\n * part of the URL.\n *\n * A URL pattern consists of a path pattern, optionally followed by '?' and a list of search (query)\n * parameters. Multiple search parameter names are separated by '&'. Search parameters\n * do not influence whether or not a URL is matched, but their values are passed through into\n * the matched parameters returned by [[UrlMatcher.exec]].\n *\n * - *Path parameters* are defined using curly brace placeholders (`/somepath/{param}`)\n * or colon placeholders (`/somePath/:param`).\n *\n * - *A parameter RegExp* may be defined for a param after a colon\n * (`/somePath/{param:[a-zA-Z0-9]+}`) in a curly brace placeholder.\n * The regexp must match for the url to be matched.\n * Should the regexp itself contain curly braces, they must be in matched pairs or escaped with a backslash.\n *\n * Note: a RegExp parameter will encode its value using either [[ParamTypes.path]] or [[ParamTypes.query]].\n *\n * - *Custom parameter types* may also be specified after a colon (`/somePath/{param:int}`) in curly brace parameters.\n *   See [[UrlMatcherFactory.type]] for more information.\n *\n * - *Catch-all parameters* are defined using an asterisk placeholder (`/somepath/*catchallparam`).\n *   A catch-all * parameter value will contain the remainder of the URL.\n *\n * ---\n *\n * Parameter names may contain only word characters (latin letters, digits, and underscore) and\n * must be unique within the pattern (across both path and search parameters).\n * A path parameter matches any number of characters other than '/'. For catch-all\n * placeholders the path parameter matches any number of characters.\n *\n * Examples:\n *\n * * `'/hello/'` - Matches only if the path is exactly '/hello/'. There is no special treatment for\n *   trailing slashes, and patterns have to match the entire path, not just a prefix.\n * * `'/user/:id'` - Matches '/user/bob' or '/user/1234!!!' or even '/user/' but not '/user' or\n *   '/user/bob/details'. The second path segment will be captured as the parameter 'id'.\n * * `'/user/{id}'` - Same as the previous example, but using curly brace syntax.\n * * `'/user/{id:[^/]*}'` - Same as the previous example.\n * * `'/user/{id:[0-9a-fA-F]{1,8}}'` - Similar to the previous example, but only matches if the id\n *   parameter consists of 1 to 8 hex digits.\n * * `'/files/{path:.*}'` - Matches any URL starting with '/files/' and captures the rest of the\n *   path into the parameter 'path'.\n * * `'/files/*path'` - ditto.\n * * `'/calendar/{start:date}'` - Matches \"/calendar/2014-11-12\" (because the pattern defined\n *   in the built-in  `date` ParamType matches `2014-11-12`) and provides a Date object in $stateParams.start\n *\n */\nvar UrlMatcher = (function () {\n    /**\n     * @param pattern The pattern to compile into a matcher.\n     * @param paramTypes The [[ParamTypes]] registry\n     * @param config  A configuration object\n     * - `caseInsensitive` - `true` if URL matching should be case insensitive, otherwise `false`, the default value (for backward compatibility) is `false`.\n     * - `strict` - `false` if matching against a URL with a trailing slash should be treated as equivalent to a URL without a trailing slash, the default value is `true`.\n     */\n    function UrlMatcher(pattern, paramTypes, paramFactory, config) {\n        var _this = this;\n        this.config = config;\n        /** @hidden */\n        this._cache = { path: [this] };\n        /** @hidden */\n        this._children = [];\n        /** @hidden */\n        this._params = [];\n        /** @hidden */\n        this._segments = [];\n        /** @hidden */\n        this._compiled = [];\n        this.pattern = pattern;\n        this.config = common_1.defaults(this.config, {\n            params: {},\n            strict: true,\n            caseInsensitive: false,\n            paramMap: common_1.identity\n        });\n        // Find all placeholders and create a compiled pattern, using either classic or curly syntax:\n        //   '*' name\n        //   ':' name\n        //   '{' name '}'\n        //   '{' name ':' regexp '}'\n        // The regular expression is somewhat complicated due to the need to allow curly braces\n        // inside the regular expression. The placeholder regexp breaks down as follows:\n        //    ([:*])([\\w\\[\\]]+)              - classic placeholder ($1 / $2) (search version has - for snake-case)\n        //    \\{([\\w\\[\\]]+)(?:\\:\\s*( ... ))?\\}  - curly brace placeholder ($3) with optional regexp/type ... ($4) (search version has - for snake-case\n        //    (?: ... | ... | ... )+         - the regexp consists of any number of atoms, an atom being either\n        //    [^{}\\\\]+                       - anything other than curly braces or backslash\n        //    \\\\.                            - a backslash escape\n        //    \\{(?:[^{}\\\\]+|\\\\.)*\\}          - a matched set of curly braces containing other atoms\n        var placeholder = /([:*])([\\w\\[\\]]+)|\\{([\\w\\[\\]]+)(?:\\:\\s*((?:[^{}\\\\]+|\\\\.|\\{(?:[^{}\\\\]+|\\\\.)*\\})+))?\\}/g, searchPlaceholder = /([:]?)([\\w\\[\\].-]+)|\\{([\\w\\[\\].-]+)(?:\\:\\s*((?:[^{}\\\\]+|\\\\.|\\{(?:[^{}\\\\]+|\\\\.)*\\})+))?\\}/g, last = 0, m, patterns = [];\n        var checkParamErrors = function (id) {\n            if (!UrlMatcher.nameValidator.test(id))\n                throw new Error(\"Invalid parameter name '\" + id + \"' in pattern '\" + pattern + \"'\");\n            if (common_1.find(_this._params, hof_1.propEq('id', id)))\n                throw new Error(\"Duplicate parameter name '\" + id + \"' in pattern '\" + pattern + \"'\");\n        };\n        // Split into static segments separated by path parameter placeholders.\n        // The number of segments is always 1 more than the number of parameters.\n        var matchDetails = function (m, isSearch) {\n            // IE[78] returns '' for unmatched groups instead of null\n            var id = m[2] || m[3];\n            var regexp = isSearch ? m[4] : m[4] || (m[1] === '*' ? '.*' : null);\n            var makeRegexpType = function (regexp) { return common_1.inherit(paramTypes.type(isSearch ? \"query\" : \"path\"), {\n                pattern: new RegExp(regexp, _this.config.caseInsensitive ? 'i' : undefined)\n            }); };\n            return {\n                id: id,\n                regexp: regexp,\n                cfg: _this.config.params[id],\n                segment: pattern.substring(last, m.index),\n                type: !regexp ? null : paramTypes.type(regexp) || makeRegexpType(regexp)\n            };\n        };\n        var p, segment;\n        while ((m = placeholder.exec(pattern))) {\n            p = matchDetails(m, false);\n            if (p.segment.indexOf('?') >= 0)\n                break; // we're into the search part\n            checkParamErrors(p.id);\n            this._params.push(paramFactory.fromPath(p.id, p.type, this.config.paramMap(p.cfg, false)));\n            this._segments.push(p.segment);\n            patterns.push([p.segment, common_1.tail(this._params)]);\n            last = placeholder.lastIndex;\n        }\n        segment = pattern.substring(last);\n        // Find any search parameter names and remove them from the last segment\n        var i = segment.indexOf('?');\n        if (i >= 0) {\n            var search = segment.substring(i);\n            segment = segment.substring(0, i);\n            if (search.length > 0) {\n                last = 0;\n                while ((m = searchPlaceholder.exec(search))) {\n                    p = matchDetails(m, true);\n                    checkParamErrors(p.id);\n                    this._params.push(paramFactory.fromSearch(p.id, p.type, this.config.paramMap(p.cfg, true)));\n                    last = placeholder.lastIndex;\n                    // check if ?&\n                }\n            }\n        }\n        this._segments.push(segment);\n        this._compiled = patterns.map(function (pattern) { return quoteRegExp.apply(null, pattern); }).concat(quoteRegExp(segment));\n    }\n    /**\n     * Creates a new concatenated UrlMatcher\n     *\n     * Builds a new UrlMatcher by appending another UrlMatcher to this one.\n     *\n     * @param url A `UrlMatcher` instance to append as a child of the current `UrlMatcher`.\n     */\n    UrlMatcher.prototype.append = function (url) {\n        this._children.push(url);\n        url._cache = {\n            path: this._cache.path.concat(url),\n            parent: this,\n            pattern: null,\n        };\n        return url;\n    };\n    /** @hidden */\n    UrlMatcher.prototype.isRoot = function () {\n        return this._cache.path[0] === this;\n    };\n    /** Returns the input pattern string */\n    UrlMatcher.prototype.toString = function () {\n        return this.pattern;\n    };\n    /**\n     * Tests the specified url/path against this matcher.\n     *\n     * Tests if the given url matches this matcher's pattern, and returns an object containing the captured\n     * parameter values.  Returns null if the path does not match.\n     *\n     * The returned object contains the values\n     * of any search parameters that are mentioned in the pattern, but their value may be null if\n     * they are not present in `search`. This means that search parameters are always treated\n     * as optional.\n     *\n     * #### Example:\n     * ```js\n     * new UrlMatcher('/user/{id}?q&r').exec('/user/bob', {\n     *   x: '1', q: 'hello'\n     * });\n     * // returns { id: 'bob', q: 'hello', r: null }\n     * ```\n     *\n     * @param path    The URL path to match, e.g. `$location.path()`.\n     * @param search  URL search parameters, e.g. `$location.search()`.\n     * @param hash    URL hash e.g. `$location.hash()`.\n     * @param options\n     *\n     * @returns The captured parameter values.\n     */\n    UrlMatcher.prototype.exec = function (path, search, hash, options) {\n        var _this = this;\n        if (search === void 0) { search = {}; }\n        if (options === void 0) { options = {}; }\n        var match = memoizeTo(this._cache, 'pattern', function () {\n            return new RegExp([\n                '^',\n                common_1.unnest(_this._cache.path.map(hof_1.prop('_compiled'))).join(''),\n                _this.config.strict === false ? '\\/?' : '',\n                '$'\n            ].join(''), _this.config.caseInsensitive ? 'i' : undefined);\n        }).exec(path);\n        if (!match)\n            return null;\n        //options = defaults(options, { isolate: false });\n        var allParams = this.parameters(), pathParams = allParams.filter(function (param) { return !param.isSearch(); }), searchParams = allParams.filter(function (param) { return param.isSearch(); }), nPathSegments = this._cache.path.map(function (urlm) { return urlm._segments.length - 1; }).reduce(function (a, x) { return a + x; }), values = {};\n        if (nPathSegments !== match.length - 1)\n            throw new Error(\"Unbalanced capture group in route '\" + this.pattern + \"'\");\n        function decodePathArray(string) {\n            var reverseString = function (str) { return str.split(\"\").reverse().join(\"\"); };\n            var unquoteDashes = function (str) { return str.replace(/\\\\-/g, \"-\"); };\n            var split = reverseString(string).split(/-(?!\\\\)/);\n            var allReversed = common_1.map(split, reverseString);\n            return common_1.map(allReversed, unquoteDashes).reverse();\n        }\n        for (var i = 0; i < nPathSegments; i++) {\n            var param = pathParams[i];\n            var value = match[i + 1];\n            // if the param value matches a pre-replace pair, replace the value before decoding.\n            for (var j = 0; j < param.replace.length; j++) {\n                if (param.replace[j].from === value)\n                    value = param.replace[j].to;\n            }\n            if (value && param.array === true)\n                value = decodePathArray(value);\n            if (predicates_1.isDefined(value))\n                value = param.type.decode(value);\n            values[param.id] = param.value(value);\n        }\n        searchParams.forEach(function (param) {\n            var value = search[param.id];\n            for (var j = 0; j < param.replace.length; j++) {\n                if (param.replace[j].from === value)\n                    value = param.replace[j].to;\n            }\n            if (predicates_1.isDefined(value))\n                value = param.type.decode(value);\n            values[param.id] = param.value(value);\n        });\n        if (hash)\n            values[\"#\"] = hash;\n        return values;\n    };\n    /**\n     * @hidden\n     * Returns all the [[Param]] objects of all path and search parameters of this pattern in order of appearance.\n     *\n     * @returns {Array.<Param>}  An array of [[Param]] objects. Must be treated as read-only. If the\n     *    pattern has no parameters, an empty array is returned.\n     */\n    UrlMatcher.prototype.parameters = function (opts) {\n        if (opts === void 0) { opts = {}; }\n        if (opts.inherit === false)\n            return this._params;\n        return common_1.unnest(this._cache.path.map(function (matcher) { return matcher._params; }));\n    };\n    /**\n     * @hidden\n     * Returns a single parameter from this UrlMatcher by id\n     *\n     * @param id\n     * @param opts\n     * @returns {T|Param|any|boolean|UrlMatcher|null}\n     */\n    UrlMatcher.prototype.parameter = function (id, opts) {\n        var _this = this;\n        if (opts === void 0) { opts = {}; }\n        var findParam = function () {\n            for (var _i = 0, _a = _this._params; _i < _a.length; _i++) {\n                var param = _a[_i];\n                if (param.id === id)\n                    return param;\n            }\n        };\n        var parent = this._cache.parent;\n        return findParam() || (opts.inherit !== false && parent && parent.parameter(id, opts)) || null;\n    };\n    /**\n     * Validates the input parameter values against this UrlMatcher\n     *\n     * Checks an object hash of parameters to validate their correctness according to the parameter\n     * types of this `UrlMatcher`.\n     *\n     * @param params The object hash of parameters to validate.\n     * @returns Returns `true` if `params` validates, otherwise `false`.\n     */\n    UrlMatcher.prototype.validates = function (params) {\n        var validParamVal = function (param, val) {\n            return !param || param.validates(val);\n        };\n        params = params || {};\n        // I'm not sure why this checks only the param keys passed in, and not all the params known to the matcher\n        var paramSchema = this.parameters().filter(function (paramDef) { return params.hasOwnProperty(paramDef.id); });\n        return paramSchema.map(function (paramDef) { return validParamVal(paramDef, params[paramDef.id]); }).reduce(common_1.allTrueR, true);\n    };\n    /**\n     * Given a set of parameter values, creates a URL from this UrlMatcher.\n     *\n     * Creates a URL that matches this pattern by substituting the specified values\n     * for the path and search parameters.\n     *\n     * #### Example:\n     * ```js\n     * new UrlMatcher('/user/{id}?q').format({ id:'bob', q:'yes' });\n     * // returns '/user/bob?q=yes'\n     * ```\n     *\n     * @param values  the values to substitute for the parameters in this pattern.\n     * @returns the formatted URL (path and optionally search part).\n     */\n    UrlMatcher.prototype.format = function (values) {\n        if (values === void 0) { values = {}; }\n        // Build the full path of UrlMatchers (including all parent UrlMatchers)\n        var urlMatchers = this._cache.path;\n        // Extract all the static segments and Params (processed as ParamDetails)\n        // into an ordered array\n        var pathSegmentsAndParams = urlMatchers.map(UrlMatcher.pathSegmentsAndParams)\n            .reduce(common_1.unnestR, [])\n            .map(function (x) { return predicates_1.isString(x) ? x : getDetails(x); });\n        // Extract the query params into a separate array\n        var queryParams = urlMatchers.map(UrlMatcher.queryParams)\n            .reduce(common_1.unnestR, [])\n            .map(getDetails);\n        var isInvalid = function (param) { return param.isValid === false; };\n        if (pathSegmentsAndParams.concat(queryParams).filter(isInvalid).length) {\n            return null;\n        }\n        /**\n         * Given a Param, applies the parameter value, then returns detailed information about it\n         */\n        function getDetails(param) {\n            // Normalize to typed value\n            var value = param.value(values[param.id]);\n            var isValid = param.validates(value);\n            var isDefaultValue = param.isDefaultValue(value);\n            // Check if we're in squash mode for the parameter\n            var squash = isDefaultValue ? param.squash : false;\n            // Allow the Parameter's Type to encode the value\n            var encoded = param.type.encode(value);\n            return { param: param, value: value, isValid: isValid, isDefaultValue: isDefaultValue, squash: squash, encoded: encoded };\n        }\n        // Build up the path-portion from the list of static segments and parameters\n        var pathString = pathSegmentsAndParams.reduce(function (acc, x) {\n            // The element is a static segment (a raw string); just append it\n            if (predicates_1.isString(x))\n                return acc + x;\n            // Otherwise, it's a ParamDetails.\n            var squash = x.squash, encoded = x.encoded, param = x.param;\n            // If squash is === true, try to remove a slash from the path\n            if (squash === true)\n                return (acc.match(/\\/$/)) ? acc.slice(0, -1) : acc;\n            // If squash is a string, use the string for the param value\n            if (predicates_1.isString(squash))\n                return acc + squash;\n            if (squash !== false)\n                return acc; // ?\n            if (encoded == null)\n                return acc;\n            // If this parameter value is an array, encode the value using encodeDashes\n            if (predicates_1.isArray(encoded))\n                return acc + common_1.map(encoded, UrlMatcher.encodeDashes).join(\"-\");\n            // If the parameter type is \"raw\", then do not encodeURIComponent\n            if (param.raw)\n                return acc + encoded;\n            // Encode the value\n            return acc + encodeURIComponent(encoded);\n        }, \"\");\n        // Build the query string by applying parameter values (array or regular)\n        // then mapping to key=value, then flattening and joining using \"&\"\n        var queryString = queryParams.map(function (paramDetails) {\n            var param = paramDetails.param, squash = paramDetails.squash, encoded = paramDetails.encoded, isDefaultValue = paramDetails.isDefaultValue;\n            if (encoded == null || (isDefaultValue && squash !== false))\n                return;\n            if (!predicates_1.isArray(encoded))\n                encoded = [encoded];\n            if (encoded.length === 0)\n                return;\n            if (!param.raw)\n                encoded = common_1.map(encoded, encodeURIComponent);\n            return encoded.map(function (val) { return param.id + \"=\" + val; });\n        }).filter(common_1.identity).reduce(common_1.unnestR, []).join(\"&\");\n        // Concat the pathstring with the queryString (if exists) and the hashString (if exists)\n        return pathString + (queryString ? \"?\" + queryString : \"\") + (values[\"#\"] ? \"#\" + values[\"#\"] : \"\");\n    };\n    /** @hidden */\n    UrlMatcher.encodeDashes = function (str) {\n        return encodeURIComponent(str).replace(/-/g, function (c) { return \"%5C%\" + c.charCodeAt(0).toString(16).toUpperCase(); });\n    };\n    /** @hidden Given a matcher, return an array with the matcher's path segments and path params, in order */\n    UrlMatcher.pathSegmentsAndParams = function (matcher) {\n        var staticSegments = matcher._segments;\n        var pathParams = matcher._params.filter(function (p) { return p.location === param_1.DefType.PATH; });\n        return common_1.arrayTuples(staticSegments, pathParams.concat(undefined))\n            .reduce(common_1.unnestR, [])\n            .filter(function (x) { return x !== \"\" && predicates_1.isDefined(x); });\n    };\n    /** @hidden Given a matcher, return an array with the matcher's query params */\n    UrlMatcher.queryParams = function (matcher) {\n        return matcher._params.filter(function (p) { return p.location === param_1.DefType.SEARCH; });\n    };\n    /**\n     * Compare two UrlMatchers\n     *\n     * This comparison function converts a UrlMatcher into static and dynamic path segments.\n     * Each static path segment is a static string between a path separator (slash character).\n     * Each dynamic segment is a path parameter.\n     *\n     * The comparison function sorts static segments before dynamic ones.\n     */\n    UrlMatcher.compare = function (a, b) {\n        /**\n         * Turn a UrlMatcher and all its parent matchers into an array\n         * of slash literals '/', string literals, and Param objects\n         *\n         * This example matcher matches strings like \"/foo/:param/tail\":\n         * var matcher = $umf.compile(\"/foo\").append($umf.compile(\"/:param\")).append($umf.compile(\"/\")).append($umf.compile(\"tail\"));\n         * var result = segments(matcher); // [ '/', 'foo', '/', Param, '/', 'tail' ]\n         *\n         * Caches the result as `matcher._cache.segments`\n         */\n        var segments = function (matcher) {\n            return matcher._cache.segments = matcher._cache.segments ||\n                matcher._cache.path.map(UrlMatcher.pathSegmentsAndParams)\n                    .reduce(common_1.unnestR, [])\n                    .reduce(strings_1.joinNeighborsR, [])\n                    .map(function (x) { return predicates_1.isString(x) ? splitOnSlash(x) : x; })\n                    .reduce(common_1.unnestR, []);\n        };\n        /**\n         * Gets the sort weight for each segment of a UrlMatcher\n         *\n         * Caches the result as `matcher._cache.weights`\n         */\n        var weights = function (matcher) {\n            return matcher._cache.weights = matcher._cache.weights ||\n                segments(matcher).map(function (segment) {\n                    // Sort slashes first, then static strings, the Params\n                    if (segment === '/')\n                        return 1;\n                    if (predicates_1.isString(segment))\n                        return 2;\n                    if (segment instanceof param_1.Param)\n                        return 3;\n                });\n        };\n        var cmp, i, pairs = common_1.arrayTuples(weights(a), weights(b));\n        for (i = 0; i < pairs.length; i++) {\n            cmp = pairs[i][0] - pairs[i][1];\n            if (cmp !== 0)\n                return cmp;\n        }\n        return 0;\n    };\n    return UrlMatcher;\n}());\n/** @hidden */\nUrlMatcher.nameValidator = /^\\w+([-.]+\\w+)*(?:\\[\\])?$/;\nexports.UrlMatcher = UrlMatcher;\n//# sourceMappingURL=urlMatcher.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/url/urlMatcher.js\n// module id = SWv+\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/** @module hooks */ /** */\nvar transition_1 = require(\"../transition/transition\");\nvar router_1 = require(\"../router\");\nfunction addCoreResolvables(trans) {\n    trans.addResolvable({ token: router_1.UIRouter, deps: [], resolveFn: function () { return trans.router; }, data: trans.router }, \"\");\n    trans.addResolvable({ token: transition_1.Transition, deps: [], resolveFn: function () { return trans; }, data: trans }, \"\");\n    trans.addResolvable({ token: '$transition$', deps: [], resolveFn: function () { return trans; }, data: trans }, \"\");\n    trans.addResolvable({ token: '$stateParams', deps: [], resolveFn: function () { return trans.params(); }, data: trans.params() }, \"\");\n    trans.entering().forEach(function (state) {\n        trans.addResolvable({ token: '$state$', deps: [], resolveFn: function () { return state; }, data: state }, state);\n    });\n}\nexports.registerAddCoreResolvables = function (transitionService) {\n    return transitionService.onCreate({}, addCoreResolvables);\n};\n//# sourceMappingURL=coreResolvables.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/hooks/coreResolvables.js\n// module id = T2nb\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/** @internalapi */\nexports.resolvePolicies = {\n    when: {\n        LAZY: \"LAZY\",\n        EAGER: \"EAGER\"\n    },\n    async: {\n        WAIT: \"WAIT\",\n        NOWAIT: \"NOWAIT\",\n        RXWAIT: \"RXWAIT\"\n    }\n};\n//# sourceMappingURL=interface.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/resolve/interface.js\n// module id = TFWD\n// module chunks = 0","\"use strict\";\n/**\n * @coreapi\n * @module common\n */ /** */\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./common/index\"));\n__export(require(\"./params/index\"));\n__export(require(\"./path/index\"));\n__export(require(\"./resolve/index\"));\n__export(require(\"./state/index\"));\n__export(require(\"./transition/index\"));\n__export(require(\"./url/index\"));\n__export(require(\"./view/index\"));\n__export(require(\"./globals\"));\n__export(require(\"./router\"));\n__export(require(\"./vanilla\"));\n__export(require(\"./interface\"));\n//# sourceMappingURL=index.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/index.js\n// module id = TzbD\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @coreapi\n * @module transition\n */\n/** for typedoc */\nvar interface_1 = require(\"./interface\");\nvar transition_1 = require(\"./transition\");\nvar hookRegistry_1 = require(\"./hookRegistry\");\nvar coreResolvables_1 = require(\"../hooks/coreResolvables\");\nvar redirectTo_1 = require(\"../hooks/redirectTo\");\nvar onEnterExitRetain_1 = require(\"../hooks/onEnterExitRetain\");\nvar resolve_1 = require(\"../hooks/resolve\");\nvar views_1 = require(\"../hooks/views\");\nvar updateGlobals_1 = require(\"../hooks/updateGlobals\");\nvar url_1 = require(\"../hooks/url\");\nvar lazyLoad_1 = require(\"../hooks/lazyLoad\");\nvar transitionEventType_1 = require(\"./transitionEventType\");\nvar transitionHook_1 = require(\"./transitionHook\");\nvar predicates_1 = require(\"../common/predicates\");\nvar common_1 = require(\"../common/common\");\nvar hof_1 = require(\"../common/hof\");\nvar ignoredTransition_1 = require(\"../hooks/ignoredTransition\");\nvar invalidTransition_1 = require(\"../hooks/invalidTransition\");\n/**\n * The default [[Transition]] options.\n *\n * Include this object when applying custom defaults:\n * let reloadOpts = { reload: true, notify: true }\n * let options = defaults(theirOpts, customDefaults, defaultOptions);\n */\nexports.defaultTransOpts = {\n    location: true,\n    relative: null,\n    inherit: false,\n    notify: true,\n    reload: false,\n    custom: {},\n    current: function () { return null; },\n    source: \"unknown\"\n};\n/**\n * This class provides services related to Transitions.\n *\n * - Most importantly, it allows global Transition Hooks to be registered.\n * - It allows the default transition error handler to be set.\n * - It also has a factory function for creating new [[Transition]] objects, (used internally by the [[StateService]]).\n *\n * At bootstrap, [[UIRouter]] creates a single instance (singleton) of this class.\n */\nvar TransitionService = (function () {\n    /** @hidden */\n    function TransitionService(_router) {\n        /** @hidden */\n        this._transitionCount = 0;\n        /** @hidden The transition hook types, such as `onEnter`, `onStart`, etc */\n        this._eventTypes = [];\n        /** @hidden The registered transition hooks */\n        this._registeredHooks = {};\n        /** @hidden The  paths on a criteria object */\n        this._criteriaPaths = {};\n        this._router = _router;\n        this.$view = _router.viewService;\n        this._deregisterHookFns = {};\n        this._pluginapi = common_1.createProxyFunctions(hof_1.val(this), {}, hof_1.val(this), [\n            '_definePathType',\n            '_defineEvent',\n            '_getPathTypes',\n            '_getEvents',\n            'getHooks',\n        ]);\n        this._defineCorePaths();\n        this._defineCoreEvents();\n        this._registerCoreTransitionHooks();\n    }\n    /**\n     * Registers a [[TransitionHookFn]], called *while a transition is being constructed*.\n     *\n     * Registers a transition lifecycle hook, which is invoked during transition construction.\n     *\n     * This low level hook should only be used by plugins.\n     * This can be a useful time for plugins to add resolves or mutate the transition as needed.\n     * The Sticky States plugin uses this hook to modify the treechanges.\n     *\n     * ### Lifecycle\n     *\n     * `onCreate` hooks are invoked *while a transition is being constructed*.\n     *\n     * ### Return value\n     *\n     * The hook's return value is ignored\n     *\n     * @internalapi\n     * @param criteria defines which Transitions the Hook should be invoked for.\n     * @param callback the hook function which will be invoked.\n     * @param options the registration options\n     * @returns a function which deregisters the hook.\n     */\n    TransitionService.prototype.onCreate = function (criteria, callback, options) { return; };\n    /** @inheritdoc */\n    TransitionService.prototype.onBefore = function (criteria, callback, options) { return; };\n    /** @inheritdoc */\n    TransitionService.prototype.onStart = function (criteria, callback, options) { return; };\n    /** @inheritdoc */\n    TransitionService.prototype.onExit = function (criteria, callback, options) { return; };\n    /** @inheritdoc */\n    TransitionService.prototype.onRetain = function (criteria, callback, options) { return; };\n    /** @inheritdoc */\n    TransitionService.prototype.onEnter = function (criteria, callback, options) { return; };\n    /** @inheritdoc */\n    TransitionService.prototype.onFinish = function (criteria, callback, options) { return; };\n    /** @inheritdoc */\n    TransitionService.prototype.onSuccess = function (criteria, callback, options) { return; };\n    /** @inheritdoc */\n    TransitionService.prototype.onError = function (criteria, callback, options) { return; };\n    /**\n     * dispose\n     * @internalapi\n     */\n    TransitionService.prototype.dispose = function (router) {\n        common_1.values(this._registeredHooks).forEach(function (hooksArray) { return hooksArray.forEach(function (hook) {\n            hook._deregistered = true;\n            common_1.removeFrom(hooksArray, hook);\n        }); });\n    };\n    /**\n     * Creates a new [[Transition]] object\n     *\n     * This is a factory function for creating new Transition objects.\n     * It is used internally by the [[StateService]] and should generally not be called by application code.\n     *\n     * @param fromPath the path to the current state (the from state)\n     * @param targetState the target state (destination)\n     * @returns a Transition\n     */\n    TransitionService.prototype.create = function (fromPath, targetState) {\n        return new transition_1.Transition(fromPath, targetState, this._router);\n    };\n    /** @hidden */\n    TransitionService.prototype._defineCoreEvents = function () {\n        var Phase = interface_1.TransitionHookPhase;\n        var TH = transitionHook_1.TransitionHook;\n        var paths = this._criteriaPaths;\n        var NORMAL_SORT = false, REVERSE_SORT = true;\n        var ASYNCHRONOUS = false, SYNCHRONOUS = true;\n        this._defineEvent(\"onCreate\", Phase.CREATE, 0, paths.to, NORMAL_SORT, TH.LOG_REJECTED_RESULT, TH.THROW_ERROR, SYNCHRONOUS);\n        this._defineEvent(\"onBefore\", Phase.BEFORE, 0, paths.to);\n        this._defineEvent(\"onStart\", Phase.RUN, 0, paths.to);\n        this._defineEvent(\"onExit\", Phase.RUN, 100, paths.exiting, REVERSE_SORT);\n        this._defineEvent(\"onRetain\", Phase.RUN, 200, paths.retained);\n        this._defineEvent(\"onEnter\", Phase.RUN, 300, paths.entering);\n        this._defineEvent(\"onFinish\", Phase.RUN, 400, paths.to);\n        this._defineEvent(\"onSuccess\", Phase.SUCCESS, 0, paths.to, NORMAL_SORT, TH.LOG_REJECTED_RESULT, TH.LOG_ERROR, SYNCHRONOUS);\n        this._defineEvent(\"onError\", Phase.ERROR, 0, paths.to, NORMAL_SORT, TH.LOG_REJECTED_RESULT, TH.LOG_ERROR, SYNCHRONOUS);\n    };\n    /** @hidden */\n    TransitionService.prototype._defineCorePaths = function () {\n        var STATE = interface_1.TransitionHookScope.STATE, TRANSITION = interface_1.TransitionHookScope.TRANSITION;\n        this._definePathType(\"to\", TRANSITION);\n        this._definePathType(\"from\", TRANSITION);\n        this._definePathType(\"exiting\", STATE);\n        this._definePathType(\"retained\", STATE);\n        this._definePathType(\"entering\", STATE);\n    };\n    /** @hidden */\n    TransitionService.prototype._defineEvent = function (name, hookPhase, hookOrder, criteriaMatchPath, reverseSort, getResultHandler, getErrorHandler, synchronous) {\n        if (reverseSort === void 0) { reverseSort = false; }\n        if (getResultHandler === void 0) { getResultHandler = transitionHook_1.TransitionHook.HANDLE_RESULT; }\n        if (getErrorHandler === void 0) { getErrorHandler = transitionHook_1.TransitionHook.REJECT_ERROR; }\n        if (synchronous === void 0) { synchronous = false; }\n        var eventType = new transitionEventType_1.TransitionEventType(name, hookPhase, hookOrder, criteriaMatchPath, reverseSort, getResultHandler, getErrorHandler, synchronous);\n        this._eventTypes.push(eventType);\n        hookRegistry_1.makeEvent(this, this, eventType);\n    };\n    ;\n    /** @hidden */\n    TransitionService.prototype._getEvents = function (phase) {\n        var transitionHookTypes = predicates_1.isDefined(phase) ?\n            this._eventTypes.filter(function (type) { return type.hookPhase === phase; }) :\n            this._eventTypes.slice();\n        return transitionHookTypes.sort(function (l, r) {\n            var cmpByPhase = l.hookPhase - r.hookPhase;\n            return cmpByPhase === 0 ? l.hookOrder - r.hookOrder : cmpByPhase;\n        });\n    };\n    /**\n     * Adds a Path to be used as a criterion against a TreeChanges path\n     *\n     * For example: the `exiting` path in [[HookMatchCriteria]] is a STATE scoped path.\n     * It was defined by calling `defineTreeChangesCriterion('exiting', TransitionHookScope.STATE)`\n     * Each state in the exiting path is checked against the criteria and returned as part of the match.\n     *\n     * Another example: the `to` path in [[HookMatchCriteria]] is a TRANSITION scoped path.\n     * It was defined by calling `defineTreeChangesCriterion('to', TransitionHookScope.TRANSITION)`\n     * Only the tail of the `to` path is checked against the criteria and returned as part of the match.\n     *\n     * @hidden\n     */\n    TransitionService.prototype._definePathType = function (name, hookScope) {\n        this._criteriaPaths[name] = { name: name, scope: hookScope };\n    };\n    /** * @hidden */\n    TransitionService.prototype._getPathTypes = function () {\n        return this._criteriaPaths;\n    };\n    /** @hidden */\n    TransitionService.prototype.getHooks = function (hookName) {\n        return this._registeredHooks[hookName];\n    };\n    /** @hidden */\n    TransitionService.prototype._registerCoreTransitionHooks = function () {\n        var fns = this._deregisterHookFns;\n        fns.addCoreResolves = coreResolvables_1.registerAddCoreResolvables(this);\n        fns.ignored = ignoredTransition_1.registerIgnoredTransitionHook(this);\n        fns.invalid = invalidTransition_1.registerInvalidTransitionHook(this);\n        // Wire up redirectTo hook\n        fns.redirectTo = redirectTo_1.registerRedirectToHook(this);\n        // Wire up onExit/Retain/Enter state hooks\n        fns.onExit = onEnterExitRetain_1.registerOnExitHook(this);\n        fns.onRetain = onEnterExitRetain_1.registerOnRetainHook(this);\n        fns.onEnter = onEnterExitRetain_1.registerOnEnterHook(this);\n        // Wire up Resolve hooks\n        fns.eagerResolve = resolve_1.registerEagerResolvePath(this);\n        fns.lazyResolve = resolve_1.registerLazyResolveState(this);\n        // Wire up the View management hooks\n        fns.loadViews = views_1.registerLoadEnteringViews(this);\n        fns.activateViews = views_1.registerActivateViews(this);\n        // Updates global state after a transition\n        fns.updateGlobals = updateGlobals_1.registerUpdateGlobalState(this);\n        // After globals.current is updated at priority: 10000\n        fns.updateUrl = url_1.registerUpdateUrl(this);\n        // Lazy load state trees\n        fns.lazyLoad = lazyLoad_1.registerLazyLoadHook(this);\n    };\n    return TransitionService;\n}());\nexports.TransitionService = TransitionService;\n//# sourceMappingURL=transitionService.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/transition/transitionService.js\n// module id = VxFE\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/** @module state */ /** for typedoc */\nvar common_1 = require(\"../common/common\");\nvar predicates_1 = require(\"../common/predicates\");\nvar stateObject_1 = require(\"./stateObject\");\nvar hof_1 = require(\"../common/hof\");\n/** @internalapi */\nvar StateQueueManager = (function () {\n    function StateQueueManager($registry, $urlRouter, states, builder, listeners) {\n        this.$registry = $registry;\n        this.$urlRouter = $urlRouter;\n        this.states = states;\n        this.builder = builder;\n        this.listeners = listeners;\n        this.queue = [];\n        this.matcher = $registry.matcher;\n    }\n    /** @internalapi */\n    StateQueueManager.prototype.dispose = function () {\n        this.queue = [];\n    };\n    StateQueueManager.prototype.register = function (stateDecl) {\n        var queue = this.queue;\n        var state = stateObject_1.StateObject.create(stateDecl);\n        var name = state.name;\n        if (!predicates_1.isString(name))\n            throw new Error(\"State must have a valid name\");\n        if (this.states.hasOwnProperty(name) || common_1.inArray(queue.map(hof_1.prop('name')), name))\n            throw new Error(\"State '\" + name + \"' is already defined\");\n        queue.push(state);\n        this.flush();\n        return state;\n    };\n    StateQueueManager.prototype.flush = function () {\n        var _this = this;\n        var _a = this, queue = _a.queue, states = _a.states, builder = _a.builder;\n        var registered = [], // states that got registered\n        orphans = [], // states that don't yet have a parent registered\n        previousQueueLength = {}; // keep track of how long the queue when an orphan was first encountered\n        var getState = function (name) {\n            return _this.states.hasOwnProperty(name) && _this.states[name];\n        };\n        while (queue.length > 0) {\n            var state = queue.shift();\n            var name_1 = state.name;\n            var result = builder.build(state);\n            var orphanIdx = orphans.indexOf(state);\n            if (result) {\n                var existingState = getState(name_1);\n                if (existingState && existingState.name === name_1) {\n                    throw new Error(\"State '\" + name_1 + \"' is already defined\");\n                }\n                var existingFutureState = getState(name_1 + \".**\");\n                if (existingFutureState) {\n                    // Remove future state of the same name\n                    this.$registry.deregister(existingFutureState);\n                }\n                states[name_1] = state;\n                this.attachRoute(state);\n                if (orphanIdx >= 0)\n                    orphans.splice(orphanIdx, 1);\n                registered.push(state);\n                continue;\n            }\n            var prev = previousQueueLength[name_1];\n            previousQueueLength[name_1] = queue.length;\n            if (orphanIdx >= 0 && prev === queue.length) {\n                // Wait until two consecutive iterations where no additional states were dequeued successfully.\n                // throw new Error(`Cannot register orphaned state '${name}'`);\n                queue.push(state);\n                return states;\n            }\n            else if (orphanIdx < 0) {\n                orphans.push(state);\n            }\n            queue.push(state);\n        }\n        if (registered.length) {\n            this.listeners.forEach(function (listener) { return listener(\"registered\", registered.map(function (s) { return s.self; })); });\n        }\n        return states;\n    };\n    StateQueueManager.prototype.attachRoute = function (state) {\n        if (state.abstract || !state.url)\n            return;\n        this.$urlRouter.rule(this.$urlRouter.urlRuleFactory.create(state));\n    };\n    return StateQueueManager;\n}());\nexports.StateQueueManager = StateQueueManager;\n//# sourceMappingURL=stateQueueManager.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/state/stateQueueManager.js\n// module id = W+ax\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/** @module hooks */ /** */\nvar predicates_1 = require(\"../common/predicates\");\nvar coreservices_1 = require(\"../common/coreservices\");\nvar targetState_1 = require(\"../state/targetState\");\n/**\n * A [[TransitionHookFn]] that redirects to a different state or params\n *\n * Registered using `transitionService.onStart({ to: (state) => !!state.redirectTo }, redirectHook);`\n *\n * See [[StateDeclaration.redirectTo]]\n */\nvar redirectToHook = function (trans) {\n    var redirect = trans.to().redirectTo;\n    if (!redirect)\n        return;\n    var $state = trans.router.stateService;\n    function handleResult(result) {\n        if (!result)\n            return;\n        if (result instanceof targetState_1.TargetState)\n            return result;\n        if (predicates_1.isString(result))\n            return $state.target(result, trans.params(), trans.options());\n        if (result['state'] || result['params'])\n            return $state.target(result['state'] || trans.to(), result['params'] || trans.params(), trans.options());\n    }\n    if (predicates_1.isFunction(redirect)) {\n        return coreservices_1.services.$q.when(redirect(trans)).then(handleResult);\n    }\n    return handleResult(redirect);\n};\nexports.registerRedirectToHook = function (transitionService) {\n    return transitionService.onStart({ to: function (state) { return !!state.redirectTo; } }, redirectToHook);\n};\n//# sourceMappingURL=redirectTo.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/hooks/redirectTo.js\n// module id = W5Zz\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ng_from_import = require(\"angular\");\nvar ng_from_global = angular;\nexports.ng = (ng_from_import && ng_from_import.module) ? ng_from_import : ng_from_global;\n//# sourceMappingURL=angular.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/lib/angular.js\n// module id = WfS1\n// module chunks = 0","\"use strict\";\n/**\n * # Angular 1 injectable services\n *\n * This is a list of the objects which can be injected using angular's injector.\n *\n * There are three different kind of injectable objects:\n *\n * ## **Provider** objects\n * #### injectable into a `.config()` block during configtime\n *\n * - [[$uiRouterProvider]]: The UI-Router instance\n * - [[$stateProvider]]: State registration\n * - [[$transitionsProvider]]: Transition hooks\n * - [[$urlServiceProvider]]: All URL related public APIs\n *\n * - [[$uiViewScrollProvider]]: Disable ui-router view scrolling\n * - [[$urlRouterProvider]]: (deprecated) Url matching rules\n * - [[$urlMatcherFactoryProvider]]: (deprecated) Url parsing config\n *\n * ## **Service** objects\n * #### injectable globally during runtime\n *\n * - [[$uiRouter]]: The UI-Router instance\n * - [[$trace]]: Enable transition trace/debug\n * - [[$transitions]]: Transition hooks\n * - [[$state]]: Imperative state related APIs\n * - [[$stateRegistry]]: State registration\n * - [[$urlService]]: All URL related public APIs\n * - [[$uiRouterGlobals]]: Global variables\n * - [[$uiViewScroll]]: Scroll an element into view\n *\n * - [[$stateParams]]: (deprecated) Global state param values\n * - [[$urlRouter]]: (deprecated) URL synchronization\n * - [[$urlMatcherFactory]]: (deprecated) URL parsing config\n *\n * ## **Per-Transition** objects\n *\n * - These kind of objects are injectable into:\n *   - Resolves ([[Ng1StateDeclaration.resolve]]),\n *   - Transition Hooks ([[TransitionService.onStart]], etc),\n *   - Routed Controllers ([[Ng1ViewDeclaration.controller]])\n *\n * #### Different instances are injected based on the [[Transition]]\n *\n * - [[$transition$]]: The current Transition object\n * - [[$stateParams]]: State param values for pending Transition (deprecated)\n * - Any resolve data defined using [[Ng1StateDeclaration.resolve]]\n *\n * @ng1api\n * @preferred\n * @module injectables\n */ /** */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * The current (or pending) State Parameters\n *\n * An injectable global **Service Object** which holds the state parameters for the latest **SUCCESSFUL** transition.\n *\n * The values are not updated until *after* a `Transition` successfully completes.\n *\n * **Also:** an injectable **Per-Transition Object** object which holds the pending state parameters for the pending `Transition` currently running.\n *\n * ### Deprecation warning:\n *\n * The value injected for `$stateParams` is different depending on where it is injected.\n *\n * - When injected into an angular service, the object injected is the global **Service Object** with the parameter values for the latest successful `Transition`.\n * - When injected into transition hooks, resolves, or view controllers, the object is the **Per-Transition Object** with the parameter values for the running `Transition`.\n *\n * Because of these confusing details, this service is deprecated.\n *\n * ### Instead of using the global `$stateParams` service object,\n * inject [[$uiRouterGlobals]] and use [[UIRouterGlobals.params]]\n *\n * ```js\n * MyService.$inject = ['$uiRouterGlobals'];\n * function MyService($uiRouterGlobals) {\n *   return {\n *     paramValues: function () {\n *       return $uiRouterGlobals.params;\n *     }\n *   }\n * }\n * ```\n *\n * ### Instead of using the per-transition `$stateParams` object,\n * inject the current `Transition` (as [[$transition$]]) and use [[Transition.params]]\n *\n * ```js\n * MyController.$inject = ['$transition$'];\n * function MyController($transition$) {\n *   var username = $transition$.params().username;\n *   // .. do something with username\n * }\n * ```\n *\n * ---\n *\n * This object can be injected into other services.\n *\n * #### Deprecated Example:\n * ```js\n * SomeService.$inject = ['$http', '$stateParams'];\n * function SomeService($http, $stateParams) {\n *   return {\n *     getUser: function() {\n *       return $http.get('/api/users/' + $stateParams.username);\n *     }\n *   }\n * };\n * angular.service('SomeService', SomeService);\n * ```\n * @deprecated\n */\nvar $stateParams;\n/**\n * Global UI-Router variables\n *\n * The router global state as a **Service Object** (injectable during runtime).\n *\n * This object contains globals such as the current state and current parameter values.\n */\nvar $uiRouterGlobals;\n/**\n * The UI-Router instance\n *\n * The [[UIRouter]] singleton (the router instance) as a **Service Object** (injectable during runtime).\n *\n * This object is the UI-Router singleton instance, created by angular dependency injection during application bootstrap.\n * It has references to the other UI-Router services\n *\n * #### Note: This object is also exposed as [[$uiRouterProvider]] for injection during angular config time.\n */\nvar $uiRouter;\n/**\n * The UI-Router instance\n *\n * The [[UIRouter]] singleton (the router instance) as a **Provider Object** (injectable during config phase).\n *\n * This object is the UI-Router singleton instance, created by angular dependency injection during application bootstrap.\n * It has references to the other UI-Router services\n *\n * #### Note: This object is also exposed as [[$uiRouter]] for injection during runtime.\n */\nvar $uiRouterProvider;\n/**\n * Transition debug/tracing\n *\n * The [[Trace]] singleton as a **Service Object** (injectable during runtime).\n *\n * Enables or disables Transition tracing which can help to debug issues.\n */\nvar $trace;\n/**\n * The Transition Service\n *\n * The [[TransitionService]] singleton as a **Service Object** (injectable during runtime).\n *\n * This angular service exposes the [[TransitionService]] singleton, which is primarily\n * used to register global transition hooks.\n *\n * #### Note: This object is also exposed as [[$transitionsProvider]] for injection during the config phase.\n */\nvar $transitions;\n/**\n * The Transition Service\n *\n * The [[TransitionService]] singleton as a **Provider Object** (injectable during config phase)\n *\n * This angular service exposes the [[TransitionService]] singleton, which is primarily\n * used to register global transition hooks.\n *\n * #### Note: This object is also exposed as [[$transitions]] for injection during runtime.\n */\nvar $transitionsProvider;\n/**\n * The current [[Transition]] object\n *\n * The current [[Transition]] object as a **Per-Transition Object** (injectable into Resolve, Hooks, Controllers)\n *\n * This object returns information about the current transition, including:\n *\n * - To/from states\n * - To/from parameters\n * - Transition options\n * - States being entered, exited, and retained\n * - Resolve data\n * - A Promise for the transition\n * - Any transition failure information\n * - An injector for both Service and Per-Transition Objects\n */\nvar $transition$;\n/**\n * The State Service\n *\n * The [[StateService]] singleton as a **Service Object** (injectable during runtime).\n *\n * This service used to manage and query information on registered states.\n * It exposes state related APIs including:\n *\n * - Start a [[Transition]]\n * - Imperatively lazy load states\n * - Check if a state is currently active\n * - Look up states by name\n * - Build URLs for a state+parameters\n * - Configure the global Transition error handler\n *\n * This angular service exposes the [[StateService]] singleton.\n */\nvar $state;\n/**\n * The State Registry\n *\n * The [[StateRegistry]] singleton as a **Service Object** (injectable during runtime).\n *\n * This service is used to register/deregister states.\n * It has state registration related APIs including:\n *\n * - Register/deregister states\n * - Listen for state registration/deregistration\n * - Get states by name\n * - Add state decorators (to customize the state creation process)\n *\n * #### Note: This object is also exposed as [[$stateRegistryProvider]] for injection during the config phase.\n */\nvar $stateRegistry;\n/**\n * The State Registry\n *\n * The [[StateRegistry]] singleton as a **Provider Object** (injectable during config time).\n *\n * This service is used to register/deregister states.\n * It has state registration related APIs including:\n *\n * - Register/deregister states\n * - Listen for state registration/deregistration\n * - Get states by name\n * - Add state decorators (to customize the state creation process)\n *\n * #### Note: This object is also exposed as [[$stateRegistry]] for injection during runtime.\n */\nvar $stateRegistryProvider;\n/**\n * The View Scroll provider\n *\n * The [[UIViewScrollProvider]] as a **Provider Object** (injectable during config time).\n *\n * This angular service exposes the [[UIViewScrollProvider]] singleton and is\n * used to disable UI-Router's scroll behavior.\n */\nvar $uiViewScrollProvider;\n/**\n * The View Scroll function\n *\n * The View Scroll function as a **Service Object** (injectable during runtime).\n *\n * This is a function that scrolls an element into view.\n * The element is scrolled after a `$timeout` so the DOM has time to refresh.\n *\n * If you prefer to rely on `$anchorScroll` to scroll the view to the anchor,\n * this can be enabled by calling [[UIViewScrollProvider.useAnchorScroll]].\n *\n * Note: this function is used by the [[directives.uiView]] when the `autoscroll` expression evaluates to true.\n */\nvar $uiViewScroll;\n/**\n * The StateProvider\n *\n * An angular1-only [[StateProvider]] as a **Provider Object** (injectable during config time).\n *\n * This angular service exposes the [[StateProvider]] singleton.\n *\n * The `StateProvider` is primarily used to register states or add custom state decorators.\n *\n * ##### Note: This provider is a ng1 vestige.\n * It is a passthrough to [[$stateRegistry]] and [[$state]].\n */\nvar $stateProvider;\n/**\n * The URL Service Provider\n *\n * The [[UrlService]] singleton as a **Provider Object** (injectable during the angular config phase).\n *\n * A service used to configure and interact with the URL.\n * It has URL related APIs including:\n *\n * - register custom Parameter types `UrlService.config.type` ([[UrlConfigApi.type]])\n * - add URL rules: `UrlService.rules.when` ([[UrlRulesApi.when]])\n * - configure behavior when no url matches: `UrlService.rules.otherwise` ([[UrlRulesApi.otherwise]])\n * - delay initial URL synchronization [[UrlService.deferIntercept]].\n * - get or set the current url: [[UrlService.url]]\n *\n * ##### Note: This service can also be injected during runtime as [[$urlService]].\n */\nvar $urlServiceProvider;\n/**\n * The URL Service\n *\n * The [[UrlService]] singleton as a **Service Object** (injectable during runtime).\n *\n * Note: This service can also be injected during the config phase as [[$urlServiceProvider]].\n *\n * Used to configure the URL.\n * It has URL related APIs including:\n *\n * - register custom Parameter types `UrlService.config.type` ([[UrlConfigApi.type]])\n * - add URL rules: `UrlService.rules.when` ([[UrlRulesApi.when]])\n * - configure behavior when no url matches: `UrlService.rules.otherwise` ([[UrlRulesApi.otherwise]])\n * - delay initial URL synchronization [[UrlService.deferIntercept]].\n * - get or set the current url: [[UrlService.url]]\n *\n * ##### Note: This service can also be injected during the config phase as [[$urlServiceProvider]].\n */\nvar $urlService;\n/**\n * The URL Router Provider\n *\n * ### Deprecation warning: This object is now considered internal. Use [[$urlServiceProvider]] instead.\n *\n * The [[UrlRouter]] singleton as a **Provider Object** (injectable during config time).\n *\n * #### Note: This object is also exposed as [[$urlRouter]] for injection during runtime.\n *\n * @deprecated\n */\nvar $urlRouterProvider;\n/**\n * The Url Router\n *\n * ### Deprecation warning: This object is now considered internal. Use [[$urlService]] instead.\n *\n * The [[UrlRouter]] singleton as a **Service Object** (injectable during runtime).\n *\n * #### Note: This object is also exposed as [[$urlRouterProvider]] for injection during angular config time.\n *\n * @deprecated\n */\nvar $urlRouter;\n/**\n * The URL Matcher Factory\n *\n * ### Deprecation warning: This object is now considered internal. Use [[$urlService]] instead.\n *\n * The [[UrlMatcherFactory]] singleton as a **Service Object** (injectable during runtime).\n *\n * This service is used to set url mapping options, define custom parameter types, and create [[UrlMatcher]] objects.\n *\n * #### Note: This object is also exposed as [[$urlMatcherFactoryProvider]] for injection during angular config time.\n *\n * @deprecated\n */\nvar $urlMatcherFactory;\n/**\n * The URL Matcher Factory\n *\n * ### Deprecation warning: This object is now considered internal. Use [[$urlService]] instead.\n *\n * The [[UrlMatcherFactory]] singleton as a **Provider Object** (injectable during config time).\n *\n * This service is used to set url mapping options, define custom parameter types, and create [[UrlMatcher]] objects.\n *\n * #### Note: This object is also exposed as [[$urlMatcherFactory]] for injection during runtime.\n *\n * @deprecated\n */\nvar $urlMatcherFactoryProvider;\n//# sourceMappingURL=injectables.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/lib/injectables.js\n// module id = YAft\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @coreapi\n * @module params\n */ /** for typedoc */\nvar common_1 = require(\"../common/common\");\nvar hof_1 = require(\"../common/hof\");\nvar predicates_1 = require(\"../common/predicates\");\nvar coreservices_1 = require(\"../common/coreservices\");\nvar paramType_1 = require(\"./paramType\");\n/** @hidden */ var hasOwn = Object.prototype.hasOwnProperty;\n/** @hidden */ var isShorthand = function (cfg) {\n    return [\"value\", \"type\", \"squash\", \"array\", \"dynamic\"].filter(hasOwn.bind(cfg || {})).length === 0;\n};\n/** @internalapi */\nvar DefType;\n(function (DefType) {\n    DefType[DefType[\"PATH\"] = 0] = \"PATH\";\n    DefType[DefType[\"SEARCH\"] = 1] = \"SEARCH\";\n    DefType[DefType[\"CONFIG\"] = 2] = \"CONFIG\";\n})(DefType = exports.DefType || (exports.DefType = {}));\n/** @hidden */\nfunction unwrapShorthand(cfg) {\n    cfg = isShorthand(cfg) && { value: cfg } || cfg;\n    getStaticDefaultValue['__cacheable'] = true;\n    function getStaticDefaultValue() {\n        return cfg.value;\n    }\n    return common_1.extend(cfg, {\n        $$fn: predicates_1.isInjectable(cfg.value) ? cfg.value : getStaticDefaultValue,\n    });\n}\n/** @hidden */\nfunction getType(cfg, urlType, location, id, paramTypes) {\n    if (cfg.type && urlType && urlType.name !== 'string')\n        throw new Error(\"Param '\" + id + \"' has two type configurations.\");\n    if (cfg.type && urlType && urlType.name === 'string' && paramTypes.type(cfg.type))\n        return paramTypes.type(cfg.type);\n    if (urlType)\n        return urlType;\n    if (!cfg.type) {\n        var type = location === DefType.CONFIG ? \"any\" :\n            location === DefType.PATH ? \"path\" :\n                location === DefType.SEARCH ? \"query\" : \"string\";\n        return paramTypes.type(type);\n    }\n    return cfg.type instanceof paramType_1.ParamType ? cfg.type : paramTypes.type(cfg.type);\n}\n/**\n * @internalapi\n * returns false, true, or the squash value to indicate the \"default parameter url squash policy\".\n */\nfunction getSquashPolicy(config, isOptional, defaultPolicy) {\n    var squash = config.squash;\n    if (!isOptional || squash === false)\n        return false;\n    if (!predicates_1.isDefined(squash) || squash == null)\n        return defaultPolicy;\n    if (squash === true || predicates_1.isString(squash))\n        return squash;\n    throw new Error(\"Invalid squash policy: '\" + squash + \"'. Valid policies: false, true, or arbitrary string\");\n}\n/** @internalapi */\nfunction getReplace(config, arrayMode, isOptional, squash) {\n    var replace, configuredKeys, defaultPolicy = [\n        { from: \"\", to: (isOptional || arrayMode ? undefined : \"\") },\n        { from: null, to: (isOptional || arrayMode ? undefined : \"\") },\n    ];\n    replace = predicates_1.isArray(config.replace) ? config.replace : [];\n    if (predicates_1.isString(squash))\n        replace.push({ from: squash, to: undefined });\n    configuredKeys = common_1.map(replace, hof_1.prop(\"from\"));\n    return common_1.filter(defaultPolicy, function (item) { return configuredKeys.indexOf(item.from) === -1; }).concat(replace);\n}\n/** @internalapi */\nvar Param = (function () {\n    function Param(id, type, config, location, urlMatcherFactory) {\n        config = unwrapShorthand(config);\n        type = getType(config, type, location, id, urlMatcherFactory.paramTypes);\n        var arrayMode = getArrayMode();\n        type = arrayMode ? type.$asArray(arrayMode, location === DefType.SEARCH) : type;\n        var isOptional = config.value !== undefined || location === DefType.SEARCH;\n        var dynamic = predicates_1.isDefined(config.dynamic) ? !!config.dynamic : !!type.dynamic;\n        var raw = predicates_1.isDefined(config.raw) ? !!config.raw : !!type.raw;\n        var squash = getSquashPolicy(config, isOptional, urlMatcherFactory.defaultSquashPolicy());\n        var replace = getReplace(config, arrayMode, isOptional, squash);\n        var inherit = predicates_1.isDefined(config.inherit) ? !!config.inherit : !!type.inherit;\n        // array config: param name (param[]) overrides default settings.  explicit config overrides param name.\n        function getArrayMode() {\n            var arrayDefaults = { array: (location === DefType.SEARCH ? \"auto\" : false) };\n            var arrayParamNomenclature = id.match(/\\[\\]$/) ? { array: true } : {};\n            return common_1.extend(arrayDefaults, arrayParamNomenclature, config).array;\n        }\n        common_1.extend(this, { id: id, type: type, location: location, isOptional: isOptional, dynamic: dynamic, raw: raw, squash: squash, replace: replace, inherit: inherit, array: arrayMode, config: config });\n    }\n    Param.prototype.isDefaultValue = function (value) {\n        return this.isOptional && this.type.equals(this.value(), value);\n    };\n    /**\n     * [Internal] Gets the decoded representation of a value if the value is defined, otherwise, returns the\n     * default value, which may be the result of an injectable function.\n     */\n    Param.prototype.value = function (value) {\n        var _this = this;\n        /**\n         * [Internal] Get the default value of a parameter, which may be an injectable function.\n         */\n        var getDefaultValue = function () {\n            if (_this._defaultValueCache)\n                return _this._defaultValueCache.defaultValue;\n            if (!coreservices_1.services.$injector)\n                throw new Error(\"Injectable functions cannot be called at configuration time\");\n            var defaultValue = coreservices_1.services.$injector.invoke(_this.config.$$fn);\n            if (defaultValue !== null && defaultValue !== undefined && !_this.type.is(defaultValue))\n                throw new Error(\"Default value (\" + defaultValue + \") for parameter '\" + _this.id + \"' is not an instance of ParamType (\" + _this.type.name + \")\");\n            if (_this.config.$$fn['__cacheable']) {\n                _this._defaultValueCache = { defaultValue: defaultValue };\n            }\n            return defaultValue;\n        };\n        var replaceSpecialValues = function (val) {\n            for (var _i = 0, _a = _this.replace; _i < _a.length; _i++) {\n                var tuple = _a[_i];\n                if (tuple.from === val)\n                    return tuple.to;\n            }\n            return val;\n        };\n        value = replaceSpecialValues(value);\n        return predicates_1.isUndefined(value) ? getDefaultValue() : this.type.$normalize(value);\n    };\n    Param.prototype.isSearch = function () {\n        return this.location === DefType.SEARCH;\n    };\n    Param.prototype.validates = function (value) {\n        // There was no parameter value, but the param is optional\n        if ((predicates_1.isUndefined(value) || value === null) && this.isOptional)\n            return true;\n        // The value was not of the correct ParamType, and could not be decoded to the correct ParamType\n        var normalized = this.type.$normalize(value);\n        if (!this.type.is(normalized))\n            return false;\n        // The value was of the correct type, but when encoded, did not match the ParamType's regexp\n        var encoded = this.type.encode(normalized);\n        return !(predicates_1.isString(encoded) && !this.type.pattern.exec(encoded));\n    };\n    Param.prototype.toString = function () {\n        return \"{Param:\" + this.id + \" \" + this.type + \" squash: '\" + this.squash + \"' optional: \" + this.isOptional + \"}\";\n    };\n    Param.values = function (params, values) {\n        if (values === void 0) { values = {}; }\n        var paramValues = {};\n        for (var _i = 0, params_1 = params; _i < params_1.length; _i++) {\n            var param = params_1[_i];\n            paramValues[param.id] = param.value(values[param.id]);\n        }\n        return paramValues;\n    };\n    /**\n     * Finds [[Param]] objects which have different param values\n     *\n     * Filters a list of [[Param]] objects to only those whose parameter values differ in two param value objects\n     *\n     * @param params: The list of Param objects to filter\n     * @param values1: The first set of parameter values\n     * @param values2: the second set of parameter values\n     *\n     * @returns any Param objects whose values were different between values1 and values2\n     */\n    Param.changed = function (params, values1, values2) {\n        if (values1 === void 0) { values1 = {}; }\n        if (values2 === void 0) { values2 = {}; }\n        return params.filter(function (param) { return !param.type.equals(values1[param.id], values2[param.id]); });\n    };\n    /**\n     * Checks if two param value objects are equal (for a set of [[Param]] objects)\n     *\n     * @param params The list of [[Param]] objects to check\n     * @param values1 The first set of param values\n     * @param values2 The second set of param values\n     *\n     * @returns true if the param values in values1 and values2 are equal\n     */\n    Param.equals = function (params, values1, values2) {\n        if (values1 === void 0) { values1 = {}; }\n        if (values2 === void 0) { values2 = {}; }\n        return Param.changed(params, values1, values2).length === 0;\n    };\n    /** Returns true if a the parameter values are valid, according to the Param definitions */\n    Param.validates = function (params, values) {\n        if (values === void 0) { values = {}; }\n        return params.map(function (param) { return param.validates(values[param.id]); }).reduce(common_1.allTrueR, true);\n    };\n    return Param;\n}());\nexports.Param = Param;\n//# sourceMappingURL=param.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/params/param.js\n// module id = Z0dR\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @internalapi\n * @module url\n */ /** for typedoc */\nvar common_1 = require(\"../common/common\");\nvar predicates_1 = require(\"../common/predicates\");\nvar urlMatcher_1 = require(\"./urlMatcher\");\nvar param_1 = require(\"../params/param\");\nvar paramTypes_1 = require(\"../params/paramTypes\");\n/**\n * Factory for [[UrlMatcher]] instances.\n *\n * The factory is available to ng1 services as\n * `$urlMatcherFactor` or ng1 providers as `$urlMatcherFactoryProvider`.\n */\nvar UrlMatcherFactory = (function () {\n    function UrlMatcherFactory() {\n        var _this = this;\n        /** @hidden */ this.paramTypes = new paramTypes_1.ParamTypes();\n        /** @hidden */ this._isCaseInsensitive = false;\n        /** @hidden */ this._isStrictMode = true;\n        /** @hidden */ this._defaultSquashPolicy = false;\n        /** @hidden */\n        this._getConfig = function (config) {\n            return common_1.extend({ strict: _this._isStrictMode, caseInsensitive: _this._isCaseInsensitive }, config);\n        };\n        /** @internalapi Creates a new [[Param]] for a given location (DefType) */\n        this.paramFactory = {\n            /** Creates a new [[Param]] from a CONFIG block */\n            fromConfig: function (id, type, config) {\n                return new param_1.Param(id, type, config, param_1.DefType.CONFIG, _this);\n            },\n            /** Creates a new [[Param]] from a url PATH */\n            fromPath: function (id, type, config) {\n                return new param_1.Param(id, type, config, param_1.DefType.PATH, _this);\n            },\n            /** Creates a new [[Param]] from a url SEARCH */\n            fromSearch: function (id, type, config) {\n                return new param_1.Param(id, type, config, param_1.DefType.SEARCH, _this);\n            },\n        };\n        common_1.extend(this, { UrlMatcher: urlMatcher_1.UrlMatcher, Param: param_1.Param });\n    }\n    /** @inheritdoc */\n    UrlMatcherFactory.prototype.caseInsensitive = function (value) {\n        return this._isCaseInsensitive = predicates_1.isDefined(value) ? value : this._isCaseInsensitive;\n    };\n    /** @inheritdoc */\n    UrlMatcherFactory.prototype.strictMode = function (value) {\n        return this._isStrictMode = predicates_1.isDefined(value) ? value : this._isStrictMode;\n    };\n    /** @inheritdoc */\n    UrlMatcherFactory.prototype.defaultSquashPolicy = function (value) {\n        if (predicates_1.isDefined(value) && value !== true && value !== false && !predicates_1.isString(value))\n            throw new Error(\"Invalid squash policy: \" + value + \". Valid policies: false, true, arbitrary-string\");\n        return this._defaultSquashPolicy = predicates_1.isDefined(value) ? value : this._defaultSquashPolicy;\n    };\n    /**\n     * Creates a [[UrlMatcher]] for the specified pattern.\n     *\n     * @param pattern  The URL pattern.\n     * @param config  The config object hash.\n     * @returns The UrlMatcher.\n     */\n    UrlMatcherFactory.prototype.compile = function (pattern, config) {\n        return new urlMatcher_1.UrlMatcher(pattern, this.paramTypes, this.paramFactory, this._getConfig(config));\n    };\n    /**\n     * Returns true if the specified object is a [[UrlMatcher]], or false otherwise.\n     *\n     * @param object  The object to perform the type check against.\n     * @returns `true` if the object matches the `UrlMatcher` interface, by\n     *          implementing all the same methods.\n     */\n    UrlMatcherFactory.prototype.isMatcher = function (object) {\n        // TODO: typeof?\n        if (!predicates_1.isObject(object))\n            return false;\n        var result = true;\n        common_1.forEach(urlMatcher_1.UrlMatcher.prototype, function (val, name) {\n            if (predicates_1.isFunction(val))\n                result = result && (predicates_1.isDefined(object[name]) && predicates_1.isFunction(object[name]));\n        });\n        return result;\n    };\n    ;\n    /**\n     * Creates and registers a custom [[ParamType]] object\n     *\n     * A [[ParamType]] can be used to generate URLs with typed parameters.\n     *\n     * @param name  The type name.\n     * @param definition The type definition. See [[ParamTypeDefinition]] for information on the values accepted.\n     * @param definitionFn A function that is injected before the app runtime starts.\n     *        The result of this function should be a [[ParamTypeDefinition]].\n     *        The result is merged into the existing `definition`.\n     *        See [[ParamType]] for information on the values accepted.\n     *\n     * @returns - if a type was registered: the [[UrlMatcherFactory]]\n     *   - if only the `name` parameter was specified: the currently registered [[ParamType]] object, or undefined\n     *\n     * Note: Register custom types *before using them* in a state definition.\n     *\n     * See [[ParamTypeDefinition]] for examples\n     */\n    UrlMatcherFactory.prototype.type = function (name, definition, definitionFn) {\n        var type = this.paramTypes.type(name, definition, definitionFn);\n        return !predicates_1.isDefined(definition) ? type : this;\n    };\n    ;\n    /** @hidden */\n    UrlMatcherFactory.prototype.$get = function () {\n        this.paramTypes.enqueue = false;\n        this.paramTypes._flushTypeQueue();\n        return this;\n    };\n    ;\n    /** @internalapi */\n    UrlMatcherFactory.prototype.dispose = function () {\n        this.paramTypes.dispose();\n    };\n    return UrlMatcherFactory;\n}());\nexports.UrlMatcherFactory = UrlMatcherFactory;\n//# sourceMappingURL=urlMatcherFactory.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/url/urlMatcherFactory.js\n// module id = Z5gi\n// module chunks = 0","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/** @module common */ /** for typedoc */\n__export(require(\"./common\"));\n__export(require(\"./coreservices\"));\n__export(require(\"./glob\"));\n__export(require(\"./hof\"));\n__export(require(\"./predicates\"));\n__export(require(\"./queue\"));\n__export(require(\"./strings\"));\n__export(require(\"./trace\"));\n//# sourceMappingURL=index.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/common/index.js\n// module id = aK79\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * A factory which creates an onEnter, onExit or onRetain transition hook function\n *\n * The returned function invokes the (for instance) state.onEnter hook when the\n * state is being entered.\n *\n * @hidden\n */\nfunction makeEnterExitRetainHook(hookName) {\n    return function (transition, state) {\n        var _state = state.$$state();\n        var hookFn = _state[hookName];\n        return hookFn(transition, state);\n    };\n}\n/**\n * The [[TransitionStateHookFn]] for onExit\n *\n * When the state is being exited, the state's .onExit function is invoked.\n *\n * Registered using `transitionService.onExit({ exiting: (state) => !!state.onExit }, onExitHook);`\n *\n * See: [[IHookRegistry.onExit]]\n */\nvar onExitHook = makeEnterExitRetainHook('onExit');\nexports.registerOnExitHook = function (transitionService) {\n    return transitionService.onExit({ exiting: function (state) { return !!state.onExit; } }, onExitHook);\n};\n/**\n * The [[TransitionStateHookFn]] for onRetain\n *\n * When the state was already entered, and is not being exited or re-entered, the state's .onRetain function is invoked.\n *\n * Registered using `transitionService.onRetain({ retained: (state) => !!state.onRetain }, onRetainHook);`\n *\n * See: [[IHookRegistry.onRetain]]\n */\nvar onRetainHook = makeEnterExitRetainHook('onRetain');\nexports.registerOnRetainHook = function (transitionService) {\n    return transitionService.onRetain({ retained: function (state) { return !!state.onRetain; } }, onRetainHook);\n};\n/**\n * The [[TransitionStateHookFn]] for onEnter\n *\n * When the state is being entered, the state's .onEnter function is invoked.\n *\n * Registered using `transitionService.onEnter({ entering: (state) => !!state.onEnter }, onEnterHook);`\n *\n * See: [[IHookRegistry.onEnter]]\n */\nvar onEnterHook = makeEnterExitRetainHook('onEnter');\nexports.registerOnEnterHook = function (transitionService) {\n    return transitionService.onEnter({ entering: function (state) { return !!state.onEnter; } }, onEnterHook);\n};\n//# sourceMappingURL=onEnterExitRetain.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/hooks/onEnterExitRetain.js\n// module id = b/IZ\n// module chunks = 0","\"use strict\";\n/** @module path */ /** for typedoc */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar common_1 = require(\"../common/common\");\nvar hof_1 = require(\"../common/hof\");\nvar targetState_1 = require(\"../state/targetState\");\nvar pathNode_1 = require(\"./pathNode\");\n/**\n * This class contains functions which convert TargetStates, Nodes and paths from one type to another.\n */\nvar PathUtils = (function () {\n    function PathUtils() {\n    }\n    /** Given a PathNode[], create an TargetState */\n    PathUtils.makeTargetState = function (path) {\n        var state = common_1.tail(path).state;\n        return new targetState_1.TargetState(state, state, path.map(hof_1.prop(\"paramValues\")).reduce(common_1.mergeR, {}));\n    };\n    PathUtils.buildPath = function (targetState) {\n        var toParams = targetState.params();\n        return targetState.$state().path.map(function (state) { return new pathNode_1.PathNode(state).applyRawParams(toParams); });\n    };\n    /** Given a fromPath: PathNode[] and a TargetState, builds a toPath: PathNode[] */\n    PathUtils.buildToPath = function (fromPath, targetState) {\n        var toPath = PathUtils.buildPath(targetState);\n        if (targetState.options().inherit) {\n            return PathUtils.inheritParams(fromPath, toPath, Object.keys(targetState.params()));\n        }\n        return toPath;\n    };\n    /**\n     * Creates ViewConfig objects and adds to nodes.\n     *\n     * On each [[PathNode]], creates ViewConfig objects from the views: property of the node's state\n     */\n    PathUtils.applyViewConfigs = function ($view, path, states) {\n        // Only apply the viewConfigs to the nodes for the given states\n        path.filter(function (node) { return common_1.inArray(states, node.state); }).forEach(function (node) {\n            var viewDecls = common_1.values(node.state.views || {});\n            var subPath = PathUtils.subPath(path, function (n) { return n === node; });\n            var viewConfigs = viewDecls.map(function (view) { return $view.createViewConfig(subPath, view); });\n            node.views = viewConfigs.reduce(common_1.unnestR, []);\n        });\n    };\n    /**\n     * Given a fromPath and a toPath, returns a new to path which inherits parameters from the fromPath\n     *\n     * For a parameter in a node to be inherited from the from path:\n     * - The toPath's node must have a matching node in the fromPath (by state).\n     * - The parameter name must not be found in the toKeys parameter array.\n     *\n     * Note: the keys provided in toKeys are intended to be those param keys explicitly specified by some\n     * caller, for instance, $state.transitionTo(..., toParams).  If a key was found in toParams,\n     * it is not inherited from the fromPath.\n     */\n    PathUtils.inheritParams = function (fromPath, toPath, toKeys) {\n        if (toKeys === void 0) { toKeys = []; }\n        function nodeParamVals(path, state) {\n            var node = common_1.find(path, hof_1.propEq('state', state));\n            return common_1.extend({}, node && node.paramValues);\n        }\n        var noInherit = fromPath.map(function (node) { return node.paramSchema; })\n            .reduce(common_1.unnestR, [])\n            .filter(function (param) { return !param.inherit; })\n            .map(hof_1.prop('id'));\n        /**\n         * Given an [[PathNode]] \"toNode\", return a new [[PathNode]] with param values inherited from the\n         * matching node in fromPath.  Only inherit keys that aren't found in \"toKeys\" from the node in \"fromPath\"\"\n         */\n        function makeInheritedParamsNode(toNode) {\n            // All param values for the node (may include default key/vals, when key was not found in toParams)\n            var toParamVals = common_1.extend({}, toNode && toNode.paramValues);\n            // limited to only those keys found in toParams\n            var incomingParamVals = common_1.pick(toParamVals, toKeys);\n            toParamVals = common_1.omit(toParamVals, toKeys);\n            var fromParamVals = common_1.omit(nodeParamVals(fromPath, toNode.state) || {}, noInherit);\n            // extend toParamVals with any fromParamVals, then override any of those those with incomingParamVals\n            var ownParamVals = common_1.extend(toParamVals, fromParamVals, incomingParamVals);\n            return new pathNode_1.PathNode(toNode.state).applyRawParams(ownParamVals);\n        }\n        // The param keys specified by the incoming toParams\n        return toPath.map(makeInheritedParamsNode);\n    };\n    /**\n     * Computes the tree changes (entering, exiting) between a fromPath and toPath.\n     */\n    PathUtils.treeChanges = function (fromPath, toPath, reloadState) {\n        var keep = 0, max = Math.min(fromPath.length, toPath.length);\n        var nodesMatch = function (node1, node2) {\n            return node1.equals(node2, PathUtils.nonDynamicParams);\n        };\n        while (keep < max && fromPath[keep].state !== reloadState && nodesMatch(fromPath[keep], toPath[keep])) {\n            keep++;\n        }\n        /** Given a retained node, return a new node which uses the to node's param values */\n        function applyToParams(retainedNode, idx) {\n            var cloned = pathNode_1.PathNode.clone(retainedNode);\n            cloned.paramValues = toPath[idx].paramValues;\n            return cloned;\n        }\n        var from, retained, exiting, entering, to;\n        from = fromPath;\n        retained = from.slice(0, keep);\n        exiting = from.slice(keep);\n        // Create a new retained path (with shallow copies of nodes) which have the params of the toPath mapped\n        var retainedWithToParams = retained.map(applyToParams);\n        entering = toPath.slice(keep);\n        to = (retainedWithToParams).concat(entering);\n        return { from: from, to: to, retained: retained, exiting: exiting, entering: entering };\n    };\n    /**\n     * Returns a new path which is: the subpath of the first path which matches the second path.\n     *\n     * The new path starts from root and contains any nodes that match the nodes in the second path.\n     * It stops before the first non-matching node.\n     *\n     * Nodes are compared using their state property and their parameter values.\n     * If a `paramsFn` is provided, only the [[Param]] returned by the function will be considered when comparing nodes.\n     *\n     * @param pathA the first path\n     * @param pathB the second path\n     * @param paramsFn a function which returns the parameters to consider when comparing\n     *\n     * @returns an array of PathNodes from the first path which match the nodes in the second path\n     */\n    PathUtils.matching = function (pathA, pathB, paramsFn) {\n        var done = false;\n        var tuples = common_1.arrayTuples(pathA, pathB);\n        return tuples.reduce(function (matching, _a) {\n            var nodeA = _a[0], nodeB = _a[1];\n            done = done || !nodeA.equals(nodeB, paramsFn);\n            return done ? matching : matching.concat(nodeA);\n        }, []);\n    };\n    /**\n     * Returns true if two paths are identical.\n     *\n     * @param pathA\n     * @param pathB\n     * @param paramsFn a function which returns the parameters to consider when comparing\n     * @returns true if the the states and parameter values for both paths are identical\n     */\n    PathUtils.equals = function (pathA, pathB, paramsFn) {\n        return pathA.length === pathB.length &&\n            PathUtils.matching(pathA, pathB, paramsFn).length === pathA.length;\n    };\n    /**\n     * Return a subpath of a path, which stops at the first matching node\n     *\n     * Given an array of nodes, returns a subset of the array starting from the first node,\n     * stopping when the first node matches the predicate.\n     *\n     * @param path a path of [[PathNode]]s\n     * @param predicate a [[Predicate]] fn that matches [[PathNode]]s\n     * @returns a subpath up to the matching node, or undefined if no match is found\n     */\n    PathUtils.subPath = function (path, predicate) {\n        var node = common_1.find(path, predicate);\n        var elementIdx = path.indexOf(node);\n        return elementIdx === -1 ? undefined : path.slice(0, elementIdx + 1);\n    };\n    return PathUtils;\n}());\nPathUtils.nonDynamicParams = function (node) {\n    return node.state.parameters({ inherit: false })\n        .filter(function (param) { return !param.dynamic; });\n};\n/** Gets the raw parameter values from a path */\nPathUtils.paramValues = function (path) {\n    return path.reduce(function (acc, node) { return common_1.extend(acc, node.paramValues); }, {});\n};\nexports.PathUtils = PathUtils;\n//# sourceMappingURL=pathFactory.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/path/pathFactory.js\n// module id = c5tp\n// module chunks = 0","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./param\"));\n__export(require(\"./paramTypes\"));\n__export(require(\"./stateParams\"));\n__export(require(\"./paramType\"));\n//# sourceMappingURL=index.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/params/index.js\n// module id = cBzL\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/** @module url */ /** */\nvar core_1 = require(\"@uirouter/core\");\nvar core_2 = require(\"@uirouter/core\");\n/**\n * Manages rules for client-side URL\n *\n * ### Deprecation warning:\n * This class is now considered to be an internal API\n * Use the [[UrlService]] instead.\n * For configuring URL rules, use the [[UrlRulesApi]] which can be found as [[UrlService.rules]].\n *\n * This class manages the router rules for what to do when the URL changes.\n *\n * This provider remains for backwards compatibility.\n *\n * @deprecated\n */\nvar UrlRouterProvider = (function () {\n    /** @hidden */\n    function UrlRouterProvider(router) {\n        this._router = router;\n        this._urlRouter = router.urlRouter;\n    }\n    /** @hidden */\n    UrlRouterProvider.prototype.$get = function () {\n        var urlRouter = this._urlRouter;\n        urlRouter.update(true);\n        if (!urlRouter.interceptDeferred)\n            urlRouter.listen();\n        return urlRouter;\n    };\n    /**\n     * Registers a url handler function.\n     *\n     * Registers a low level url handler (a `rule`).\n     * A rule detects specific URL patterns and returns a redirect, or performs some action.\n     *\n     * If a rule returns a string, the URL is replaced with the string, and all rules are fired again.\n     *\n     * #### Example:\n     * ```js\n     * var app = angular.module('app', ['ui.router.router']);\n     *\n     * app.config(function ($urlRouterProvider) {\n     *   // Here's an example of how you might allow case insensitive urls\n     *   $urlRouterProvider.rule(function ($injector, $location) {\n     *     var path = $location.path(),\n     *         normalized = path.toLowerCase();\n     *\n     *     if (path !== normalized) {\n     *       return normalized;\n     *     }\n     *   });\n     * });\n     * ```\n     *\n     * @param ruleFn\n     * Handler function that takes `$injector` and `$location` services as arguments.\n     * You can use them to detect a url and return a different url as a string.\n     *\n     * @return [[UrlRouterProvider]] (`this`)\n     */\n    UrlRouterProvider.prototype.rule = function (ruleFn) {\n        var _this = this;\n        if (!core_2.isFunction(ruleFn))\n            throw new Error(\"'rule' must be a function\");\n        var match = function () {\n            return ruleFn(core_2.services.$injector, _this._router.locationService);\n        };\n        var rule = new core_1.BaseUrlRule(match, core_2.identity);\n        this._urlRouter.rule(rule);\n        return this;\n    };\n    ;\n    /**\n     * Defines the path or behavior to use when no url can be matched.\n     *\n     * #### Example:\n     * ```js\n     * var app = angular.module('app', ['ui.router.router']);\n     *\n     * app.config(function ($urlRouterProvider) {\n     *   // if the path doesn't match any of the urls you configured\n     *   // otherwise will take care of routing the user to the\n     *   // specified url\n     *   $urlRouterProvider.otherwise('/index');\n     *\n     *   // Example of using function rule as param\n     *   $urlRouterProvider.otherwise(function ($injector, $location) {\n     *     return '/a/valid/url';\n     *   });\n     * });\n     * ```\n     *\n     * @param rule\n     * The url path you want to redirect to or a function rule that returns the url path or performs a `$state.go()`.\n     * The function version is passed two params: `$injector` and `$location` services, and should return a url string.\n     *\n     * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance\n     */\n    UrlRouterProvider.prototype.otherwise = function (rule) {\n        var _this = this;\n        var urlRouter = this._urlRouter;\n        if (core_2.isString(rule)) {\n            urlRouter.otherwise(rule);\n        }\n        else if (core_2.isFunction(rule)) {\n            urlRouter.otherwise(function () { return rule(core_2.services.$injector, _this._router.locationService); });\n        }\n        else {\n            throw new Error(\"'rule' must be a string or function\");\n        }\n        return this;\n    };\n    ;\n    /**\n     * Registers a handler for a given url matching.\n     *\n     * If the handler is a string, it is\n     * treated as a redirect, and is interpolated according to the syntax of match\n     * (i.e. like `String.replace()` for `RegExp`, or like a `UrlMatcher` pattern otherwise).\n     *\n     * If the handler is a function, it is injectable.\n     * It gets invoked if `$location` matches.\n     * You have the option of inject the match object as `$match`.\n     *\n     * The handler can return\n     *\n     * - **falsy** to indicate that the rule didn't match after all, then `$urlRouter`\n     *   will continue trying to find another one that matches.\n     * - **string** which is treated as a redirect and passed to `$location.url()`\n     * - **void** or any **truthy** value tells `$urlRouter` that the url was handled.\n     *\n     * #### Example:\n     * ```js\n     * var app = angular.module('app', ['ui.router.router']);\n     *\n     * app.config(function ($urlRouterProvider) {\n     *   $urlRouterProvider.when($state.url, function ($match, $stateParams) {\n     *     if ($state.$current.navigable !== state ||\n     *         !equalForKeys($match, $stateParams) {\n     *      $state.transitionTo(state, $match, false);\n     *     }\n     *   });\n     * });\n     * ```\n     *\n     * @param what A pattern string to match, compiled as a [[UrlMatcher]].\n     * @param handler The path (or function that returns a path) that you want to redirect your user to.\n     * @param ruleCallback [optional] A callback that receives the `rule` registered with [[UrlMatcher.rule]]\n     *\n     * Note: the handler may also invoke arbitrary code, such as `$state.go()`\n     */\n    UrlRouterProvider.prototype.when = function (what, handler) {\n        if (core_2.isArray(handler) || core_2.isFunction(handler)) {\n            handler = UrlRouterProvider.injectableHandler(this._router, handler);\n        }\n        this._urlRouter.when(what, handler);\n        return this;\n    };\n    ;\n    UrlRouterProvider.injectableHandler = function (router, handler) {\n        return function (match) {\n            return core_2.services.$injector.invoke(handler, null, { $match: match, $stateParams: router.globals.params });\n        };\n    };\n    /**\n     * Disables monitoring of the URL.\n     *\n     * Call this method before UI-Router has bootstrapped.\n     * It will stop UI-Router from performing the initial url sync.\n     *\n     * This can be useful to perform some asynchronous initialization before the router starts.\n     * Once the initialization is complete, call [[listen]] to tell UI-Router to start watching and synchronizing the URL.\n     *\n     * #### Example:\n     * ```js\n     * var app = angular.module('app', ['ui.router']);\n     *\n     * app.config(function ($urlRouterProvider) {\n     *   // Prevent $urlRouter from automatically intercepting URL changes;\n     *   $urlRouterProvider.deferIntercept();\n     * })\n     *\n     * app.run(function (MyService, $urlRouter, $http) {\n     *   $http.get(\"/stuff\").then(function(resp) {\n     *     MyService.doStuff(resp.data);\n     *     $urlRouter.listen();\n     *     $urlRouter.sync();\n     *   });\n     * });\n     * ```\n     *\n     * @param defer Indicates whether to defer location change interception.\n     *        Passing no parameter is equivalent to `true`.\n     */\n    UrlRouterProvider.prototype.deferIntercept = function (defer) {\n        this._urlRouter.deferIntercept(defer);\n    };\n    ;\n    return UrlRouterProvider;\n}());\nexports.UrlRouterProvider = UrlRouterProvider;\n//# sourceMappingURL=urlRouterProvider.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/lib/urlRouterProvider.js\n// module id = cO8V\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/** @module ng1 */ /** */\nvar angular_1 = require(\"./angular\");\n/** @hidden */\nfunction $ViewScrollProvider() {\n    var useAnchorScroll = false;\n    this.useAnchorScroll = function () {\n        useAnchorScroll = true;\n    };\n    this.$get = ['$anchorScroll', '$timeout', function ($anchorScroll, $timeout) {\n            if (useAnchorScroll) {\n                return $anchorScroll;\n            }\n            return function ($element) {\n                return $timeout(function () {\n                    $element[0].scrollIntoView();\n                }, 0, false);\n            };\n        }];\n}\nangular_1.ng.module('ui.router.state').provider('$uiViewScroll', $ViewScrollProvider);\n//# sourceMappingURL=viewScroll.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/lib/viewScroll.js\n// module id = cga1\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/** Predicates\n *\n * These predicates return true/false based on the input.\n * Although these functions are exported, they are subject to change without notice.\n *\n * @module common_predicates\n */\n/** */\nvar hof_1 = require(\"./hof\");\nvar stateObject_1 = require(\"../state/stateObject\");\nvar toStr = Object.prototype.toString;\nvar tis = function (t) { return function (x) { return typeof (x) === t; }; };\nexports.isUndefined = tis('undefined');\nexports.isDefined = hof_1.not(exports.isUndefined);\nexports.isNull = function (o) { return o === null; };\nexports.isNullOrUndefined = hof_1.or(exports.isNull, exports.isUndefined);\nexports.isFunction = tis('function');\nexports.isNumber = tis('number');\nexports.isString = tis('string');\nexports.isObject = function (x) { return x !== null && typeof x === 'object'; };\nexports.isArray = Array.isArray;\nexports.isDate = (function (x) { return toStr.call(x) === '[object Date]'; });\nexports.isRegExp = (function (x) { return toStr.call(x) === '[object RegExp]'; });\nexports.isState = stateObject_1.StateObject.isState;\n/**\n * Predicate which checks if a value is injectable\n *\n * A value is \"injectable\" if it is a function, or if it is an ng1 array-notation-style array\n * where all the elements in the array are Strings, except the last one, which is a Function\n */\nfunction isInjectable(val) {\n    if (exports.isArray(val) && val.length) {\n        var head = val.slice(0, -1), tail = val.slice(-1);\n        return !(head.filter(hof_1.not(exports.isString)).length || tail.filter(hof_1.not(exports.isFunction)).length);\n    }\n    return exports.isFunction(val);\n}\nexports.isInjectable = isInjectable;\n/**\n * Predicate which checks if a value looks like a Promise\n *\n * It is probably a Promise if it's an object, and it has a `then` property which is a Function\n */\nexports.isPromise = hof_1.and(exports.isObject, hof_1.pipe(hof_1.prop('then'), exports.isFunction));\n//# sourceMappingURL=predicates.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/common/predicates.js\n// module id = cnyP\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @internalapi\n * @module vanilla\n */\n/** */\nvar baseLocationService_1 = require(\"./baseLocationService\");\n/** A `LocationServices` that gets/sets the current location from an in-memory object */\nvar MemoryLocationService = (function (_super) {\n    __extends(MemoryLocationService, _super);\n    function MemoryLocationService(router) {\n        return _super.call(this, router, true) || this;\n    }\n    MemoryLocationService.prototype._get = function () {\n        return this._url;\n    };\n    MemoryLocationService.prototype._set = function (state, title, url, replace) {\n        this._url = url;\n    };\n    return MemoryLocationService;\n}(baseLocationService_1.BaseLocationServices));\nexports.MemoryLocationService = MemoryLocationService;\n//# sourceMappingURL=memoryLocationService.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/vanilla/memoryLocationService.js\n// module id = da6a\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/** @module view */\n/** for typedoc */\nvar angular_1 = require(\"./angular\");\nvar core_1 = require(\"@uirouter/core\");\n/**\n * Service which manages loading of templates from a ViewConfig.\n */\nvar TemplateFactory = (function () {\n    function TemplateFactory() {\n        var _this = this;\n        /** @hidden */ this._useHttp = angular_1.ng.version.minor < 3;\n        /** @hidden */ this.$get = ['$http', '$templateCache', '$injector', function ($http, $templateCache, $injector) {\n                _this.$templateRequest = $injector.has && $injector.has('$templateRequest') && $injector.get('$templateRequest');\n                _this.$http = $http;\n                _this.$templateCache = $templateCache;\n                return _this;\n            }];\n    }\n    /** @hidden */\n    TemplateFactory.prototype.useHttpService = function (value) {\n        this._useHttp = value;\n    };\n    ;\n    /**\n     * Creates a template from a configuration object.\n     *\n     * @param config Configuration object for which to load a template.\n     * The following properties are search in the specified order, and the first one\n     * that is defined is used to create the template:\n     *\n     * @param params  Parameters to pass to the template function.\n     * @param context The resolve context associated with the template's view\n     *\n     * @return {string|object}  The template html as a string, or a promise for\n     * that string,or `null` if no template is configured.\n     */\n    TemplateFactory.prototype.fromConfig = function (config, params, context) {\n        var defaultTemplate = \"<ui-view></ui-view>\";\n        var asTemplate = function (result) { return core_1.services.$q.when(result).then(function (str) { return ({ template: str }); }); };\n        var asComponent = function (result) { return core_1.services.$q.when(result).then(function (str) { return ({ component: str }); }); };\n        return (core_1.isDefined(config.template) ? asTemplate(this.fromString(config.template, params)) :\n            core_1.isDefined(config.templateUrl) ? asTemplate(this.fromUrl(config.templateUrl, params)) :\n                core_1.isDefined(config.templateProvider) ? asTemplate(this.fromProvider(config.templateProvider, params, context)) :\n                    core_1.isDefined(config.component) ? asComponent(config.component) :\n                        core_1.isDefined(config.componentProvider) ? asComponent(this.fromComponentProvider(config.componentProvider, params, context)) :\n                            asTemplate(defaultTemplate));\n    };\n    ;\n    /**\n     * Creates a template from a string or a function returning a string.\n     *\n     * @param template html template as a string or function that returns an html template as a string.\n     * @param params Parameters to pass to the template function.\n     *\n     * @return {string|object} The template html as a string, or a promise for that\n     * string.\n     */\n    TemplateFactory.prototype.fromString = function (template, params) {\n        return core_1.isFunction(template) ? template(params) : template;\n    };\n    ;\n    /**\n     * Loads a template from the a URL via `$http` and `$templateCache`.\n     *\n     * @param {string|Function} url url of the template to load, or a function\n     * that returns a url.\n     * @param {Object} params Parameters to pass to the url function.\n     * @return {string|Promise.<string>} The template html as a string, or a promise\n     * for that string.\n     */\n    TemplateFactory.prototype.fromUrl = function (url, params) {\n        if (core_1.isFunction(url))\n            url = url(params);\n        if (url == null)\n            return null;\n        if (this._useHttp) {\n            return this.$http.get(url, { cache: this.$templateCache, headers: { Accept: 'text/html' } })\n                .then(function (response) {\n                return response.data;\n            });\n        }\n        return this.$templateRequest(url);\n    };\n    ;\n    /**\n     * Creates a template by invoking an injectable provider function.\n     *\n     * @param provider Function to invoke via `locals`\n     * @param {Function} injectFn a function used to invoke the template provider\n     * @return {string|Promise.<string>} The template html as a string, or a promise\n     * for that string.\n     */\n    TemplateFactory.prototype.fromProvider = function (provider, params, context) {\n        var deps = core_1.services.$injector.annotate(provider);\n        var providerFn = core_1.isArray(provider) ? core_1.tail(provider) : provider;\n        var resolvable = new core_1.Resolvable(\"\", providerFn, deps);\n        return resolvable.get(context);\n    };\n    ;\n    /**\n     * Creates a component's template by invoking an injectable provider function.\n     *\n     * @param provider Function to invoke via `locals`\n     * @param {Function} injectFn a function used to invoke the template provider\n     * @return {string} The template html as a string: \"<component-name input1='::$resolve.foo'></component-name>\".\n     */\n    TemplateFactory.prototype.fromComponentProvider = function (provider, params, context) {\n        var deps = core_1.services.$injector.annotate(provider);\n        var providerFn = core_1.isArray(provider) ? core_1.tail(provider) : provider;\n        var resolvable = new core_1.Resolvable(\"\", providerFn, deps);\n        return resolvable.get(context);\n    };\n    ;\n    /**\n     * Creates a template from a component's name\n     *\n     * This implements route-to-component.\n     * It works by retrieving the component (directive) metadata from the injector.\n     * It analyses the component's bindings, then constructs a template that instantiates the component.\n     * The template wires input and output bindings to resolves or from the parent component.\n     *\n     * @param uiView {object} The parent ui-view (for binding outputs to callbacks)\n     * @param context The ResolveContext (for binding outputs to callbacks returned from resolves)\n     * @param component {string} Component's name in camel case.\n     * @param bindings An object defining the component's bindings: {foo: '<'}\n     * @return {string} The template as a string: \"<component-name input1='::$resolve.foo'></component-name>\".\n     */\n    TemplateFactory.prototype.makeComponentTemplate = function (uiView, context, component, bindings) {\n        bindings = bindings || {};\n        // Bind once prefix\n        var prefix = angular_1.ng.version.minor >= 3 ? \"::\" : \"\";\n        // Convert to kebob name. Add x- prefix if the string starts with `x-` or `data-`\n        var kebob = function (camelCase) {\n            var kebobed = core_1.kebobString(camelCase);\n            return /^(x|data)-/.exec(kebobed) ? \"x-\" + kebobed : kebobed;\n        };\n        var attributeTpl = function (input) {\n            var name = input.name, type = input.type;\n            var attrName = kebob(name);\n            // If the ui-view has an attribute which matches a binding on the routed component\n            // then pass that attribute through to the routed component template.\n            // Prefer ui-view wired mappings to resolve data, unless the resolve was explicitly bound using `bindings:`\n            if (uiView.attr(attrName) && !bindings[name])\n                return attrName + \"='\" + uiView.attr(attrName) + \"'\";\n            var resolveName = bindings[name] || name;\n            // Pre-evaluate the expression for \"@\" bindings by enclosing in {{ }}\n            // some-attr=\"{{ ::$resolve.someResolveName }}\"\n            if (type === '@')\n                return attrName + \"='{{\" + prefix + \"$resolve.\" + resolveName + \"}}'\";\n            // Wire \"&\" callbacks to resolves that return a callback function\n            // Get the result of the resolve (should be a function) and annotate it to get its arguments.\n            // some-attr=\"$resolve.someResolveResultName(foo, bar)\"\n            if (type === '&') {\n                var res = context.getResolvable(resolveName);\n                var fn = res && res.data;\n                var args = fn && core_1.services.$injector.annotate(fn) || [];\n                // account for array style injection, i.e., ['foo', function(foo) {}]\n                var arrayIdxStr = core_1.isArray(fn) ? \"[\" + (fn.length - 1) + \"]\" : '';\n                return attrName + \"='$resolve.\" + resolveName + arrayIdxStr + \"(\" + args.join(\",\") + \")'\";\n            }\n            // some-attr=\"::$resolve.someResolveName\"\n            return attrName + \"='\" + prefix + \"$resolve.\" + resolveName + \"'\";\n        };\n        var attrs = getComponentBindings(component).map(attributeTpl).join(\" \");\n        var kebobName = kebob(component);\n        return \"<\" + kebobName + \" \" + attrs + \"></\" + kebobName + \">\";\n    };\n    ;\n    return TemplateFactory;\n}());\nexports.TemplateFactory = TemplateFactory;\n// Gets all the directive(s)' inputs ('@', '=', and '<') and outputs ('&')\nfunction getComponentBindings(name) {\n    var cmpDefs = core_1.services.$injector.get(name + \"Directive\"); // could be multiple\n    if (!cmpDefs || !cmpDefs.length)\n        throw new Error(\"Unable to find component named '\" + name + \"'\");\n    return cmpDefs.map(getBindings).reduce(core_1.unnestR, []);\n}\n// Given a directive definition, find its object input attributes\n// Use different properties, depending on the type of directive (component, bindToController, normal)\nvar getBindings = function (def) {\n    if (core_1.isObject(def.bindToController))\n        return scopeBindings(def.bindToController);\n    return scopeBindings(def.scope);\n};\n// for ng 1.2 style, process the scope: { input: \"=foo\" }\n// for ng 1.3 through ng 1.5, process the component's bindToController: { input: \"=foo\" } object\nvar scopeBindings = function (bindingsObj) { return Object.keys(bindingsObj || {})\n    .map(function (key) { return [key, /^([=<@&])[?]?(.*)/.exec(bindingsObj[key])]; })\n    .filter(function (tuple) { return core_1.isDefined(tuple) && core_1.isArray(tuple[1]); })\n    .map(function (tuple) { return ({ name: tuple[1][2] || tuple[0], type: tuple[1][1] }); }); };\n//# sourceMappingURL=templateFactory.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/lib/templateFactory.js\n// module id = dlH1\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @coreapi\n * @module transition\n */ /** for typedoc */\nvar common_1 = require(\"../common/common\");\nvar predicates_1 = require(\"../common/predicates\");\nvar interface_1 = require(\"./interface\"); // has or is using\nvar glob_1 = require(\"../common/glob\");\n/**\n * Determines if the given state matches the matchCriteria\n *\n * @hidden\n *\n * @param state a State Object to test against\n * @param criterion\n * - If a string, matchState uses the string as a glob-matcher against the state name\n * - If an array (of strings), matchState uses each string in the array as a glob-matchers against the state name\n *   and returns a positive match if any of the globs match.\n * - If a function, matchState calls the function with the state and returns true if the function's result is truthy.\n * @returns {boolean}\n */\nfunction matchState(state, criterion) {\n    var toMatch = predicates_1.isString(criterion) ? [criterion] : criterion;\n    function matchGlobs(_state) {\n        var globStrings = toMatch;\n        for (var i = 0; i < globStrings.length; i++) {\n            var glob = new glob_1.Glob(globStrings[i]);\n            if ((glob && glob.matches(_state.name)) || (!glob && globStrings[i] === _state.name)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    var matchFn = (predicates_1.isFunction(toMatch) ? toMatch : matchGlobs);\n    return !!matchFn(state);\n}\nexports.matchState = matchState;\n/**\n * @internalapi\n * The registration data for a registered transition hook\n */\nvar RegisteredHook = (function () {\n    function RegisteredHook(tranSvc, eventType, callback, matchCriteria, options) {\n        if (options === void 0) { options = {}; }\n        this.tranSvc = tranSvc;\n        this.eventType = eventType;\n        this.callback = callback;\n        this.matchCriteria = matchCriteria;\n        this.priority = options.priority || 0;\n        this.bind = options.bind || null;\n        this._deregistered = false;\n    }\n    /**\n     * Gets the matching [[PathNode]]s\n     *\n     * Given an array of [[PathNode]]s, and a [[HookMatchCriterion]], returns an array containing\n     * the [[PathNode]]s that the criteria matches, or `null` if there were no matching nodes.\n     *\n     * Returning `null` is significant to distinguish between the default\n     * \"match-all criterion value\" of `true` compared to a `() => true` function,\n     * when the nodes is an empty array.\n     *\n     * This is useful to allow a transition match criteria of `entering: true`\n     * to still match a transition, even when `entering === []`.  Contrast that\n     * with `entering: (state) => true` which only matches when a state is actually\n     * being entered.\n     */\n    RegisteredHook.prototype._matchingNodes = function (nodes, criterion) {\n        if (criterion === true)\n            return nodes;\n        var matching = nodes.filter(function (node) { return matchState(node.state, criterion); });\n        return matching.length ? matching : null;\n    };\n    /**\n     * Gets the default match criteria (all `true`)\n     *\n     * Returns an object which has all the criteria match paths as keys and `true` as values, i.e.:\n     *\n     * ```js\n     * {\n     *   to: true,\n     *   from: true,\n     *   entering: true,\n     *   exiting: true,\n     *   retained: true,\n     * }\n     */\n    RegisteredHook.prototype._getDefaultMatchCriteria = function () {\n        return common_1.map(this.tranSvc._pluginapi._getPathTypes(), function () { return true; });\n    };\n    /**\n     * Gets matching nodes as [[IMatchingNodes]]\n     *\n     * Create a IMatchingNodes object from the TransitionHookTypes that is roughly equivalent to:\n     *\n     * ```js\n     * let matches: IMatchingNodes = {\n     *   to:       _matchingNodes([tail(treeChanges.to)],   mc.to),\n     *   from:     _matchingNodes([tail(treeChanges.from)], mc.from),\n     *   exiting:  _matchingNodes(treeChanges.exiting,      mc.exiting),\n     *   retained: _matchingNodes(treeChanges.retained,     mc.retained),\n     *   entering: _matchingNodes(treeChanges.entering,     mc.entering),\n     * };\n     * ```\n     */\n    RegisteredHook.prototype._getMatchingNodes = function (treeChanges) {\n        var _this = this;\n        var criteria = common_1.extend(this._getDefaultMatchCriteria(), this.matchCriteria);\n        var paths = common_1.values(this.tranSvc._pluginapi._getPathTypes());\n        return paths.reduce(function (mn, pathtype) {\n            // STATE scope criteria matches against every node in the path.\n            // TRANSITION scope criteria matches against only the last node in the path\n            var isStateHook = pathtype.scope === interface_1.TransitionHookScope.STATE;\n            var path = treeChanges[pathtype.name] || [];\n            var nodes = isStateHook ? path : [common_1.tail(path)];\n            mn[pathtype.name] = _this._matchingNodes(nodes, criteria[pathtype.name]);\n            return mn;\n        }, {});\n    };\n    /**\n     * Determines if this hook's [[matchCriteria]] match the given [[TreeChanges]]\n     *\n     * @returns an IMatchingNodes object, or null. If an IMatchingNodes object is returned, its values\n     * are the matching [[PathNode]]s for each [[HookMatchCriterion]] (to, from, exiting, retained, entering)\n     */\n    RegisteredHook.prototype.matches = function (treeChanges) {\n        var matches = this._getMatchingNodes(treeChanges);\n        // Check if all the criteria matched the TreeChanges object\n        var allMatched = common_1.values(matches).every(common_1.identity);\n        return allMatched ? matches : null;\n    };\n    return RegisteredHook;\n}());\nexports.RegisteredHook = RegisteredHook;\n/** @hidden Return a registration function of the requested type. */\nfunction makeEvent(registry, transitionService, eventType) {\n    // Create the object which holds the registered transition hooks.\n    var _registeredHooks = registry._registeredHooks = (registry._registeredHooks || {});\n    var hooks = _registeredHooks[eventType.name] = [];\n    // Create hook registration function on the IHookRegistry for the event\n    registry[eventType.name] = hookRegistrationFn;\n    function hookRegistrationFn(matchObject, callback, options) {\n        if (options === void 0) { options = {}; }\n        var registeredHook = new RegisteredHook(transitionService, eventType, callback, matchObject, options);\n        hooks.push(registeredHook);\n        return function deregisterEventHook() {\n            registeredHook._deregistered = true;\n            common_1.removeFrom(hooks)(registeredHook);\n        };\n    }\n    return hookRegistrationFn;\n}\nexports.makeEvent = makeEvent;\n//# sourceMappingURL=hookRegistry.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/transition/hookRegistry.js\n// module id = fP33\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/** @module hooks */\n/** for typedoc */\nvar common_1 = require(\"../common/common\");\nvar resolveContext_1 = require(\"../resolve/resolveContext\");\nvar hof_1 = require(\"../common/hof\");\n/**\n * A [[TransitionHookFn]] which resolves all EAGER Resolvables in the To Path\n *\n * Registered using `transitionService.onStart({}, eagerResolvePath);`\n *\n * When a Transition starts, this hook resolves all the EAGER Resolvables, which the transition then waits for.\n *\n * See [[StateDeclaration.resolve]]\n */\nvar eagerResolvePath = function (trans) {\n    return new resolveContext_1.ResolveContext(trans.treeChanges().to)\n        .resolvePath(\"EAGER\", trans)\n        .then(common_1.noop);\n};\nexports.registerEagerResolvePath = function (transitionService) {\n    return transitionService.onStart({}, eagerResolvePath, { priority: 1000 });\n};\n/**\n * A [[TransitionHookFn]] which resolves all LAZY Resolvables for the state (and all its ancestors) in the To Path\n *\n * Registered using `transitionService.onEnter({ entering: () => true }, lazyResolveState);`\n *\n * When a State is being entered, this hook resolves all the Resolvables for this state, which the transition then waits for.\n *\n * See [[StateDeclaration.resolve]]\n */\nvar lazyResolveState = function (trans, state) {\n    return new resolveContext_1.ResolveContext(trans.treeChanges().to)\n        .subContext(state.$$state())\n        .resolvePath(\"LAZY\", trans)\n        .then(common_1.noop);\n};\nexports.registerLazyResolveState = function (transitionService) {\n    return transitionService.onEnter({ entering: hof_1.val(true) }, lazyResolveState, { priority: 1000 });\n};\n//# sourceMappingURL=resolve.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/hooks/resolve.js\n// module id = ffCa\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar predicates_1 = require(\"../common/predicates\");\nvar common_1 = require(\"../common/common\");\n/** A `LocationConfig` mock that gets/sets all config from an in-memory object */\nvar MemoryLocationConfig = (function () {\n    function MemoryLocationConfig() {\n        var _this = this;\n        this._baseHref = '';\n        this._port = 80;\n        this._protocol = \"http\";\n        this._host = \"localhost\";\n        this._hashPrefix = \"\";\n        this.port = function () { return _this._port; };\n        this.protocol = function () { return _this._protocol; };\n        this.host = function () { return _this._host; };\n        this.baseHref = function () { return _this._baseHref; };\n        this.html5Mode = function () { return false; };\n        this.hashPrefix = function (newval) { return predicates_1.isDefined(newval) ? _this._hashPrefix = newval : _this._hashPrefix; };\n        this.dispose = common_1.noop;\n    }\n    return MemoryLocationConfig;\n}());\nexports.MemoryLocationConfig = MemoryLocationConfig;\n//# sourceMappingURL=memoryLocationConfig.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/vanilla/memoryLocationConfig.js\n// module id = glWR\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * A [[TransitionHookFn]] which updates the URL after a successful transition\n *\n * Registered using `transitionService.onSuccess({}, updateUrl);`\n */\nvar updateUrl = function (transition) {\n    var options = transition.options();\n    var $state = transition.router.stateService;\n    var $urlRouter = transition.router.urlRouter;\n    // Dont update the url in these situations:\n    // The transition was triggered by a URL sync (options.source === 'url')\n    // The user doesn't want the url to update (options.location === false)\n    // The destination state, and all parents have no navigable url\n    if (options.source !== 'url' && options.location && $state.$current.navigable) {\n        var urlOptions = { replace: options.location === 'replace' };\n        $urlRouter.push($state.$current.navigable.url, $state.params, urlOptions);\n    }\n    $urlRouter.update(true);\n};\nexports.registerUpdateUrl = function (transitionService) {\n    return transitionService.onSuccess({}, updateUrl, { priority: 9999 });\n};\n//# sourceMappingURL=url.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/hooks/url.js\n// module id = hXCW\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@uirouter/core\");\n/**\n * Implements UI-Router LocationServices and LocationConfig using Angular 1's $location service\n */\nvar Ng1LocationServices = (function () {\n    function Ng1LocationServices($locationProvider) {\n        // .onChange() registry\n        this._urlListeners = [];\n        this.$locationProvider = $locationProvider;\n        var _lp = core_1.val($locationProvider);\n        core_1.createProxyFunctions(_lp, this, _lp, ['hashPrefix']);\n    }\n    Ng1LocationServices.prototype.dispose = function () { };\n    Ng1LocationServices.prototype.onChange = function (callback) {\n        var _this = this;\n        this._urlListeners.push(callback);\n        return function () { return core_1.removeFrom(_this._urlListeners)(callback); };\n    };\n    Ng1LocationServices.prototype.html5Mode = function () {\n        var html5Mode = this.$locationProvider.html5Mode();\n        html5Mode = core_1.isObject(html5Mode) ? html5Mode.enabled : html5Mode;\n        return html5Mode && this.$sniffer.history;\n    };\n    Ng1LocationServices.prototype.url = function (newUrl, replace, state) {\n        if (replace === void 0) { replace = false; }\n        if (newUrl)\n            this.$location.url(newUrl);\n        if (replace)\n            this.$location.replace();\n        if (state)\n            this.$location.state(state);\n        return this.$location.url();\n    };\n    Ng1LocationServices.prototype._runtimeServices = function ($rootScope, $location, $sniffer, $browser) {\n        var _this = this;\n        this.$location = $location;\n        this.$sniffer = $sniffer;\n        // Bind $locationChangeSuccess to the listeners registered in LocationService.onChange\n        $rootScope.$on(\"$locationChangeSuccess\", function (evt) { return _this._urlListeners.forEach(function (fn) { return fn(evt); }); });\n        var _loc = core_1.val($location);\n        var _browser = core_1.val($browser);\n        // Bind these LocationService functions to $location\n        core_1.createProxyFunctions(_loc, this, _loc, [\"replace\", \"path\", \"search\", \"hash\"]);\n        // Bind these LocationConfig functions to $location\n        core_1.createProxyFunctions(_loc, this, _loc, ['port', 'protocol', 'host']);\n        // Bind these LocationConfig functions to $browser\n        core_1.createProxyFunctions(_browser, this, _browser, ['baseHref']);\n    };\n    /**\n     * Applys ng1-specific path parameter encoding\n     *\n     * The Angular 1 `$location` service is a bit weird.\n     * It doesn't allow slashes to be encoded/decoded bi-directionally.\n     *\n     * See the writeup at https://github.com/angular-ui/ui-router/issues/2598\n     *\n     * This code patches the `path` parameter type so it encoded/decodes slashes as ~2F\n     *\n     * @param router\n     */\n    Ng1LocationServices.monkeyPatchPathParameterType = function (router) {\n        var pathType = router.urlMatcherFactory.type('path');\n        pathType.encode = function (val) {\n            return val != null ? val.toString().replace(/(~|\\/)/g, function (m) { return ({ '~': '~~', '/': '~2F' }[m]); }) : val;\n        };\n        pathType.decode = function (val) {\n            return val != null ? val.toString().replace(/(~~|~2F)/g, function (m) { return ({ '~~': '~', '~2F': '/' }[m]); }) : val;\n        };\n    };\n    return Ng1LocationServices;\n}());\nexports.Ng1LocationServices = Ng1LocationServices;\n//# sourceMappingURL=locationServices.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/lib/locationServices.js\n// module id = hYy2\n// module chunks = 0","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./q\"));\n__export(require(\"./injector\"));\n__export(require(\"./baseLocationService\"));\n__export(require(\"./hashLocationService\"));\n__export(require(\"./memoryLocationService\"));\n__export(require(\"./pushStateLocationService\"));\n__export(require(\"./memoryLocationConfig\"));\n__export(require(\"./browserLocationConfig\"));\n__export(require(\"./utils\"));\n__export(require(\"./plugins\"));\n//# sourceMappingURL=index.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/vanilla/index.js\n// module id = iutG\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @coreapi\n * @module view\n */ /** for typedoc */\nvar common_1 = require(\"../common/common\");\nvar hof_1 = require(\"../common/hof\");\nvar predicates_1 = require(\"../common/predicates\");\nvar trace_1 = require(\"../common/trace\");\n/**\n * The View service\n *\n * This service pairs existing `ui-view` components (which live in the DOM)\n * with view configs (from the state declaration objects: [[StateDeclaration.views]]).\n *\n * - After a successful Transition, the views from the newly entered states are activated via [[activateViewConfig]].\n *   The views from exited states are deactivated via [[deactivateViewConfig]].\n *   (See: the [[registerActivateViews]] Transition Hook)\n *\n * - As `ui-view` components pop in and out of existence, they register themselves using [[registerUIView]].\n *\n * - When the [[sync]] function is called, the registered `ui-view`(s) ([[ActiveUIView]])\n * are configured with the matching [[ViewConfig]](s)\n *\n */\nvar ViewService = (function () {\n    function ViewService() {\n        var _this = this;\n        this._uiViews = [];\n        this._viewConfigs = [];\n        this._viewConfigFactories = {};\n        this._pluginapi = {\n            _rootViewContext: this._rootViewContext.bind(this),\n            _viewConfigFactory: this._viewConfigFactory.bind(this),\n            _registeredUIViews: function () { return _this._uiViews; },\n            _activeViewConfigs: function () { return _this._viewConfigs; },\n        };\n    }\n    ViewService.prototype._rootViewContext = function (context) {\n        return this._rootContext = context || this._rootContext;\n    };\n    ;\n    ViewService.prototype._viewConfigFactory = function (viewType, factory) {\n        this._viewConfigFactories[viewType] = factory;\n    };\n    ViewService.prototype.createViewConfig = function (path, decl) {\n        var cfgFactory = this._viewConfigFactories[decl.$type];\n        if (!cfgFactory)\n            throw new Error(\"ViewService: No view config factory registered for type \" + decl.$type);\n        var cfgs = cfgFactory(path, decl);\n        return predicates_1.isArray(cfgs) ? cfgs : [cfgs];\n    };\n    /**\n     * Deactivates a ViewConfig.\n     *\n     * This function deactivates a `ViewConfig`.\n     * After calling [[sync]], it will un-pair from any `ui-view` with which it is currently paired.\n     *\n     * @param viewConfig The ViewConfig view to deregister.\n     */\n    ViewService.prototype.deactivateViewConfig = function (viewConfig) {\n        trace_1.trace.traceViewServiceEvent(\"<- Removing\", viewConfig);\n        common_1.removeFrom(this._viewConfigs, viewConfig);\n    };\n    ViewService.prototype.activateViewConfig = function (viewConfig) {\n        trace_1.trace.traceViewServiceEvent(\"-> Registering\", viewConfig);\n        this._viewConfigs.push(viewConfig);\n    };\n    ViewService.prototype.sync = function () {\n        var _this = this;\n        var uiViewsByFqn = this._uiViews.map(function (uiv) { return [uiv.fqn, uiv]; }).reduce(common_1.applyPairs, {});\n        // Return a weighted depth value for a uiView.\n        // The depth is the nesting depth of ui-views (based on FQN; times 10,000)\n        // plus the depth of the state that is populating the uiView\n        function uiViewDepth(uiView) {\n            var stateDepth = function (context) {\n                return context && context.parent ? stateDepth(context.parent) + 1 : 1;\n            };\n            return (uiView.fqn.split(\".\").length * 10000) + stateDepth(uiView.creationContext);\n        }\n        // Return the ViewConfig's context's depth in the context tree.\n        function viewConfigDepth(config) {\n            var context = config.viewDecl.$context, count = 0;\n            while (++count && context.parent)\n                context = context.parent;\n            return count;\n        }\n        // Given a depth function, returns a compare function which can return either ascending or descending order\n        var depthCompare = hof_1.curry(function (depthFn, posNeg, left, right) { return posNeg * (depthFn(left) - depthFn(right)); });\n        var matchingConfigPair = function (uiView) {\n            var matchingConfigs = _this._viewConfigs.filter(ViewService.matches(uiViewsByFqn, uiView));\n            if (matchingConfigs.length > 1) {\n                // This is OK.  Child states can target a ui-view that the parent state also targets (the child wins)\n                // Sort by depth and return the match from the deepest child\n                // console.log(`Multiple matching view configs for ${uiView.fqn}`, matchingConfigs);\n                matchingConfigs.sort(depthCompare(viewConfigDepth, -1)); // descending\n            }\n            return [uiView, matchingConfigs[0]];\n        };\n        var configureUIView = function (_a) {\n            var uiView = _a[0], viewConfig = _a[1];\n            // If a parent ui-view is reconfigured, it could destroy child ui-views.\n            // Before configuring a child ui-view, make sure it's still in the active uiViews array.\n            if (_this._uiViews.indexOf(uiView) !== -1)\n                uiView.configUpdated(viewConfig);\n        };\n        // Sort views by FQN and state depth. Process uiviews nearest the root first.\n        this._uiViews.sort(depthCompare(uiViewDepth, 1)).map(matchingConfigPair).forEach(configureUIView);\n    };\n    ;\n    /**\n     * Registers a `ui-view` component\n     *\n     * When a `ui-view` component is created, it uses this method to register itself.\n     * After registration the [[sync]] method is used to ensure all `ui-view` are configured with the proper [[ViewConfig]].\n     *\n     * Note: the `ui-view` component uses the `ViewConfig` to determine what view should be loaded inside the `ui-view`,\n     * and what the view's state context is.\n     *\n     * Note: There is no corresponding `deregisterUIView`.\n     *       A `ui-view` should hang on to the return value of `registerUIView` and invoke it to deregister itself.\n     *\n     * @param uiView The metadata for a UIView\n     * @return a de-registration function used when the view is destroyed.\n     */\n    ViewService.prototype.registerUIView = function (uiView) {\n        trace_1.trace.traceViewServiceUIViewEvent(\"-> Registering\", uiView);\n        var uiViews = this._uiViews;\n        var fqnMatches = function (uiv) { return uiv.fqn === uiView.fqn; };\n        if (uiViews.filter(fqnMatches).length)\n            trace_1.trace.traceViewServiceUIViewEvent(\"!!!! duplicate uiView named:\", uiView);\n        uiViews.push(uiView);\n        this.sync();\n        return function () {\n            var idx = uiViews.indexOf(uiView);\n            if (idx === -1) {\n                trace_1.trace.traceViewServiceUIViewEvent(\"Tried removing non-registered uiView\", uiView);\n                return;\n            }\n            trace_1.trace.traceViewServiceUIViewEvent(\"<- Deregistering\", uiView);\n            common_1.removeFrom(uiViews)(uiView);\n        };\n    };\n    ;\n    /**\n     * Returns the list of views currently available on the page, by fully-qualified name.\n     *\n     * @return {Array} Returns an array of fully-qualified view names.\n     */\n    ViewService.prototype.available = function () {\n        return this._uiViews.map(hof_1.prop(\"fqn\"));\n    };\n    /**\n     * Returns the list of views on the page containing loaded content.\n     *\n     * @return {Array} Returns an array of fully-qualified view names.\n     */\n    ViewService.prototype.active = function () {\n        return this._uiViews.filter(hof_1.prop(\"$config\")).map(hof_1.prop(\"name\"));\n    };\n    /**\n     * Normalizes a view's name from a state.views configuration block.\n     *\n     * This should be used by a framework implementation to calculate the values for\n     * [[_ViewDeclaration.$uiViewName]] and [[_ViewDeclaration.$uiViewContextAnchor]].\n     *\n     * @param context the context object (state declaration) that the view belongs to\n     * @param rawViewName the name of the view, as declared in the [[StateDeclaration.views]]\n     *\n     * @returns the normalized uiViewName and uiViewContextAnchor that the view targets\n     */\n    ViewService.normalizeUIViewTarget = function (context, rawViewName) {\n        if (rawViewName === void 0) { rawViewName = \"\"; }\n        // TODO: Validate incoming view name with a regexp to allow:\n        // ex: \"view.name@foo.bar\" , \"^.^.view.name\" , \"view.name@^.^\" , \"\" ,\n        // \"@\" , \"$default@^\" , \"!$default.$default\" , \"!foo.bar\"\n        var viewAtContext = rawViewName.split(\"@\");\n        var uiViewName = viewAtContext[0] || \"$default\"; // default to unnamed view\n        var uiViewContextAnchor = predicates_1.isString(viewAtContext[1]) ? viewAtContext[1] : \"^\"; // default to parent context\n        // Handle relative view-name sugar syntax.\n        // Matches rawViewName \"^.^.^.foo.bar\" into array: [\"^.^.^.foo.bar\", \"^.^.^\", \"foo.bar\"],\n        var relativeViewNameSugar = /^(\\^(?:\\.\\^)*)\\.(.*$)/.exec(uiViewName);\n        if (relativeViewNameSugar) {\n            // Clobbers existing contextAnchor (rawViewName validation will fix this)\n            uiViewContextAnchor = relativeViewNameSugar[1]; // set anchor to \"^.^.^\"\n            uiViewName = relativeViewNameSugar[2]; // set view-name to \"foo.bar\"\n        }\n        if (uiViewName.charAt(0) === '!') {\n            uiViewName = uiViewName.substr(1);\n            uiViewContextAnchor = \"\"; // target absolutely from root\n        }\n        // handle parent relative targeting \"^.^.^\"\n        var relativeMatch = /^(\\^(?:\\.\\^)*)$/;\n        if (relativeMatch.exec(uiViewContextAnchor)) {\n            var anchor = uiViewContextAnchor.split(\".\").reduce((function (anchor, x) { return anchor.parent; }), context);\n            uiViewContextAnchor = anchor.name;\n        }\n        else if (uiViewContextAnchor === '.') {\n            uiViewContextAnchor = context.name;\n        }\n        return { uiViewName: uiViewName, uiViewContextAnchor: uiViewContextAnchor };\n    };\n    return ViewService;\n}());\n/**\n * Given a ui-view and a ViewConfig, determines if they \"match\".\n *\n * A ui-view has a fully qualified name (fqn) and a context object.  The fqn is built from its overall location in\n * the DOM, describing its nesting relationship to any parent ui-view tags it is nested inside of.\n *\n * A ViewConfig has a target ui-view name and a context anchor.  The ui-view name can be a simple name, or\n * can be a segmented ui-view path, describing a portion of a ui-view fqn.\n *\n * In order for a ui-view to match ViewConfig, ui-view's $type must match the ViewConfig's $type\n *\n * If the ViewConfig's target ui-view name is a simple name (no dots), then a ui-view matches if:\n * - the ui-view's name matches the ViewConfig's target name\n * - the ui-view's context matches the ViewConfig's anchor\n *\n * If the ViewConfig's target ui-view name is a segmented name (with dots), then a ui-view matches if:\n * - There exists a parent ui-view where:\n *    - the parent ui-view's name matches the first segment (index 0) of the ViewConfig's target name\n *    - the parent ui-view's context matches the ViewConfig's anchor\n * - And the remaining segments (index 1..n) of the ViewConfig's target name match the tail of the ui-view's fqn\n *\n * Example:\n *\n * DOM:\n * <ui-view>                        <!-- created in the root context (name: \"\") -->\n *   <ui-view name=\"foo\">                <!-- created in the context named: \"A\"      -->\n *     <ui-view>                    <!-- created in the context named: \"A.B\"    -->\n *       <ui-view name=\"bar\">            <!-- created in the context named: \"A.B.C\"  -->\n *       </ui-view>\n *     </ui-view>\n *   </ui-view>\n * </ui-view>\n *\n * uiViews: [\n *  { fqn: \"$default\",                  creationContext: { name: \"\" } },\n *  { fqn: \"$default.foo\",              creationContext: { name: \"A\" } },\n *  { fqn: \"$default.foo.$default\",     creationContext: { name: \"A.B\" } }\n *  { fqn: \"$default.foo.$default.bar\", creationContext: { name: \"A.B.C\" } }\n * ]\n *\n * These four view configs all match the ui-view with the fqn: \"$default.foo.$default.bar\":\n *\n * - ViewConfig1: { uiViewName: \"bar\",                       uiViewContextAnchor: \"A.B.C\" }\n * - ViewConfig2: { uiViewName: \"$default.bar\",              uiViewContextAnchor: \"A.B\" }\n * - ViewConfig3: { uiViewName: \"foo.$default.bar\",          uiViewContextAnchor: \"A\" }\n * - ViewConfig4: { uiViewName: \"$default.foo.$default.bar\", uiViewContextAnchor: \"\" }\n *\n * Using ViewConfig3 as an example, it matches the ui-view with fqn \"$default.foo.$default.bar\" because:\n * - The ViewConfig's segmented target name is: [ \"foo\", \"$default\", \"bar\" ]\n * - There exists a parent ui-view (which has fqn: \"$default.foo\") where:\n *    - the parent ui-view's name \"foo\" matches the first segment \"foo\" of the ViewConfig's target name\n *    - the parent ui-view's context \"A\" matches the ViewConfig's anchor context \"A\"\n * - And the remaining segments [ \"$default\", \"bar\" ].join(\".\"_ of the ViewConfig's target name match\n *   the tail of the ui-view's fqn \"default.bar\"\n *\n * @internalapi\n */\nViewService.matches = function (uiViewsByFqn, uiView) { return function (viewConfig) {\n    // Don't supply an ng1 ui-view with an ng2 ViewConfig, etc\n    if (uiView.$type !== viewConfig.viewDecl.$type)\n        return false;\n    // Split names apart from both viewConfig and uiView into segments\n    var vc = viewConfig.viewDecl;\n    var vcSegments = vc.$uiViewName.split(\".\");\n    var uivSegments = uiView.fqn.split(\".\");\n    // Check if the tails of the segment arrays match. ex, these arrays' tails match:\n    // vc: [\"foo\", \"bar\"], uiv fqn: [\"$default\", \"foo\", \"bar\"]\n    if (!common_1.equals(vcSegments, uivSegments.slice(0 - vcSegments.length)))\n        return false;\n    // Now check if the fqn ending at the first segment of the viewConfig matches the context:\n    // [\"$default\", \"foo\"].join(\".\") == \"$default.foo\", does the ui-view $default.foo context match?\n    var negOffset = (1 - vcSegments.length) || undefined;\n    var fqnToFirstSegment = uivSegments.slice(0, negOffset).join(\".\");\n    var uiViewContext = uiViewsByFqn[fqnToFirstSegment].creationContext;\n    return vc.$uiViewContextAnchor === (uiViewContext && uiViewContext.name);\n}; };\nexports.ViewService = ViewService;\n//# sourceMappingURL=view.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/view/view.js\n// module id = jCc4\n// module chunks = 0","\"use strict\";\n/**\n * @coreapi\n * @module state\n */ /** for typedoc */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar common_1 = require(\"../common/common\");\nvar predicates_1 = require(\"../common/predicates\");\n/**\n * Encapsulate the target (destination) state/params/options of a [[Transition]].\n *\n * This class is frequently used to redirect a transition to a new destination.\n *\n * See:\n *\n * - [[HookResult]]\n * - [[TransitionHookFn]]\n * - [[TransitionService.onStart]]\n *\n * To create a `TargetState`, use [[StateService.target]].\n *\n * ---\n *\n * This class wraps:\n *\n * 1) an identifier for a state\n * 2) a set of parameters\n * 3) and transition options\n * 4) the registered state object (the [[StateDeclaration]])\n *\n * Many UI-Router APIs such as [[StateService.go]] take a [[StateOrName]] argument which can\n * either be a *state object* (a [[StateDeclaration]] or [[StateObject]]) or a *state name* (a string).\n * The `TargetState` class normalizes those options.\n *\n * A `TargetState` may be valid (the state being targeted exists in the registry)\n * or invalid (the state being targeted is not registered).\n */\nvar TargetState = (function () {\n    /**\n     * The TargetState constructor\n     *\n     * Note: Do not construct a `TargetState` manually.\n     * To create a `TargetState`, use the [[StateService.target]] factory method.\n     *\n     * @param _identifier An identifier for a state.\n     *    Either a fully-qualified state name, or the object used to define the state.\n     * @param _definition The internal state representation, if exists.\n     * @param _params Parameters for the target state\n     * @param _options Transition options.\n     *\n     * @internalapi\n     */\n    function TargetState(_identifier, _definition, _params, _options) {\n        if (_options === void 0) { _options = {}; }\n        this._identifier = _identifier;\n        this._definition = _definition;\n        this._options = _options;\n        this._params = _params || {};\n    }\n    /** The name of the state this object targets */\n    TargetState.prototype.name = function () {\n        return this._definition && this._definition.name || this._identifier;\n    };\n    /** The identifier used when creating this TargetState */\n    TargetState.prototype.identifier = function () {\n        return this._identifier;\n    };\n    /** The target parameter values */\n    TargetState.prototype.params = function () {\n        return this._params;\n    };\n    /** The internal state object (if it was found) */\n    TargetState.prototype.$state = function () {\n        return this._definition;\n    };\n    /** The internal state declaration (if it was found) */\n    TargetState.prototype.state = function () {\n        return this._definition && this._definition.self;\n    };\n    /** The target options */\n    TargetState.prototype.options = function () {\n        return this._options;\n    };\n    /** True if the target state was found */\n    TargetState.prototype.exists = function () {\n        return !!(this._definition && this._definition.self);\n    };\n    /** True if the object is valid */\n    TargetState.prototype.valid = function () {\n        return !this.error();\n    };\n    /** If the object is invalid, returns the reason why */\n    TargetState.prototype.error = function () {\n        var base = this.options().relative;\n        if (!this._definition && !!base) {\n            var stateName = base.name ? base.name : base;\n            return \"Could not resolve '\" + this.name() + \"' from state '\" + stateName + \"'\";\n        }\n        if (!this._definition)\n            return \"No such state '\" + this.name() + \"'\";\n        if (!this._definition.self)\n            return \"State '\" + this.name() + \"' has an invalid definition\";\n    };\n    TargetState.prototype.toString = function () {\n        return \"'\" + this.name() + \"'\" + common_1.toJson(this.params());\n    };\n    return TargetState;\n}());\n/** Returns true if the object has a state property that might be a state or state name */\nTargetState.isDef = function (obj) {\n    return obj && obj.state && (predicates_1.isString(obj.state) || predicates_1.isString(obj.state.name));\n};\nexports.TargetState = TargetState;\n//# sourceMappingURL=targetState.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/state/targetState.js\n// module id = jYbM\n// module chunks = 0","\"use strict\";\n/** @module ng1 */ /** for typedoc */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar angular_1 = require(\"./angular\");\n/**\n * `isState` Filter: truthy if the current state is the parameter\n *\n * Translates to [[StateService.is]] `$state.is(\"stateName\")`.\n *\n * #### Example:\n * ```html\n * <div ng-if=\"'stateName' | isState\">show if state is 'stateName'</div>\n * ```\n */\n$IsStateFilter.$inject = ['$state'];\nfunction $IsStateFilter($state) {\n    var isFilter = function (state, params, options) {\n        return $state.is(state, params, options);\n    };\n    isFilter.$stateful = true;\n    return isFilter;\n}\nexports.$IsStateFilter = $IsStateFilter;\n/**\n * `includedByState` Filter: truthy if the current state includes the parameter\n *\n * Translates to [[StateService.includes]]` $state.is(\"fullOrPartialStateName\")`.\n *\n * #### Example:\n * ```html\n * <div ng-if=\"'fullOrPartialStateName' | includedByState\">show if state includes 'fullOrPartialStateName'</div>\n * ```\n */\n$IncludedByStateFilter.$inject = ['$state'];\nfunction $IncludedByStateFilter($state) {\n    var includesFilter = function (state, params, options) {\n        return $state.includes(state, params, options);\n    };\n    includesFilter.$stateful = true;\n    return includesFilter;\n}\nexports.$IncludedByStateFilter = $IncludedByStateFilter;\nangular_1.ng.module('ui.router.state')\n    .filter('isState', $IsStateFilter)\n    .filter('includedByState', $IncludedByStateFilter);\n//# sourceMappingURL=stateFilters.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/lib/stateFilters.js\n// module id = jlOs\n// module chunks = 0","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./stateBuilder\"));\n__export(require(\"./stateObject\"));\n__export(require(\"./stateMatcher\"));\n__export(require(\"./stateQueueManager\"));\n__export(require(\"./stateRegistry\"));\n__export(require(\"./stateService\"));\n__export(require(\"./targetState\"));\n//# sourceMappingURL=index.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/state/index.js\n// module id = kgPg\n// module chunks = 0","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./view\"));\n//# sourceMappingURL=index.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/view/index.js\n// module id = lP51\n// module chunks = 0","/**\n * @coreapi\n * @module transition\n */ /** for typedoc */\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar common_1 = require(\"../common/common\");\nvar strings_1 = require(\"../common/strings\");\nvar hof_1 = require(\"../common/hof\");\nvar RejectType;\n(function (RejectType) {\n    RejectType[RejectType[\"SUPERSEDED\"] = 2] = \"SUPERSEDED\";\n    RejectType[RejectType[\"ABORTED\"] = 3] = \"ABORTED\";\n    RejectType[RejectType[\"INVALID\"] = 4] = \"INVALID\";\n    RejectType[RejectType[\"IGNORED\"] = 5] = \"IGNORED\";\n    RejectType[RejectType[\"ERROR\"] = 6] = \"ERROR\";\n})(RejectType = exports.RejectType || (exports.RejectType = {}));\n/** @hidden */ var id = 0;\nvar Rejection = (function () {\n    function Rejection(type, message, detail) {\n        this.$id = id++;\n        this.type = type;\n        this.message = message;\n        this.detail = detail;\n    }\n    Rejection.prototype.toString = function () {\n        var detailString = function (d) {\n            return d && d.toString !== Object.prototype.toString ? d.toString() : strings_1.stringify(d);\n        };\n        var detail = detailString(this.detail);\n        var _a = this, $id = _a.$id, type = _a.type, message = _a.message;\n        return \"Transition Rejection($id: \" + $id + \" type: \" + type + \", message: \" + message + \", detail: \" + detail + \")\";\n    };\n    Rejection.prototype.toPromise = function () {\n        return common_1.extend(common_1.silentRejection(this), { _transitionRejection: this });\n    };\n    /** Returns true if the obj is a rejected promise created from the `asPromise` factory */\n    Rejection.isRejectionPromise = function (obj) {\n        return obj && (typeof obj.then === 'function') && hof_1.is(Rejection)(obj._transitionRejection);\n    };\n    /** Returns a Rejection due to transition superseded */\n    Rejection.superseded = function (detail, options) {\n        var message = \"The transition has been superseded by a different transition\";\n        var rejection = new Rejection(RejectType.SUPERSEDED, message, detail);\n        if (options && options.redirected) {\n            rejection.redirected = true;\n        }\n        return rejection;\n    };\n    /** Returns a Rejection due to redirected transition */\n    Rejection.redirected = function (detail) {\n        return Rejection.superseded(detail, { redirected: true });\n    };\n    /** Returns a Rejection due to invalid transition */\n    Rejection.invalid = function (detail) {\n        var message = \"This transition is invalid\";\n        return new Rejection(RejectType.INVALID, message, detail);\n    };\n    /** Returns a Rejection due to ignored transition */\n    Rejection.ignored = function (detail) {\n        var message = \"The transition was ignored\";\n        return new Rejection(RejectType.IGNORED, message, detail);\n    };\n    /** Returns a Rejection due to aborted transition */\n    Rejection.aborted = function (detail) {\n        var message = \"The transition has been aborted\";\n        return new Rejection(RejectType.ABORTED, message, detail);\n    };\n    /** Returns a Rejection due to aborted transition */\n    Rejection.errored = function (detail) {\n        var message = \"The transition errored\";\n        return new Rejection(RejectType.ERROR, message, detail);\n    };\n    /**\n     * Returns a Rejection\n     *\n     * Normalizes a value as a Rejection.\n     * If the value is already a Rejection, returns it.\n     * Otherwise, wraps and returns the value as a Rejection (Rejection type: ERROR).\n     *\n     * @returns `detail` if it is already a `Rejection`, else returns an ERROR Rejection.\n     */\n    Rejection.normalize = function (detail) {\n        return hof_1.is(Rejection)(detail) ? detail : Rejection.errored(detail);\n    };\n    return Rejection;\n}());\nexports.Rejection = Rejection;\n//# sourceMappingURL=rejectFactory.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/transition/rejectFactory.js\n// module id = m+CD\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/** @module resolve */\n/** for typedoc */\nvar common_1 = require(\"../common/common\");\nvar hof_1 = require(\"../common/hof\");\nvar trace_1 = require(\"../common/trace\");\nvar coreservices_1 = require(\"../common/coreservices\");\nvar interface_1 = require(\"./interface\");\nvar resolvable_1 = require(\"./resolvable\");\nvar pathFactory_1 = require(\"../path/pathFactory\");\nvar strings_1 = require(\"../common/strings\");\nvar when = interface_1.resolvePolicies.when;\nvar ALL_WHENS = [when.EAGER, when.LAZY];\nvar EAGER_WHENS = [when.EAGER];\nexports.NATIVE_INJECTOR_TOKEN = \"Native Injector\";\n/**\n * Encapsulates Dependency Injection for a path of nodes\n *\n * UI-Router states are organized as a tree.\n * A nested state has a path of ancestors to the root of the tree.\n * When a state is being activated, each element in the path is wrapped as a [[PathNode]].\n * A `PathNode` is a stateful object that holds things like parameters and resolvables for the state being activated.\n *\n * The ResolveContext closes over the [[PathNode]]s, and provides DI for the last node in the path.\n */\nvar ResolveContext = (function () {\n    function ResolveContext(_path) {\n        this._path = _path;\n    }\n    /** Gets all the tokens found in the resolve context, de-duplicated */\n    ResolveContext.prototype.getTokens = function () {\n        return this._path.reduce(function (acc, node) { return acc.concat(node.resolvables.map(function (r) { return r.token; })); }, []).reduce(common_1.uniqR, []);\n    };\n    /**\n     * Gets the Resolvable that matches the token\n     *\n     * Gets the last Resolvable that matches the token in this context, or undefined.\n     * Throws an error if it doesn't exist in the ResolveContext\n     */\n    ResolveContext.prototype.getResolvable = function (token) {\n        var matching = this._path.map(function (node) { return node.resolvables; })\n            .reduce(common_1.unnestR, [])\n            .filter(function (r) { return r.token === token; });\n        return common_1.tail(matching);\n    };\n    /** Returns the [[ResolvePolicy]] for the given [[Resolvable]] */\n    ResolveContext.prototype.getPolicy = function (resolvable) {\n        var node = this.findNode(resolvable);\n        return resolvable.getPolicy(node.state);\n    };\n    /**\n     * Returns a ResolveContext that includes a portion of this one\n     *\n     * Given a state, this method creates a new ResolveContext from this one.\n     * The new context starts at the first node (root) and stops at the node for the `state` parameter.\n     *\n     * #### Why\n     *\n     * When a transition is created, the nodes in the \"To Path\" are injected from a ResolveContext.\n     * A ResolveContext closes over a path of [[PathNode]]s and processes the resolvables.\n     * The \"To State\" can inject values from its own resolvables, as well as those from all its ancestor state's (node's).\n     * This method is used to create a narrower context when injecting ancestor nodes.\n     *\n     * @example\n     * `let ABCD = new ResolveContext([A, B, C, D]);`\n     *\n     * Given a path `[A, B, C, D]`, where `A`, `B`, `C` and `D` are nodes for states `a`, `b`, `c`, `d`:\n     * When injecting `D`, `D` should have access to all resolvables from `A`, `B`, `C`, `D`.\n     * However, `B` should only be able to access resolvables from `A`, `B`.\n     *\n     * When resolving for the `B` node, first take the full \"To Path\" Context `[A,B,C,D]` and limit to the subpath `[A,B]`.\n     * `let AB = ABCD.subcontext(a)`\n     */\n    ResolveContext.prototype.subContext = function (state) {\n        return new ResolveContext(pathFactory_1.PathUtils.subPath(this._path, function (node) { return node.state === state; }));\n    };\n    /**\n     * Adds Resolvables to the node that matches the state\n     *\n     * This adds a [[Resolvable]] (generally one created on the fly; not declared on a [[StateDeclaration.resolve]] block).\n     * The resolvable is added to the node matching the `state` parameter.\n     *\n     * These new resolvables are not automatically fetched.\n     * The calling code should either fetch them, fetch something that depends on them,\n     * or rely on [[resolvePath]] being called when some state is being entered.\n     *\n     * Note: each resolvable's [[ResolvePolicy]] is merged with the state's policy, and the global default.\n     *\n     * @param newResolvables the new Resolvables\n     * @param state Used to find the node to put the resolvable on\n     */\n    ResolveContext.prototype.addResolvables = function (newResolvables, state) {\n        var node = common_1.find(this._path, hof_1.propEq('state', state));\n        var keys = newResolvables.map(function (r) { return r.token; });\n        node.resolvables = node.resolvables.filter(function (r) { return keys.indexOf(r.token) === -1; }).concat(newResolvables);\n    };\n    /**\n     * Returns a promise for an array of resolved path Element promises\n     *\n     * @param when\n     * @param trans\n     * @returns {Promise<any>|any}\n     */\n    ResolveContext.prototype.resolvePath = function (when, trans) {\n        var _this = this;\n        if (when === void 0) { when = \"LAZY\"; }\n        // This option determines which 'when' policy Resolvables we are about to fetch.\n        var whenOption = common_1.inArray(ALL_WHENS, when) ? when : \"LAZY\";\n        // If the caller specified EAGER, only the EAGER Resolvables are fetched.\n        // if the caller specified LAZY, both EAGER and LAZY Resolvables are fetched.`\n        var matchedWhens = whenOption === interface_1.resolvePolicies.when.EAGER ? EAGER_WHENS : ALL_WHENS;\n        // get the subpath to the state argument, if provided\n        trace_1.trace.traceResolvePath(this._path, when, trans);\n        var matchesPolicy = function (acceptedVals, whenOrAsync) {\n            return function (resolvable) {\n                return common_1.inArray(acceptedVals, _this.getPolicy(resolvable)[whenOrAsync]);\n            };\n        };\n        // Trigger all the (matching) Resolvables in the path\n        // Reduce all the \"WAIT\" Resolvables into an array\n        var promises = this._path.reduce(function (acc, node) {\n            var nodeResolvables = node.resolvables.filter(matchesPolicy(matchedWhens, 'when'));\n            var nowait = nodeResolvables.filter(matchesPolicy(['NOWAIT'], 'async'));\n            var wait = nodeResolvables.filter(hof_1.not(matchesPolicy(['NOWAIT'], 'async')));\n            // For the matching Resolvables, start their async fetch process.\n            var subContext = _this.subContext(node.state);\n            var getResult = function (r) { return r.get(subContext, trans)\n                .then(function (value) { return ({ token: r.token, value: value }); }); };\n            nowait.forEach(getResult);\n            return acc.concat(wait.map(getResult));\n        }, []);\n        // Wait for all the \"WAIT\" resolvables\n        return coreservices_1.services.$q.all(promises);\n    };\n    ResolveContext.prototype.injector = function () {\n        return this._injector || (this._injector = new UIInjectorImpl(this));\n    };\n    ResolveContext.prototype.findNode = function (resolvable) {\n        return common_1.find(this._path, function (node) { return common_1.inArray(node.resolvables, resolvable); });\n    };\n    /**\n     * Gets the async dependencies of a Resolvable\n     *\n     * Given a Resolvable, returns its dependencies as a Resolvable[]\n     */\n    ResolveContext.prototype.getDependencies = function (resolvable) {\n        var _this = this;\n        var node = this.findNode(resolvable);\n        // Find which other resolvables are \"visible\" to the `resolvable` argument\n        // subpath stopping at resolvable's node, or the whole path (if the resolvable isn't in the path)\n        var subPath = pathFactory_1.PathUtils.subPath(this._path, function (x) { return x === node; }) || this._path;\n        var availableResolvables = subPath\n            .reduce(function (acc, node) { return acc.concat(node.resolvables); }, []) //all of subpath's resolvables\n            .filter(function (res) { return res !== resolvable; }); // filter out the `resolvable` argument\n        var getDependency = function (token) {\n            var matching = availableResolvables.filter(function (r) { return r.token === token; });\n            if (matching.length)\n                return common_1.tail(matching);\n            var fromInjector = _this.injector().getNative(token);\n            if (!fromInjector) {\n                throw new Error(\"Could not find Dependency Injection token: \" + strings_1.stringify(token));\n            }\n            return new resolvable_1.Resolvable(token, function () { return fromInjector; }, [], fromInjector);\n        };\n        return resolvable.deps.map(getDependency);\n    };\n    return ResolveContext;\n}());\nexports.ResolveContext = ResolveContext;\nvar UIInjectorImpl = (function () {\n    function UIInjectorImpl(context) {\n        this.context = context;\n        this.native = this.get(exports.NATIVE_INJECTOR_TOKEN) || coreservices_1.services.$injector;\n    }\n    UIInjectorImpl.prototype.get = function (token) {\n        var resolvable = this.context.getResolvable(token);\n        if (resolvable) {\n            if (this.context.getPolicy(resolvable).async === 'NOWAIT') {\n                return resolvable.get(this.context);\n            }\n            if (!resolvable.resolved) {\n                throw new Error(\"Resolvable async .get() not complete:\" + strings_1.stringify(resolvable.token));\n            }\n            return resolvable.data;\n        }\n        return this.native && this.native.get(token);\n    };\n    UIInjectorImpl.prototype.getAsync = function (token) {\n        var resolvable = this.context.getResolvable(token);\n        if (resolvable)\n            return resolvable.get(this.context);\n        return coreservices_1.services.$q.when(this.native.get(token));\n    };\n    UIInjectorImpl.prototype.getNative = function (token) {\n        return this.native && this.native.get(token);\n    };\n    return UIInjectorImpl;\n}());\n//# sourceMappingURL=resolveContext.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/resolve/resolveContext.js\n// module id = mB6J\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar transitionHook_1 = require(\"./transitionHook\");\n/**\n * This class defines a type of hook, such as `onBefore` or `onEnter`.\n * Plugins can define custom hook types, such as sticky states does for `onInactive`.\n *\n * @interalapi\n */\nvar TransitionEventType = (function () {\n    function TransitionEventType(name, hookPhase, hookOrder, criteriaMatchPath, reverseSort, getResultHandler, getErrorHandler, synchronous) {\n        if (reverseSort === void 0) { reverseSort = false; }\n        if (getResultHandler === void 0) { getResultHandler = transitionHook_1.TransitionHook.HANDLE_RESULT; }\n        if (getErrorHandler === void 0) { getErrorHandler = transitionHook_1.TransitionHook.REJECT_ERROR; }\n        if (synchronous === void 0) { synchronous = false; }\n        this.name = name;\n        this.hookPhase = hookPhase;\n        this.hookOrder = hookOrder;\n        this.criteriaMatchPath = criteriaMatchPath;\n        this.reverseSort = reverseSort;\n        this.getResultHandler = getResultHandler;\n        this.getErrorHandler = getErrorHandler;\n        this.synchronous = synchronous;\n    }\n    return TransitionEventType;\n}());\nexports.TransitionEventType = TransitionEventType;\n//# sourceMappingURL=transitionEventType.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/transition/transitionEventType.js\n// module id = mFlp\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@uirouter/core\");\nfunction getNg1ViewConfigFactory() {\n    var templateFactory = null;\n    return function (path, view) {\n        templateFactory = templateFactory || core_1.services.$injector.get(\"$templateFactory\");\n        return [new Ng1ViewConfig(path, view, templateFactory)];\n    };\n}\nexports.getNg1ViewConfigFactory = getNg1ViewConfigFactory;\nvar hasAnyKey = function (keys, obj) {\n    return keys.reduce(function (acc, key) { return acc || core_1.isDefined(obj[key]); }, false);\n};\n/**\n * This is a [[StateBuilder.builder]] function for angular1 `views`.\n *\n * When the [[StateBuilder]] builds a [[StateObject]] object from a raw [[StateDeclaration]], this builder\n * handles the `views` property with logic specific to @uirouter/angularjs (ng1).\n *\n * If no `views: {}` property exists on the [[StateDeclaration]], then it creates the `views` object\n * and applies the state-level configuration to a view named `$default`.\n */\nfunction ng1ViewsBuilder(state) {\n    // Do not process root state\n    if (!state.parent)\n        return {};\n    var tplKeys = ['templateProvider', 'templateUrl', 'template', 'notify', 'async'], ctrlKeys = ['controller', 'controllerProvider', 'controllerAs', 'resolveAs'], compKeys = ['component', 'bindings', 'componentProvider'], nonCompKeys = tplKeys.concat(ctrlKeys), allViewKeys = compKeys.concat(nonCompKeys);\n    // Do not allow a state to have both state-level props and also a `views: {}` property.\n    // A state without a `views: {}` property can declare properties for the `$default` view as properties of the state.\n    // However, the `$default` approach should not be mixed with a separate `views: ` block.\n    if (core_1.isDefined(state.views) && hasAnyKey(allViewKeys, state)) {\n        throw new Error(\"State '\" + state.name + \"' has a 'views' object. \" +\n            \"It cannot also have \\\"view properties\\\" at the state level.  \" +\n            \"Move the following properties into a view (in the 'views' object): \" +\n            (\" \" + allViewKeys.filter(function (key) { return core_1.isDefined(state[key]); }).join(\", \")));\n    }\n    var views = {}, viewsObject = state.views || { \"$default\": core_1.pick(state, allViewKeys) };\n    core_1.forEach(viewsObject, function (config, name) {\n        // Account for views: { \"\": { template... } }\n        name = name || \"$default\";\n        // Account for views: { header: \"headerComponent\" }\n        if (core_1.isString(config))\n            config = { component: config };\n        // Make a shallow copy of the config object\n        config = core_1.extend({}, config);\n        // Do not allow a view to mix props for component-style view with props for template/controller-style view\n        if (hasAnyKey(compKeys, config) && hasAnyKey(nonCompKeys, config)) {\n            throw new Error(\"Cannot combine: \" + compKeys.join(\"|\") + \" with: \" + nonCompKeys.join(\"|\") + \" in stateview: '\" + name + \"@\" + state.name + \"'\");\n        }\n        config.resolveAs = config.resolveAs || '$resolve';\n        config.$type = \"ng1\";\n        config.$context = state;\n        config.$name = name;\n        var normalized = core_1.ViewService.normalizeUIViewTarget(config.$context, config.$name);\n        config.$uiViewName = normalized.uiViewName;\n        config.$uiViewContextAnchor = normalized.uiViewContextAnchor;\n        views[name] = config;\n    });\n    return views;\n}\nexports.ng1ViewsBuilder = ng1ViewsBuilder;\nvar id = 0;\nvar Ng1ViewConfig = (function () {\n    function Ng1ViewConfig(path, viewDecl, factory) {\n        var _this = this;\n        this.path = path;\n        this.viewDecl = viewDecl;\n        this.factory = factory;\n        this.$id = id++;\n        this.loaded = false;\n        this.getTemplate = function (uiView, context) {\n            return _this.component ? _this.factory.makeComponentTemplate(uiView, context, _this.component, _this.viewDecl.bindings) : _this.template;\n        };\n    }\n    Ng1ViewConfig.prototype.load = function () {\n        var _this = this;\n        var $q = core_1.services.$q;\n        var context = new core_1.ResolveContext(this.path);\n        var params = this.path.reduce(function (acc, node) { return core_1.extend(acc, node.paramValues); }, {});\n        var promises = {\n            template: $q.when(this.factory.fromConfig(this.viewDecl, params, context)),\n            controller: $q.when(this.getController(context))\n        };\n        return $q.all(promises).then(function (results) {\n            core_1.trace.traceViewServiceEvent(\"Loaded\", _this);\n            _this.controller = results.controller;\n            core_1.extend(_this, results.template); // Either { template: \"tpl\" } or { component: \"cmpName\" }\n            return _this;\n        });\n    };\n    /**\n     * Gets the controller for a view configuration.\n     *\n     * @returns {Function|Promise.<Function>} Returns a controller, or a promise that resolves to a controller.\n     */\n    Ng1ViewConfig.prototype.getController = function (context) {\n        var provider = this.viewDecl.controllerProvider;\n        if (!core_1.isInjectable(provider))\n            return this.viewDecl.controller;\n        var deps = core_1.services.$injector.annotate(provider);\n        var providerFn = core_1.isArray(provider) ? core_1.tail(provider) : provider;\n        var resolvable = new core_1.Resolvable(\"\", providerFn, deps);\n        return resolvable.get(context);\n    };\n    return Ng1ViewConfig;\n}());\nexports.Ng1ViewConfig = Ng1ViewConfig;\n//# sourceMappingURL=views.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/lib/statebuilders/views.js\n// module id = nFFv\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @coreapi\n * @module params\n */\n/** */\nvar common_1 = require(\"../common/common\");\nvar predicates_1 = require(\"../common/predicates\");\n/**\n * An internal class which implements [[ParamTypeDefinition]].\n *\n * A [[ParamTypeDefinition]] is a plain javascript object used to register custom parameter types.\n * When a param type definition is registered, an instance of this class is created internally.\n *\n * This class has naive implementations for all the [[ParamTypeDefinition]] methods.\n *\n * Used by [[UrlMatcher]] when matching or formatting URLs, or comparing and validating parameter values.\n *\n * #### Example:\n * ```js\n * var paramTypeDef = {\n *   decode: function(val) { return parseInt(val, 10); },\n *   encode: function(val) { return val && val.toString(); },\n *   equals: function(a, b) { return this.is(a) && a === b; },\n *   is: function(val) { return angular.isNumber(val) && isFinite(val) && val % 1 === 0; },\n *   pattern: /\\d+/\n * }\n *\n * var paramType = new ParamType(paramTypeDef);\n * ```\n * @internalapi\n */\nvar ParamType = (function () {\n    /**\n     * @param def  A configuration object which contains the custom type definition.  The object's\n     *        properties will override the default methods and/or pattern in `ParamType`'s public interface.\n     * @returns a new ParamType object\n     */\n    function ParamType(def) {\n        /** @inheritdoc */\n        this.pattern = /.*/;\n        /** @inheritdoc */\n        this.inherit = true;\n        common_1.extend(this, def);\n    }\n    // consider these four methods to be \"abstract methods\" that should be overridden\n    /** @inheritdoc */\n    ParamType.prototype.is = function (val, key) { return true; };\n    /** @inheritdoc */\n    ParamType.prototype.encode = function (val, key) { return val; };\n    /** @inheritdoc */\n    ParamType.prototype.decode = function (val, key) { return val; };\n    /** @inheritdoc */\n    ParamType.prototype.equals = function (a, b) { return a == b; };\n    ParamType.prototype.$subPattern = function () {\n        var sub = this.pattern.toString();\n        return sub.substr(1, sub.length - 2);\n    };\n    ParamType.prototype.toString = function () {\n        return \"{ParamType:\" + this.name + \"}\";\n    };\n    /** Given an encoded string, or a decoded object, returns a decoded object */\n    ParamType.prototype.$normalize = function (val) {\n        return this.is(val) ? val : this.decode(val);\n    };\n    /**\n     * Wraps an existing custom ParamType as an array of ParamType, depending on 'mode'.\n     * e.g.:\n     * - urlmatcher pattern \"/path?{queryParam[]:int}\"\n     * - url: \"/path?queryParam=1&queryParam=2\n     * - $stateParams.queryParam will be [1, 2]\n     * if `mode` is \"auto\", then\n     * - url: \"/path?queryParam=1 will create $stateParams.queryParam: 1\n     * - url: \"/path?queryParam=1&queryParam=2 will create $stateParams.queryParam: [1, 2]\n     */\n    ParamType.prototype.$asArray = function (mode, isSearch) {\n        if (!mode)\n            return this;\n        if (mode === \"auto\" && !isSearch)\n            throw new Error(\"'auto' array mode is for query parameters only\");\n        return new ArrayType(this, mode);\n    };\n    return ParamType;\n}());\nexports.ParamType = ParamType;\n/**\n * Wraps up a `ParamType` object to handle array values.\n * @internalapi\n */\nfunction ArrayType(type, mode) {\n    var _this = this;\n    // Wrap non-array value as array\n    function arrayWrap(val) {\n        return predicates_1.isArray(val) ? val : (predicates_1.isDefined(val) ? [val] : []);\n    }\n    // Unwrap array value for \"auto\" mode. Return undefined for empty array.\n    function arrayUnwrap(val) {\n        switch (val.length) {\n            case 0: return undefined;\n            case 1: return mode === \"auto\" ? val[0] : val;\n            default: return val;\n        }\n    }\n    // Wraps type (.is/.encode/.decode) functions to operate on each value of an array\n    function arrayHandler(callback, allTruthyMode) {\n        return function handleArray(val) {\n            if (predicates_1.isArray(val) && val.length === 0)\n                return val;\n            var arr = arrayWrap(val);\n            var result = common_1.map(arr, callback);\n            return (allTruthyMode === true) ? common_1.filter(result, function (x) { return !x; }).length === 0 : arrayUnwrap(result);\n        };\n    }\n    // Wraps type (.equals) functions to operate on each value of an array\n    function arrayEqualsHandler(callback) {\n        return function handleArray(val1, val2) {\n            var left = arrayWrap(val1), right = arrayWrap(val2);\n            if (left.length !== right.length)\n                return false;\n            for (var i = 0; i < left.length; i++) {\n                if (!callback(left[i], right[i]))\n                    return false;\n            }\n            return true;\n        };\n    }\n    ['encode', 'decode', 'equals', '$normalize'].forEach(function (name) {\n        var paramTypeFn = type[name].bind(type);\n        var wrapperFn = name === 'equals' ? arrayEqualsHandler : arrayHandler;\n        _this[name] = wrapperFn(paramTypeFn);\n    });\n    common_1.extend(this, {\n        dynamic: type.dynamic,\n        name: type.name,\n        pattern: type.pattern,\n        inherit: type.inherit,\n        is: arrayHandler(type.is.bind(type), true),\n        $arrayMode: mode\n    });\n}\n//# sourceMappingURL=paramType.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/params/paramType.js\n// module id = nH+B\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/** @module state */ /** for typedoc */\nvar common_1 = require(\"../common/common\");\nvar predicates_1 = require(\"../common/predicates\");\nvar strings_1 = require(\"../common/strings\");\nvar hof_1 = require(\"../common/hof\");\nvar resolvable_1 = require(\"../resolve/resolvable\");\nvar coreservices_1 = require(\"../common/coreservices\");\nvar parseUrl = function (url) {\n    if (!predicates_1.isString(url))\n        return false;\n    var root = url.charAt(0) === '^';\n    return { val: root ? url.substring(1) : url, root: root };\n};\nfunction nameBuilder(state) {\n    return state.name;\n}\nfunction selfBuilder(state) {\n    state.self.$$state = function () { return state; };\n    return state.self;\n}\nfunction dataBuilder(state) {\n    if (state.parent && state.parent.data) {\n        state.data = state.self.data = common_1.inherit(state.parent.data, state.data);\n    }\n    return state.data;\n}\nvar getUrlBuilder = function ($urlMatcherFactoryProvider, root) {\n    return function urlBuilder(state) {\n        var stateDec = state;\n        // For future states, i.e., states whose name ends with `.**`,\n        // match anything that starts with the url prefix\n        if (stateDec && stateDec.url && stateDec.name && stateDec.name.match(/\\.\\*\\*$/)) {\n            stateDec.url += \"{remainder:any}\"; // match any path (.*)\n        }\n        var parsed = parseUrl(stateDec.url), parent = state.parent;\n        var url = !parsed ? stateDec.url : $urlMatcherFactoryProvider.compile(parsed.val, {\n            params: state.params || {},\n            paramMap: function (paramConfig, isSearch) {\n                if (stateDec.reloadOnSearch === false && isSearch)\n                    paramConfig = common_1.extend(paramConfig || {}, { dynamic: true });\n                return paramConfig;\n            }\n        });\n        if (!url)\n            return null;\n        if (!$urlMatcherFactoryProvider.isMatcher(url))\n            throw new Error(\"Invalid url '\" + url + \"' in state '\" + state + \"'\");\n        return (parsed && parsed.root) ? url : ((parent && parent.navigable) || root()).url.append(url);\n    };\n};\nvar getNavigableBuilder = function (isRoot) {\n    return function navigableBuilder(state) {\n        return !isRoot(state) && state.url ? state : (state.parent ? state.parent.navigable : null);\n    };\n};\nvar getParamsBuilder = function (paramFactory) {\n    return function paramsBuilder(state) {\n        var makeConfigParam = function (config, id) { return paramFactory.fromConfig(id, null, config); };\n        var urlParams = (state.url && state.url.parameters({ inherit: false })) || [];\n        var nonUrlParams = common_1.values(common_1.mapObj(common_1.omit(state.params || {}, urlParams.map(hof_1.prop('id'))), makeConfigParam));\n        return urlParams.concat(nonUrlParams).map(function (p) { return [p.id, p]; }).reduce(common_1.applyPairs, {});\n    };\n};\nfunction pathBuilder(state) {\n    return state.parent ? state.parent.path.concat(state) : [state];\n}\nfunction includesBuilder(state) {\n    var includes = state.parent ? common_1.extend({}, state.parent.includes) : {};\n    includes[state.name] = true;\n    return includes;\n}\n/**\n * This is a [[StateBuilder.builder]] function for the `resolve:` block on a [[StateDeclaration]].\n *\n * When the [[StateBuilder]] builds a [[StateObject]] object from a raw [[StateDeclaration]], this builder\n * validates the `resolve` property and converts it to a [[Resolvable]] array.\n *\n * resolve: input value can be:\n *\n * {\n *   // analyzed but not injected\n *   myFooResolve: function() { return \"myFooData\"; },\n *\n *   // function.toString() parsed, \"DependencyName\" dep as string (not min-safe)\n *   myBarResolve: function(DependencyName) { return DependencyName.fetchSomethingAsPromise() },\n *\n *   // Array split; \"DependencyName\" dep as string\n *   myBazResolve: [ \"DependencyName\", function(dep) { return dep.fetchSomethingAsPromise() },\n *\n *   // Array split; DependencyType dep as token (compared using ===)\n *   myQuxResolve: [ DependencyType, function(dep) { return dep.fetchSometingAsPromise() },\n *\n *   // val.$inject used as deps\n *   // where:\n *   //     corgeResolve.$inject = [\"DependencyName\"];\n *   //     function corgeResolve(dep) { dep.fetchSometingAsPromise() }\n *   // then \"DependencyName\" dep as string\n *   myCorgeResolve: corgeResolve,\n *\n *  // inject service by name\n *  // When a string is found, desugar creating a resolve that injects the named service\n *   myGraultResolve: \"SomeService\"\n * }\n *\n * or:\n *\n * [\n *   new Resolvable(\"myFooResolve\", function() { return \"myFooData\" }),\n *   new Resolvable(\"myBarResolve\", function(dep) { return dep.fetchSomethingAsPromise() }, [ \"DependencyName\" ]),\n *   { provide: \"myBazResolve\", useFactory: function(dep) { dep.fetchSomethingAsPromise() }, deps: [ \"DependencyName\" ] }\n * ]\n */\nfunction resolvablesBuilder(state) {\n    /** convert resolve: {} and resolvePolicy: {} objects to an array of tuples */\n    var objects2Tuples = function (resolveObj, resolvePolicies) {\n        return Object.keys(resolveObj || {}).map(function (token) { return ({ token: token, val: resolveObj[token], deps: undefined, policy: resolvePolicies[token] }); });\n    };\n    /** fetch DI annotations from a function or ng1-style array */\n    var annotate = function (fn) {\n        var $injector = coreservices_1.services.$injector;\n        // ng1 doesn't have an $injector until runtime.\n        // If the $injector doesn't exist, use \"deferred\" literal as a\n        // marker indicating they should be annotated when runtime starts\n        return fn['$inject'] || ($injector && $injector.annotate(fn, $injector.strictDi)) || \"deferred\";\n    };\n    /** true if the object has both `token` and `resolveFn`, and is probably a [[ResolveLiteral]] */\n    var isResolveLiteral = function (obj) { return !!(obj.token && obj.resolveFn); };\n    /** true if the object looks like a provide literal, or a ng2 Provider */\n    var isLikeNg2Provider = function (obj) { return !!((obj.provide || obj.token) && (obj.useValue || obj.useFactory || obj.useExisting || obj.useClass)); };\n    /** true if the object looks like a tuple from obj2Tuples */\n    var isTupleFromObj = function (obj) { return !!(obj && obj.val && (predicates_1.isString(obj.val) || predicates_1.isArray(obj.val) || predicates_1.isFunction(obj.val))); };\n    /** extracts the token from a Provider or provide literal */\n    var token = function (p) { return p.provide || p.token; };\n    /** Given a literal resolve or provider object, returns a Resolvable */\n    var literal2Resolvable = hof_1.pattern([\n        [hof_1.prop('resolveFn'), function (p) { return new resolvable_1.Resolvable(token(p), p.resolveFn, p.deps, p.policy); }],\n        [hof_1.prop('useFactory'), function (p) { return new resolvable_1.Resolvable(token(p), p.useFactory, (p.deps || p.dependencies), p.policy); }],\n        [hof_1.prop('useClass'), function (p) { return new resolvable_1.Resolvable(token(p), function () { return new p.useClass(); }, [], p.policy); }],\n        [hof_1.prop('useValue'), function (p) { return new resolvable_1.Resolvable(token(p), function () { return p.useValue; }, [], p.policy, p.useValue); }],\n        [hof_1.prop('useExisting'), function (p) { return new resolvable_1.Resolvable(token(p), common_1.identity, [p.useExisting], p.policy); }],\n    ]);\n    var tuple2Resolvable = hof_1.pattern([\n        [hof_1.pipe(hof_1.prop(\"val\"), predicates_1.isString), function (tuple) { return new resolvable_1.Resolvable(tuple.token, common_1.identity, [tuple.val], tuple.policy); }],\n        [hof_1.pipe(hof_1.prop(\"val\"), predicates_1.isArray), function (tuple) { return new resolvable_1.Resolvable(tuple.token, common_1.tail(tuple.val), tuple.val.slice(0, -1), tuple.policy); }],\n        [hof_1.pipe(hof_1.prop(\"val\"), predicates_1.isFunction), function (tuple) { return new resolvable_1.Resolvable(tuple.token, tuple.val, annotate(tuple.val), tuple.policy); }],\n    ]);\n    var item2Resolvable = hof_1.pattern([\n        [hof_1.is(resolvable_1.Resolvable), function (r) { return r; }],\n        [isResolveLiteral, literal2Resolvable],\n        [isLikeNg2Provider, literal2Resolvable],\n        [isTupleFromObj, tuple2Resolvable],\n        [hof_1.val(true), function (obj) { throw new Error(\"Invalid resolve value: \" + strings_1.stringify(obj)); }]\n    ]);\n    // If resolveBlock is already an array, use it as-is.\n    // Otherwise, assume it's an object and convert to an Array of tuples\n    var decl = state.resolve;\n    var items = predicates_1.isArray(decl) ? decl : objects2Tuples(decl, state.resolvePolicy || {});\n    return items.map(item2Resolvable);\n}\nexports.resolvablesBuilder = resolvablesBuilder;\n/**\n * @internalapi A internal global service\n *\n * StateBuilder is a factory for the internal [[StateObject]] objects.\n *\n * When you register a state with the [[StateRegistry]], you register a plain old javascript object which\n * conforms to the [[StateDeclaration]] interface.  This factory takes that object and builds the corresponding\n * [[StateObject]] object, which has an API and is used internally.\n *\n * Custom properties or API may be added to the internal [[StateObject]] object by registering a decorator function\n * using the [[builder]] method.\n */\nvar StateBuilder = (function () {\n    function StateBuilder(matcher, urlMatcherFactory) {\n        this.matcher = matcher;\n        var self = this;\n        var root = function () { return matcher.find(\"\"); };\n        var isRoot = function (state) { return state.name === \"\"; };\n        function parentBuilder(state) {\n            if (isRoot(state))\n                return null;\n            return matcher.find(self.parentName(state)) || root();\n        }\n        this.builders = {\n            name: [nameBuilder],\n            self: [selfBuilder],\n            parent: [parentBuilder],\n            data: [dataBuilder],\n            // Build a URLMatcher if necessary, either via a relative or absolute URL\n            url: [getUrlBuilder(urlMatcherFactory, root)],\n            // Keep track of the closest ancestor state that has a URL (i.e. is navigable)\n            navigable: [getNavigableBuilder(isRoot)],\n            params: [getParamsBuilder(urlMatcherFactory.paramFactory)],\n            // Each framework-specific ui-router implementation should define its own `views` builder\n            // e.g., src/ng1/statebuilders/views.ts\n            views: [],\n            // Keep a full path from the root down to this state as this is needed for state activation.\n            path: [pathBuilder],\n            // Speed up $state.includes() as it's used a lot\n            includes: [includesBuilder],\n            resolvables: [resolvablesBuilder]\n        };\n    }\n    /**\n     * Registers a [[BuilderFunction]] for a specific [[StateObject]] property (e.g., `parent`, `url`, or `path`).\n     * More than one BuilderFunction can be registered for a given property.\n     *\n     * The BuilderFunction(s) will be used to define the property on any subsequently built [[StateObject]] objects.\n     *\n     * @param name The name of the State property being registered for.\n     * @param fn The BuilderFunction which will be used to build the State property\n     * @returns a function which deregisters the BuilderFunction\n     */\n    StateBuilder.prototype.builder = function (name, fn) {\n        var builders = this.builders;\n        var array = builders[name] || [];\n        // Backwards compat: if only one builder exists, return it, else return whole arary.\n        if (predicates_1.isString(name) && !predicates_1.isDefined(fn))\n            return array.length > 1 ? array : array[0];\n        if (!predicates_1.isString(name) || !predicates_1.isFunction(fn))\n            return;\n        builders[name] = array;\n        builders[name].push(fn);\n        return function () { return builders[name].splice(builders[name].indexOf(fn, 1)) && null; };\n    };\n    /**\n     * Builds all of the properties on an essentially blank State object, returning a State object which has all its\n     * properties and API built.\n     *\n     * @param state an uninitialized State object\n     * @returns the built State object\n     */\n    StateBuilder.prototype.build = function (state) {\n        var _a = this, matcher = _a.matcher, builders = _a.builders;\n        var parent = this.parentName(state);\n        if (parent && !matcher.find(parent, undefined, false)) {\n            return null;\n        }\n        for (var key in builders) {\n            if (!builders.hasOwnProperty(key))\n                continue;\n            var chain = builders[key].reduce(function (parentFn, step) { return function (_state) { return step(_state, parentFn); }; }, common_1.noop);\n            state[key] = chain(state);\n        }\n        return state;\n    };\n    StateBuilder.prototype.parentName = function (state) {\n        var name = state.name || \"\";\n        var segments = name.split('.');\n        if (segments.length > 1) {\n            if (state.parent) {\n                throw new Error(\"States that specify the 'parent:' property should not have a '.' in their name (\" + name + \")\");\n            }\n            var lastSegment = segments.pop();\n            if (lastSegment === '**')\n                segments.pop();\n            return segments.join(\".\");\n        }\n        if (!state.parent)\n            return \"\";\n        return predicates_1.isString(state.parent) ? state.parent : state.parent.name;\n    };\n    StateBuilder.prototype.name = function (state) {\n        var name = state.name;\n        if (name.indexOf('.') !== -1 || !state.parent)\n            return name;\n        var parentName = predicates_1.isString(state.parent) ? state.parent : state.parent.name;\n        return parentName ? parentName + \".\" + name : name;\n    };\n    return StateBuilder;\n}());\nexports.StateBuilder = StateBuilder;\n//# sourceMappingURL=stateBuilder.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/state/stateBuilder.js\n// module id = oOme\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/** @module ng1 */ /** for typedoc */\nvar core_1 = require(\"@uirouter/core\");\n/**\n * The Angular 1 `StateProvider`\n *\n * The `$stateProvider` works similar to Angular's v1 router, but it focuses purely\n * on state.\n *\n * A state corresponds to a \"place\" in the application in terms of the overall UI and\n * navigation. A state describes (via the controller / template / view properties) what\n * the UI looks like and does at that place.\n *\n * States often have things in common, and the primary way of factoring out these\n * commonalities in this model is via the state hierarchy, i.e. parent/child states aka\n * nested states.\n *\n * The `$stateProvider` provides interfaces to declare these states for your app.\n */\nvar StateProvider = (function () {\n    function StateProvider(stateRegistry, stateService) {\n        this.stateRegistry = stateRegistry;\n        this.stateService = stateService;\n        core_1.createProxyFunctions(core_1.val(StateProvider.prototype), this, core_1.val(this));\n    }\n    /**\n     * Decorates states when they are registered\n     *\n     * Allows you to extend (carefully) or override (at your own peril) the\n     * `stateBuilder` object used internally by [[StateRegistry]].\n     * This can be used to add custom functionality to ui-router,\n     * for example inferring templateUrl based on the state name.\n     *\n     * When passing only a name, it returns the current (original or decorated) builder\n     * function that matches `name`.\n     *\n     * The builder functions that can be decorated are listed below. Though not all\n     * necessarily have a good use case for decoration, that is up to you to decide.\n     *\n     * In addition, users can attach custom decorators, which will generate new\n     * properties within the state's internal definition. There is currently no clear\n     * use-case for this beyond accessing internal states (i.e. $state.$current),\n     * however, expect this to become increasingly relevant as we introduce additional\n     * meta-programming features.\n     *\n     * **Warning**: Decorators should not be interdependent because the order of\n     * execution of the builder functions in non-deterministic. Builder functions\n     * should only be dependent on the state definition object and super function.\n     *\n     *\n     * Existing builder functions and current return values:\n     *\n     * - **parent** `{object}` - returns the parent state object.\n     * - **data** `{object}` - returns state data, including any inherited data that is not\n     *   overridden by own values (if any).\n     * - **url** `{object}` - returns a {@link ui.router.util.type:UrlMatcher UrlMatcher}\n     *   or `null`.\n     * - **navigable** `{object}` - returns closest ancestor state that has a URL (aka is\n     *   navigable).\n     * - **params** `{object}` - returns an array of state params that are ensured to\n     *   be a super-set of parent's params.\n     * - **views** `{object}` - returns a views object where each key is an absolute view\n     *   name (i.e. \"viewName@stateName\") and each value is the config object\n     *   (template, controller) for the view. Even when you don't use the views object\n     *   explicitly on a state config, one is still created for you internally.\n     *   So by decorating this builder function you have access to decorating template\n     *   and controller properties.\n     * - **ownParams** `{object}` - returns an array of params that belong to the state,\n     *   not including any params defined by ancestor states.\n     * - **path** `{string}` - returns the full path from the root down to this state.\n     *   Needed for state activation.\n     * - **includes** `{object}` - returns an object that includes every state that\n     *   would pass a `$state.includes()` test.\n     *\n     * #### Example:\n     * Override the internal 'views' builder with a function that takes the state\n     * definition, and a reference to the internal function being overridden:\n     * ```js\n     * $stateProvider.decorator('views', function (state, parent) {\n     *   let result = {},\n     *       views = parent(state);\n     *\n     *   angular.forEach(views, function (config, name) {\n     *     let autoName = (state.name + '.' + name).replace('.', '/');\n     *     config.templateUrl = config.templateUrl || '/partials/' + autoName + '.html';\n     *     result[name] = config;\n     *   });\n     *   return result;\n     * });\n     *\n     * $stateProvider.state('home', {\n     *   views: {\n     *     'contact.list': { controller: 'ListController' },\n     *     'contact.item': { controller: 'ItemController' }\n     *   }\n     * });\n     * ```\n     *\n     *\n     * ```js\n     * // Auto-populates list and item views with /partials/home/contact/list.html,\n     * // and /partials/home/contact/item.html, respectively.\n     * $state.go('home');\n     * ```\n     *\n     * @param {string} name The name of the builder function to decorate.\n     * @param {object} func A function that is responsible for decorating the original\n     * builder function. The function receives two parameters:\n     *\n     *   - `{object}` - state - The state config object.\n     *   - `{object}` - super - The original builder function.\n     *\n     * @return {object} $stateProvider - $stateProvider instance\n     */\n    StateProvider.prototype.decorator = function (name, func) {\n        return this.stateRegistry.decorator(name, func) || this;\n    };\n    StateProvider.prototype.state = function (name, definition) {\n        if (core_1.isObject(name)) {\n            definition = name;\n        }\n        else {\n            definition.name = name;\n        }\n        this.stateRegistry.register(definition);\n        return this;\n    };\n    /**\n     * Registers an invalid state handler\n     *\n     * This is a passthrough to [[StateService.onInvalid]] for ng1.\n     */\n    StateProvider.prototype.onInvalid = function (callback) {\n        return this.stateService.onInvalid(callback);\n    };\n    return StateProvider;\n}());\nexports.StateProvider = StateProvider;\n//# sourceMappingURL=stateProvider.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/lib/stateProvider.js\n// module id = otEo\n// module chunks = 0","\"use strict\";\n/** @module hooks */ /** */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * A [[TransitionHookFn]] that rejects the Transition if it is invalid\n *\n * This hook is invoked at the end of the onBefore phase.\n * If the transition is invalid (for example, param values do not validate)\n * then the transition is rejected.\n */\nfunction invalidTransitionHook(trans) {\n    if (!trans.valid()) {\n        throw new Error(trans.error());\n    }\n}\nexports.registerInvalidTransitionHook = function (transitionService) {\n    return transitionService.onBefore({}, invalidTransitionHook, { priority: -10000 });\n};\n//# sourceMappingURL=invalidTransition.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/hooks/invalidTransition.js\n// module id = pLgF\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @internalapi\n * @module vanilla\n */\n/** */\nvar index_1 = require(\"../common/index\");\n/**\n * An angular1-like promise api\n *\n * This object implements four methods similar to the\n * [angular 1 promise api](https://docs.angularjs.org/api/ng/service/$q)\n *\n * UI-Router evolved from an angular 1 library to a framework agnostic library.\n * However, some of the `@uirouter/core` code uses these ng1 style APIs to support ng1 style dependency injection.\n *\n * This API provides native ES6 promise support wrapped as a $q-like API.\n * Internally, UI-Router uses this $q object to perform promise operations.\n * The `angular-ui-router` (ui-router for angular 1) uses the $q API provided by angular.\n *\n * $q-like promise api\n */\nexports.$q = {\n    /** Normalizes a value as a promise */\n    when: function (val) { return new Promise(function (resolve, reject) { return resolve(val); }); },\n    /** Normalizes a value as a promise rejection */\n    reject: function (val) { return new Promise(function (resolve, reject) { reject(val); }); },\n    /** @returns a deferred object, which has `resolve` and `reject` functions */\n    defer: function () {\n        var deferred = {};\n        deferred.promise = new Promise(function (resolve, reject) {\n            deferred.resolve = resolve;\n            deferred.reject = reject;\n        });\n        return deferred;\n    },\n    /** Like Promise.all(), but also supports object key/promise notation like $q */\n    all: function (promises) {\n        if (index_1.isArray(promises)) {\n            return Promise.all(promises);\n        }\n        if (index_1.isObject(promises)) {\n            // Convert promises map to promises array.\n            // When each promise resolves, map it to a tuple { key: key, val: val }\n            var chain = Object.keys(promises)\n                .map(function (key) { return promises[key].then(function (val) { return ({ key: key, val: val }); }); });\n            // Then wait for all promises to resolve, and convert them back to an object\n            return exports.$q.all(chain).then(function (values) {\n                return values.reduce(function (acc, tuple) { acc[tuple.key] = tuple.val; return acc; }, {});\n            });\n        }\n    }\n};\n//# sourceMappingURL=q.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/vanilla/q.js\n// module id = pZYS\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/** @module path */ /** for typedoc */\nvar common_1 = require(\"../common/common\");\nvar hof_1 = require(\"../common/hof\");\nvar param_1 = require(\"../params/param\");\n/**\n * @internalapi\n *\n * A node in a [[TreeChanges]] path\n *\n * For a [[TreeChanges]] path, this class holds the stateful information for a single node in the path.\n * Each PathNode corresponds to a state being entered, exited, or retained.\n * The stateful information includes parameter values and resolve data.\n */\nvar PathNode = (function () {\n    function PathNode(stateOrNode) {\n        if (stateOrNode instanceof PathNode) {\n            var node = stateOrNode;\n            this.state = node.state;\n            this.paramSchema = node.paramSchema.slice();\n            this.paramValues = common_1.extend({}, node.paramValues);\n            this.resolvables = node.resolvables.slice();\n            this.views = node.views && node.views.slice();\n        }\n        else {\n            var state = stateOrNode;\n            this.state = state;\n            this.paramSchema = state.parameters({ inherit: false });\n            this.paramValues = {};\n            this.resolvables = state.resolvables.map(function (res) { return res.clone(); });\n        }\n    }\n    /** Sets [[paramValues]] for the node, from the values of an object hash */\n    PathNode.prototype.applyRawParams = function (params) {\n        var getParamVal = function (paramDef) { return [paramDef.id, paramDef.value(params[paramDef.id])]; };\n        this.paramValues = this.paramSchema.reduce(function (memo, pDef) { return common_1.applyPairs(memo, getParamVal(pDef)); }, {});\n        return this;\n    };\n    /** Gets a specific [[Param]] metadata that belongs to the node */\n    PathNode.prototype.parameter = function (name) {\n        return common_1.find(this.paramSchema, hof_1.propEq(\"id\", name));\n    };\n    /**\n     * @returns true if the state and parameter values for another PathNode are\n     * equal to the state and param values for this PathNode\n     */\n    PathNode.prototype.equals = function (node, paramsFn) {\n        var diff = this.diff(node, paramsFn);\n        return diff && diff.length === 0;\n    };\n    /**\n     * Finds Params with different parameter values on another PathNode.\n     *\n     * Given another node (of the same state), finds the parameter values which differ.\n     * Returns the [[Param]] (schema objects) whose parameter values differ.\n     *\n     * Given another node for a different state, returns `false`\n     *\n     * @param node The node to compare to\n     * @param paramsFn A function that returns which parameters should be compared.\n     * @returns The [[Param]]s which differ, or null if the two nodes are for different states\n     */\n    PathNode.prototype.diff = function (node, paramsFn) {\n        if (this.state !== node.state)\n            return false;\n        var params = paramsFn ? paramsFn(this) : this.paramSchema;\n        return param_1.Param.changed(params, this.paramValues, node.paramValues);\n    };\n    /** Returns a clone of the PathNode */\n    PathNode.clone = function (node) {\n        return new PathNode(node);\n    };\n    return PathNode;\n}());\nexports.PathNode = PathNode;\n//# sourceMappingURL=pathNode.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/path/pathNode.js\n// module id = padE\n// module chunks = 0","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * # Transition subsystem\n *\n * This module contains APIs related to a Transition.\n *\n * See:\n * - [[TransitionService]]\n * - [[Transition]]\n * - [[HookFn]], [[TransitionHookFn]], [[TransitionStateHookFn]], [[HookMatchCriteria]], [[HookResult]]\n *\n * @coreapi\n * @preferred\n * @module transition\n */ /** for typedoc */\n__export(require(\"./interface\"));\n__export(require(\"./hookBuilder\"));\n__export(require(\"./hookRegistry\"));\n__export(require(\"./rejectFactory\"));\n__export(require(\"./transition\"));\n__export(require(\"./transitionHook\"));\n__export(require(\"./transitionEventType\"));\n__export(require(\"./transitionService\"));\n//# sourceMappingURL=index.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/transition/index.js\n// module id = qH38\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @internalapi\n * @module vanilla\n */\n/** */\nvar browserLocationConfig_1 = require(\"./browserLocationConfig\");\nvar hashLocationService_1 = require(\"./hashLocationService\");\nvar utils_1 = require(\"./utils\");\nvar pushStateLocationService_1 = require(\"./pushStateLocationService\");\nvar memoryLocationService_1 = require(\"./memoryLocationService\");\nvar memoryLocationConfig_1 = require(\"./memoryLocationConfig\");\nvar injector_1 = require(\"./injector\");\nvar q_1 = require(\"./q\");\nvar coreservices_1 = require(\"../common/coreservices\");\nfunction servicesPlugin(router) {\n    coreservices_1.services.$injector = injector_1.$injector;\n    coreservices_1.services.$q = q_1.$q;\n    return { name: \"vanilla.services\", $q: q_1.$q, $injector: injector_1.$injector, dispose: function () { return null; } };\n}\nexports.servicesPlugin = servicesPlugin;\n/** A `UIRouterPlugin` uses the browser hash to get/set the current location */\nexports.hashLocationPlugin = utils_1.locationPluginFactory('vanilla.hashBangLocation', false, hashLocationService_1.HashLocationService, browserLocationConfig_1.BrowserLocationConfig);\n/** A `UIRouterPlugin` that gets/sets the current location using the browser's `location` and `history` apis */\nexports.pushStateLocationPlugin = utils_1.locationPluginFactory(\"vanilla.pushStateLocation\", true, pushStateLocationService_1.PushStateLocationService, browserLocationConfig_1.BrowserLocationConfig);\n/** A `UIRouterPlugin` that gets/sets the current location from an in-memory object */\nexports.memoryLocationPlugin = utils_1.locationPluginFactory(\"vanilla.memoryLocation\", false, memoryLocationService_1.MemoryLocationService, memoryLocationConfig_1.MemoryLocationConfig);\n//# sourceMappingURL=plugins.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/vanilla/plugins.js\n// module id = qIYJ\n// module chunks = 0","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/** @module path */ /** for typedoc */\n__export(require(\"./pathNode\"));\n__export(require(\"./pathFactory\"));\n//# sourceMappingURL=index.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/path/index.js\n// module id = r+qa\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Random utility functions used in the UI-Router code\n *\n * These functions are exported, but are subject to change without notice.\n *\n * @preferred\n * @module common\n */\n/** for typedoc */\nvar predicates_1 = require(\"./predicates\");\nvar hof_1 = require(\"./hof\");\nvar coreservices_1 = require(\"./coreservices\");\nvar w = typeof window === 'undefined' ? {} : window;\nvar angular = w.angular || {};\nexports.fromJson = angular.fromJson || JSON.parse.bind(JSON);\nexports.toJson = angular.toJson || JSON.stringify.bind(JSON);\nexports.copy = angular.copy || _copy;\nexports.forEach = angular.forEach || _forEach;\nexports.extend = Object.assign || _extend;\nexports.equals = angular.equals || _equals;\nfunction identity(x) { return x; }\nexports.identity = identity;\nfunction noop() { }\nexports.noop = noop;\n/**\n * Builds proxy functions on the `to` object which pass through to the `from` object.\n *\n * For each key in `fnNames`, creates a proxy function on the `to` object.\n * The proxy function calls the real function on the `from` object.\n *\n *\n * #### Example:\n * This example creates an new class instance whose functions are prebound to the new'd object.\n * ```js\n * class Foo {\n *   constructor(data) {\n *     // Binds all functions from Foo.prototype to 'this',\n *     // then copies them to 'this'\n *     bindFunctions(Foo.prototype, this, this);\n *     this.data = data;\n *   }\n *\n *   log() {\n *     console.log(this.data);\n *   }\n * }\n *\n * let myFoo = new Foo([1,2,3]);\n * var logit = myFoo.log;\n * logit(); // logs [1, 2, 3] from the myFoo 'this' instance\n * ```\n *\n * #### Example:\n * This example creates a bound version of a service function, and copies it to another object\n * ```\n *\n * var SomeService = {\n *   this.data = [3, 4, 5];\n *   this.log = function() {\n *     console.log(this.data);\n *   }\n * }\n *\n * // Constructor fn\n * function OtherThing() {\n *   // Binds all functions from SomeService to SomeService,\n *   // then copies them to 'this'\n *   bindFunctions(SomeService, this, SomeService);\n * }\n *\n * let myOtherThing = new OtherThing();\n * myOtherThing.log(); // logs [3, 4, 5] from SomeService's 'this'\n * ```\n *\n * @param source A function that returns the source object which contains the original functions to be bound\n * @param target A function that returns the target object which will receive the bound functions\n * @param bind A function that returns the object which the functions will be bound to\n * @param fnNames The function names which will be bound (Defaults to all the functions found on the 'from' object)\n * @param latebind If true, the binding of the function is delayed until the first time it's invoked\n */\nfunction createProxyFunctions(source, target, bind, fnNames, latebind) {\n    if (latebind === void 0) { latebind = false; }\n    var bindFunction = function (fnName) {\n        return source()[fnName].bind(bind());\n    };\n    var makeLateRebindFn = function (fnName) { return function lateRebindFunction() {\n        target[fnName] = bindFunction(fnName);\n        return target[fnName].apply(null, arguments);\n    }; };\n    fnNames = fnNames || Object.keys(source());\n    return fnNames.reduce(function (acc, name) {\n        acc[name] = latebind ? makeLateRebindFn(name) : bindFunction(name);\n        return acc;\n    }, target);\n}\nexports.createProxyFunctions = createProxyFunctions;\n/**\n * prototypal inheritance helper.\n * Creates a new object which has `parent` object as its prototype, and then copies the properties from `extra` onto it\n */\nexports.inherit = function (parent, extra) {\n    return exports.extend(Object.create(parent), extra);\n};\n/**\n * Given an arguments object, converts the arguments at index idx and above to an array.\n * This is similar to es6 rest parameters.\n *\n * Optionally, the argument at index idx may itself already be an array.\n *\n * For example,\n * given either:\n *        arguments = [ obj, \"foo\", \"bar\" ]\n * or:\n *        arguments = [ obj, [\"foo\", \"bar\"] ]\n * then:\n *        restArgs(arguments, 1) == [\"foo\", \"bar\"]\n *\n * This allows functions like pick() to be implemented such that it allows either a bunch\n * of string arguments (like es6 rest parameters), or a single array of strings:\n *\n * given:\n *        var obj = { foo: 1, bar: 2, baz: 3 };\n * then:\n *        pick(obj, \"foo\", \"bar\");   // returns { foo: 1, bar: 2 }\n *        pick(obj, [\"foo\", \"bar\"]); // returns { foo: 1, bar: 2 }\n */\nvar restArgs = function (args, idx) {\n    if (idx === void 0) { idx = 0; }\n    return Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(args, idx));\n};\n/** Given an array, returns true if the object is found in the array, (using indexOf) */\nexports.inArray = hof_1.curry(_inArray);\nfunction _inArray(array, obj) {\n    return array.indexOf(obj) !== -1;\n}\nexports._inArray = _inArray;\n/**\n * Given an array, and an item, if the item is found in the array, it removes it (in-place).\n * The same array is returned\n */\nexports.removeFrom = hof_1.curry(_removeFrom);\nfunction _removeFrom(array, obj) {\n    var idx = array.indexOf(obj);\n    if (idx >= 0)\n        array.splice(idx, 1);\n    return array;\n}\nexports._removeFrom = _removeFrom;\n/** pushes a values to an array and returns the value */\nexports.pushTo = hof_1.curry(_pushTo);\nfunction _pushTo(arr, val) {\n    return (arr.push(val), val);\n}\nexports._pushTo = _pushTo;\n/** Given an array of (deregistration) functions, calls all functions and removes each one from the source array */\nexports.deregAll = function (functions) {\n    return functions.slice().forEach(function (fn) {\n        typeof fn === 'function' && fn();\n        exports.removeFrom(functions, fn);\n    });\n};\n/**\n * Applies a set of defaults to an options object.  The options object is filtered\n * to only those properties of the objects in the defaultsList.\n * Earlier objects in the defaultsList take precedence when applying defaults.\n */\nfunction defaults(opts) {\n    var defaultsList = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        defaultsList[_i - 1] = arguments[_i];\n    }\n    var _defaultsList = defaultsList.concat({}).reverse();\n    var defaultVals = exports.extend.apply(null, _defaultsList);\n    return exports.extend({}, defaultVals, pick(opts || {}, Object.keys(defaultVals)));\n}\nexports.defaults = defaults;\n/** Reduce function that merges each element of the list into a single object, using extend */\nexports.mergeR = function (memo, item) { return exports.extend(memo, item); };\n/**\n * Finds the common ancestor path between two states.\n *\n * @param {Object} first The first state.\n * @param {Object} second The second state.\n * @return {Array} Returns an array of state names in descending order, not including the root.\n */\nfunction ancestors(first, second) {\n    var path = [];\n    for (var n in first.path) {\n        if (first.path[n] !== second.path[n])\n            break;\n        path.push(first.path[n]);\n    }\n    return path;\n}\nexports.ancestors = ancestors;\n/**\n * Return a copy of the object only containing the whitelisted properties.\n *\n * #### Example:\n * ```\n * var foo = { a: 1, b: 2, c: 3 };\n * var ab = pick(foo, ['a', 'b']); // { a: 1, b: 2 }\n * ```\n * @param obj the source object\n * @param propNames an Array of strings, which are the whitelisted property names\n */\nfunction pick(obj, propNames) {\n    var objCopy = {};\n    for (var prop_1 in obj) {\n        if (propNames.indexOf(prop_1) !== -1) {\n            objCopy[prop_1] = obj[prop_1];\n        }\n    }\n    return objCopy;\n}\nexports.pick = pick;\n/**\n * Return a copy of the object omitting the blacklisted properties.\n *\n * @example\n * ```\n *\n * var foo = { a: 1, b: 2, c: 3 };\n * var ab = omit(foo, ['a', 'b']); // { c: 3 }\n * ```\n * @param obj the source object\n * @param propNames an Array of strings, which are the blacklisted property names\n */\nfunction omit(obj, propNames) {\n    return Object.keys(obj)\n        .filter(hof_1.not(exports.inArray(propNames)))\n        .reduce(function (acc, key) { return (acc[key] = obj[key], acc); }, {});\n}\nexports.omit = omit;\n/**\n * Maps an array, or object to a property (by name)\n */\nfunction pluck(collection, propName) {\n    return map(collection, hof_1.prop(propName));\n}\nexports.pluck = pluck;\n/** Filters an Array or an Object's properties based on a predicate */\nfunction filter(collection, callback) {\n    var arr = predicates_1.isArray(collection), result = arr ? [] : {};\n    var accept = arr ? function (x) { return result.push(x); } : function (x, key) { return result[key] = x; };\n    exports.forEach(collection, function (item, i) {\n        if (callback(item, i))\n            accept(item, i);\n    });\n    return result;\n}\nexports.filter = filter;\n/** Finds an object from an array, or a property of an object, that matches a predicate */\nfunction find(collection, callback) {\n    var result;\n    exports.forEach(collection, function (item, i) {\n        if (result)\n            return;\n        if (callback(item, i))\n            result = item;\n    });\n    return result;\n}\nexports.find = find;\n/** Given an object, returns a new object, where each property is transformed by the callback function */\nexports.mapObj = map;\n/** Maps an array or object properties using a callback function */\nfunction map(collection, callback) {\n    var result = predicates_1.isArray(collection) ? [] : {};\n    exports.forEach(collection, function (item, i) { return result[i] = callback(item, i); });\n    return result;\n}\nexports.map = map;\n/**\n * Given an object, return its enumerable property values\n *\n * @example\n * ```\n *\n * let foo = { a: 1, b: 2, c: 3 }\n * let vals = values(foo); // [ 1, 2, 3 ]\n * ```\n */\nexports.values = function (obj) {\n    return Object.keys(obj).map(function (key) { return obj[key]; });\n};\n/**\n * Reduce function that returns true if all of the values are truthy.\n *\n * @example\n * ```\n *\n * let vals = [ 1, true, {}, \"hello world\"];\n * vals.reduce(allTrueR, true); // true\n *\n * vals.push(0);\n * vals.reduce(allTrueR, true); // false\n * ```\n */\nexports.allTrueR = function (memo, elem) { return memo && elem; };\n/**\n * Reduce function that returns true if any of the values are truthy.\n *\n *  * @example\n * ```\n *\n * let vals = [ 0, null, undefined ];\n * vals.reduce(anyTrueR, true); // false\n *\n * vals.push(\"hello world\");\n * vals.reduce(anyTrueR, true); // true\n * ```\n */\nexports.anyTrueR = function (memo, elem) { return memo || elem; };\n/**\n * Reduce function which un-nests a single level of arrays\n * @example\n * ```\n *\n * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n * input.reduce(unnestR, []) // [ \"a\", \"b\", \"c\", \"d\", [ \"double, \"nested\" ] ]\n * ```\n */\nexports.unnestR = function (memo, elem) { return memo.concat(elem); };\n/**\n * Reduce function which recursively un-nests all arrays\n *\n * @example\n * ```\n *\n * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n * input.reduce(unnestR, []) // [ \"a\", \"b\", \"c\", \"d\", \"double, \"nested\" ]\n * ```\n */\nexports.flattenR = function (memo, elem) {\n    return predicates_1.isArray(elem) ? memo.concat(elem.reduce(exports.flattenR, [])) : pushR(memo, elem);\n};\n/**\n * Reduce function that pushes an object to an array, then returns the array.\n * Mostly just for [[flattenR]] and [[uniqR]]\n */\nfunction pushR(arr, obj) {\n    arr.push(obj);\n    return arr;\n}\nexports.pushR = pushR;\n/** Reduce function that filters out duplicates */\nexports.uniqR = function (acc, token) {\n    return exports.inArray(acc, token) ? acc : pushR(acc, token);\n};\n/**\n * Return a new array with a single level of arrays unnested.\n *\n * @example\n * ```\n *\n * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n * unnest(input) // [ \"a\", \"b\", \"c\", \"d\", [ \"double, \"nested\" ] ]\n * ```\n */\nexports.unnest = function (arr) { return arr.reduce(exports.unnestR, []); };\n/**\n * Return a completely flattened version of an array.\n *\n * @example\n * ```\n *\n * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n * flatten(input) // [ \"a\", \"b\", \"c\", \"d\", \"double, \"nested\" ]\n * ```\n */\nexports.flatten = function (arr) { return arr.reduce(exports.flattenR, []); };\n/**\n * Given a .filter Predicate, builds a .filter Predicate which throws an error if any elements do not pass.\n * @example\n * ```\n *\n * let isNumber = (obj) => typeof(obj) === 'number';\n * let allNumbers = [ 1, 2, 3, 4, 5 ];\n * allNumbers.filter(assertPredicate(isNumber)); //OK\n *\n * let oneString = [ 1, 2, 3, 4, \"5\" ];\n * oneString.filter(assertPredicate(isNumber, \"Not all numbers\")); // throws Error(\"\"Not all numbers\"\");\n * ```\n */\nexports.assertPredicate = assertFn;\n/**\n * Given a .map function, builds a .map function which throws an error if any mapped elements do not pass a truthyness test.\n * @example\n * ```\n *\n * var data = { foo: 1, bar: 2 };\n *\n * let keys = [ 'foo', 'bar' ]\n * let values = keys.map(assertMap(key => data[key], \"Key not found\"));\n * // values is [1, 2]\n *\n * let keys = [ 'foo', 'bar', 'baz' ]\n * let values = keys.map(assertMap(key => data[key], \"Key not found\"));\n * // throws Error(\"Key not found\")\n * ```\n */\nexports.assertMap = assertFn;\nfunction assertFn(predicateOrMap, errMsg) {\n    if (errMsg === void 0) { errMsg = \"assert failure\"; }\n    return function (obj) {\n        var result = predicateOrMap(obj);\n        if (!result) {\n            throw new Error(predicates_1.isFunction(errMsg) ? errMsg(obj) : errMsg);\n        }\n        return result;\n    };\n}\nexports.assertFn = assertFn;\n/**\n * Like _.pairs: Given an object, returns an array of key/value pairs\n *\n * @example\n * ```\n *\n * pairs({ foo: \"FOO\", bar: \"BAR }) // [ [ \"foo\", \"FOO\" ], [ \"bar\": \"BAR\" ] ]\n * ```\n */\nexports.pairs = function (obj) {\n    return Object.keys(obj).map(function (key) { return [key, obj[key]]; });\n};\n/**\n * Given two or more parallel arrays, returns an array of tuples where\n * each tuple is composed of [ a[i], b[i], ... z[i] ]\n *\n * @example\n * ```\n *\n * let foo = [ 0, 2, 4, 6 ];\n * let bar = [ 1, 3, 5, 7 ];\n * let baz = [ 10, 30, 50, 70 ];\n * arrayTuples(foo, bar);       // [ [0, 1], [2, 3], [4, 5], [6, 7] ]\n * arrayTuples(foo, bar, baz);  // [ [0, 1, 10], [2, 3, 30], [4, 5, 50], [6, 7, 70] ]\n * ```\n */\nfunction arrayTuples() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    if (args.length === 0)\n        return [];\n    var maxArrayLen = args.reduce(function (min, arr) { return Math.min(arr.length, min); }, 9007199254740991); // aka 2^53 − 1 aka Number.MAX_SAFE_INTEGER\n    var i, result = [];\n    for (i = 0; i < maxArrayLen; i++) {\n        // This is a hot function\n        // Unroll when there are 1-4 arguments\n        switch (args.length) {\n            case 1:\n                result.push([args[0][i]]);\n                break;\n            case 2:\n                result.push([args[0][i], args[1][i]]);\n                break;\n            case 3:\n                result.push([args[0][i], args[1][i], args[2][i]]);\n                break;\n            case 4:\n                result.push([args[0][i], args[1][i], args[2][i], args[3][i]]);\n                break;\n            default:\n                result.push(args.map(function (array) { return array[i]; }));\n                break;\n        }\n    }\n    return result;\n}\nexports.arrayTuples = arrayTuples;\n/**\n * Reduce function which builds an object from an array of [key, value] pairs.\n *\n * Each iteration sets the key/val pair on the memo object, then returns the memo for the next iteration.\n *\n * Each keyValueTuple should be an array with values [ key: string, value: any ]\n *\n * @example\n * ```\n *\n * var pairs = [ [\"fookey\", \"fooval\"], [\"barkey\", \"barval\"] ]\n *\n * var pairsToObj = pairs.reduce((memo, pair) => applyPairs(memo, pair), {})\n * // pairsToObj == { fookey: \"fooval\", barkey: \"barval\" }\n *\n * // Or, more simply:\n * var pairsToObj = pairs.reduce(applyPairs, {})\n * // pairsToObj == { fookey: \"fooval\", barkey: \"barval\" }\n * ```\n */\nfunction applyPairs(memo, keyValTuple) {\n    var key, value;\n    if (predicates_1.isArray(keyValTuple))\n        key = keyValTuple[0], value = keyValTuple[1];\n    if (!predicates_1.isString(key))\n        throw new Error(\"invalid parameters to applyPairs\");\n    memo[key] = value;\n    return memo;\n}\nexports.applyPairs = applyPairs;\n/** Get the last element of an array */\nfunction tail(arr) {\n    return arr.length && arr[arr.length - 1] || undefined;\n}\nexports.tail = tail;\n/**\n * shallow copy from src to dest\n *\n * note: This is a shallow copy, while angular.copy is a deep copy.\n * ui-router uses `copy` only to make copies of state parameters.\n */\nfunction _copy(src, dest) {\n    if (dest)\n        Object.keys(dest).forEach(function (key) { return delete dest[key]; });\n    if (!dest)\n        dest = {};\n    return exports.extend(dest, src);\n}\n/** Naive forEach implementation works with Objects or Arrays */\nfunction _forEach(obj, cb, _this) {\n    if (predicates_1.isArray(obj))\n        return obj.forEach(cb, _this);\n    Object.keys(obj).forEach(function (key) { return cb(obj[key], key); });\n}\nfunction _extend(toObj) {\n    for (var i = 1; i < arguments.length; i++) {\n        var obj = arguments[i];\n        if (!obj)\n            continue;\n        var keys = Object.keys(obj);\n        for (var j = 0; j < keys.length; j++) {\n            toObj[keys[j]] = obj[keys[j]];\n        }\n    }\n    return toObj;\n}\nexports._extend = _extend;\nfunction _equals(o1, o2) {\n    if (o1 === o2)\n        return true;\n    if (o1 === null || o2 === null)\n        return false;\n    if (o1 !== o1 && o2 !== o2)\n        return true; // NaN === NaN\n    var t1 = typeof o1, t2 = typeof o2;\n    if (t1 !== t2 || t1 !== 'object')\n        return false;\n    var tup = [o1, o2];\n    if (hof_1.all(predicates_1.isArray)(tup))\n        return _arraysEq(o1, o2);\n    if (hof_1.all(predicates_1.isDate)(tup))\n        return o1.getTime() === o2.getTime();\n    if (hof_1.all(predicates_1.isRegExp)(tup))\n        return o1.toString() === o2.toString();\n    if (hof_1.all(predicates_1.isFunction)(tup))\n        return true; // meh\n    var predicates = [predicates_1.isFunction, predicates_1.isArray, predicates_1.isDate, predicates_1.isRegExp];\n    if (predicates.map(hof_1.any).reduce(function (b, fn) { return b || !!fn(tup); }, false))\n        return false;\n    var key, keys = {};\n    for (key in o1) {\n        if (!_equals(o1[key], o2[key]))\n            return false;\n        keys[key] = true;\n    }\n    for (key in o2) {\n        if (!keys[key])\n            return false;\n    }\n    return true;\n}\nfunction _arraysEq(a1, a2) {\n    if (a1.length !== a2.length)\n        return false;\n    return arrayTuples(a1, a2).reduce(function (b, t) { return b && _equals(t[0], t[1]); }, true);\n}\n/**\n * Create a sort function\n *\n * Creates a sort function which sorts by a numeric property.\n *\n * The `propFn` should return the property as a number which can be sorted.\n *\n * #### Example:\n * This example returns the `priority` prop.\n * ```js\n * var sortfn = sortBy(obj => obj.priority)\n * // equivalent to:\n * var longhandSortFn = (a, b) => a.priority - b.priority;\n * ```\n *\n * #### Example:\n * This example uses [[prop]]\n * ```js\n * var sortfn = sortBy(prop('priority'))\n * ```\n *\n * The `checkFn` can be used to exclude objects from sorting.\n *\n * #### Example:\n * This example only sorts objects with type === 'FOO'\n * ```js\n * var sortfn = sortBy(prop('priority'), propEq('type', 'FOO'))\n * ```\n *\n * @param propFn a function that returns the property (as a number)\n * @param checkFn a predicate\n *\n * @return a sort function like: `(a, b) => (checkFn(a) && checkFn(b)) ? propFn(a) - propFn(b) : 0`\n */\nexports.sortBy = function (propFn, checkFn) {\n    if (checkFn === void 0) { checkFn = hof_1.val(true); }\n    return function (a, b) {\n        return (checkFn(a) && checkFn(b)) ? propFn(a) - propFn(b) : 0;\n    };\n};\n/**\n * Composes a list of sort functions\n *\n * Creates a sort function composed of multiple sort functions.\n * Each sort function is invoked in series.\n * The first sort function to return non-zero \"wins\".\n *\n * @param sortFns list of sort functions\n */\nexports.composeSort = function () {\n    var sortFns = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        sortFns[_i] = arguments[_i];\n    }\n    return function composedSort(a, b) {\n        return sortFns.reduce(function (prev, fn) { return prev || fn(a, b); }, 0);\n    };\n};\n// issue #2676\nexports.silenceUncaughtInPromise = function (promise) {\n    return promise.catch(function (e) { return 0; }) && promise;\n};\nexports.silentRejection = function (error) {\n    return exports.silenceUncaughtInPromise(coreservices_1.services.$q.reject(error));\n};\n//# sourceMappingURL=common.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/common/common.js\n// module id = szY8\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @coreapi\n * @module params\n */\n/** */\nvar common_1 = require(\"../common/common\");\nvar predicates_1 = require(\"../common/predicates\");\nvar hof_1 = require(\"../common/hof\");\nvar coreservices_1 = require(\"../common/coreservices\");\nvar paramType_1 = require(\"./paramType\");\n/**\n * A registry for parameter types.\n *\n * This registry manages the built-in (and custom) parameter types.\n *\n * The built-in parameter types are:\n *\n * - [[string]]\n * - [[path]]\n * - [[query]]\n * - [[hash]]\n * - [[int]]\n * - [[bool]]\n * - [[date]]\n * - [[json]]\n * - [[any]]\n */\nvar ParamTypes = (function () {\n    /** @internalapi */\n    function ParamTypes() {\n        /** @hidden */\n        this.enqueue = true;\n        /** @hidden */\n        this.typeQueue = [];\n        /** @internalapi */\n        this.defaultTypes = common_1.pick(ParamTypes.prototype, [\"hash\", \"string\", \"query\", \"path\", \"int\", \"bool\", \"date\", \"json\", \"any\"]);\n        // Register default types. Store them in the prototype of this.types.\n        var makeType = function (definition, name) {\n            return new paramType_1.ParamType(common_1.extend({ name: name }, definition));\n        };\n        this.types = common_1.inherit(common_1.map(this.defaultTypes, makeType), {});\n    }\n    /** @internalapi */\n    ParamTypes.prototype.dispose = function () {\n        this.types = {};\n    };\n    /**\n     * Registers a parameter type\n     *\n     * End users should call [[UrlMatcherFactory.type]], which delegates to this method.\n     */\n    ParamTypes.prototype.type = function (name, definition, definitionFn) {\n        if (!predicates_1.isDefined(definition))\n            return this.types[name];\n        if (this.types.hasOwnProperty(name))\n            throw new Error(\"A type named '\" + name + \"' has already been defined.\");\n        this.types[name] = new paramType_1.ParamType(common_1.extend({ name: name }, definition));\n        if (definitionFn) {\n            this.typeQueue.push({ name: name, def: definitionFn });\n            if (!this.enqueue)\n                this._flushTypeQueue();\n        }\n        return this;\n    };\n    /** @internalapi */\n    ParamTypes.prototype._flushTypeQueue = function () {\n        while (this.typeQueue.length) {\n            var type = this.typeQueue.shift();\n            if (type.pattern)\n                throw new Error(\"You cannot override a type's .pattern at runtime.\");\n            common_1.extend(this.types[type.name], coreservices_1.services.$injector.invoke(type.def));\n        }\n    };\n    return ParamTypes;\n}());\nexports.ParamTypes = ParamTypes;\n/** @hidden */\nfunction initDefaultTypes() {\n    var makeDefaultType = function (def) {\n        var valToString = function (val) {\n            return val != null ? val.toString() : val;\n        };\n        var defaultTypeBase = {\n            encode: valToString,\n            decode: valToString,\n            is: hof_1.is(String),\n            pattern: /.*/,\n            equals: function (a, b) { return a == b; },\n        };\n        return common_1.extend({}, defaultTypeBase, def);\n    };\n    // Default Parameter Type Definitions\n    common_1.extend(ParamTypes.prototype, {\n        string: makeDefaultType({}),\n        path: makeDefaultType({\n            pattern: /[^/]*/,\n        }),\n        query: makeDefaultType({}),\n        hash: makeDefaultType({\n            inherit: false,\n        }),\n        int: makeDefaultType({\n            decode: function (val) { return parseInt(val, 10); },\n            is: function (val) {\n                return !predicates_1.isNullOrUndefined(val) && this.decode(val.toString()) === val;\n            },\n            pattern: /-?\\d+/,\n        }),\n        bool: makeDefaultType({\n            encode: function (val) { return val && 1 || 0; },\n            decode: function (val) { return parseInt(val, 10) !== 0; },\n            is: hof_1.is(Boolean),\n            pattern: /0|1/\n        }),\n        date: makeDefaultType({\n            encode: function (val) {\n                return !this.is(val) ? undefined : [\n                    val.getFullYear(),\n                    ('0' + (val.getMonth() + 1)).slice(-2),\n                    ('0' + val.getDate()).slice(-2)\n                ].join(\"-\");\n            },\n            decode: function (val) {\n                if (this.is(val))\n                    return val;\n                var match = this.capture.exec(val);\n                return match ? new Date(match[1], match[2] - 1, match[3]) : undefined;\n            },\n            is: function (val) { return val instanceof Date && !isNaN(val.valueOf()); },\n            equals: function (l, r) {\n                return ['getFullYear', 'getMonth', 'getDate']\n                    .reduce(function (acc, fn) { return acc && l[fn]() === r[fn](); }, true);\n            },\n            pattern: /[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,\n            capture: /([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/\n        }),\n        json: makeDefaultType({\n            encode: common_1.toJson,\n            decode: common_1.fromJson,\n            is: hof_1.is(Object),\n            equals: common_1.equals,\n            pattern: /[^/]*/\n        }),\n        // does not encode/decode\n        any: makeDefaultType({\n            encode: common_1.identity,\n            decode: common_1.identity,\n            is: function () { return true; },\n            equals: common_1.equals,\n        }),\n    });\n}\ninitDefaultTypes();\n//# sourceMappingURL=paramTypes.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/params/paramTypes.js\n// module id = tFt3\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @ng1api\n * @module directives\n */ /** for typedoc */\nvar angular_1 = require(\"../angular\");\nvar angular_2 = require(\"angular\");\nvar core_1 = require(\"@uirouter/core\");\nvar views_1 = require(\"../statebuilders/views\");\nvar services_1 = require(\"../services\");\nexports.uiView = ['$view', '$animate', '$uiViewScroll', '$interpolate', '$q',\n    function $ViewDirective($view, $animate, $uiViewScroll, $interpolate, $q) {\n        function getRenderer(attrs, scope) {\n            return {\n                enter: function (element, target, cb) {\n                    if (angular_1.ng.version.minor > 2) {\n                        $animate.enter(element, null, target).then(cb);\n                    }\n                    else {\n                        $animate.enter(element, null, target, cb);\n                    }\n                },\n                leave: function (element, cb) {\n                    if (angular_1.ng.version.minor > 2) {\n                        $animate.leave(element).then(cb);\n                    }\n                    else {\n                        $animate.leave(element, cb);\n                    }\n                }\n            };\n        }\n        function configsEqual(config1, config2) {\n            return config1 === config2;\n        }\n        var rootData = {\n            $cfg: { viewDecl: { $context: $view._pluginapi._rootViewContext() } },\n            $uiView: {}\n        };\n        var directive = {\n            count: 0,\n            restrict: 'ECA',\n            terminal: true,\n            priority: 400,\n            transclude: 'element',\n            compile: function (tElement, tAttrs, $transclude) {\n                return function (scope, $element, attrs) {\n                    var previousEl, currentEl, currentScope, unregister, onloadExp = attrs['onload'] || '', autoScrollExp = attrs['autoscroll'], renderer = getRenderer(attrs, scope), viewConfig = undefined, inherited = $element.inheritedData('$uiView') || rootData, name = $interpolate(attrs['uiView'] || attrs['name'] || '')(scope) || '$default';\n                    var activeUIView = {\n                        $type: 'ng1',\n                        id: directive.count++,\n                        name: name,\n                        fqn: inherited.$uiView.fqn ? inherited.$uiView.fqn + \".\" + name : name,\n                        config: null,\n                        configUpdated: configUpdatedCallback,\n                        get creationContext() {\n                            var fromParentTagConfig = core_1.parse('$cfg.viewDecl.$context')(inherited);\n                            // Allow <ui-view name=\"foo\"><ui-view name=\"bar\"></ui-view></ui-view>\n                            // See https://github.com/angular-ui/ui-router/issues/3355\n                            var fromParentTag = core_1.parse('$uiView.creationContext')(inherited);\n                            return fromParentTagConfig || fromParentTag;\n                        }\n                    };\n                    core_1.trace.traceUIViewEvent(\"Linking\", activeUIView);\n                    function configUpdatedCallback(config) {\n                        if (config && !(config instanceof views_1.Ng1ViewConfig))\n                            return;\n                        if (configsEqual(viewConfig, config))\n                            return;\n                        core_1.trace.traceUIViewConfigUpdated(activeUIView, config && config.viewDecl && config.viewDecl.$context);\n                        viewConfig = config;\n                        updateView(config);\n                    }\n                    $element.data('$uiView', { $uiView: activeUIView });\n                    updateView();\n                    unregister = $view.registerUIView(activeUIView);\n                    scope.$on(\"$destroy\", function () {\n                        core_1.trace.traceUIViewEvent(\"Destroying/Unregistering\", activeUIView);\n                        unregister();\n                    });\n                    function cleanupLastView() {\n                        if (previousEl) {\n                            core_1.trace.traceUIViewEvent(\"Removing (previous) el\", previousEl.data('$uiView'));\n                            previousEl.remove();\n                            previousEl = null;\n                        }\n                        if (currentScope) {\n                            core_1.trace.traceUIViewEvent(\"Destroying scope\", activeUIView);\n                            currentScope.$destroy();\n                            currentScope = null;\n                        }\n                        if (currentEl) {\n                            var _viewData_1 = currentEl.data('$uiViewAnim');\n                            core_1.trace.traceUIViewEvent(\"Animate out\", _viewData_1);\n                            renderer.leave(currentEl, function () {\n                                _viewData_1.$$animLeave.resolve();\n                                previousEl = null;\n                            });\n                            previousEl = currentEl;\n                            currentEl = null;\n                        }\n                    }\n                    function updateView(config) {\n                        var newScope = scope.$new();\n                        var animEnter = $q.defer(), animLeave = $q.defer();\n                        var $uiViewData = {\n                            $cfg: config,\n                            $uiView: activeUIView,\n                        };\n                        var $uiViewAnim = {\n                            $animEnter: animEnter.promise,\n                            $animLeave: animLeave.promise,\n                            $$animLeave: animLeave\n                        };\n                        /**\n                         * @ngdoc event\n                         * @name ui.router.state.directive:ui-view#$viewContentLoading\n                         * @eventOf ui.router.state.directive:ui-view\n                         * @eventType emits on ui-view directive scope\n                         * @description\n                         *\n                         * Fired once the view **begins loading**, *before* the DOM is rendered.\n                         *\n                         * @param {Object} event Event object.\n                         * @param {string} viewName Name of the view.\n                         */\n                        newScope.$emit('$viewContentLoading', name);\n                        var cloned = $transclude(newScope, function (clone) {\n                            clone.data('$uiViewAnim', $uiViewAnim);\n                            clone.data('$uiView', $uiViewData);\n                            renderer.enter(clone, $element, function onUIViewEnter() {\n                                animEnter.resolve();\n                                if (currentScope)\n                                    currentScope.$emit('$viewContentAnimationEnded');\n                                if (core_1.isDefined(autoScrollExp) && !autoScrollExp || scope.$eval(autoScrollExp)) {\n                                    $uiViewScroll(clone);\n                                }\n                            });\n                            cleanupLastView();\n                        });\n                        currentEl = cloned;\n                        currentScope = newScope;\n                        /**\n                         * @ngdoc event\n                         * @name ui.router.state.directive:ui-view#$viewContentLoaded\n                         * @eventOf ui.router.state.directive:ui-view\n                         * @eventType emits on ui-view directive scope\n                         * @description           *\n                         * Fired once the view is **loaded**, *after* the DOM is rendered.\n                         *\n                         * @param {Object} event Event object.\n                         */\n                        currentScope.$emit('$viewContentLoaded', config || viewConfig);\n                        currentScope.$eval(onloadExp);\n                    }\n                };\n            }\n        };\n        return directive;\n    }];\n$ViewDirectiveFill.$inject = ['$compile', '$controller', '$transitions', '$view', '$q', '$timeout'];\n/** @hidden */\nfunction $ViewDirectiveFill($compile, $controller, $transitions, $view, $q, $timeout) {\n    var getControllerAs = core_1.parse('viewDecl.controllerAs');\n    var getResolveAs = core_1.parse('viewDecl.resolveAs');\n    return {\n        restrict: 'ECA',\n        priority: -400,\n        compile: function (tElement) {\n            var initial = tElement.html();\n            tElement.empty();\n            return function (scope, $element) {\n                var data = $element.data('$uiView');\n                if (!data) {\n                    $element.html(initial);\n                    $compile($element.contents())(scope);\n                    return;\n                }\n                var cfg = data.$cfg || { viewDecl: {}, getTemplate: angular_2.noop };\n                var resolveCtx = cfg.path && new core_1.ResolveContext(cfg.path);\n                $element.html(cfg.getTemplate($element, resolveCtx) || initial);\n                core_1.trace.traceUIViewFill(data.$uiView, $element.html());\n                var link = $compile($element.contents());\n                var controller = cfg.controller;\n                var controllerAs = getControllerAs(cfg);\n                var resolveAs = getResolveAs(cfg);\n                var locals = resolveCtx && services_1.getLocals(resolveCtx);\n                scope[resolveAs] = locals;\n                if (controller) {\n                    var controllerInstance = $controller(controller, core_1.extend({}, locals, { $scope: scope, $element: $element }));\n                    if (controllerAs) {\n                        scope[controllerAs] = controllerInstance;\n                        scope[controllerAs][resolveAs] = locals;\n                    }\n                    // TODO: Use $view service as a central point for registering component-level hooks\n                    // Then, when a component is created, tell the $view service, so it can invoke hooks\n                    // $view.componentLoaded(controllerInstance, { $scope: scope, $element: $element });\n                    // scope.$on('$destroy', () => $view.componentUnloaded(controllerInstance, { $scope: scope, $element: $element }));\n                    $element.data('$ngControllerController', controllerInstance);\n                    $element.children().data('$ngControllerController', controllerInstance);\n                    registerControllerCallbacks($q, $transitions, controllerInstance, scope, cfg);\n                }\n                // Wait for the component to appear in the DOM\n                if (core_1.isString(cfg.viewDecl.component)) {\n                    var cmp_1 = cfg.viewDecl.component;\n                    var kebobName = core_1.kebobString(cmp_1);\n                    var tagRegexp_1 = new RegExp(\"^(x-|data-)?\" + kebobName + \"$\", \"i\");\n                    var getComponentController = function () {\n                        var directiveEl = [].slice.call($element[0].children)\n                            .filter(function (el) { return el && el.tagName && tagRegexp_1.exec(el.tagName); });\n                        return directiveEl && angular_1.ng.element(directiveEl).data(\"$\" + cmp_1 + \"Controller\");\n                    };\n                    var deregisterWatch_1 = scope.$watch(getComponentController, function (ctrlInstance) {\n                        if (!ctrlInstance)\n                            return;\n                        registerControllerCallbacks($q, $transitions, ctrlInstance, scope, cfg);\n                        deregisterWatch_1();\n                    });\n                }\n                link(scope);\n            };\n        }\n    };\n}\n/** @hidden */\nvar hasComponentImpl = typeof angular_1.ng.module('ui.router')['component'] === 'function';\n/** @hidden incrementing id */\nvar _uiCanExitId = 0;\n/** @hidden TODO: move these callbacks to $view and/or `/hooks/components.ts` or something */\nfunction registerControllerCallbacks($q, $transitions, controllerInstance, $scope, cfg) {\n    // Call $onInit() ASAP\n    if (core_1.isFunction(controllerInstance.$onInit) && !(cfg.viewDecl.component && hasComponentImpl)) {\n        controllerInstance.$onInit();\n    }\n    var viewState = core_1.tail(cfg.path).state.self;\n    var hookOptions = { bind: controllerInstance };\n    // Add component-level hook for onParamsChange\n    if (core_1.isFunction(controllerInstance.uiOnParamsChanged)) {\n        var resolveContext = new core_1.ResolveContext(cfg.path);\n        var viewCreationTrans_1 = resolveContext.getResolvable('$transition$').data;\n        // Fire callback on any successful transition\n        var paramsUpdated = function ($transition$) {\n            // Exit early if the $transition$ is the same as the view was created within.\n            // Exit early if the $transition$ will exit the state the view is for.\n            if ($transition$ === viewCreationTrans_1 || $transition$.exiting().indexOf(viewState) !== -1)\n                return;\n            var toParams = $transition$.params(\"to\");\n            var fromParams = $transition$.params(\"from\");\n            var toSchema = $transition$.treeChanges().to.map(function (node) { return node.paramSchema; }).reduce(core_1.unnestR, []);\n            var fromSchema = $transition$.treeChanges().from.map(function (node) { return node.paramSchema; }).reduce(core_1.unnestR, []);\n            // Find the to params that have different values than the from params\n            var changedToParams = toSchema.filter(function (param) {\n                var idx = fromSchema.indexOf(param);\n                return idx === -1 || !fromSchema[idx].type.equals(toParams[param.id], fromParams[param.id]);\n            });\n            // Only trigger callback if a to param has changed or is new\n            if (changedToParams.length) {\n                var changedKeys_1 = changedToParams.map(function (x) { return x.id; });\n                // Filter the params to only changed/new to params.  `$transition$.params()` may be used to get all params.\n                var newValues = core_1.filter(toParams, function (val, key) { return changedKeys_1.indexOf(key) !== -1; });\n                controllerInstance.uiOnParamsChanged(newValues, $transition$);\n            }\n        };\n        $scope.$on('$destroy', $transitions.onSuccess({}, paramsUpdated, hookOptions));\n    }\n    // Add component-level hook for uiCanExit\n    if (core_1.isFunction(controllerInstance.uiCanExit)) {\n        var id_1 = _uiCanExitId++;\n        var cacheProp_1 = '_uiCanExitIds';\n        // Returns true if a redirect transition already answered truthy\n        var prevTruthyAnswer_1 = function (trans) {\n            return !!trans && (trans[cacheProp_1] && trans[cacheProp_1][id_1] === true || prevTruthyAnswer_1(trans.redirectedFrom()));\n        };\n        // If a user answered yes, but the transition was later redirected, don't also ask for the new redirect transition\n        var wrappedHook = function (trans) {\n            var promise, ids = trans[cacheProp_1] = trans[cacheProp_1] || {};\n            if (!prevTruthyAnswer_1(trans)) {\n                promise = $q.when(controllerInstance.uiCanExit(trans));\n                promise.then(function (val) { return ids[id_1] = (val !== false); });\n            }\n            return promise;\n        };\n        var criteria = { exiting: viewState.name };\n        $scope.$on('$destroy', $transitions.onBefore(criteria, wrappedHook, hookOptions));\n    }\n}\nangular_1.ng.module('ui.router.state').directive('uiView', exports.uiView);\nangular_1.ng.module('ui.router.state').directive('uiView', $ViewDirectiveFill);\n//# sourceMappingURL=viewDirective.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/lib/directives/viewDirective.js\n// module id = v0I2\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/** @module hooks */ /** for typedoc */\nvar common_1 = require(\"../common/common\");\nvar coreservices_1 = require(\"../common/coreservices\");\n/**\n * A [[TransitionHookFn]] which waits for the views to load\n *\n * Registered using `transitionService.onStart({}, loadEnteringViews);`\n *\n * Allows the views to do async work in [[ViewConfig.load]] before the transition continues.\n * In angular 1, this includes loading the templates.\n */\nvar loadEnteringViews = function (transition) {\n    var $q = coreservices_1.services.$q;\n    var enteringViews = transition.views(\"entering\");\n    if (!enteringViews.length)\n        return;\n    return $q.all(enteringViews.map(function (view) { return $q.when(view.load()); })).then(common_1.noop);\n};\nexports.registerLoadEnteringViews = function (transitionService) {\n    return transitionService.onFinish({}, loadEnteringViews);\n};\n/**\n * A [[TransitionHookFn]] which activates the new views when a transition is successful.\n *\n * Registered using `transitionService.onSuccess({}, activateViews);`\n *\n * After a transition is complete, this hook deactivates the old views from the previous state,\n * and activates the new views from the destination state.\n *\n * See [[ViewService]]\n */\nvar activateViews = function (transition) {\n    var enteringViews = transition.views(\"entering\");\n    var exitingViews = transition.views(\"exiting\");\n    if (!enteringViews.length && !exitingViews.length)\n        return;\n    var $view = transition.router.viewService;\n    exitingViews.forEach(function (vc) { return $view.deactivateViewConfig(vc); });\n    enteringViews.forEach(function (vc) { return $view.activateViewConfig(vc); });\n    $view.sync();\n};\nexports.registerActivateViews = function (transitionService) {\n    return transitionService.onSuccess({}, activateViews);\n};\n//# sourceMappingURL=views.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/hooks/views.js\n// module id = wdUH\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar coreservices_1 = require(\"../common/coreservices\");\n/**\n * A [[TransitionHookFn]] that performs lazy loading\n *\n * When entering a state \"abc\" which has a `lazyLoad` function defined:\n * - Invoke the `lazyLoad` function (unless it is already in process)\n *   - Flag the hook function as \"in process\"\n *   - The function should return a promise (that resolves when lazy loading is complete)\n * - Wait for the promise to settle\n *   - If the promise resolves to a [[LazyLoadResult]], then register those states\n *   - Flag the hook function as \"not in process\"\n * - If the hook was successful\n *   - Remove the `lazyLoad` function from the state declaration\n * - If all the hooks were successful\n *   - Retry the transition (by returning a TargetState)\n *\n * ```\n * .state('abc', {\n *   component: 'fooComponent',\n *   lazyLoad: () => System.import('./fooComponent')\n *   });\n * ```\n *\n * See [[StateDeclaration.lazyLoad]]\n */\nvar lazyLoadHook = function (transition) {\n    var router = transition.router;\n    function retryTransition() {\n        if (transition.originalTransition().options().source !== 'url') {\n            // The original transition was not triggered via url sync\n            // The lazy state should be loaded now, so re-try the original transition\n            var orig = transition.targetState();\n            return router.stateService.target(orig.identifier(), orig.params(), orig.options());\n        }\n        // The original transition was triggered via url sync\n        // Run the URL rules and find the best match\n        var $url = router.urlService;\n        var result = $url.match($url.parts());\n        var rule = result && result.rule;\n        // If the best match is a state, redirect the transition (instead\n        // of calling sync() which supersedes the current transition)\n        if (rule && rule.type === \"STATE\") {\n            var state = rule.state;\n            var params = result.match;\n            return router.stateService.target(state, params, transition.options());\n        }\n        // No matching state found, so let .sync() choose the best non-state match/otherwise\n        router.urlService.sync();\n    }\n    var promises = transition.entering()\n        .filter(function (state) { return !!state.$$state().lazyLoad; })\n        .map(function (state) { return lazyLoadState(transition, state); });\n    return coreservices_1.services.$q.all(promises).then(retryTransition);\n};\nexports.registerLazyLoadHook = function (transitionService) {\n    return transitionService.onBefore({ entering: function (state) { return !!state.lazyLoad; } }, lazyLoadHook);\n};\n/**\n * Invokes a state's lazy load function\n *\n * @param transition a Transition context\n * @param state the state to lazy load\n * @returns A promise for the lazy load result\n */\nfunction lazyLoadState(transition, state) {\n    var lazyLoadFn = state.$$state().lazyLoad;\n    // Store/get the lazy load promise on/from the hookfn so it doesn't get re-invoked\n    var promise = lazyLoadFn['_promise'];\n    if (!promise) {\n        var success = function (result) {\n            delete state.lazyLoad;\n            delete state.$$state().lazyLoad;\n            delete lazyLoadFn['_promise'];\n            return result;\n        };\n        var error = function (err) {\n            delete lazyLoadFn['_promise'];\n            return coreservices_1.services.$q.reject(err);\n        };\n        promise = lazyLoadFn['_promise'] =\n            coreservices_1.services.$q.when(lazyLoadFn(transition, state))\n                .then(updateStateRegistry)\n                .then(success, error);\n    }\n    /** Register any lazy loaded state definitions */\n    function updateStateRegistry(result) {\n        if (result && Array.isArray(result.states)) {\n            result.states.forEach(function (state) { return transition.router.stateRegistry.register(state); });\n        }\n        return result;\n    }\n    return promise;\n}\nexports.lazyLoadState = lazyLoadState;\n//# sourceMappingURL=lazyLoad.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/hooks/lazyLoad.js\n// module id = z53P\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar common_1 = require(\"../common/common\");\nvar hof_1 = require(\"../common/hof\");\nvar glob_1 = require(\"../common/glob\");\nvar predicates_1 = require(\"../common/predicates\");\n/**\n * Internal representation of a UI-Router state.\n *\n * Instances of this class are created when a [[StateDeclaration]] is registered with the [[StateRegistry]].\n *\n * A registered [[StateDeclaration]] is augmented with a getter ([[StateDeclaration.$$state]]) which returns the corresponding [[StateObject]] object.\n *\n * This class prototypally inherits from the corresponding [[StateDeclaration]].\n * Each of its own properties (i.e., `hasOwnProperty`) are built using builders from the [[StateBuilder]].\n */\nvar StateObject = (function () {\n    /** @deprecated use State.create() */\n    function StateObject(config) {\n        return StateObject.create(config || {});\n    }\n    /**\n     * Create a state object to put the private/internal implementation details onto.\n     * The object's prototype chain looks like:\n     * (Internal State Object) -> (Copy of State.prototype) -> (State Declaration object) -> (State Declaration's prototype...)\n     *\n     * @param stateDecl the user-supplied State Declaration\n     * @returns {StateObject} an internal State object\n     */\n    StateObject.create = function (stateDecl) {\n        stateDecl = StateObject.isStateClass(stateDecl) ? new stateDecl() : stateDecl;\n        var state = common_1.inherit(common_1.inherit(stateDecl, StateObject.prototype));\n        stateDecl.$$state = function () { return state; };\n        state.self = stateDecl;\n        state.__stateObjectCache = {\n            nameGlob: glob_1.Glob.fromString(state.name) // might return null\n        };\n        return state;\n    };\n    /**\n     * Returns true if the provided parameter is the same state.\n     *\n     * Compares the identity of the state against the passed value, which is either an object\n     * reference to the actual `State` instance, the original definition object passed to\n     * `$stateProvider.state()`, or the fully-qualified name.\n     *\n     * @param ref Can be one of (a) a `State` instance, (b) an object that was passed\n     *        into `$stateProvider.state()`, (c) the fully-qualified name of a state as a string.\n     * @returns Returns `true` if `ref` matches the current `State` instance.\n     */\n    StateObject.prototype.is = function (ref) {\n        return this === ref || this.self === ref || this.fqn() === ref;\n    };\n    /**\n     * @deprecated this does not properly handle dot notation\n     * @returns Returns a dot-separated name of the state.\n     */\n    StateObject.prototype.fqn = function () {\n        if (!this.parent || !(this.parent instanceof this.constructor))\n            return this.name;\n        var name = this.parent.fqn();\n        return name ? name + \".\" + this.name : this.name;\n    };\n    /**\n     * Returns the root node of this state's tree.\n     *\n     * @returns The root of this state's tree.\n     */\n    StateObject.prototype.root = function () {\n        return this.parent && this.parent.root() || this;\n    };\n    /**\n     * Gets the state's `Param` objects\n     *\n     * Gets the list of [[Param]] objects owned by the state.\n     * If `opts.inherit` is true, it also includes the ancestor states' [[Param]] objects.\n     * If `opts.matchingKeys` exists, returns only `Param`s whose `id` is a key on the `matchingKeys` object\n     *\n     * @param opts options\n     */\n    StateObject.prototype.parameters = function (opts) {\n        opts = common_1.defaults(opts, { inherit: true, matchingKeys: null });\n        var inherited = opts.inherit && this.parent && this.parent.parameters() || [];\n        return inherited.concat(common_1.values(this.params))\n            .filter(function (param) { return !opts.matchingKeys || opts.matchingKeys.hasOwnProperty(param.id); });\n    };\n    /**\n     * Returns a single [[Param]] that is owned by the state\n     *\n     * If `opts.inherit` is true, it also searches the ancestor states` [[Param]]s.\n     * @param id the name of the [[Param]] to return\n     * @param opts options\n     */\n    StateObject.prototype.parameter = function (id, opts) {\n        if (opts === void 0) { opts = {}; }\n        return (this.url && this.url.parameter(id, opts) ||\n            common_1.find(common_1.values(this.params), hof_1.propEq('id', id)) ||\n            opts.inherit && this.parent && this.parent.parameter(id));\n    };\n    StateObject.prototype.toString = function () {\n        return this.fqn();\n    };\n    return StateObject;\n}());\n/** Predicate which returns true if the object is an class with @State() decorator */\nStateObject.isStateClass = function (stateDecl) {\n    return predicates_1.isFunction(stateDecl) && stateDecl['__uiRouterState'] === true;\n};\n/** Predicate which returns true if the object is an internal [[StateObject]] object */\nStateObject.isState = function (obj) {\n    return predicates_1.isObject(obj['__stateObjectCache']);\n};\nexports.StateObject = StateObject;\n//# sourceMappingURL=stateObject.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-ui-router/node_modules/@uirouter/core/lib/state/stateObject.js\n// module id = zYnw\n// module chunks = 0"],"sourceRoot":""}